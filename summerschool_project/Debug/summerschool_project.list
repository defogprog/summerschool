
summerschool_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008778  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac4  08008ac4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008ac4  08008ac4  00018ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008acc  08008acc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008acc  08008acc  00018acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb8  20000074  08008b48  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d2c  08008b48  00024d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0c2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003625  00000000  00000000  0003d166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  00040790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  00041f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001980e  00000000  00000000  00043580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aad2  00000000  00000000  0005cd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6c49  00000000  00000000  00077860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e4a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a78  00000000  00000000  0011e4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008900 	.word	0x08008900

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008900 	.word	0x08008900

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_ldivmod>:
 8000290:	b97b      	cbnz	r3, 80002b2 <__aeabi_ldivmod+0x22>
 8000292:	b972      	cbnz	r2, 80002b2 <__aeabi_ldivmod+0x22>
 8000294:	2900      	cmp	r1, #0
 8000296:	bfbe      	ittt	lt
 8000298:	2000      	movlt	r0, #0
 800029a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800029e:	e006      	blt.n	80002ae <__aeabi_ldivmod+0x1e>
 80002a0:	bf08      	it	eq
 80002a2:	2800      	cmpeq	r0, #0
 80002a4:	bf1c      	itt	ne
 80002a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002aa:	f04f 30ff 	movne.w	r0, #4294967295
 80002ae:	f000 b9bf 	b.w	8000630 <__aeabi_idiv0>
 80002b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ba:	2900      	cmp	r1, #0
 80002bc:	db09      	blt.n	80002d2 <__aeabi_ldivmod+0x42>
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db1a      	blt.n	80002f8 <__aeabi_ldivmod+0x68>
 80002c2:	f000 f84d 	bl	8000360 <__udivmoddi4>
 80002c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ce:	b004      	add	sp, #16
 80002d0:	4770      	bx	lr
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db1b      	blt.n	8000314 <__aeabi_ldivmod+0x84>
 80002dc:	f000 f840 	bl	8000360 <__udivmoddi4>
 80002e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e8:	b004      	add	sp, #16
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	4252      	negs	r2, r2
 80002f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f6:	4770      	bx	lr
 80002f8:	4252      	negs	r2, r2
 80002fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fe:	f000 f82f 	bl	8000360 <__udivmoddi4>
 8000302:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030a:	b004      	add	sp, #16
 800030c:	4240      	negs	r0, r0
 800030e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000312:	4770      	bx	lr
 8000314:	4252      	negs	r2, r2
 8000316:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031a:	f000 f821 	bl	8000360 <__udivmoddi4>
 800031e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000326:	b004      	add	sp, #16
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <baro_init>:
static int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
static int32_t t_fine;
static _Bool inited = false;
static uint8_t data[25];

baro_stat_t baro_init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Check barometer on I2C bus
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_ID, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	2301      	movs	r3, #1
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	4b6f      	ldr	r3, [pc, #444]	; (8000804 <baro_init+0x1d0>)
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	22d0      	movs	r2, #208	; 0xd0
 800064c:	21ec      	movs	r1, #236	; 0xec
 800064e:	486e      	ldr	r0, [pc, #440]	; (8000808 <baro_init+0x1d4>)
 8000650:	f002 f966 	bl	8002920 <HAL_I2C_Mem_Read>
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <baro_init+0x38>
		if (status == HAL_TIMEOUT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d101      	bne.n	8000668 <baro_init+0x34>
			return BARO_ERR_TIMEOUT;
 8000664:	2302      	movs	r3, #2
 8000666:	e0c9      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000668:	2301      	movs	r3, #1
 800066a:	e0c7      	b.n	80007fc <baro_init+0x1c8>
	}

	if (data[0] != BARO_ID_VALUE) {
 800066c:	4b65      	ldr	r3, [pc, #404]	; (8000804 <baro_init+0x1d0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b58      	cmp	r3, #88	; 0x58
 8000672:	d001      	beq.n	8000678 <baro_init+0x44>
		return BARO_ERR_GENERAL;
 8000674:	2303      	movs	r3, #3
 8000676:	e0c1      	b.n	80007fc <baro_init+0x1c8>
	}

	// Config barometer
	// T and P oversampling - 16, Normal mode
	// SPI 3 wire Off, Filter 2x, Standby duration - 62.5 ms
	data[0] = BARO_MODE_NORMAL | BARO_OSRS_T_1 | BARO_OSRS_P_1;
 8000678:	4b62      	ldr	r3, [pc, #392]	; (8000804 <baro_init+0x1d0>)
 800067a:	2227      	movs	r2, #39	; 0x27
 800067c:	701a      	strb	r2, [r3, #0]
	data[1] = BARO_SPI3W_OFF | BARO_FILTER_OFF | BARO_T_SB_0_5;
 800067e:	4b61      	ldr	r3, [pc, #388]	; (8000804 <baro_init+0x1d0>)
 8000680:	2200      	movs	r2, #0
 8000682:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Mem_Write(&hi2c1, BARO_I2C_ADDR, BARO_REG_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, data, 2, 1000);
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2302      	movs	r3, #2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <baro_init+0x1d0>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	22f4      	movs	r2, #244	; 0xf4
 8000696:	21ec      	movs	r1, #236	; 0xec
 8000698:	485b      	ldr	r0, [pc, #364]	; (8000808 <baro_init+0x1d4>)
 800069a:	f002 f847 	bl	800272c <HAL_I2C_Mem_Write>
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d006      	beq.n	80006b6 <baro_init+0x82>
		if (status == HAL_TIMEOUT)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d101      	bne.n	80006b2 <baro_init+0x7e>
			return BARO_ERR_TIMEOUT;
 80006ae:	2302      	movs	r3, #2
 80006b0:	e0a4      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e0a2      	b.n	80007fc <baro_init+0x1c8>
	}

	// Readout compensation values
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_CALIB00, I2C_MEMADD_SIZE_8BIT, data, 25, 1000);
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	2319      	movs	r3, #25
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	4b50      	ldr	r3, [pc, #320]	; (8000804 <baro_init+0x1d0>)
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2288      	movs	r2, #136	; 0x88
 80006c8:	21ec      	movs	r1, #236	; 0xec
 80006ca:	484f      	ldr	r0, [pc, #316]	; (8000808 <baro_init+0x1d4>)
 80006cc:	f002 f928 	bl	8002920 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <baro_init+0xb4>
		if (status == HAL_TIMEOUT)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d101      	bne.n	80006e4 <baro_init+0xb0>
			return BARO_ERR_TIMEOUT;
 80006e0:	2302      	movs	r3, #2
 80006e2:	e08b      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e089      	b.n	80007fc <baro_init+0x1c8>
	}
	dig_T1 = (uint16_t)data [1] << 8 | (uint16_t)data [0];
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <baro_init+0x1d0>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <baro_init+0x1d0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	4313      	orrs	r3, r2
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <baro_init+0x1d8>)
 80006fe:	801a      	strh	r2, [r3, #0]
	dig_T2 =  (int16_t)data [3] << 8 |  (int16_t)data [2];
 8000700:	4b40      	ldr	r3, [pc, #256]	; (8000804 <baro_init+0x1d0>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	b21a      	sxth	r2, r3
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <baro_init+0x1d0>)
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21a      	sxth	r2, r3
 8000712:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <baro_init+0x1dc>)
 8000714:	801a      	strh	r2, [r3, #0]
	dig_T3 =  (int16_t)data [5] << 8 |  (int16_t)data [4];
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <baro_init+0x1d0>)
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <baro_init+0x1d0>)
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <baro_init+0x1e0>)
 800072a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)data [7] << 8 | (uint16_t)data [6];
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <baro_init+0x1d0>)
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21a      	sxth	r2, r3
 8000734:	4b33      	ldr	r3, [pc, #204]	; (8000804 <baro_init+0x1d0>)
 8000736:	799b      	ldrb	r3, [r3, #6]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b35      	ldr	r3, [pc, #212]	; (8000818 <baro_init+0x1e4>)
 8000742:	801a      	strh	r2, [r3, #0]
	dig_P2 =  (int16_t)data [9] << 8 |  (int16_t)data [8];
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <baro_init+0x1d0>)
 8000746:	7a5b      	ldrb	r3, [r3, #9]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <baro_init+0x1d0>)
 800074e:	7a1b      	ldrb	r3, [r3, #8]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21a      	sxth	r2, r3
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <baro_init+0x1e8>)
 8000758:	801a      	strh	r2, [r3, #0]
	dig_P3 =  (int16_t)data[11] << 8 |  (int16_t)data[10];
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <baro_init+0x1d0>)
 800075c:	7adb      	ldrb	r3, [r3, #11]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b21a      	sxth	r2, r3
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <baro_init+0x1d0>)
 8000764:	7a9b      	ldrb	r3, [r3, #10]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b21a      	sxth	r2, r3
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <baro_init+0x1ec>)
 800076e:	801a      	strh	r2, [r3, #0]
	dig_P4 =  (int16_t)data[13] << 8 |  (int16_t)data[12];
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <baro_init+0x1d0>)
 8000772:	7b5b      	ldrb	r3, [r3, #13]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21a      	sxth	r2, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <baro_init+0x1d0>)
 800077a:	7b1b      	ldrb	r3, [r3, #12]
 800077c:	b21b      	sxth	r3, r3
 800077e:	4313      	orrs	r3, r2
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <baro_init+0x1f0>)
 8000784:	801a      	strh	r2, [r3, #0]
	dig_P5 =  (int16_t)data[15] << 8 |  (int16_t)data[14];
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <baro_init+0x1d0>)
 8000788:	7bdb      	ldrb	r3, [r3, #15]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <baro_init+0x1d0>)
 8000790:	7b9b      	ldrb	r3, [r3, #14]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <baro_init+0x1f4>)
 800079a:	801a      	strh	r2, [r3, #0]
	dig_P6 =  (int16_t)data[17] << 8 |  (int16_t)data[16];
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <baro_init+0x1d0>)
 800079e:	7c5b      	ldrb	r3, [r3, #17]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <baro_init+0x1d0>)
 80007a6:	7c1b      	ldrb	r3, [r3, #16]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <baro_init+0x1f8>)
 80007b0:	801a      	strh	r2, [r3, #0]
	dig_P7 =  (int16_t)data[19] << 8 |  (int16_t)data[18];
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <baro_init+0x1d0>)
 80007b4:	7cdb      	ldrb	r3, [r3, #19]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <baro_init+0x1d0>)
 80007bc:	7c9b      	ldrb	r3, [r3, #18]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <baro_init+0x1fc>)
 80007c6:	801a      	strh	r2, [r3, #0]
	dig_P8 =  (int16_t)data[21] << 8 |  (int16_t)data[20];
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <baro_init+0x1d0>)
 80007ca:	7d5b      	ldrb	r3, [r3, #21]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <baro_init+0x1d0>)
 80007d2:	7d1b      	ldrb	r3, [r3, #20]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21a      	sxth	r2, r3
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <baro_init+0x200>)
 80007dc:	801a      	strh	r2, [r3, #0]
	dig_P9 =  (int16_t)data[23] << 8 |  (int16_t)data[22];
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <baro_init+0x1d0>)
 80007e0:	7ddb      	ldrb	r3, [r3, #23]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <baro_init+0x1d0>)
 80007e8:	7d9b      	ldrb	r3, [r3, #22]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <baro_init+0x204>)
 80007f2:	801a      	strh	r2, [r3, #0]

	inited = true;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <baro_init+0x208>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]

	return BARO_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000b0 	.word	0x200000b0
 8000808:	20000114 	.word	0x20000114
 800080c:	20000090 	.word	0x20000090
 8000810:	20000094 	.word	0x20000094
 8000814:	20000096 	.word	0x20000096
 8000818:	20000092 	.word	0x20000092
 800081c:	20000098 	.word	0x20000098
 8000820:	2000009a 	.word	0x2000009a
 8000824:	2000009c 	.word	0x2000009c
 8000828:	2000009e 	.word	0x2000009e
 800082c:	200000a0 	.word	0x200000a0
 8000830:	200000a2 	.word	0x200000a2
 8000834:	200000a4 	.word	0x200000a4
 8000838:	200000a6 	.word	0x200000a6
 800083c:	200000ac 	.word	0x200000ac

08000840 <baro_read_temp>:

int32_t baro_read_temp(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af04      	add	r7, sp, #16
	int32_t var1, var2, temp;

	if (!inited)
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <baro_read_temp+0xc4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f083 0301 	eor.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <baro_read_temp+0x1a>
		return INT32_MAX;
 8000854:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000858:	e050      	b.n	80008fc <baro_read_temp+0xbc>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2303      	movs	r3, #3
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <baro_read_temp+0xc8>)
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	22fa      	movs	r2, #250	; 0xfa
 800086c:	21ec      	movs	r1, #236	; 0xec
 800086e:	4827      	ldr	r0, [pc, #156]	; (800090c <baro_read_temp+0xcc>)
 8000870:	f002 f856 	bl	8002920 <HAL_I2C_Mem_Read>
 8000874:	4603      	mov	r3, r0
 8000876:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <baro_read_temp+0x44>
		return INT32_MAX;
 800087e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000882:	e03b      	b.n	80008fc <baro_read_temp+0xbc>
	}
	int32_t adc_T = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <baro_read_temp+0xc8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	031a      	lsls	r2, r3, #12
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <baro_read_temp+0xc8>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	4313      	orrs	r3, r2
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <baro_read_temp+0xc8>)
 8000894:	7892      	ldrb	r2, [r2, #2]
 8000896:	0912      	lsrs	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	4313      	orrs	r3, r2
 800089c:	613b      	str	r3, [r7, #16]

	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	10da      	asrs	r2, r3, #3
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <baro_read_temp+0xd0>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1ad3      	subs	r3, r2, r3
		   ((int32_t)dig_T2)) >> 11;
 80008aa:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <baro_read_temp+0xd4>)
 80008ac:	f9b2 2000 	ldrsh.w	r2, [r2]
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	12db      	asrs	r3, r3, #11
 80008b6:	60fb      	str	r3, [r7, #12]

	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	111b      	asrs	r3, r3, #4
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <baro_read_temp+0xd0>)
 80008be:	8812      	ldrh	r2, [r2, #0]
 80008c0:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	1112      	asrs	r2, r2, #4
 80008c6:	4912      	ldr	r1, [pc, #72]	; (8000910 <baro_read_temp+0xd0>)
 80008c8:	8809      	ldrh	r1, [r1, #0]
 80008ca:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008cc:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008d0:	131b      	asrs	r3, r3, #12
		      ((int32_t)dig_T3)) >> 14;
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <baro_read_temp+0xd8>)
 80008d4:	f9b2 2000 	ldrsh.w	r2, [r2]
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008dc:	139b      	asrs	r3, r3, #14
 80008de:	60bb      	str	r3, [r7, #8]

	t_fine = var1 + var2;
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <baro_read_temp+0xdc>)
 80008e8:	6013      	str	r3, [r2, #0]

	temp = (t_fine * 5 + 128) >> 8;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <baro_read_temp+0xdc>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	3380      	adds	r3, #128	; 0x80
 80008f6:	121b      	asrs	r3, r3, #8
 80008f8:	607b      	str	r3, [r7, #4]

	return temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000ac 	.word	0x200000ac
 8000908:	200000b0 	.word	0x200000b0
 800090c:	20000114 	.word	0x20000114
 8000910:	20000090 	.word	0x20000090
 8000914:	20000094 	.word	0x20000094
 8000918:	20000096 	.word	0x20000096
 800091c:	200000a8 	.word	0x200000a8

08000920 <baro_read_press>:

uint32_t baro_read_press(void) {
 8000920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000924:	b0d0      	sub	sp, #320	; 0x140
 8000926:	af04      	add	r7, sp, #16
	int64_t var1, var2, p;

	if (!inited)
 8000928:	4bc6      	ldr	r3, [pc, #792]	; (8000c44 <baro_read_press+0x324>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	f083 0301 	eor.w	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <baro_read_press+0x1c>
		return INT32_MAX;
 8000936:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800093a:	e2f6      	b.n	8000f2a <baro_read_press+0x60a>

	if (baro_read_temp() == INT32_MAX)
 800093c:	f7ff ff80 	bl	8000840 <baro_read_temp>
 8000940:	4602      	mov	r2, r0
 8000942:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000946:	429a      	cmp	r2, r3
 8000948:	d102      	bne.n	8000950 <baro_read_press+0x30>
		return UINT32_MAX;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e2ec      	b.n	8000f2a <baro_read_press+0x60a>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 8000950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2303      	movs	r3, #3
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	4bbb      	ldr	r3, [pc, #748]	; (8000c48 <baro_read_press+0x328>)
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	22f7      	movs	r2, #247	; 0xf7
 8000962:	21ec      	movs	r1, #236	; 0xec
 8000964:	48b9      	ldr	r0, [pc, #740]	; (8000c4c <baro_read_press+0x32c>)
 8000966:	f001 ffdb 	bl	8002920 <HAL_I2C_Mem_Read>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (status != HAL_OK) {
 8000970:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <baro_read_press+0x5e>
		return INT32_MAX;
 8000978:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800097c:	e2d5      	b.n	8000f2a <baro_read_press+0x60a>
	}
	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800097e:	4bb2      	ldr	r3, [pc, #712]	; (8000c48 <baro_read_press+0x328>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	031a      	lsls	r2, r3, #12
 8000984:	4bb0      	ldr	r3, [pc, #704]	; (8000c48 <baro_read_press+0x328>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	431a      	orrs	r2, r3
 800098c:	4bae      	ldr	r3, [pc, #696]	; (8000c48 <baro_read_press+0x328>)
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	091b      	lsrs	r3, r3, #4
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	var1 = ((int64_t)t_fine) - 128000;
 800099a:	4bad      	ldr	r3, [pc, #692]	; (8000c50 <baro_read_press+0x330>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	17da      	asrs	r2, r3, #31
 80009a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80009a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80009a8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80009ac:	460b      	mov	r3, r1
 80009ae:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
 80009b4:	4613      	mov	r3, r2
 80009b6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
 80009bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80009c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009c4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009cc:	fb03 f102 	mul.w	r1, r3, r2
 80009d0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009d8:	fb02 f303 	mul.w	r3, r2, r3
 80009dc:	18ca      	adds	r2, r1, r3
 80009de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009e2:	fba3 4503 	umull	r4, r5, r3, r3
 80009e6:	1953      	adds	r3, r2, r5
 80009e8:	461d      	mov	r5, r3
 80009ea:	4b9a      	ldr	r3, [pc, #616]	; (8000c54 <baro_read_press+0x334>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	17da      	asrs	r2, r3, #31
 80009f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80009f8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80009fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000a00:	4603      	mov	r3, r0
 8000a02:	fb03 f205 	mul.w	r2, r3, r5
 8000a06:	460b      	mov	r3, r1
 8000a08:	fb04 f303 	mul.w	r3, r4, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4602      	mov	r2, r0
 8000a10:	fba4 8902 	umull	r8, r9, r4, r2
 8000a14:	444b      	add	r3, r9
 8000a16:	4699      	mov	r9, r3
 8000a18:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000a1c:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 8000a20:	4b8d      	ldr	r3, [pc, #564]	; (8000c58 <baro_read_press+0x338>)
 8000a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000a32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a36:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000a3a:	462a      	mov	r2, r5
 8000a3c:	fb02 f203 	mul.w	r2, r2, r3
 8000a40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a44:	4621      	mov	r1, r4
 8000a46:	fb01 f303 	mul.w	r3, r1, r3
 8000a4a:	441a      	add	r2, r3
 8000a4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a50:	4621      	mov	r1, r4
 8000a52:	fba3 ab01 	umull	sl, fp, r3, r1
 8000a56:	eb02 030b 	add.w	r3, r2, fp
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	f04f 0100 	mov.w	r1, #0
 8000a64:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000a68:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000a6c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000a70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a74:	1814      	adds	r4, r2, r0
 8000a76:	64bc      	str	r4, [r7, #72]	; 0x48
 8000a78:	414b      	adcs	r3, r1
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a7c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000a80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8000a84:	4b75      	ldr	r3, [pc, #468]	; (8000c5c <baro_read_press+0x33c>)
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	17da      	asrs	r2, r3, #31
 8000a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000a92:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	f04f 0100 	mov.w	r1, #0
 8000a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000aa2:	00d9      	lsls	r1, r3, #3
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000aaa:	1814      	adds	r4, r2, r0
 8000aac:	643c      	str	r4, [r7, #64]	; 0x40
 8000aae:	414b      	adcs	r3, r1
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ab2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000ab6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000aba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000abe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ac2:	fb03 f102 	mul.w	r1, r3, r2
 8000ac6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000aca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	18ca      	adds	r2, r1, r3
 8000ad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ad8:	fba3 1303 	umull	r1, r3, r3, r3
 8000adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000af0:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <baro_read_press+0x340>)
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	17da      	asrs	r2, r3, #31
 8000afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000afe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000b02:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8000b06:	462b      	mov	r3, r5
 8000b08:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	fb02 f203 	mul.w	r2, r2, r3
 8000b12:	464b      	mov	r3, r9
 8000b14:	4621      	mov	r1, r4
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	4641      	mov	r1, r8
 8000b20:	fba2 1201 	umull	r1, r2, r2, r1
 8000b24:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8000b28:	460a      	mov	r2, r1
 8000b2a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8000b2e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000b32:	4413      	add	r3, r2
 8000b34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	f04f 0100 	mov.w	r1, #0
 8000b40:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000b44:	4623      	mov	r3, r4
 8000b46:	0a18      	lsrs	r0, r3, #8
 8000b48:	462b      	mov	r3, r5
 8000b4a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b4e:	462b      	mov	r3, r5
 8000b50:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)dig_P2) << 12);
 8000b52:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <baro_read_press+0x344>)
 8000b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	17da      	asrs	r2, r3, #31
 8000b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b68:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	fb02 f203 	mul.w	r2, r2, r3
 8000b72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b76:	4644      	mov	r4, r8
 8000b78:	fb04 f303 	mul.w	r3, r4, r3
 8000b7c:	441a      	add	r2, r3
 8000b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b82:	4644      	mov	r4, r8
 8000b84:	fba3 4304 	umull	r4, r3, r3, r4
 8000b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b8c:	4623      	mov	r3, r4
 8000b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b96:	18d3      	adds	r3, r2, r3
 8000b98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8000ba8:	464c      	mov	r4, r9
 8000baa:	0323      	lsls	r3, r4, #12
 8000bac:	4644      	mov	r4, r8
 8000bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000bb2:	4644      	mov	r4, r8
 8000bb4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000bb6:	1884      	adds	r4, r0, r2
 8000bb8:	63bc      	str	r4, [r7, #56]	; 0x38
 8000bba:	eb41 0303 	adc.w	r3, r1, r3
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bc0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000bc4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 8000bc8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000bcc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000bd0:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8000bd4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <baro_read_press+0x348>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	2200      	movs	r2, #0
 8000be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000be4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000be8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8000bec:	462b      	mov	r3, r5
 8000bee:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	fb02 f203 	mul.w	r2, r2, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	4622      	mov	r2, r4
 8000c04:	4641      	mov	r1, r8
 8000c06:	fba2 1201 	umull	r1, r2, r2, r1
 8000c0a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000c0e:	460a      	mov	r2, r1
 8000c10:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000c14:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c18:	4413      	add	r3, r2
 8000c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	104a      	asrs	r2, r1, #1
 8000c2e:	4629      	mov	r1, r5
 8000c30:	17cb      	asrs	r3, r1, #31
 8000c32:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0) {
 8000c36:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	d116      	bne.n	8000c6c <baro_read_press+0x34c>
		return 0; // avoid exception caused by division by zero
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e173      	b.n	8000f2a <baro_read_press+0x60a>
 8000c42:	bf00      	nop
 8000c44:	200000ac 	.word	0x200000ac
 8000c48:	200000b0 	.word	0x200000b0
 8000c4c:	20000114 	.word	0x20000114
 8000c50:	200000a8 	.word	0x200000a8
 8000c54:	200000a0 	.word	0x200000a0
 8000c58:	2000009e 	.word	0x2000009e
 8000c5c:	2000009c 	.word	0x2000009c
 8000c60:	2000009a 	.word	0x2000009a
 8000c64:	20000098 	.word	0x20000098
 8000c68:	20000092 	.word	0x20000092
	}
	p = 1048576 - adc_P;
 8000c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c70:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000c74:	17da      	asrs	r2, r3, #31
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
 8000c78:	637a      	str	r2, [r7, #52]	; 0x34
 8000c7a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000c7e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8000c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c86:	105b      	asrs	r3, r3, #1
 8000c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c90:	07db      	lsls	r3, r3, #31
 8000c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c96:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	1a89      	subs	r1, r1, r2
 8000ca2:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	eb61 0303 	sbc.w	r3, r1, r3
 8000cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000cb0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	1891      	adds	r1, r2, r2
 8000cba:	62b9      	str	r1, [r7, #40]	; 0x28
 8000cbc:	415b      	adcs	r3, r3
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	1851      	adds	r1, r2, r1
 8000cc8:	6239      	str	r1, [r7, #32]
 8000cca:	4629      	mov	r1, r5
 8000ccc:	414b      	adcs	r3, r1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000cdc:	4649      	mov	r1, r9
 8000cde:	018b      	lsls	r3, r1, #6
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	018a      	lsls	r2, r1, #6
 8000cea:	4641      	mov	r1, r8
 8000cec:	1889      	adds	r1, r1, r2
 8000cee:	61b9      	str	r1, [r7, #24]
 8000cf0:	4649      	mov	r1, r9
 8000cf2:	eb43 0101 	adc.w	r1, r3, r1
 8000cf6:	61f9      	str	r1, [r7, #28]
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d04:	4649      	mov	r1, r9
 8000d06:	008b      	lsls	r3, r1, #2
 8000d08:	4641      	mov	r1, r8
 8000d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d0e:	4641      	mov	r1, r8
 8000d10:	008a      	lsls	r2, r1, #2
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	4622      	mov	r2, r4
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	462a      	mov	r2, r5
 8000d22:	eb42 0303 	adc.w	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	008b      	lsls	r3, r1, #2
 8000d38:	4641      	mov	r1, r8
 8000d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d3e:	4641      	mov	r1, r8
 8000d40:	008a      	lsls	r2, r1, #2
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	4603      	mov	r3, r0
 8000d48:	4622      	mov	r2, r4
 8000d4a:	189b      	adds	r3, r3, r2
 8000d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d50:	462b      	mov	r3, r5
 8000d52:	460a      	mov	r2, r1
 8000d54:	eb42 0303 	adc.w	r3, r2, r3
 8000d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d60:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000d64:	f7ff fa94 	bl	8000290 <__aeabi_ldivmod>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000d70:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <baro_read_press+0x618>)
 8000d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	17da      	asrs	r2, r3, #31
 8000d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d7c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d7e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	f04f 0100 	mov.w	r1, #0
 8000d8a:	0b50      	lsrs	r0, r2, #13
 8000d8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d90:	1359      	asrs	r1, r3, #13
 8000d92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000d96:	462b      	mov	r3, r5
 8000d98:	fb00 f203 	mul.w	r2, r0, r3
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	fb03 f301 	mul.w	r3, r3, r1
 8000da2:	4413      	add	r3, r2
 8000da4:	4622      	mov	r2, r4
 8000da6:	fba2 1200 	umull	r1, r2, r2, r0
 8000daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000dae:	460a      	mov	r2, r1
 8000db0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000db4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000db8:	4413      	add	r3, r2
 8000dba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000df4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	0e4a      	lsrs	r2, r1, #25
 8000e0e:	4629      	mov	r1, r5
 8000e10:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e14:	4629      	mov	r1, r5
 8000e16:	164b      	asrs	r3, r1, #25
 8000e18:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <baro_read_press+0x61c>)
 8000e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	17da      	asrs	r2, r3, #31
 8000e26:	673b      	str	r3, [r7, #112]	; 0x70
 8000e28:	677a      	str	r2, [r7, #116]	; 0x74
 8000e2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e2e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000e32:	462a      	mov	r2, r5
 8000e34:	fb02 f203 	mul.w	r2, r2, r3
 8000e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	fb01 f303 	mul.w	r3, r1, r3
 8000e42:	441a      	add	r2, r3
 8000e44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e48:	4621      	mov	r1, r4
 8000e4a:	fba3 1301 	umull	r1, r3, r3, r1
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e52:	460b      	mov	r3, r1
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000e6e:	4621      	mov	r1, r4
 8000e70:	0cca      	lsrs	r2, r1, #19
 8000e72:	4629      	mov	r1, r5
 8000e74:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e78:	4629      	mov	r1, r5
 8000e7a:	14cb      	asrs	r3, r1, #19
 8000e7c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8000e80:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000e84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e88:	1884      	adds	r4, r0, r2
 8000e8a:	66bc      	str	r4, [r7, #104]	; 0x68
 8000e8c:	eb41 0303 	adc.w	r3, r1, r3
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000e96:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	1889      	adds	r1, r1, r2
 8000e9e:	6639      	str	r1, [r7, #96]	; 0x60
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	eb43 0101 	adc.w	r1, r3, r1
 8000ea6:	6679      	str	r1, [r7, #100]	; 0x64
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000eb4:	4623      	mov	r3, r4
 8000eb6:	0a18      	lsrs	r0, r3, #8
 8000eb8:	462b      	mov	r3, r5
 8000eba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ebe:	462b      	mov	r3, r5
 8000ec0:	1219      	asrs	r1, r3, #8
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <baro_read_press+0x620>)
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	17da      	asrs	r2, r3, #31
 8000ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ece:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8000edc:	464c      	mov	r4, r9
 8000ede:	0123      	lsls	r3, r4, #4
 8000ee0:	4644      	mov	r4, r8
 8000ee2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ee6:	4644      	mov	r4, r8
 8000ee8:	0122      	lsls	r2, r4, #4
 8000eea:	1884      	adds	r4, r0, r2
 8000eec:	60bc      	str	r4, [r7, #8]
 8000eee:	eb41 0303 	adc.w	r3, r1, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ef8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return p / 256;
 8000efc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da07      	bge.n	8000f14 <baro_read_press+0x5f4>
 8000f04:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	f143 0300 	adc.w	r3, r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	f04f 0100 	mov.w	r1, #0
 8000f1c:	0a10      	lsrs	r0, r2, #8
 8000f1e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f22:	1219      	asrs	r1, r3, #8
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4613      	mov	r3, r2

}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f30:	46bd      	mov	sp, r7
 8000f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f36:	bf00      	nop
 8000f38:	200000a6 	.word	0x200000a6
 8000f3c:	200000a4 	.word	0x200000a4
 8000f40:	200000a2 	.word	0x200000a2

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f000 fd04 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f882 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 f9f2 	bl	8001338 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f54:	f000 f8e8 	bl	8001128 <MX_ADC1_Init>
  MX_TIM9_Init();
 8000f58:	f000 f966 	bl	8001228 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000f5c:	f000 f99e 	bl	800129c <MX_TIM10_Init>
  MX_I2C1_Init();
 8000f60:	f000 f934 	bl	80011cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 f9be 	bl	80012e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

    if (baro_init() != BARO_OK) {
 8000f68:	f7ff fb64 	bl	8000634 <baro_init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d011      	beq.n	8000f96 <main+0x52>
      snprintf(text, countof(text), "Error init baro\n");
 8000f72:	4a29      	ldr	r2, [pc, #164]	; (8001018 <main+0xd4>)
 8000f74:	2164      	movs	r1, #100	; 0x64
 8000f76:	4829      	ldr	r0, [pc, #164]	; (800101c <main+0xd8>)
 8000f78:	f007 f8e8 	bl	800814c <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000f7c:	2164      	movs	r1, #100	; 0x64
 8000f7e:	4827      	ldr	r0, [pc, #156]	; (800101c <main+0xd8>)
 8000f80:	f007 f918 	bl	80081b4 <strnlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8c:	4923      	ldr	r1, [pc, #140]	; (800101c <main+0xd8>)
 8000f8e:	4824      	ldr	r0, [pc, #144]	; (8001020 <main+0xdc>)
 8000f90:	f003 fa6b 	bl	800446a <HAL_UART_Transmit>
      while (1) {}
 8000f94:	e7fe      	b.n	8000f94 <main+0x50>
    }


    mid_MsgQueue = osMessageQueueNew(100, sizeof(char)*100, NULL);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2164      	movs	r1, #100	; 0x64
 8000f9a:	2064      	movs	r0, #100	; 0x64
 8000f9c:	f004 f814 	bl	8004fc8 <osMessageQueueNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a20      	ldr	r2, [pc, #128]	; (8001024 <main+0xe0>)
 8000fa4:	6013      	str	r3, [r2, #0]
    if (mid_MsgQueue == NULL) {
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <main+0xe0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d110      	bne.n	8000fd0 <main+0x8c>
   	snprintf(text, countof(text), "Error init queue\n");
 8000fae:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <main+0xe4>)
 8000fb0:	2164      	movs	r1, #100	; 0x64
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <main+0xd8>)
 8000fb4:	f007 f8ca 	bl	800814c <sniprintf>
   	HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000fb8:	2164      	movs	r1, #100	; 0x64
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <main+0xd8>)
 8000fbc:	f007 f8fa 	bl	80081b4 <strnlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc8:	4914      	ldr	r1, [pc, #80]	; (800101c <main+0xd8>)
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <main+0xdc>)
 8000fcc:	f003 fa4d 	bl	800446a <HAL_UART_Transmit>
    }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd0:	f003 fdf4 	bl	8004bbc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART */
  muxUARTHandle = osMutexNew(&muxUART_attributes);
 8000fd4:	4815      	ldr	r0, [pc, #84]	; (800102c <main+0xe8>)
 8000fd6:	f003 fee8 	bl	8004daa <osMutexNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <main+0xec>)
 8000fde:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semButtonPressed */
  semButtonPressedHandle = osSemaphoreNew(1, 1, &semButtonPressed_attributes);
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <main+0xf0>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f003 ff66 	bl	8004eb6 <osSemaphoreNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <main+0xf4>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskLEDBlink */
  taskLEDBlinkHandle = osThreadNew(StartTaskLEDBlink, NULL, &taskLEDBlink_attributes);
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <main+0xf8>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4812      	ldr	r0, [pc, #72]	; (8001040 <main+0xfc>)
 8000ff6:	f003 fe2b 	bl	8004c50 <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <main+0x100>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* creation of taskButtonRead */
  taskButtonReadHandle = osThreadNew(StartTaskButtonRead, NULL, &taskButtonRead_attributes);
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <main+0x104>)
 8001002:	2100      	movs	r1, #0
 8001004:	4811      	ldr	r0, [pc, #68]	; (800104c <main+0x108>)
 8001006:	f003 fe23 	bl	8004c50 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <main+0x10c>)
 800100e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001010:	f003 fdf8 	bl	8004c04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001014:	e7fe      	b.n	8001014 <main+0xd0>
 8001016:	bf00      	nop
 8001018:	08008954 	.word	0x08008954
 800101c:	200002a0 	.word	0x200002a0
 8001020:	200001f8 	.word	0x200001f8
 8001024:	2000029c 	.word	0x2000029c
 8001028:	08008968 	.word	0x08008968
 800102c:	080089f8 	.word	0x080089f8
 8001030:	20000244 	.word	0x20000244
 8001034:	08008a08 	.word	0x08008a08
 8001038:	20000248 	.word	0x20000248
 800103c:	080089b0 	.word	0x080089b0
 8001040:	08001495 	.word	0x08001495
 8001044:	2000023c 	.word	0x2000023c
 8001048:	080089d4 	.word	0x080089d4
 800104c:	0800152d 	.word	0x0800152d
 8001050:	20000240 	.word	0x20000240

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2230      	movs	r2, #48	; 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f006 ff5c 	bl	8007f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <SystemClock_Config+0xcc>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a27      	ldr	r2, [pc, #156]	; (8001120 <SystemClock_Config+0xcc>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <SystemClock_Config+0xcc>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <SystemClock_Config+0xd0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a0:	4a20      	ldr	r2, [pc, #128]	; (8001124 <SystemClock_Config+0xd0>)
 80010a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010c8:	2319      	movs	r3, #25
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010cc:	23a8      	movs	r3, #168	; 0xa8
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 f9a1 	bl	8003424 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010e8:	f000 fa48 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2102      	movs	r1, #2
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fc03 	bl	8003914 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001114:	f000 fa32 	bl	800157c <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3750      	adds	r7, #80	; 0x50
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_ADC1_Init+0x98>)
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <MX_ADC1_Init+0x9c>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_ADC1_Init+0x98>)
 8001142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001146:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_ADC1_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_ADC1_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_ADC1_Init+0x98>)
 8001156:	2201      	movs	r2, #1
 8001158:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_ADC1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_ADC1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_ADC1_Init+0x98>)
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <MX_ADC1_Init+0xa0>)
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_ADC1_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_ADC1_Init+0x98>)
 8001176:	2201      	movs	r2, #1
 8001178:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_ADC1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_ADC1_Init+0x98>)
 8001184:	2201      	movs	r2, #1
 8001186:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_ADC1_Init+0x98>)
 800118a:	f000 fc55 	bl	8001a38 <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001194:	f000 f9f2 	bl	800157c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_ADC1_Init+0x98>)
 80011aa:	f000 fc89 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011b4:	f000 f9e2 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000cc 	.word	0x200000cc
 80011c4:	40012000 	.word	0x40012000
 80011c8:	0f000001 	.word	0x0f000001

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_I2C1_Init+0x50>)
 800120a:	f001 f94b 	bl	80024a4 <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 f9b2 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000114 	.word	0x20000114
 8001220:	40005400 	.word	0x40005400
 8001224:	000186a0 	.word	0x000186a0

08001228 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_TIM9_Init+0x6c>)
 800123c:	4a16      	ldr	r2, [pc, #88]	; (8001298 <MX_TIM9_Init+0x70>)
 800123e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_TIM9_Init+0x6c>)
 8001242:	f240 3247 	movw	r2, #839	; 0x347
 8001246:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_TIM9_Init+0x6c>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 49999;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_TIM9_Init+0x6c>)
 8001250:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001254:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_TIM9_Init+0x6c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <MX_TIM9_Init+0x6c>)
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_TIM9_Init+0x6c>)
 8001264:	f002 fd36 	bl	8003cd4 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800126e:	f000 f985 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_TIM9_Init+0x6c>)
 800127e:	f002 fe80 	bl	8003f82 <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001288:	f000 f978 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000168 	.word	0x20000168
 8001298:	40014000 	.word	0x40014000

0800129c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_TIM10_Init+0x40>)
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <MX_TIM10_Init+0x44>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_TIM10_Init+0x40>)
 80012a8:	2254      	movs	r2, #84	; 0x54
 80012aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_TIM10_Init+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_TIM10_Init+0x40>)
 80012b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_TIM10_Init+0x40>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_TIM10_Init+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_TIM10_Init+0x40>)
 80012c8:	f002 fd04 	bl	8003cd4 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80012d2:	f000 f953 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001b0 	.word	0x200001b0
 80012e0:	40014400 	.word	0x40014400

080012e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MX_USART1_UART_Init+0x50>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART1_UART_Init+0x4c>)
 800131c:	f003 f858 	bl	80043d0 <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001326:	f000 f929 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200001f8 	.word	0x200001f8
 8001334:	40011000 	.word	0x40011000

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <MX_GPIO_Init+0x14c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <MX_GPIO_Init+0x14c>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b49      	ldr	r3, [pc, #292]	; (8001484 <MX_GPIO_Init+0x14c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <MX_GPIO_Init+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a44      	ldr	r2, [pc, #272]	; (8001484 <MX_GPIO_Init+0x14c>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b42      	ldr	r3, [pc, #264]	; (8001484 <MX_GPIO_Init+0x14c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <MX_GPIO_Init+0x14c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a3d      	ldr	r2, [pc, #244]	; (8001484 <MX_GPIO_Init+0x14c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <MX_GPIO_Init+0x14c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b37      	ldr	r3, [pc, #220]	; (8001484 <MX_GPIO_Init+0x14c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a36      	ldr	r2, [pc, #216]	; (8001484 <MX_GPIO_Init+0x14c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <MX_GPIO_Init+0x14c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c4:	4830      	ldr	r0, [pc, #192]	; (8001488 <MX_GPIO_Init+0x150>)
 80013c6:	f001 f82f 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2140      	movs	r1, #64	; 0x40
 80013ce:	482f      	ldr	r0, [pc, #188]	; (800148c <MX_GPIO_Init+0x154>)
 80013d0:	f001 f82a 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <MX_GPIO_Init+0x154>)
 80013da:	f001 f825 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_G_GPIO_Port, LED2_G_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e4:	482a      	ldr	r0, [pc, #168]	; (8001490 <MX_GPIO_Init+0x158>)
 80013e6:	f001 f81f 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Y_Pin|LED2_R_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013f0:	4827      	ldr	r0, [pc, #156]	; (8001490 <MX_GPIO_Init+0x158>)
 80013f2:	f001 f819 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	481e      	ldr	r0, [pc, #120]	; (8001488 <MX_GPIO_Init+0x150>)
 8001410:	f000 fe86 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin;
 8001414:	23c0      	movs	r3, #192	; 0xc0
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001418:	2311      	movs	r3, #17
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4818      	ldr	r0, [pc, #96]	; (800148c <MX_GPIO_Init+0x154>)
 800142c:	f000 fe78 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <MX_GPIO_Init+0x158>)
 8001448:	f000 fe6a 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_G_Pin LED1_Y_Pin LED2_R_Pin */
  GPIO_InitStruct.Pin = LED2_G_Pin|LED1_Y_Pin|LED2_R_Pin;
 800144c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001452:	2311      	movs	r3, #17
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <MX_GPIO_Init+0x158>)
 8001466:	f000 fe5b 	bl	8002120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2105      	movs	r1, #5
 800146e:	2028      	movs	r0, #40	; 0x28
 8001470:	f000 fe1f 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001474:	2028      	movs	r0, #40	; 0x28
 8001476:	f000 fe38 	bl	80020ea <HAL_NVIC_EnableIRQ>

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40020800 	.word	0x40020800
 800148c:	40020000 	.word	0x40020000
 8001490:	40020400 	.word	0x40020400

08001494 <StartTaskLEDBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLEDBlink */
void StartTaskLEDBlink(void *argument)
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    int32_t temp = baro_read_temp();
 800149c:	f7ff f9d0 	bl	8000840 <baro_read_temp>
 80014a0:	60f8      	str	r0, [r7, #12]
    int32_t pres = baro_read_press();
 80014a2:	f7ff fa3d 	bl	8000920 <baro_read_press>
 80014a6:	4603      	mov	r3, r0
 80014a8:	60bb      	str	r3, [r7, #8]
    snprintf(text, countof(text), "/*%ld.%02ld,%ld.%02ld*/\n", temp/100, temp%100, pres/100, pres%100);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <StartTaskLEDBlink+0x88>)
 80014ae:	fb82 1203 	smull	r1, r2, r2, r3
 80014b2:	1152      	asrs	r2, r2, #5
 80014b4:	17db      	asrs	r3, r3, #31
 80014b6:	1ad5      	subs	r5, r2, r3
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <StartTaskLEDBlink+0x88>)
 80014bc:	fb83 1302 	smull	r1, r3, r3, r2
 80014c0:	1159      	asrs	r1, r3, #5
 80014c2:	17d3      	asrs	r3, r2, #31
 80014c4:	1acb      	subs	r3, r1, r3
 80014c6:	2164      	movs	r1, #100	; 0x64
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4912      	ldr	r1, [pc, #72]	; (800151c <StartTaskLEDBlink+0x88>)
 80014d2:	fb81 0102 	smull	r0, r1, r1, r2
 80014d6:	1149      	asrs	r1, r1, #5
 80014d8:	17d2      	asrs	r2, r2, #31
 80014da:	1a88      	subs	r0, r1, r2
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <StartTaskLEDBlink+0x88>)
 80014e0:	fb82 4201 	smull	r4, r2, r2, r1
 80014e4:	1154      	asrs	r4, r2, #5
 80014e6:	17ca      	asrs	r2, r1, #31
 80014e8:	1aa2      	subs	r2, r4, r2
 80014ea:	2464      	movs	r4, #100	; 0x64
 80014ec:	fb04 f202 	mul.w	r2, r4, r2
 80014f0:	1a8a      	subs	r2, r1, r2
 80014f2:	9202      	str	r2, [sp, #8]
 80014f4:	9001      	str	r0, [sp, #4]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	462b      	mov	r3, r5
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <StartTaskLEDBlink+0x8c>)
 80014fc:	2164      	movs	r1, #100	; 0x64
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <StartTaskLEDBlink+0x90>)
 8001500:	f006 fe24 	bl	800814c <sniprintf>
    osMessageQueuePut(mid_MsgQueue, &text, (uint8_t)1, osWaitForever);
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <StartTaskLEDBlink+0x94>)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	2201      	movs	r2, #1
 800150e:	4905      	ldr	r1, [pc, #20]	; (8001524 <StartTaskLEDBlink+0x90>)
 8001510:	f003 fdce 	bl	80050b0 <osMessageQueuePut>
    osDelay(pdMS_TO_TICKS(100));
 8001514:	2032      	movs	r0, #50	; 0x32
 8001516:	f003 fc2d 	bl	8004d74 <osDelay>
  {
 800151a:	e7bf      	b.n	800149c <StartTaskLEDBlink+0x8>
 800151c:	51eb851f 	.word	0x51eb851f
 8001520:	0800897c 	.word	0x0800897c
 8001524:	200002a0 	.word	0x200002a0
 8001528:	2000029c 	.word	0x2000029c

0800152c <StartTaskButtonRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskButtonRead */
void StartTaskButtonRead(void *argument)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09c      	sub	sp, #112	; 0x70
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  char str[100];
	  status = osMessageQueueGet(mid_MsgQueue, &str, (uint8_t *)1, osWaitForever);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <StartTaskButtonRead+0x48>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f107 0108 	add.w	r1, r7, #8
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	2201      	movs	r2, #1
 8001542:	f003 fe15 	bl	8005170 <osMessageQueueGet>
 8001546:	66f8      	str	r0, [r7, #108]	; 0x6c
	  if(status == osOK){
 8001548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <StartTaskButtonRead+0x3e>
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fe44 	bl	80001e0 <strlen>
 8001558:	4603      	mov	r3, r0
 800155a:	b29a      	uxth	r2, r3
 800155c:	f107 0108 	add.w	r1, r7, #8
 8001560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <StartTaskButtonRead+0x4c>)
 8001566:	f002 ff80 	bl	800446a <HAL_UART_Transmit>
	  }
	  osDelay(pdMS_TO_TICKS(100));
 800156a:	2032      	movs	r0, #50	; 0x32
 800156c:	f003 fc02 	bl	8004d74 <osDelay>
  {
 8001570:	e7e0      	b.n	8001534 <StartTaskButtonRead+0x8>
 8001572:	bf00      	nop
 8001574:	2000029c 	.word	0x2000029c
 8001578:	200001f8 	.word	0x200001f8

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_MspInit+0x54>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_MspInit+0x54>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_MspInit+0x54>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_MspInit+0x54>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_MspInit+0x54>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_MspInit+0x54>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	210f      	movs	r1, #15
 80015ca:	f06f 0001 	mvn.w	r0, #1
 80015ce:	f000 fd70 	bl	80020b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_ADC_MspInit+0x7c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d127      	bne.n	8001652 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_ADC_MspInit+0x80>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <HAL_ADC_MspInit+0x80>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_ADC_MspInit+0x80>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_ADC_MspInit+0x80>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_ADC_MspInit+0x80>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_ADC_MspInit+0x80>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163e:	2303      	movs	r3, #3
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_ADC_MspInit+0x84>)
 800164e:	f000 fd67 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40012000 	.word	0x40012000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_I2C_MspInit+0x84>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12c      	bne.n	80016e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ac:	2312      	movs	r3, #18
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b8:	2304      	movs	r3, #4
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	480c      	ldr	r0, [pc, #48]	; (80016f4 <HAL_I2C_MspInit+0x8c>)
 80016c4:	f000 fd2c 	bl	8002120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 80016d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d6:	6413      	str	r3, [r2, #64]	; 0x40
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	; 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40005400 	.word	0x40005400
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020400 	.word	0x40020400

080016f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_TIM_Base_MspInit+0x70>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d116      	bne.n	8001738 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_TIM_Base_MspInit+0x74>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a16      	ldr	r2, [pc, #88]	; (800176c <HAL_TIM_Base_MspInit+0x74>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_TIM_Base_MspInit+0x74>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	2018      	movs	r0, #24
 800172c:	f000 fcc1 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001730:	2018      	movs	r0, #24
 8001732:	f000 fcda 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001736:	e012      	b.n	800175e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_TIM_Base_MspInit+0x78>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10d      	bne.n	800175e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0x74>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_TIM_Base_MspInit+0x74>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_TIM_Base_MspInit+0x74>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40014000 	.word	0x40014000
 800176c:	40023800 	.word	0x40023800
 8001770:	40014400 	.word	0x40014400

08001774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_UART_MspInit+0x84>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12b      	bne.n	80017ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0x88>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017a0:	f043 0310 	orr.w	r3, r3, #16
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ce:	23c0      	movs	r3, #192	; 0xc0
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017de:	2307      	movs	r3, #7
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <HAL_UART_MspInit+0x8c>)
 80017ea:	f000 fc99 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020400 	.word	0x40020400

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f8e0 	bl	80019f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001838:	f005 fad2 	bl	8006de0 <xTaskGetSchedulerState>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001842:	f006 f8b9 	bl	80079b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001852:	f002 fa8e 	bl	8003d72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000168 	.word	0x20000168

08001860 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001864:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001868:	f000 fdf8 	bl	800245c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f006 fb04 	bl	8007eac <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20010000 	.word	0x20010000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20000304 	.word	0x20000304
 80018d8:	20004d30 	.word	0x20004d30

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopFillZerobss+0x26>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192a:	f7ff ffd7 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f006 fac3 	bl	8007eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff fb07 	bl	8000f44 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001944:	08008ad4 	.word	0x08008ad4
  ldr r2, =_sbss
 8001948:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800194c:	20004d2c 	.word	0x20004d2c

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <HAL_Init+0x40>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_Init+0x40>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x40>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 fb8d 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	200f      	movs	r0, #15
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fdfe 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fba5 	bl	8002106 <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 fb6d 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000308 	.word	0x20000308

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000308 	.word	0x20000308

08001a38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e033      	b.n	8001ab6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fdc2 	bl	80015e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a7e:	f023 0302 	bic.w	r3, r3, #2
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f93a 	bl	8001d04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa6:	e001      	b.n	8001aac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e105      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x228>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d925      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4403      	add	r3, r0
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e022      	b.n	8001b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6919      	ldr	r1, [r3, #16]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4403      	add	r3, r0
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d824      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b05      	subs	r3, #5
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bce:	e04c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d824      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	; 0x23
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b23      	subs	r3, #35	; 0x23
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c20:	e023      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	; 0x41
 8001c34:	221f      	movs	r2, #31
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b41      	subs	r3, #65	; 0x41
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_ADC_ConfigChannel+0x234>)
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <HAL_ADC_ConfigChannel+0x238>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1cc>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a19      	ldr	r2, [pc, #100]	; (8001cf8 <HAL_ADC_ConfigChannel+0x238>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d123      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d003      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x1e6>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d11b      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d111      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_ADC_ConfigChannel+0x23c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_ADC_ConfigChannel+0x240>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	0c9a      	lsrs	r2, r3, #18
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd0:	e002      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40012300 	.word	0x40012300
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0c:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <ADC_Init+0x1f0>)
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	4a58      	ldr	r2, [pc, #352]	; (8001ef8 <ADC_Init+0x1f4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001daa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00f      	b.n	8001e02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0202 	bic.w	r2, r2, #2
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	005a      	lsls	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	035a      	lsls	r2, r3, #13
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	e007      	b.n	8001e78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	051a      	lsls	r2, r3, #20
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eba:	025a      	lsls	r2, r3, #9
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6899      	ldr	r1, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	029a      	lsls	r2, r3, #10
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40012300 	.word	0x40012300
 8001ef8:	0f000001 	.word	0x0f000001

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff29 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff3e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff31 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e159      	b.n	80023f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8148 	bne.w	80023ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	2b02      	cmp	r3, #2
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a2 	beq.w	80023ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_GPIO_Init+0x2e8>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_GPIO_Init+0x2e8>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_GPIO_Init+0x2e8>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c2:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_GPIO_Init+0x2ec>)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a49      	ldr	r2, [pc, #292]	; (8002410 <HAL_GPIO_Init+0x2f0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x202>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a48      	ldr	r2, [pc, #288]	; (8002414 <HAL_GPIO_Init+0x2f4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x1fe>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a47      	ldr	r2, [pc, #284]	; (8002418 <HAL_GPIO_Init+0x2f8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x1fa>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_GPIO_Init+0x2fc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x1f6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a45      	ldr	r2, [pc, #276]	; (8002420 <HAL_GPIO_Init+0x300>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x1f2>
 800230e:	2304      	movs	r3, #4
 8002310:	e008      	b.n	8002324 <HAL_GPIO_Init+0x204>
 8002312:	2307      	movs	r3, #7
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x204>
 8002316:	2303      	movs	r3, #3
 8002318:	e004      	b.n	8002324 <HAL_GPIO_Init+0x204>
 800231a:	2302      	movs	r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x204>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x204>
 8002322:	2300      	movs	r3, #0
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	f002 0203 	and.w	r2, r2, #3
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	4093      	lsls	r3, r2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002334:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_GPIO_Init+0x2ec>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_GPIO_Init+0x304>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a24      	ldr	r2, [pc, #144]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_GPIO_Init+0x304>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <HAL_GPIO_Init+0x304>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_GPIO_Init+0x304>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <HAL_GPIO_Init+0x304>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b0f      	cmp	r3, #15
 80023f4:	f67f aea2 	bls.w	800213c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40013800 	.word	0x40013800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400
 8002418:	40020800 	.word	0x40020800
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
 8002434:	4613      	mov	r3, r2
 8002436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002438:	787b      	ldrb	r3, [r7, #1]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002444:	e003      	b.n	800244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	041a      	lsls	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	619a      	str	r2, [r3, #24]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f806 	bl	800248c <HAL_GPIO_EXTI_Callback>
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40013c00 	.word	0x40013c00

0800248c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e12b      	b.n	800270e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff f8cc 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002508:	f001 fbbc 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4a81      	ldr	r2, [pc, #516]	; (8002718 <HAL_I2C_Init+0x274>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d807      	bhi.n	8002528 <HAL_I2C_Init+0x84>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a80      	ldr	r2, [pc, #512]	; (800271c <HAL_I2C_Init+0x278>)
 800251c:	4293      	cmp	r3, r2
 800251e:	bf94      	ite	ls
 8002520:	2301      	movls	r3, #1
 8002522:	2300      	movhi	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e006      	b.n	8002536 <HAL_I2C_Init+0x92>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a7d      	ldr	r2, [pc, #500]	; (8002720 <HAL_I2C_Init+0x27c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	bf94      	ite	ls
 8002530:	2301      	movls	r3, #1
 8002532:	2300      	movhi	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0e7      	b.n	800270e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a78      	ldr	r2, [pc, #480]	; (8002724 <HAL_I2C_Init+0x280>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9b      	lsrs	r3, r3, #18
 8002548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a6a      	ldr	r2, [pc, #424]	; (8002718 <HAL_I2C_Init+0x274>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d802      	bhi.n	8002578 <HAL_I2C_Init+0xd4>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3301      	adds	r3, #1
 8002576:	e009      	b.n	800258c <HAL_I2C_Init+0xe8>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	4a69      	ldr	r2, [pc, #420]	; (8002728 <HAL_I2C_Init+0x284>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	3301      	adds	r3, #1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800259e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	495c      	ldr	r1, [pc, #368]	; (8002718 <HAL_I2C_Init+0x274>)
 80025a8:	428b      	cmp	r3, r1
 80025aa:	d819      	bhi.n	80025e0 <HAL_I2C_Init+0x13c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e59      	subs	r1, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025c0:	400b      	ands	r3, r1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_I2C_Init+0x138>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1e59      	subs	r1, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025da:	e051      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 80025dc:	2304      	movs	r3, #4
 80025de:	e04f      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <HAL_I2C_Init+0x168>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	440b      	add	r3, r1
 80025f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e012      	b.n	8002632 <HAL_I2C_Init+0x18e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Init+0x196>
 8002636:	2301      	movs	r3, #1
 8002638:	e022      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10e      	bne.n	8002660 <HAL_I2C_Init+0x1bc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e58      	subs	r0, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	440b      	add	r3, r1
 8002650:	fbb0 f3f3 	udiv	r3, r0, r3
 8002654:	3301      	adds	r3, #1
 8002656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	6809      	ldr	r1, [r1, #0]
 8002684:	4313      	orrs	r3, r2
 8002686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6911      	ldr	r1, [r2, #16]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	000186a0 	.word	0x000186a0
 800271c:	001e847f 	.word	0x001e847f
 8002720:	003d08ff 	.word	0x003d08ff
 8002724:	431bde83 	.word	0x431bde83
 8002728:	10624dd3 	.word	0x10624dd3

0800272c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	461a      	mov	r2, r3
 800273a:	4603      	mov	r3, r0
 800273c:	817b      	strh	r3, [r7, #10]
 800273e:	460b      	mov	r3, r1
 8002740:	813b      	strh	r3, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002746:	f7ff f96b 	bl	8001a20 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	f040 80d9 	bne.w	800290c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2319      	movs	r3, #25
 8002760:	2201      	movs	r2, #1
 8002762:	496d      	ldr	r1, [pc, #436]	; (8002918 <HAL_I2C_Mem_Write+0x1ec>)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fc7f 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
 8002772:	e0cc      	b.n	800290e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Mem_Write+0x56>
 800277e:	2302      	movs	r3, #2
 8002780:	e0c5      	b.n	800290e <HAL_I2C_Mem_Write+0x1e2>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d007      	beq.n	80027a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2221      	movs	r2, #33	; 0x21
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a4d      	ldr	r2, [pc, #308]	; (800291c <HAL_I2C_Mem_Write+0x1f0>)
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ea:	88f8      	ldrh	r0, [r7, #6]
 80027ec:	893a      	ldrh	r2, [r7, #8]
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4603      	mov	r3, r0
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fab6 	bl	8002d6c <I2C_RequestMemoryWrite>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d052      	beq.n	80028ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e081      	b.n	800290e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fd00 	bl	8003214 <I2C_WaitOnTXEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b04      	cmp	r3, #4
 8002820:	d107      	bne.n	8002832 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06b      	b.n	800290e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11b      	bne.n	80028ac <HAL_I2C_Mem_Write+0x180>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d017      	beq.n	80028ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1aa      	bne.n	800280a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fcec 	bl	8003296 <I2C_WaitOnBTFFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d107      	bne.n	80028dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e016      	b.n	800290e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00100002 	.word	0x00100002
 800291c:	ffff0000 	.word	0xffff0000

08002920 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	4603      	mov	r3, r0
 8002930:	817b      	strh	r3, [r7, #10]
 8002932:	460b      	mov	r3, r1
 8002934:	813b      	strh	r3, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800293a:	f7ff f871 	bl	8001a20 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b20      	cmp	r3, #32
 800294a:	f040 8208 	bne.w	8002d5e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2319      	movs	r3, #25
 8002954:	2201      	movs	r2, #1
 8002956:	497b      	ldr	r1, [pc, #492]	; (8002b44 <HAL_I2C_Mem_Read+0x224>)
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fb85 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
 8002966:	e1fb      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Mem_Read+0x56>
 8002972:	2302      	movs	r3, #2
 8002974:	e1f4      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d007      	beq.n	800299c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2222      	movs	r2, #34	; 0x22
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a5b      	ldr	r2, [pc, #364]	; (8002b48 <HAL_I2C_Mem_Read+0x228>)
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029de:	88f8      	ldrh	r0, [r7, #6]
 80029e0:	893a      	ldrh	r2, [r7, #8]
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4603      	mov	r3, r0
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fa52 	bl	8002e98 <I2C_RequestMemoryRead>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1b0      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e184      	b.n	8002d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d11b      	bne.n	8002a6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e164      	b.n	8002d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d11b      	bne.n	8002aae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	e144      	b.n	8002d38 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ac4:	e138      	b.n	8002d38 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	f200 80f1 	bhi.w	8002cb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d123      	bne.n	8002b20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fc1b 	bl	8003318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e139      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b1e:	e10b      	b.n	8002d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d14e      	bne.n	8002bc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4906      	ldr	r1, [pc, #24]	; (8002b4c <HAL_I2C_Mem_Read+0x22c>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa98 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e10e      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
 8002b42:	bf00      	nop
 8002b44:	00100002 	.word	0x00100002
 8002b48:	ffff0000 	.word	0xffff0000
 8002b4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bc4:	e0b8      	b.n	8002d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4966      	ldr	r1, [pc, #408]	; (8002d68 <HAL_I2C_Mem_Read+0x448>)
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fa49 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0bf      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	2200      	movs	r2, #0
 8002c2a:	494f      	ldr	r1, [pc, #316]	; (8002d68 <HAL_I2C_Mem_Read+0x448>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fa1b 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e091      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cb0:	e042      	b.n	8002d38 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb2e 	bl	8003318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e04c      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d118      	bne.n	8002d38 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f aec2 	bne.w	8002ac6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	00010004 	.word	0x00010004

08002d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	817b      	strh	r3, [r7, #10]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	813b      	strh	r3, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f960 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbc:	d103      	bne.n	8002dc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e05f      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	6a3a      	ldr	r2, [r7, #32]
 8002dde:	492d      	ldr	r1, [pc, #180]	; (8002e94 <I2C_RequestMemoryWrite+0x128>)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f998 	bl	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e04c      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fa02 	bl	8003214 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d107      	bne.n	8002e2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e02b      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e38:	893b      	ldrh	r3, [r7, #8]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e021      	b.n	8002e88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e44:	893b      	ldrh	r3, [r7, #8]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f9dc 	bl	8003214 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d107      	bne.n	8002e7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e005      	b.n	8002e8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7e:	893b      	ldrh	r3, [r7, #8]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	00010002 	.word	0x00010002

08002e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	813b      	strh	r3, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8c2 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef8:	d103      	bne.n	8002f02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0aa      	b.n	800305c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	4952      	ldr	r1, [pc, #328]	; (8003064 <I2C_RequestMemoryRead+0x1cc>)
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f8fa 	bl	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e097      	b.n	800305c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	6a39      	ldr	r1, [r7, #32]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f964 	bl	8003214 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d107      	bne.n	8002f6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e076      	b.n	800305c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f74:	893b      	ldrh	r3, [r7, #8]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]
 8002f7e:	e021      	b.n	8002fc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f80:	893b      	ldrh	r3, [r7, #8]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f90:	6a39      	ldr	r1, [r7, #32]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f93e 	bl	8003214 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d107      	bne.n	8002fb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e050      	b.n	800305c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	6a39      	ldr	r1, [r7, #32]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f923 	bl	8003214 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00d      	beq.n	8002ff0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d107      	bne.n	8002fec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e035      	b.n	800305c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2200      	movs	r2, #0
 8003008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f82b 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003026:	d103      	bne.n	8003030 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e013      	b.n	800305c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003034:	897b      	ldrh	r3, [r7, #10]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	6a3a      	ldr	r2, [r7, #32]
 8003048:	4906      	ldr	r1, [pc, #24]	; (8003064 <I2C_RequestMemoryRead+0x1cc>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f863 	bl	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	00010002 	.word	0x00010002

08003068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003078:	e025      	b.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d021      	beq.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fccd 	bl	8001a20 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e023      	b.n	800310e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10d      	bne.n	80030ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	e00c      	b.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d0b6      	beq.n	800307a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003124:	e051      	b.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003134:	d123      	bne.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003144:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800314e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e046      	b.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d021      	beq.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe fc4b 	bl	8001a20 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e020      	b.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10c      	bne.n	80031ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	e00b      	b.n	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d18d      	bne.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003220:	e02d      	b.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f8ce 	bl	80033c4 <I2C_IsAcknowledgeFailed>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e02d      	b.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d021      	beq.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fbf1 	bl	8001a20 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e007      	b.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d1ca      	bne.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a2:	e02d      	b.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f88d 	bl	80033c4 <I2C_IsAcknowledgeFailed>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e02d      	b.n	8003310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d021      	beq.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032bc:	f7fe fbb0 	bl	8001a20 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d302      	bcc.n	80032d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d116      	bne.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d1ca      	bne.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003324:	e042      	b.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b10      	cmp	r3, #16
 8003332:	d119      	bne.n	8003368 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0210 	mvn.w	r2, #16
 800333c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e029      	b.n	80033bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003368:	f7fe fb5a 	bl	8001a20 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	d302      	bcc.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e007      	b.n	80033bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d1b5      	bne.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033da:	d11b      	bne.n	8003414 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e267      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d075      	beq.n	800352e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b04      	cmp	r3, #4
 800344c:	d00c      	beq.n	8003468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d112      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003466:	d10b      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	4b7e      	ldr	r3, [pc, #504]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05b      	beq.n	800352c <HAL_RCC_OscConfig+0x108>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d157      	bne.n	800352c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e242      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x74>
 800348a:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a75      	ldr	r2, [pc, #468]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e01d      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x98>
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6f      	ldr	r2, [pc, #444]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b6d      	ldr	r3, [pc, #436]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6c      	ldr	r2, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 80034bc:	4b69      	ldr	r3, [pc, #420]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a68      	ldr	r2, [pc, #416]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe faa0 	bl	8001a20 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fa9c 	bl	8001a20 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e207      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0xc0>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fa8c 	bl	8001a20 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fa88 	bl	8001a20 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e1f3      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0xe8>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d063      	beq.n	8003602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11c      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e1c7      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4937      	ldr	r1, [pc, #220]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	e03a      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_OscConfig+0x244>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fe fa41 	bl	8001a20 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fe fa3d 	bl	8001a20 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1a8      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4925      	ldr	r1, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]
 80035d4:	e015      	b.n	8003602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x244>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe fa20 	bl	8001a20 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fe fa1c 	bl	8001a20 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e187      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d036      	beq.n	800367c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_OscConfig+0x248>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fa00 	bl	8001a20 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe f9fc 	bl	8001a20 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e167      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x240>)
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x200>
 8003642:	e01b      	b.n	800367c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_OscConfig+0x248>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fe f9e9 	bl	8001a20 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	e00e      	b.n	8003670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003652:	f7fe f9e5 	bl	8001a20 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d907      	bls.n	8003670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e150      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
 8003664:	40023800 	.word	0x40023800
 8003668:	42470000 	.word	0x42470000
 800366c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ea      	bne.n	8003652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8097 	beq.w	80037b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368e:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	4b7d      	ldr	r3, [pc, #500]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a7c      	ldr	r2, [pc, #496]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b7a      	ldr	r3, [pc, #488]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b77      	ldr	r3, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c6:	4b74      	ldr	r3, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a73      	ldr	r2, [pc, #460]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fe f9a5 	bl	8001a20 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fe f9a1 	bl	8001a20 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e10c      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x474>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x2ea>
 8003700:	4b64      	ldr	r3, [pc, #400]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a63      	ldr	r2, [pc, #396]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	e01c      	b.n	8003748 <HAL_RCC_OscConfig+0x324>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x30c>
 8003716:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a5e      	ldr	r2, [pc, #376]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a5b      	ldr	r2, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0x324>
 8003730:	4b58      	ldr	r3, [pc, #352]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a57      	ldr	r2, [pc, #348]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a54      	ldr	r2, [pc, #336]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fe f966 	bl	8001a20 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fe f962 	bl	8001a20 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0cb      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ee      	beq.n	8003758 <HAL_RCC_OscConfig+0x334>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe f950 	bl	8001a20 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fe f94c 	bl	8001a20 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0b5      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ee      	bne.n	8003784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	4a38      	ldr	r2, [pc, #224]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a1 	beq.w	8003904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c2:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d05c      	beq.n	8003888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d141      	bne.n	800385a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_RCC_OscConfig+0x478>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe f920 	bl	8001a20 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe f91c 	bl	8001a20 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e087      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	491b      	ldr	r1, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x478>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fe f8f5 	bl	8001a20 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe f8f1 	bl	8001a20 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e05c      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x416>
 8003858:	e054      	b.n	8003904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_RCC_OscConfig+0x478>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe f8de 	bl	8001a20 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe f8da 	bl	8001a20 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e045      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCC_OscConfig+0x470>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x444>
 8003886:	e03d      	b.n	8003904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e038      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
 8003894:	40023800 	.word	0x40023800
 8003898:	40007000 	.word	0x40007000
 800389c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x4ec>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d028      	beq.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d121      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d11a      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d111      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cc      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b68      	ldr	r3, [pc, #416]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d90c      	bls.n	8003950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d044      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d119      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e067      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4934      	ldr	r1, [pc, #208]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe f80c 	bl	8001a20 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe f808 	bl	8001a20 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e04f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d20c      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd ff6c 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08008a18 	.word	0x08008a18
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	20000004 	.word	0x20000004

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b090      	sub	sp, #64	; 0x40
 8003ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
 8003aec:	2300      	movs	r3, #0
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af0:	2300      	movs	r3, #0
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d00d      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x40>
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	f200 80a1 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b12:	e09b      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b18:	e09b      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1a:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b1e:	e098      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b20:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b2a:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d028      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	627a      	str	r2, [r7, #36]	; 0x24
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b4c:	fb03 f201 	mul.w	r2, r3, r1
 8003b50:	2300      	movs	r3, #0
 8003b52:	fb00 f303 	mul.w	r3, r0, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	4a43      	ldr	r2, [pc, #268]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b60:	460a      	mov	r2, r1
 8003b62:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b66:	4413      	add	r3, r2
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	61fa      	str	r2, [r7, #28]
 8003b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b7a:	f7fc fbd9 	bl	8000330 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4613      	mov	r3, r2
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b86:	e053      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	2200      	movs	r2, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	617a      	str	r2, [r7, #20]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b9a:	f04f 0b00 	mov.w	fp, #0
 8003b9e:	4652      	mov	r2, sl
 8003ba0:	465b      	mov	r3, fp
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	0159      	lsls	r1, r3, #5
 8003bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb0:	0150      	lsls	r0, r2, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8003bba:	eb63 090b 	sbc.w	r9, r3, fp
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	00eb      	lsls	r3, r5, #3
 8003be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be8:	00e2      	lsls	r2, r4, #3
 8003bea:	4614      	mov	r4, r2
 8003bec:	461d      	mov	r5, r3
 8003bee:	eb14 030a 	adds.w	r3, r4, sl
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	eb45 030b 	adc.w	r3, r5, fp
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c06:	4629      	mov	r1, r5
 8003c08:	028b      	lsls	r3, r1, #10
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c10:	4621      	mov	r1, r4
 8003c12:	028a      	lsls	r2, r1, #10
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c24:	f7fc fb84 	bl	8000330 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3740      	adds	r7, #64	; 0x40
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	017d7840 	.word	0x017d7840

08003c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000000 	.word	0x20000000

08003c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c88:	f7ff fff0 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	08008a28 	.word	0x08008a28

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cb0:	f7ff ffdc 	bl	8003c6c <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0b5b      	lsrs	r3, r3, #13
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	08008a28 	.word	0x08008a28

08003cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e041      	b.n	8003d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fcfc 	bl	80016f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f000 fa2e 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d122      	bne.n	8003dce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d11b      	bne.n	8003dce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0202 	mvn.w	r2, #2
 8003d9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f9bf 	bl	8004138 <HAL_TIM_IC_CaptureCallback>
 8003dba:	e005      	b.n	8003dc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f9b1 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9c2 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d122      	bne.n	8003e22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d11b      	bne.n	8003e22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f06f 0204 	mvn.w	r2, #4
 8003df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f995 	bl	8004138 <HAL_TIM_IC_CaptureCallback>
 8003e0e:	e005      	b.n	8003e1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f987 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f998 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d122      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d11b      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f06f 0208 	mvn.w	r2, #8
 8003e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f96b 	bl	8004138 <HAL_TIM_IC_CaptureCallback>
 8003e62:	e005      	b.n	8003e70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f95d 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f96e 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d122      	bne.n	8003eca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d11b      	bne.n	8003eca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f06f 0210 	mvn.w	r2, #16
 8003e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f941 	bl	8004138 <HAL_TIM_IC_CaptureCallback>
 8003eb6:	e005      	b.n	8003ec4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f933 	bl	8004124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f944 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0201 	mvn.w	r2, #1
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f90d 	bl	8004110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fa4d 	bl	80043bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f909 	bl	8004160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0220 	mvn.w	r2, #32
 8003f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa17 	bl	80043a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_ConfigClockSource+0x1c>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e0b4      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x186>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd6:	d03e      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0xd4>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	f200 8087 	bhi.w	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe4:	f000 8086 	beq.w	80040f4 <HAL_TIM_ConfigClockSource+0x172>
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d87f      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003fee:	2b70      	cmp	r3, #112	; 0x70
 8003ff0:	d01a      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xa6>
 8003ff2:	2b70      	cmp	r3, #112	; 0x70
 8003ff4:	d87b      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003ff6:	2b60      	cmp	r3, #96	; 0x60
 8003ff8:	d050      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x11a>
 8003ffa:	2b60      	cmp	r3, #96	; 0x60
 8003ffc:	d877      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003ffe:	2b50      	cmp	r3, #80	; 0x50
 8004000:	d03c      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xfa>
 8004002:	2b50      	cmp	r3, #80	; 0x50
 8004004:	d873      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d058      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0x13a>
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d86f      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	2b30      	cmp	r3, #48	; 0x30
 8004010:	d064      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 8004012:	2b30      	cmp	r3, #48	; 0x30
 8004014:	d86b      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8004016:	2b20      	cmp	r3, #32
 8004018:	d060      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 800401a:	2b20      	cmp	r3, #32
 800401c:	d867      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d05c      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 8004022:	2b10      	cmp	r3, #16
 8004024:	d05a      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 8004026:	e062      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f000 f996 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800404a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]
      break;
 8004054:	e04f      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f000 f97f 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	609a      	str	r2, [r3, #8]
      break;
 800407a:	e03c      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	f000 f8f3 	bl	8004274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2150      	movs	r1, #80	; 0x50
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f94c 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 800409a:	e02c      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f000 f912 	bl	80042d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2160      	movs	r1, #96	; 0x60
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f93c 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 80040ba:	e01c      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f000 f8d3 	bl	8004274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2140      	movs	r1, #64	; 0x40
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f92c 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 80040da:	e00c      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 f923 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 80040ec:	e003      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
      break;
 80040f2:	e000      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a34      	ldr	r2, [pc, #208]	; (8004258 <TIM_Base_SetConfig+0xe4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00f      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d00b      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a31      	ldr	r2, [pc, #196]	; (800425c <TIM_Base_SetConfig+0xe8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a30      	ldr	r2, [pc, #192]	; (8004260 <TIM_Base_SetConfig+0xec>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0x38>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <TIM_Base_SetConfig+0xf0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d108      	bne.n	80041be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <TIM_Base_SetConfig+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <TIM_Base_SetConfig+0xe8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a21      	ldr	r2, [pc, #132]	; (8004260 <TIM_Base_SetConfig+0xec>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a20      	ldr	r2, [pc, #128]	; (8004264 <TIM_Base_SetConfig+0xf0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <TIM_Base_SetConfig+0xf4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1e      	ldr	r2, [pc, #120]	; (800426c <TIM_Base_SetConfig+0xf8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x8a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <TIM_Base_SetConfig+0xfc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <TIM_Base_SetConfig+0xe4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d103      	bne.n	8004244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	615a      	str	r2, [r3, #20]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40014000 	.word	0x40014000
 800426c:	40014400 	.word	0x40014400
 8004270:	40014800 	.word	0x40014800

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	f043 0307 	orr.w	r3, r3, #7
 8004354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e03f      	b.n	8004462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd f9bc 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f929 	bl	800466c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b08a      	sub	sp, #40	; 0x28
 800446e:	af02      	add	r7, sp, #8
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b20      	cmp	r3, #32
 8004488:	d17c      	bne.n	8004584 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_UART_Transmit+0x2c>
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e075      	b.n	8004586 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Transmit+0x3e>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e06e      	b.n	8004586 <HAL_UART_Transmit+0x11c>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2221      	movs	r2, #33	; 0x21
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044be:	f7fd faaf 	bl	8001a20 <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d108      	bne.n	80044ec <HAL_UART_Transmit+0x82>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e003      	b.n	80044f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044fc:	e02a      	b.n	8004554 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f840 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e036      	b.n	8004586 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800452c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	3302      	adds	r3, #2
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e007      	b.n	8004546 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3301      	adds	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1cf      	bne.n	80044fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f810 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e006      	b.n	8004586 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b090      	sub	sp, #64	; 0x40
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	e050      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d04c      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x30>
 80045ae:	f7fd fa37 	bl	8001a20 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d241      	bcs.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045de:	637a      	str	r2, [r7, #52]	; 0x34
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3314      	adds	r3, #20
 80045f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	613b      	str	r3, [r7, #16]
   return(result);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3314      	adds	r3, #20
 8004610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004612:	623a      	str	r2, [r7, #32]
 8004614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	69f9      	ldr	r1, [r7, #28]
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e00f      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	429a      	cmp	r2, r3
 800465e:	d09f      	beq.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3740      	adds	r7, #64	; 0x40
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800466c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004670:	b0c0      	sub	sp, #256	; 0x100
 8004672:	af00      	add	r7, sp, #0
 8004674:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	68d9      	ldr	r1, [r3, #12]
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	ea40 0301 	orr.w	r3, r0, r1
 8004694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046c4:	f021 010c 	bic.w	r1, r1, #12
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046d2:	430b      	orrs	r3, r1
 80046d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e6:	6999      	ldr	r1, [r3, #24]
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	ea40 0301 	orr.w	r3, r0, r1
 80046f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <UART_SetConfig+0x2cc>)
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d005      	beq.n	800470c <UART_SetConfig+0xa0>
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b8d      	ldr	r3, [pc, #564]	; (800493c <UART_SetConfig+0x2d0>)
 8004708:	429a      	cmp	r2, r3
 800470a:	d104      	bne.n	8004716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800470c:	f7ff face 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8004710:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004714:	e003      	b.n	800471e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004716:	f7ff fab5 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 800471a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004728:	f040 810c 	bne.w	8004944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800472c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004730:	2200      	movs	r2, #0
 8004732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004736:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800473a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800473e:	4622      	mov	r2, r4
 8004740:	462b      	mov	r3, r5
 8004742:	1891      	adds	r1, r2, r2
 8004744:	65b9      	str	r1, [r7, #88]	; 0x58
 8004746:	415b      	adcs	r3, r3
 8004748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800474a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800474e:	4621      	mov	r1, r4
 8004750:	eb12 0801 	adds.w	r8, r2, r1
 8004754:	4629      	mov	r1, r5
 8004756:	eb43 0901 	adc.w	r9, r3, r1
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800476a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800476e:	4690      	mov	r8, r2
 8004770:	4699      	mov	r9, r3
 8004772:	4623      	mov	r3, r4
 8004774:	eb18 0303 	adds.w	r3, r8, r3
 8004778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800477c:	462b      	mov	r3, r5
 800477e:	eb49 0303 	adc.w	r3, r9, r3
 8004782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004792:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800479a:	460b      	mov	r3, r1
 800479c:	18db      	adds	r3, r3, r3
 800479e:	653b      	str	r3, [r7, #80]	; 0x50
 80047a0:	4613      	mov	r3, r2
 80047a2:	eb42 0303 	adc.w	r3, r2, r3
 80047a6:	657b      	str	r3, [r7, #84]	; 0x54
 80047a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047b0:	f7fb fdbe 	bl	8000330 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4b61      	ldr	r3, [pc, #388]	; (8004940 <UART_SetConfig+0x2d4>)
 80047ba:	fba3 2302 	umull	r2, r3, r3, r2
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	011c      	lsls	r4, r3, #4
 80047c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047d4:	4642      	mov	r2, r8
 80047d6:	464b      	mov	r3, r9
 80047d8:	1891      	adds	r1, r2, r2
 80047da:	64b9      	str	r1, [r7, #72]	; 0x48
 80047dc:	415b      	adcs	r3, r3
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047e4:	4641      	mov	r1, r8
 80047e6:	eb12 0a01 	adds.w	sl, r2, r1
 80047ea:	4649      	mov	r1, r9
 80047ec:	eb43 0b01 	adc.w	fp, r3, r1
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004804:	4692      	mov	sl, r2
 8004806:	469b      	mov	fp, r3
 8004808:	4643      	mov	r3, r8
 800480a:	eb1a 0303 	adds.w	r3, sl, r3
 800480e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004812:	464b      	mov	r3, r9
 8004814:	eb4b 0303 	adc.w	r3, fp, r3
 8004818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004828:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800482c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004830:	460b      	mov	r3, r1
 8004832:	18db      	adds	r3, r3, r3
 8004834:	643b      	str	r3, [r7, #64]	; 0x40
 8004836:	4613      	mov	r3, r2
 8004838:	eb42 0303 	adc.w	r3, r2, r3
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
 800483e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004846:	f7fb fd73 	bl	8000330 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4611      	mov	r1, r2
 8004850:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <UART_SetConfig+0x2d4>)
 8004852:	fba3 2301 	umull	r2, r3, r3, r1
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2264      	movs	r2, #100	; 0x64
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	1acb      	subs	r3, r1, r3
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004866:	4b36      	ldr	r3, [pc, #216]	; (8004940 <UART_SetConfig+0x2d4>)
 8004868:	fba3 2302 	umull	r2, r3, r3, r2
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004874:	441c      	add	r4, r3
 8004876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487a:	2200      	movs	r2, #0
 800487c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004880:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004888:	4642      	mov	r2, r8
 800488a:	464b      	mov	r3, r9
 800488c:	1891      	adds	r1, r2, r2
 800488e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004890:	415b      	adcs	r3, r3
 8004892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004898:	4641      	mov	r1, r8
 800489a:	1851      	adds	r1, r2, r1
 800489c:	6339      	str	r1, [r7, #48]	; 0x30
 800489e:	4649      	mov	r1, r9
 80048a0:	414b      	adcs	r3, r1
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048b0:	4659      	mov	r1, fp
 80048b2:	00cb      	lsls	r3, r1, #3
 80048b4:	4651      	mov	r1, sl
 80048b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ba:	4651      	mov	r1, sl
 80048bc:	00ca      	lsls	r2, r1, #3
 80048be:	4610      	mov	r0, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	4642      	mov	r2, r8
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048cc:	464b      	mov	r3, r9
 80048ce:	460a      	mov	r2, r1
 80048d0:	eb42 0303 	adc.w	r3, r2, r3
 80048d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048ec:	460b      	mov	r3, r1
 80048ee:	18db      	adds	r3, r3, r3
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f2:	4613      	mov	r3, r2
 80048f4:	eb42 0303 	adc.w	r3, r2, r3
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004902:	f7fb fd15 	bl	8000330 <__aeabi_uldivmod>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <UART_SetConfig+0x2d4>)
 800490c:	fba3 1302 	umull	r1, r3, r3, r2
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	2164      	movs	r1, #100	; 0x64
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	3332      	adds	r3, #50	; 0x32
 800491e:	4a08      	ldr	r2, [pc, #32]	; (8004940 <UART_SetConfig+0x2d4>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	f003 0207 	and.w	r2, r3, #7
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4422      	add	r2, r4
 8004932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004934:	e105      	b.n	8004b42 <UART_SetConfig+0x4d6>
 8004936:	bf00      	nop
 8004938:	40011000 	.word	0x40011000
 800493c:	40011400 	.word	0x40011400
 8004940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004948:	2200      	movs	r2, #0
 800494a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800494e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004956:	4642      	mov	r2, r8
 8004958:	464b      	mov	r3, r9
 800495a:	1891      	adds	r1, r2, r2
 800495c:	6239      	str	r1, [r7, #32]
 800495e:	415b      	adcs	r3, r3
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004966:	4641      	mov	r1, r8
 8004968:	1854      	adds	r4, r2, r1
 800496a:	4649      	mov	r1, r9
 800496c:	eb43 0501 	adc.w	r5, r3, r1
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	00eb      	lsls	r3, r5, #3
 800497a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800497e:	00e2      	lsls	r2, r4, #3
 8004980:	4614      	mov	r4, r2
 8004982:	461d      	mov	r5, r3
 8004984:	4643      	mov	r3, r8
 8004986:	18e3      	adds	r3, r4, r3
 8004988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800498c:	464b      	mov	r3, r9
 800498e:	eb45 0303 	adc.w	r3, r5, r3
 8004992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049b2:	4629      	mov	r1, r5
 80049b4:	008b      	lsls	r3, r1, #2
 80049b6:	4621      	mov	r1, r4
 80049b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049bc:	4621      	mov	r1, r4
 80049be:	008a      	lsls	r2, r1, #2
 80049c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049c4:	f7fb fcb4 	bl	8000330 <__aeabi_uldivmod>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4b60      	ldr	r3, [pc, #384]	; (8004b50 <UART_SetConfig+0x4e4>)
 80049ce:	fba3 2302 	umull	r2, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	011c      	lsls	r4, r3, #4
 80049d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049e8:	4642      	mov	r2, r8
 80049ea:	464b      	mov	r3, r9
 80049ec:	1891      	adds	r1, r2, r2
 80049ee:	61b9      	str	r1, [r7, #24]
 80049f0:	415b      	adcs	r3, r3
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f8:	4641      	mov	r1, r8
 80049fa:	1851      	adds	r1, r2, r1
 80049fc:	6139      	str	r1, [r7, #16]
 80049fe:	4649      	mov	r1, r9
 8004a00:	414b      	adcs	r3, r1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a10:	4659      	mov	r1, fp
 8004a12:	00cb      	lsls	r3, r1, #3
 8004a14:	4651      	mov	r1, sl
 8004a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	00ca      	lsls	r2, r1, #3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	4603      	mov	r3, r0
 8004a24:	4642      	mov	r2, r8
 8004a26:	189b      	adds	r3, r3, r2
 8004a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	460a      	mov	r2, r1
 8004a30:	eb42 0303 	adc.w	r3, r2, r3
 8004a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a50:	4649      	mov	r1, r9
 8004a52:	008b      	lsls	r3, r1, #2
 8004a54:	4641      	mov	r1, r8
 8004a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a5a:	4641      	mov	r1, r8
 8004a5c:	008a      	lsls	r2, r1, #2
 8004a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a62:	f7fb fc65 	bl	8000330 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <UART_SetConfig+0x4e4>)
 8004a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	2164      	movs	r1, #100	; 0x64
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	3332      	adds	r3, #50	; 0x32
 8004a7e:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <UART_SetConfig+0x4e4>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a8a:	441c      	add	r4, r3
 8004a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a90:	2200      	movs	r2, #0
 8004a92:	673b      	str	r3, [r7, #112]	; 0x70
 8004a94:	677a      	str	r2, [r7, #116]	; 0x74
 8004a96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a9a:	4642      	mov	r2, r8
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aaa:	4641      	mov	r1, r8
 8004aac:	1851      	adds	r1, r2, r1
 8004aae:	6039      	str	r1, [r7, #0]
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	414b      	adcs	r3, r1
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	00cb      	lsls	r3, r1, #3
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004acc:	4651      	mov	r1, sl
 8004ace:	00ca      	lsls	r2, r1, #3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	189b      	adds	r3, r3, r2
 8004ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8004adc:	464b      	mov	r3, r9
 8004ade:	460a      	mov	r2, r1
 8004ae0:	eb42 0303 	adc.w	r3, r2, r3
 8004ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	663b      	str	r3, [r7, #96]	; 0x60
 8004af0:	667a      	str	r2, [r7, #100]	; 0x64
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004afe:	4649      	mov	r1, r9
 8004b00:	008b      	lsls	r3, r1, #2
 8004b02:	4641      	mov	r1, r8
 8004b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b08:	4641      	mov	r1, r8
 8004b0a:	008a      	lsls	r2, r1, #2
 8004b0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b10:	f7fb fc0e 	bl	8000330 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <UART_SetConfig+0x4e4>)
 8004b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2164      	movs	r1, #100	; 0x64
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	3332      	adds	r3, #50	; 0x32
 8004b2c:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <UART_SetConfig+0x4e4>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	f003 020f 	and.w	r2, r3, #15
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4422      	add	r2, r4
 8004b40:	609a      	str	r2, [r3, #8]
}
 8004b42:	bf00      	nop
 8004b44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4e:	bf00      	nop
 8004b50:	51eb851f 	.word	0x51eb851f

08004b54 <__NVIC_SetPriority>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db0a      	blt.n	8004b7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	490c      	ldr	r1, [pc, #48]	; (8004ba0 <__NVIC_SetPriority+0x4c>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	0112      	lsls	r2, r2, #4
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	440b      	add	r3, r1
 8004b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b7c:	e00a      	b.n	8004b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4908      	ldr	r1, [pc, #32]	; (8004ba4 <__NVIC_SetPriority+0x50>)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	3b04      	subs	r3, #4
 8004b8c:	0112      	lsls	r2, r2, #4
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	440b      	add	r3, r1
 8004b92:	761a      	strb	r2, [r3, #24]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000e100 	.word	0xe000e100
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bac:	2100      	movs	r1, #0
 8004bae:	f06f 0004 	mvn.w	r0, #4
 8004bb2:	f7ff ffcf 	bl	8004b54 <__NVIC_SetPriority>
#endif
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc2:	f3ef 8305 	mrs	r3, IPSR
 8004bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8004bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004bce:	f06f 0305 	mvn.w	r3, #5
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	e00c      	b.n	8004bf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <osKernelInitialize+0x44>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d105      	bne.n	8004bea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <osKernelInitialize+0x44>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	e002      	b.n	8004bf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bf0:	687b      	ldr	r3, [r7, #4]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	2000030c 	.word	0x2000030c

08004c04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0a:	f3ef 8305 	mrs	r3, IPSR
 8004c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c16:	f06f 0305 	mvn.w	r3, #5
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	e010      	b.n	8004c40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <osKernelStart+0x48>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d109      	bne.n	8004c3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c26:	f7ff ffbf 	bl	8004ba8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <osKernelStart+0x48>)
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c30:	f001 fc7a 	bl	8006528 <vTaskStartScheduler>
      stat = osOK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	e002      	b.n	8004c40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c40:	687b      	ldr	r3, [r7, #4]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000030c 	.word	0x2000030c

08004c50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08e      	sub	sp, #56	; 0x38
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c60:	f3ef 8305 	mrs	r3, IPSR
 8004c64:	617b      	str	r3, [r7, #20]
  return(result);
 8004c66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d17e      	bne.n	8004d6a <osThreadNew+0x11a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d07b      	beq.n	8004d6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c72:	2380      	movs	r3, #128	; 0x80
 8004c74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c76:	2318      	movs	r3, #24
 8004c78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d045      	beq.n	8004d16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <osThreadNew+0x48>
        name = attr->name;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <osThreadNew+0x6e>
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b38      	cmp	r3, #56	; 0x38
 8004cb0:	d805      	bhi.n	8004cbe <osThreadNew+0x6e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <osThreadNew+0x72>
        return (NULL);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e054      	b.n	8004d6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <osThreadNew+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2bbb      	cmp	r3, #187	; 0xbb
 8004ce0:	d90a      	bls.n	8004cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d006      	beq.n	8004cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <osThreadNew+0xa8>
        mem = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	e010      	b.n	8004d1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10c      	bne.n	8004d1a <osThreadNew+0xca>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d108      	bne.n	8004d1a <osThreadNew+0xca>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <osThreadNew+0xca>
          mem = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e001      	b.n	8004d1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d110      	bne.n	8004d42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d28:	9202      	str	r2, [sp, #8]
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f001 fa0a 	bl	8006150 <xTaskCreateStatic>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	e013      	b.n	8004d6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d110      	bne.n	8004d6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f001 fa55 	bl	800620a <xTaskCreate>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d001      	beq.n	8004d6a <osThreadNew+0x11a>
            hTask = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d6a:	693b      	ldr	r3, [r7, #16]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3728      	adds	r7, #40	; 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7c:	f3ef 8305 	mrs	r3, IPSR
 8004d80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <osDelay+0x1c>
    stat = osErrorISR;
 8004d88:	f06f 0305 	mvn.w	r3, #5
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	e007      	b.n	8004da0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 fb90 	bl	80064c0 <vTaskDelay>
    }
  }

  return (stat);
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b088      	sub	sp, #32
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db6:	f3ef 8305 	mrs	r3, IPSR
 8004dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dbc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d174      	bne.n	8004eac <osMutexNew+0x102>
    if (attr != NULL) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	e001      	b.n	8004dd4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <osMutexNew+0x3a>
      rmtx = 1U;
 8004dde:	2301      	movs	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e001      	b.n	8004de8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d15c      	bne.n	8004eac <osMutexNew+0x102>
      mem = -1;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d015      	beq.n	8004e2a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <osMutexNew+0x6a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b4f      	cmp	r3, #79	; 0x4f
 8004e0c:	d902      	bls.n	8004e14 <osMutexNew+0x6a>
          mem = 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	e00c      	b.n	8004e2e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d108      	bne.n	8004e2e <osMutexNew+0x84>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <osMutexNew+0x84>
            mem = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e001      	b.n	8004e2e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d112      	bne.n	8004e5a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	2004      	movs	r0, #4
 8004e42:	f000 fc4a 	bl	80056da <xQueueCreateMutexStatic>
 8004e46:	61f8      	str	r0, [r7, #28]
 8004e48:	e016      	b.n	8004e78 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	2001      	movs	r0, #1
 8004e52:	f000 fc42 	bl	80056da <xQueueCreateMutexStatic>
 8004e56:	61f8      	str	r0, [r7, #28]
 8004e58:	e00e      	b.n	8004e78 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004e66:	2004      	movs	r0, #4
 8004e68:	f000 fc1f 	bl	80056aa <xQueueCreateMutex>
 8004e6c:	61f8      	str	r0, [r7, #28]
 8004e6e:	e003      	b.n	8004e78 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004e70:	2001      	movs	r0, #1
 8004e72:	f000 fc1a 	bl	80056aa <xQueueCreateMutex>
 8004e76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <osMutexNew+0xee>
        if (attr != NULL) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <osMutexNew+0xe2>
          name = attr->name;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e001      	b.n	8004e90 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	69f8      	ldr	r0, [r7, #28]
 8004e94:	f001 f8d4 	bl	8006040 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <osMutexNew+0x102>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b08a      	sub	sp, #40	; 0x28
 8004eba:	af02      	add	r7, sp, #8
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec6:	f3ef 8305 	mrs	r3, IPSR
 8004eca:	613b      	str	r3, [r7, #16]
  return(result);
 8004ecc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d175      	bne.n	8004fbe <osSemaphoreNew+0x108>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d072      	beq.n	8004fbe <osSemaphoreNew+0x108>
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d86e      	bhi.n	8004fbe <osSemaphoreNew+0x108>
    mem = -1;
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d006      	beq.n	8004f02 <osSemaphoreNew+0x4c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b4f      	cmp	r3, #79	; 0x4f
 8004efa:	d902      	bls.n	8004f02 <osSemaphoreNew+0x4c>
        mem = 1;
 8004efc:	2301      	movs	r3, #1
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e00c      	b.n	8004f1c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <osSemaphoreNew+0x66>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <osSemaphoreNew+0x66>
          mem = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e001      	b.n	8004f1c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d04c      	beq.n	8004fbe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d128      	bne.n	8004f7c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10a      	bne.n	8004f46 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2203      	movs	r2, #3
 8004f36:	9200      	str	r2, [sp, #0]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f000 fac5 	bl	80054cc <xQueueGenericCreateStatic>
 8004f42:	61f8      	str	r0, [r7, #28]
 8004f44:	e005      	b.n	8004f52 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004f46:	2203      	movs	r2, #3
 8004f48:	2100      	movs	r1, #0
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 fb36 	bl	80055bc <xQueueGenericCreate>
 8004f50:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d022      	beq.n	8004f9e <osSemaphoreNew+0xe8>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01f      	beq.n	8004f9e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2200      	movs	r2, #0
 8004f62:	2100      	movs	r1, #0
 8004f64:	69f8      	ldr	r0, [r7, #28]
 8004f66:	f000 fc3d 	bl	80057e4 <xQueueGenericSend>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d016      	beq.n	8004f9e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004f70:	69f8      	ldr	r0, [r7, #28]
 8004f72:	f000 ff31 	bl	8005dd8 <vQueueDelete>
            hSemaphore = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e010      	b.n	8004f9e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d108      	bne.n	8004f94 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fbc0 	bl	8005710 <xQueueCreateCountingSemaphoreStatic>
 8004f90:	61f8      	str	r0, [r7, #28]
 8004f92:	e004      	b.n	8004f9e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fbf1 	bl	800577e <xQueueCreateCountingSemaphore>
 8004f9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	e001      	b.n	8004fb6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	69f8      	ldr	r0, [r7, #28]
 8004fba:	f001 f841 	bl	8006040 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004fbe:	69fb      	ldr	r3, [r7, #28]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd8:	f3ef 8305 	mrs	r3, IPSR
 8004fdc:	613b      	str	r3, [r7, #16]
  return(result);
 8004fde:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d15f      	bne.n	80050a4 <osMessageQueueNew+0xdc>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d05c      	beq.n	80050a4 <osMessageQueueNew+0xdc>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d059      	beq.n	80050a4 <osMessageQueueNew+0xdc>
    mem = -1;
 8004ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d029      	beq.n	8005050 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d012      	beq.n	800502a <osMessageQueueNew+0x62>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b4f      	cmp	r3, #79	; 0x4f
 800500a:	d90e      	bls.n	800502a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <osMessageQueueNew+0x62>
        mem = 1;
 8005024:	2301      	movs	r3, #1
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	e014      	b.n	8005054 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d110      	bne.n	8005054 <osMessageQueueNew+0x8c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10c      	bne.n	8005054 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800503e:	2b00      	cmp	r3, #0
 8005040:	d108      	bne.n	8005054 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <osMessageQueueNew+0x8c>
          mem = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e001      	b.n	8005054 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d10b      	bne.n	8005072 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2100      	movs	r1, #0
 8005064:	9100      	str	r1, [sp, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fa2f 	bl	80054cc <xQueueGenericCreateStatic>
 800506e:	61f8      	str	r0, [r7, #28]
 8005070:	e008      	b.n	8005084 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005078:	2200      	movs	r2, #0
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fa9d 	bl	80055bc <xQueueGenericCreate>
 8005082:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00c      	beq.n	80050a4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e001      	b.n	800509c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800509c:	6979      	ldr	r1, [r7, #20]
 800509e:	69f8      	ldr	r0, [r7, #28]
 80050a0:	f000 ffce 	bl	8006040 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80050a4:	69fb      	ldr	r3, [r7, #28]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c8:	f3ef 8305 	mrs	r3, IPSR
 80050cc:	617b      	str	r3, [r7, #20]
  return(result);
 80050ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d028      	beq.n	8005126 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <osMessageQueuePut+0x36>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <osMessageQueuePut+0x36>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80050e6:	f06f 0303 	mvn.w	r3, #3
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	e038      	b.n	8005160 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80050f2:	f107 0210 	add.w	r2, r7, #16
 80050f6:	2300      	movs	r3, #0
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	69b8      	ldr	r0, [r7, #24]
 80050fc:	f000 fc70 	bl	80059e0 <xQueueGenericSendFromISR>
 8005100:	4603      	mov	r3, r0
 8005102:	2b01      	cmp	r3, #1
 8005104:	d003      	beq.n	800510e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005106:	f06f 0302 	mvn.w	r3, #2
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e028      	b.n	8005160 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d025      	beq.n	8005160 <osMessageQueuePut+0xb0>
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <osMessageQueuePut+0xbc>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	e01c      	b.n	8005160 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <osMessageQueuePut+0x82>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005132:	f06f 0303 	mvn.w	r3, #3
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	e012      	b.n	8005160 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800513a:	2300      	movs	r3, #0
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	69b8      	ldr	r0, [r7, #24]
 8005142:	f000 fb4f 	bl	80057e4 <xQueueGenericSend>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d009      	beq.n	8005160 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005152:	f06f 0301 	mvn.w	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e002      	b.n	8005160 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800515a:	f06f 0302 	mvn.w	r3, #2
 800515e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005160:	69fb      	ldr	r3, [r7, #28]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005186:	f3ef 8305 	mrs	r3, IPSR
 800518a:	617b      	str	r3, [r7, #20]
  return(result);
 800518c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800518e:	2b00      	cmp	r3, #0
 8005190:	d028      	beq.n	80051e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <osMessageQueueGet+0x34>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <osMessageQueueGet+0x34>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80051a4:	f06f 0303 	mvn.w	r3, #3
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e037      	b.n	800521c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80051b0:	f107 0310 	add.w	r3, r7, #16
 80051b4:	461a      	mov	r2, r3
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	69b8      	ldr	r0, [r7, #24]
 80051ba:	f000 fd8d 	bl	8005cd8 <xQueueReceiveFromISR>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d003      	beq.n	80051cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80051c4:	f06f 0302 	mvn.w	r3, #2
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	e027      	b.n	800521c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d024      	beq.n	800521c <osMessageQueueGet+0xac>
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <osMessageQueueGet+0xb8>)
 80051d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	e01b      	b.n	800521c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <osMessageQueueGet+0x80>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80051f0:	f06f 0303 	mvn.w	r3, #3
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e011      	b.n	800521c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	69b8      	ldr	r0, [r7, #24]
 80051fe:	f000 fc8b 	bl	8005b18 <xQueueReceive>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	d009      	beq.n	800521c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800520e:	f06f 0301 	mvn.w	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e002      	b.n	800521c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005216:	f06f 0302 	mvn.w	r3, #2
 800521a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800521c:	69fb      	ldr	r3, [r7, #28]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a07      	ldr	r2, [pc, #28]	; (8005258 <vApplicationGetIdleTaskMemory+0x2c>)
 800523c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4a06      	ldr	r2, [pc, #24]	; (800525c <vApplicationGetIdleTaskMemory+0x30>)
 8005242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2280      	movs	r2, #128	; 0x80
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000310 	.word	0x20000310
 800525c:	200003cc 	.word	0x200003cc

08005260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a07      	ldr	r2, [pc, #28]	; (800528c <vApplicationGetTimerTaskMemory+0x2c>)
 8005270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4a06      	ldr	r2, [pc, #24]	; (8005290 <vApplicationGetTimerTaskMemory+0x30>)
 8005276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800527e:	601a      	str	r2, [r3, #0]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	200005cc 	.word	0x200005cc
 8005290:	20000688 	.word	0x20000688

08005294 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 0208 	add.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f103 0208 	add.w	r2, r3, #8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f103 0208 	add.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d103      	bne.n	8005356 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e00c      	b.n	8005370 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3308      	adds	r3, #8
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e002      	b.n	8005364 <vListInsert+0x2e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d2f6      	bcs.n	800535e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]
}
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6892      	ldr	r2, [r2, #8]
 80053be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6852      	ldr	r2, [r2, #4]
 80053c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d103      	bne.n	80053dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005426:	f002 fa35 	bl	8007894 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	441a      	add	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	3b01      	subs	r3, #1
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	441a      	add	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	22ff      	movs	r2, #255	; 0xff
 800546a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	22ff      	movs	r2, #255	; 0xff
 8005472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d114      	bne.n	80054a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01a      	beq.n	80054ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3310      	adds	r3, #16
 8005488:	4618      	mov	r0, r3
 800548a:	f001 fae7 	bl	8006a5c <xTaskRemoveFromEventList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <xQueueGenericReset+0xcc>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	e009      	b.n	80054ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3310      	adds	r3, #16
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fef2 	bl	8005294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3324      	adds	r3, #36	; 0x24
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff feed 	bl	8005294 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054ba:	f002 fa1b 	bl	80078f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054be:	2301      	movs	r3, #1
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	; 0x38
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <xQueueGenericCreateStatic+0x52>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <xQueueGenericCreateStatic+0x56>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <xQueueGenericCreateStatic+0x58>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	623b      	str	r3, [r7, #32]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <xQueueGenericCreateStatic+0x7e>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <xQueueGenericCreateStatic+0x82>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <xQueueGenericCreateStatic+0x84>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61fb      	str	r3, [r7, #28]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800556a:	2350      	movs	r3, #80	; 0x50
 800556c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b50      	cmp	r3, #80	; 0x50
 8005572:	d00a      	beq.n	800558a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	61bb      	str	r3, [r7, #24]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800558a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00d      	beq.n	80055b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800559e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f83f 	bl	8005630 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3730      	adds	r7, #48	; 0x30
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	3350      	adds	r3, #80	; 0x50
 80055f4:	4618      	mov	r0, r3
 80055f6:	f002 fa6f 	bl	8007ad8 <pvPortMalloc>
 80055fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d011      	beq.n	8005626 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	3350      	adds	r3, #80	; 0x50
 800560a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005614:	79fa      	ldrb	r2, [r7, #7]
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	4613      	mov	r3, r2
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f805 	bl	8005630 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005626:	69bb      	ldr	r3, [r7, #24]
	}
 8005628:	4618      	mov	r0, r3
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e002      	b.n	8005652 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800565e:	2101      	movs	r1, #1
 8005660:	69b8      	ldr	r0, [r7, #24]
 8005662:	f7ff fecb 	bl	80053fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00e      	beq.n	80056a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005696:	2300      	movs	r3, #0
 8005698:	2200      	movs	r2, #0
 800569a:	2100      	movs	r1, #0
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8a1 	bl	80057e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	4603      	mov	r3, r0
 80056b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056b4:	2301      	movs	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	461a      	mov	r2, r3
 80056c0:	6939      	ldr	r1, [r7, #16]
 80056c2:	6978      	ldr	r0, [r7, #20]
 80056c4:	f7ff ff7a 	bl	80055bc <xQueueGenericCreate>
 80056c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff ffd3 	bl	8005676 <prvInitialiseMutex>

		return xNewQueue;
 80056d0:	68fb      	ldr	r3, [r7, #12]
	}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b088      	sub	sp, #32
 80056de:	af02      	add	r7, sp, #8
 80056e0:	4603      	mov	r3, r0
 80056e2:	6039      	str	r1, [r7, #0]
 80056e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056e6:	2301      	movs	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2200      	movs	r2, #0
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	6978      	ldr	r0, [r7, #20]
 80056fa:	f7ff fee7 	bl	80054cc <xQueueGenericCreateStatic>
 80056fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ffb8 	bl	8005676 <prvInitialiseMutex>

		return xNewQueue;
 8005706:	68fb      	ldr	r3, [r7, #12]
	}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61bb      	str	r3, [r7, #24]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	429a      	cmp	r2, r3
 800573e:	d90a      	bls.n	8005756 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	617b      	str	r3, [r7, #20]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005756:	2302      	movs	r3, #2
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	2100      	movs	r1, #0
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff feb3 	bl	80054cc <xQueueGenericCreateStatic>
 8005766:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005774:	69fb      	ldr	r3, [r7, #28]
	}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	613b      	str	r3, [r7, #16]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d90a      	bls.n	80057c2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60fb      	str	r3, [r7, #12]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057c2:	2202      	movs	r2, #2
 80057c4:	2100      	movs	r1, #0
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fef8 	bl	80055bc <xQueueGenericCreate>
 80057cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057da:	697b      	ldr	r3, [r7, #20]
	}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08e      	sub	sp, #56	; 0x38
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xQueueGenericSend+0x32>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <xQueueGenericSend+0x40>
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <xQueueGenericSend+0x44>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <xQueueGenericSend+0x46>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <xQueueGenericSend+0x60>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d103      	bne.n	8005852 <xQueueGenericSend+0x6e>
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <xQueueGenericSend+0x72>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <xQueueGenericSend+0x74>
 8005856:	2300      	movs	r3, #0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <xQueueGenericSend+0x8e>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	623b      	str	r3, [r7, #32]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005872:	f001 fab5 	bl	8006de0 <xTaskGetSchedulerState>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <xQueueGenericSend+0x9e>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <xQueueGenericSend+0xa2>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <xQueueGenericSend+0xa4>
 8005886:	2300      	movs	r3, #0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	61fb      	str	r3, [r7, #28]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058a2:	f001 fff7 	bl	8007894 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <xQueueGenericSend+0xd4>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d129      	bne.n	800590c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058be:	f000 faae 	bl	8005e1e <prvCopyDataToQueue>
 80058c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d010      	beq.n	80058ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	3324      	adds	r3, #36	; 0x24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 f8c3 	bl	8006a5c <xTaskRemoveFromEventList>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d013      	beq.n	8005904 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058dc:	4b3f      	ldr	r3, [pc, #252]	; (80059dc <xQueueGenericSend+0x1f8>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	e00a      	b.n	8005904 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058f4:	4b39      	ldr	r3, [pc, #228]	; (80059dc <xQueueGenericSend+0x1f8>)
 80058f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005904:	f001 fff6 	bl	80078f4 <vPortExitCritical>
				return pdPASS;
 8005908:	2301      	movs	r3, #1
 800590a:	e063      	b.n	80059d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005912:	f001 ffef 	bl	80078f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005916:	2300      	movs	r3, #0
 8005918:	e05c      	b.n	80059d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	4618      	mov	r0, r3
 8005926:	f001 f8fd 	bl	8006b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800592a:	2301      	movs	r3, #1
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800592e:	f001 ffe1 	bl	80078f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005932:	f000 fe69 	bl	8006608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005936:	f001 ffad 	bl	8007894 <vPortEnterCritical>
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005940:	b25b      	sxtb	r3, r3
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d103      	bne.n	8005950 <xQueueGenericSend+0x16c>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005956:	b25b      	sxtb	r3, r3
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d103      	bne.n	8005966 <xQueueGenericSend+0x182>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005966:	f001 ffc5 	bl	80078f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800596a:	1d3a      	adds	r2, r7, #4
 800596c:	f107 0314 	add.w	r3, r7, #20
 8005970:	4611      	mov	r1, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f001 f8ec 	bl	8006b50 <xTaskCheckForTimeOut>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d124      	bne.n	80059c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800597e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005980:	f000 fb45 	bl	800600e <prvIsQueueFull>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	3310      	adds	r3, #16
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f001 f812 	bl	80069bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800599a:	f000 fad0 	bl	8005f3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800599e:	f000 fe41 	bl	8006624 <xTaskResumeAll>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f47f af7c 	bne.w	80058a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <xQueueGenericSend+0x1f8>)
 80059ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	e772      	b.n	80058a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059be:	f000 fabe 	bl	8005f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059c2:	f000 fe2f 	bl	8006624 <xTaskResumeAll>
 80059c6:	e76c      	b.n	80058a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ca:	f000 fab8 	bl	8005f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ce:	f000 fe29 	bl	8006624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3738      	adds	r7, #56	; 0x38
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b090      	sub	sp, #64	; 0x40
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <xQueueGenericSendFromISR+0x3c>
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <xQueueGenericSendFromISR+0x40>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <xQueueGenericSendFromISR+0x42>
 8005a20:	2300      	movs	r3, #0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d103      	bne.n	8005a4a <xQueueGenericSendFromISR+0x6a>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <xQueueGenericSendFromISR+0x6e>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <xQueueGenericSendFromISR+0x70>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	623b      	str	r3, [r7, #32]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a6a:	f001 fff5 	bl	8007a58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	61fa      	str	r2, [r7, #28]
 8005a84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <xQueueGenericSendFromISR+0xbc>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d12f      	bne.n	8005afc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ab2:	f000 f9b4 	bl	8005e1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ab6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d112      	bne.n	8005ae6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d016      	beq.n	8005af6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	3324      	adds	r3, #36	; 0x24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 ffc5 	bl	8006a5c <xTaskRemoveFromEventList>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e007      	b.n	8005af6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005aea:	3301      	adds	r3, #1
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	b25a      	sxtb	r2, r3
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005af6:	2301      	movs	r3, #1
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005afa:	e001      	b.n	8005b00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3740      	adds	r7, #64	; 0x40
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	; 0x30
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <xQueueReceive+0x30>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	623b      	str	r3, [r7, #32]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <xQueueReceive+0x3e>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <xQueueReceive+0x42>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <xQueueReceive+0x44>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xQueueReceive+0x5e>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	61fb      	str	r3, [r7, #28]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b76:	f001 f933 	bl	8006de0 <xTaskGetSchedulerState>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <xQueueReceive+0x6e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <xQueueReceive+0x72>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueReceive+0x74>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueReceive+0x8e>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	61bb      	str	r3, [r7, #24]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ba6:	f001 fe75 	bl	8007894 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01f      	beq.n	8005bf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bba:	f000 f99a 	bl	8005ef2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	1e5a      	subs	r2, r3, #1
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00f      	beq.n	8005bee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 ff42 	bl	8006a5c <xTaskRemoveFromEventList>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bde:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <xQueueReceive+0x1bc>)
 8005be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bee:	f001 fe81 	bl	80078f4 <vPortExitCritical>
				return pdPASS;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e069      	b.n	8005cca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bfc:	f001 fe7a 	bl	80078f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e062      	b.n	8005cca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 ff88 	bl	8006b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c18:	f001 fe6c 	bl	80078f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c1c:	f000 fcf4 	bl	8006608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c20:	f001 fe38 	bl	8007894 <vPortEnterCritical>
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c2a:	b25b      	sxtb	r3, r3
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d103      	bne.n	8005c3a <xQueueReceive+0x122>
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c40:	b25b      	sxtb	r3, r3
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d103      	bne.n	8005c50 <xQueueReceive+0x138>
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c50:	f001 fe50 	bl	80078f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c54:	1d3a      	adds	r2, r7, #4
 8005c56:	f107 0310 	add.w	r3, r7, #16
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 ff77 	bl	8006b50 <xTaskCheckForTimeOut>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d123      	bne.n	8005cb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6a:	f000 f9ba 	bl	8005fe2 <prvIsQueueEmpty>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d017      	beq.n	8005ca4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	3324      	adds	r3, #36	; 0x24
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fe9d 	bl	80069bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c84:	f000 f95b 	bl	8005f3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c88:	f000 fccc 	bl	8006624 <xTaskResumeAll>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d189      	bne.n	8005ba6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <xQueueReceive+0x1bc>)
 8005c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	e780      	b.n	8005ba6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca6:	f000 f94a 	bl	8005f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005caa:	f000 fcbb 	bl	8006624 <xTaskResumeAll>
 8005cae:	e77a      	b.n	8005ba6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb2:	f000 f944 	bl	8005f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb6:	f000 fcb5 	bl	8006624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbc:	f000 f991 	bl	8005fe2 <prvIsQueueEmpty>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f43f af6f 	beq.w	8005ba6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3730      	adds	r7, #48	; 0x30
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08e      	sub	sp, #56	; 0x38
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	623b      	str	r3, [r7, #32]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <xQueueReceiveFromISR+0x3a>
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueReceiveFromISR+0x3e>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <xQueueReceiveFromISR+0x40>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	61fb      	str	r3, [r7, #28]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d32:	f001 fe91 	bl	8007a58 <vPortValidateInterruptPriority>
	__asm volatile
 8005d36:	f3ef 8211 	mrs	r2, BASEPRI
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	61ba      	str	r2, [r7, #24]
 8005d4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02f      	beq.n	8005dbe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6c:	f000 f8c1 	bl	8005ef2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	1e5a      	subs	r2, r3, #1
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d112      	bne.n	8005da8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fe64 	bl	8006a5c <xTaskRemoveFromEventList>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00e      	beq.n	8005db8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e007      	b.n	8005db8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dac:	3301      	adds	r3, #1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	b25a      	sxtb	r2, r3
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005db8:	2301      	movs	r3, #1
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbc:	e001      	b.n	8005dc2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f383 8811 	msr	BASEPRI, r3
}
 8005dcc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3738      	adds	r7, #56	; 0x38
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <vQueueDelete+0x28>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	60bb      	str	r3, [r7, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	e7fe      	b.n	8005dfe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f947 	bl	8006094 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f001 ff2d 	bl	8007c70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10d      	bne.n	8005e58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d14d      	bne.n	8005ee0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 ffe7 	bl	8006e1c <xTaskPriorityDisinherit>
 8005e4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]
 8005e56:	e043      	b.n	8005ee0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d119      	bne.n	8005e92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6858      	ldr	r0, [r3, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	461a      	mov	r2, r3
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	f002 f84b 	bl	8007f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	441a      	add	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d32b      	bcc.n	8005ee0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	e026      	b.n	8005ee0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68d8      	ldr	r0, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	f002 f831 	bl	8007f04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	425b      	negs	r3, r3
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d207      	bcs.n	8005ece <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	425b      	negs	r3, r3
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d105      	bne.n	8005ee0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ee8:	697b      	ldr	r3, [r7, #20]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d018      	beq.n	8005f36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	441a      	add	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d303      	bcc.n	8005f26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68d9      	ldr	r1, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6838      	ldr	r0, [r7, #0]
 8005f32:	f001 ffe7 	bl	8007f04 <memcpy>
	}
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f46:	f001 fca5 	bl	8007894 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f52:	e011      	b.n	8005f78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d012      	beq.n	8005f82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3324      	adds	r3, #36	; 0x24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fd7b 	bl	8006a5c <xTaskRemoveFromEventList>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f6c:	f000 fe52 	bl	8006c14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dce9      	bgt.n	8005f54 <prvUnlockQueue+0x16>
 8005f80:	e000      	b.n	8005f84 <prvUnlockQueue+0x46>
					break;
 8005f82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	22ff      	movs	r2, #255	; 0xff
 8005f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f8c:	f001 fcb2 	bl	80078f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f90:	f001 fc80 	bl	8007894 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f9c:	e011      	b.n	8005fc2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d012      	beq.n	8005fcc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3310      	adds	r3, #16
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fd56 	bl	8006a5c <xTaskRemoveFromEventList>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fb6:	f000 fe2d 	bl	8006c14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dce9      	bgt.n	8005f9e <prvUnlockQueue+0x60>
 8005fca:	e000      	b.n	8005fce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fcc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	22ff      	movs	r2, #255	; 0xff
 8005fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fd6:	f001 fc8d 	bl	80078f4 <vPortExitCritical>
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fea:	f001 fc53 	bl	8007894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e001      	b.n	8006000 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006000:	f001 fc78 	bl	80078f4 <vPortExitCritical>

	return xReturn;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006016:	f001 fc3d 	bl	8007894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	429a      	cmp	r2, r3
 8006024:	d102      	bne.n	800602c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006026:	2301      	movs	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e001      	b.n	8006030 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006030:	f001 fc60 	bl	80078f4 <vPortExitCritical>

	return xReturn;
 8006034:	68fb      	ldr	r3, [r7, #12]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	e014      	b.n	800607a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006050:	4a0f      	ldr	r2, [pc, #60]	; (8006090 <vQueueAddToRegistry+0x50>)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800605c:	490c      	ldr	r1, [pc, #48]	; (8006090 <vQueueAddToRegistry+0x50>)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006066:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <vQueueAddToRegistry+0x50>)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006072:	e006      	b.n	8006082 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b07      	cmp	r3, #7
 800607e:	d9e7      	bls.n	8006050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000a88 	.word	0x20000a88

08006094 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e016      	b.n	80060d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <vQueueUnregisterQueue+0x50>)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d10b      	bne.n	80060ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80060b2:	4a0c      	ldr	r2, [pc, #48]	; (80060e4 <vQueueUnregisterQueue+0x50>)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2100      	movs	r1, #0
 80060b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80060bc:	4a09      	ldr	r2, [pc, #36]	; (80060e4 <vQueueUnregisterQueue+0x50>)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4413      	add	r3, r2
 80060c4:	2200      	movs	r2, #0
 80060c6:	605a      	str	r2, [r3, #4]
				break;
 80060c8:	e006      	b.n	80060d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b07      	cmp	r3, #7
 80060d4:	d9e5      	bls.n	80060a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	20000a88 	.word	0x20000a88

080060e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060f8:	f001 fbcc 	bl	8007894 <vPortEnterCritical>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006102:	b25b      	sxtb	r3, r3
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006108:	d103      	bne.n	8006112 <vQueueWaitForMessageRestricted+0x2a>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006118:	b25b      	sxtb	r3, r3
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611e:	d103      	bne.n	8006128 <vQueueWaitForMessageRestricted+0x40>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006128:	f001 fbe4 	bl	80078f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	3324      	adds	r3, #36	; 0x24
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fc61 	bl	8006a04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006142:	6978      	ldr	r0, [r7, #20]
 8006144:	f7ff fefb 	bl	8005f3e <prvUnlockQueue>
	}
 8006148:	bf00      	nop
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08e      	sub	sp, #56	; 0x38
 8006154:	af04      	add	r7, sp, #16
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	623b      	str	r3, [r7, #32]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <xTaskCreateStatic+0x46>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	61fb      	str	r3, [r7, #28]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006196:	23bc      	movs	r3, #188	; 0xbc
 8006198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2bbc      	cmp	r3, #188	; 0xbc
 800619e:	d00a      	beq.n	80061b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61bb      	str	r3, [r7, #24]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01e      	beq.n	80061fc <xTaskCreateStatic+0xac>
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061d6:	2300      	movs	r3, #0
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	9302      	str	r3, [sp, #8]
 80061de:	f107 0314 	add.w	r3, r7, #20
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f850 	bl	8006294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061f6:	f000 f8f3 	bl	80063e0 <prvAddNewTaskToReadyList>
 80061fa:	e001      	b.n	8006200 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006200:	697b      	ldr	r3, [r7, #20]
	}
 8006202:	4618      	mov	r0, r3
 8006204:	3728      	adds	r7, #40	; 0x28
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800620a:	b580      	push	{r7, lr}
 800620c:	b08c      	sub	sp, #48	; 0x30
 800620e:	af04      	add	r7, sp, #16
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	603b      	str	r3, [r7, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4618      	mov	r0, r3
 8006220:	f001 fc5a 	bl	8007ad8 <pvPortMalloc>
 8006224:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800622c:	20bc      	movs	r0, #188	; 0xbc
 800622e:	f001 fc53 	bl	8007ad8 <pvPortMalloc>
 8006232:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
 8006240:	e005      	b.n	800624e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f001 fd14 	bl	8007c70 <vPortFree>
 8006248:	e001      	b.n	800624e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	2300      	movs	r3, #0
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	9302      	str	r3, [sp, #8]
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f80e 	bl	8006294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006278:	69f8      	ldr	r0, [r7, #28]
 800627a:	f000 f8b1 	bl	80063e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800627e:	2301      	movs	r3, #1
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e002      	b.n	800628a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800628a:	69bb      	ldr	r3, [r7, #24]
	}
 800628c:	4618      	mov	r0, r3
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	461a      	mov	r2, r3
 80062ac:	21a5      	movs	r1, #165	; 0xa5
 80062ae:	f001 fe37 	bl	8007f20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062bc:	3b01      	subs	r3, #1
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f023 0307 	bic.w	r3, r3, #7
 80062ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	617b      	str	r3, [r7, #20]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01f      	beq.n	8006332 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	e012      	b.n	800631e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	7819      	ldrb	r1, [r3, #0]
 8006300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	3334      	adds	r3, #52	; 0x34
 8006308:	460a      	mov	r2, r1
 800630a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d006      	beq.n	8006326 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b0f      	cmp	r3, #15
 8006322:	d9e9      	bls.n	80062f8 <prvInitialiseNewTask+0x64>
 8006324:	e000      	b.n	8006328 <prvInitialiseNewTask+0x94>
			{
				break;
 8006326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006330:	e003      	b.n	800633a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	2b37      	cmp	r3, #55	; 0x37
 800633e:	d901      	bls.n	8006344 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006340:	2337      	movs	r3, #55	; 0x37
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2200      	movs	r2, #0
 8006354:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe ffba 	bl	80052d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	3318      	adds	r3, #24
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe ffb5 	bl	80052d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2200      	movs	r2, #0
 800638c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	3354      	adds	r3, #84	; 0x54
 8006394:	2260      	movs	r2, #96	; 0x60
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fdc1 	bl	8007f20 <memset>
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <prvInitialiseNewTask+0x140>)
 80063a2:	659a      	str	r2, [r3, #88]	; 0x58
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <prvInitialiseNewTask+0x144>)
 80063a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	4a0b      	ldr	r2, [pc, #44]	; (80063dc <prvInitialiseNewTask+0x148>)
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	69b8      	ldr	r0, [r7, #24]
 80063b6:	f001 f941 	bl	800763c <pxPortInitialiseStack>
 80063ba:	4602      	mov	r2, r0
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063cc:	bf00      	nop
 80063ce:	3720      	adds	r7, #32
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	08008a50 	.word	0x08008a50
 80063d8:	08008a70 	.word	0x08008a70
 80063dc:	08008a30 	.word	0x08008a30

080063e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063e8:	f001 fa54 	bl	8007894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063ec:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <prvAddNewTaskToReadyList+0xc4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	4a2c      	ldr	r2, [pc, #176]	; (80064a4 <prvAddNewTaskToReadyList+0xc4>)
 80063f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063f6:	4b2c      	ldr	r3, [pc, #176]	; (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063fe:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006404:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <prvAddNewTaskToReadyList+0xc4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d110      	bne.n	800642e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800640c:	f000 fc26 	bl	8006c5c <prvInitialiseTaskLists>
 8006410:	e00d      	b.n	800642e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006412:	4b26      	ldr	r3, [pc, #152]	; (80064ac <prvAddNewTaskToReadyList+0xcc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800641a:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	429a      	cmp	r2, r3
 8006426:	d802      	bhi.n	800642e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <prvAddNewTaskToReadyList+0xd0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <prvAddNewTaskToReadyList+0xd0>)
 8006436:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006438:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <prvAddNewTaskToReadyList+0xd0>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <prvAddNewTaskToReadyList+0xd4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d903      	bls.n	8006454 <prvAddNewTaskToReadyList+0x74>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <prvAddNewTaskToReadyList+0xd4>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <prvAddNewTaskToReadyList+0xd8>)
 8006462:	441a      	add	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f7fe ff3f 	bl	80052ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006470:	f001 fa40 	bl	80078f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <prvAddNewTaskToReadyList+0xcc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00e      	beq.n	800649a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <prvAddNewTaskToReadyList+0xc8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	429a      	cmp	r2, r3
 8006488:	d207      	bcs.n	800649a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800648a:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <prvAddNewTaskToReadyList+0xdc>)
 800648c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000f9c 	.word	0x20000f9c
 80064a8:	20000ac8 	.word	0x20000ac8
 80064ac:	20000fa8 	.word	0x20000fa8
 80064b0:	20000fb8 	.word	0x20000fb8
 80064b4:	20000fa4 	.word	0x20000fa4
 80064b8:	20000acc 	.word	0x20000acc
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d017      	beq.n	8006502 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <vTaskDelay+0x60>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <vTaskDelay+0x30>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60bb      	str	r3, [r7, #8]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064f0:	f000 f88a 	bl	8006608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064f4:	2100      	movs	r1, #0
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fcfe 	bl	8006ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064fc:	f000 f892 	bl	8006624 <xTaskResumeAll>
 8006500:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <vTaskDelay+0x64>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006518:	bf00      	nop
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000fc4 	.word	0x20000fc4
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08a      	sub	sp, #40	; 0x28
 800652c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006536:	463a      	mov	r2, r7
 8006538:	1d39      	adds	r1, r7, #4
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fe74 	bl	800522c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	9202      	str	r2, [sp, #8]
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	2300      	movs	r3, #0
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	460a      	mov	r2, r1
 8006556:	4924      	ldr	r1, [pc, #144]	; (80065e8 <vTaskStartScheduler+0xc0>)
 8006558:	4824      	ldr	r0, [pc, #144]	; (80065ec <vTaskStartScheduler+0xc4>)
 800655a:	f7ff fdf9 	bl	8006150 <xTaskCreateStatic>
 800655e:	4603      	mov	r3, r0
 8006560:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <vTaskStartScheduler+0xc8>)
 8006562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006564:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <vTaskStartScheduler+0xc8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e001      	b.n	8006576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d102      	bne.n	8006582 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800657c:	f000 fd10 	bl	8006fa0 <xTimerCreateTimerTask>
 8006580:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d11b      	bne.n	80065c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	613b      	str	r3, [r7, #16]
}
 800659a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800659c:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <vTaskStartScheduler+0xcc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3354      	adds	r3, #84	; 0x54
 80065a2:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <vTaskStartScheduler+0xd0>)
 80065a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <vTaskStartScheduler+0xd4>)
 80065a8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <vTaskStartScheduler+0xd8>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065b4:	4b13      	ldr	r3, [pc, #76]	; (8006604 <vTaskStartScheduler+0xdc>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065ba:	f001 f8c9 	bl	8007750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065be:	e00e      	b.n	80065de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d10a      	bne.n	80065de <vTaskStartScheduler+0xb6>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60fb      	str	r3, [r7, #12]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <vTaskStartScheduler+0xb4>
}
 80065de:	bf00      	nop
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	08008998 	.word	0x08008998
 80065ec:	08006c2d 	.word	0x08006c2d
 80065f0:	20000fc0 	.word	0x20000fc0
 80065f4:	20000ac8 	.word	0x20000ac8
 80065f8:	20000010 	.word	0x20000010
 80065fc:	20000fbc 	.word	0x20000fbc
 8006600:	20000fa8 	.word	0x20000fa8
 8006604:	20000fa0 	.word	0x20000fa0

08006608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <vTaskSuspendAll+0x18>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	4a03      	ldr	r2, [pc, #12]	; (8006620 <vTaskSuspendAll+0x18>)
 8006614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006616:	bf00      	nop
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	20000fc4 	.word	0x20000fc4

08006624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006632:	4b42      	ldr	r3, [pc, #264]	; (800673c <xTaskResumeAll+0x118>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <xTaskResumeAll+0x2c>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	603b      	str	r3, [r7, #0]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006650:	f001 f920 	bl	8007894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006654:	4b39      	ldr	r3, [pc, #228]	; (800673c <xTaskResumeAll+0x118>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	4a38      	ldr	r2, [pc, #224]	; (800673c <xTaskResumeAll+0x118>)
 800665c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800665e:	4b37      	ldr	r3, [pc, #220]	; (800673c <xTaskResumeAll+0x118>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d162      	bne.n	800672c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006666:	4b36      	ldr	r3, [pc, #216]	; (8006740 <xTaskResumeAll+0x11c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d05e      	beq.n	800672c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800666e:	e02f      	b.n	80066d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006670:	4b34      	ldr	r3, [pc, #208]	; (8006744 <xTaskResumeAll+0x120>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3318      	adds	r3, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fe93 	bl	80053a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3304      	adds	r3, #4
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fe8e 	bl	80053a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006690:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <xTaskResumeAll+0x124>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d903      	bls.n	80066a0 <xTaskResumeAll+0x7c>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	4a2a      	ldr	r2, [pc, #168]	; (8006748 <xTaskResumeAll+0x124>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4a27      	ldr	r2, [pc, #156]	; (800674c <xTaskResumeAll+0x128>)
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7fe fe19 	bl	80052ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	4b23      	ldr	r3, [pc, #140]	; (8006750 <xTaskResumeAll+0x12c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066ca:	4b22      	ldr	r3, [pc, #136]	; (8006754 <xTaskResumeAll+0x130>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d0:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <xTaskResumeAll+0x120>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1cb      	bne.n	8006670 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066de:	f000 fb5f 	bl	8006da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066e2:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <xTaskResumeAll+0x134>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d010      	beq.n	8006710 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066ee:	f000 f847 	bl	8006780 <xTaskIncrementTick>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066f8:	4b16      	ldr	r3, [pc, #88]	; (8006754 <xTaskResumeAll+0x130>)
 80066fa:	2201      	movs	r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3b01      	subs	r3, #1
 8006702:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f1      	bne.n	80066ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800670a:	4b13      	ldr	r3, [pc, #76]	; (8006758 <xTaskResumeAll+0x134>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006710:	4b10      	ldr	r3, [pc, #64]	; (8006754 <xTaskResumeAll+0x130>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <xTaskResumeAll+0x138>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800672c:	f001 f8e2 	bl	80078f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006730:	68bb      	ldr	r3, [r7, #8]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000fc4 	.word	0x20000fc4
 8006740:	20000f9c 	.word	0x20000f9c
 8006744:	20000f5c 	.word	0x20000f5c
 8006748:	20000fa4 	.word	0x20000fa4
 800674c:	20000acc 	.word	0x20000acc
 8006750:	20000ac8 	.word	0x20000ac8
 8006754:	20000fb0 	.word	0x20000fb0
 8006758:	20000fac 	.word	0x20000fac
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <xTaskGetTickCount+0x1c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800676c:	687b      	ldr	r3, [r7, #4]
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000fa0 	.word	0x20000fa0

08006780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678a:	4b4f      	ldr	r3, [pc, #316]	; (80068c8 <xTaskIncrementTick+0x148>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 808f 	bne.w	80068b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006794:	4b4d      	ldr	r3, [pc, #308]	; (80068cc <xTaskIncrementTick+0x14c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800679c:	4a4b      	ldr	r2, [pc, #300]	; (80068cc <xTaskIncrementTick+0x14c>)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d120      	bne.n	80067ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067a8:	4b49      	ldr	r3, [pc, #292]	; (80068d0 <xTaskIncrementTick+0x150>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	603b      	str	r3, [r7, #0]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xTaskIncrementTick+0x46>
 80067c8:	4b41      	ldr	r3, [pc, #260]	; (80068d0 <xTaskIncrementTick+0x150>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	4b41      	ldr	r3, [pc, #260]	; (80068d4 <xTaskIncrementTick+0x154>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a3f      	ldr	r2, [pc, #252]	; (80068d0 <xTaskIncrementTick+0x150>)
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	4a3f      	ldr	r2, [pc, #252]	; (80068d4 <xTaskIncrementTick+0x154>)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4b3e      	ldr	r3, [pc, #248]	; (80068d8 <xTaskIncrementTick+0x158>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	4a3d      	ldr	r2, [pc, #244]	; (80068d8 <xTaskIncrementTick+0x158>)
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	f000 fadb 	bl	8006da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ea:	4b3c      	ldr	r3, [pc, #240]	; (80068dc <xTaskIncrementTick+0x15c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d349      	bcc.n	8006888 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f4:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <xTaskIncrementTick+0x150>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fe:	4b37      	ldr	r3, [pc, #220]	; (80068dc <xTaskIncrementTick+0x15c>)
 8006800:	f04f 32ff 	mov.w	r2, #4294967295
 8006804:	601a      	str	r2, [r3, #0]
					break;
 8006806:	e03f      	b.n	8006888 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006808:	4b31      	ldr	r3, [pc, #196]	; (80068d0 <xTaskIncrementTick+0x150>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	429a      	cmp	r2, r3
 800681e:	d203      	bcs.n	8006828 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006820:	4a2e      	ldr	r2, [pc, #184]	; (80068dc <xTaskIncrementTick+0x15c>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006826:	e02f      	b.n	8006888 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3304      	adds	r3, #4
 800682c:	4618      	mov	r0, r3
 800682e:	f7fe fdbb 	bl	80053a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	3318      	adds	r3, #24
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fdb2 	bl	80053a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <xTaskIncrementTick+0x160>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d903      	bls.n	8006858 <xTaskIncrementTick+0xd8>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <xTaskIncrementTick+0x160>)
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4a1f      	ldr	r2, [pc, #124]	; (80068e4 <xTaskIncrementTick+0x164>)
 8006866:	441a      	add	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fe fd3d 	bl	80052ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <xTaskIncrementTick+0x168>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	429a      	cmp	r2, r3
 8006880:	d3b8      	bcc.n	80067f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006886:	e7b5      	b.n	80067f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006888:	4b17      	ldr	r3, [pc, #92]	; (80068e8 <xTaskIncrementTick+0x168>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688e:	4915      	ldr	r1, [pc, #84]	; (80068e4 <xTaskIncrementTick+0x164>)
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d901      	bls.n	80068a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068a4:	4b11      	ldr	r3, [pc, #68]	; (80068ec <xTaskIncrementTick+0x16c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e004      	b.n	80068bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068b2:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <xTaskIncrementTick+0x170>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3301      	adds	r3, #1
 80068b8:	4a0d      	ldr	r2, [pc, #52]	; (80068f0 <xTaskIncrementTick+0x170>)
 80068ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068bc:	697b      	ldr	r3, [r7, #20]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000fc4 	.word	0x20000fc4
 80068cc:	20000fa0 	.word	0x20000fa0
 80068d0:	20000f54 	.word	0x20000f54
 80068d4:	20000f58 	.word	0x20000f58
 80068d8:	20000fb4 	.word	0x20000fb4
 80068dc:	20000fbc 	.word	0x20000fbc
 80068e0:	20000fa4 	.word	0x20000fa4
 80068e4:	20000acc 	.word	0x20000acc
 80068e8:	20000ac8 	.word	0x20000ac8
 80068ec:	20000fb0 	.word	0x20000fb0
 80068f0:	20000fac 	.word	0x20000fac

080068f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068fa:	4b2a      	ldr	r3, [pc, #168]	; (80069a4 <vTaskSwitchContext+0xb0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006902:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <vTaskSwitchContext+0xb4>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006908:	e046      	b.n	8006998 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800690a:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <vTaskSwitchContext+0xb4>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006910:	4b26      	ldr	r3, [pc, #152]	; (80069ac <vTaskSwitchContext+0xb8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e010      	b.n	800693a <vTaskSwitchContext+0x46>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <vTaskSwitchContext+0x40>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
 8006932:	e7fe      	b.n	8006932 <vTaskSwitchContext+0x3e>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3b01      	subs	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	491d      	ldr	r1, [pc, #116]	; (80069b0 <vTaskSwitchContext+0xbc>)
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0e4      	beq.n	8006918 <vTaskSwitchContext+0x24>
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4a15      	ldr	r2, [pc, #84]	; (80069b0 <vTaskSwitchContext+0xbc>)
 800695a:	4413      	add	r3, r2
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	605a      	str	r2, [r3, #4]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3308      	adds	r3, #8
 8006970:	429a      	cmp	r2, r3
 8006972:	d104      	bne.n	800697e <vTaskSwitchContext+0x8a>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4a0b      	ldr	r2, [pc, #44]	; (80069b4 <vTaskSwitchContext+0xc0>)
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4a08      	ldr	r2, [pc, #32]	; (80069ac <vTaskSwitchContext+0xb8>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <vTaskSwitchContext+0xc0>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3354      	adds	r3, #84	; 0x54
 8006994:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <vTaskSwitchContext+0xc4>)
 8006996:	6013      	str	r3, [r2, #0]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20000fc4 	.word	0x20000fc4
 80069a8:	20000fb0 	.word	0x20000fb0
 80069ac:	20000fa4 	.word	0x20000fa4
 80069b0:	20000acc 	.word	0x20000acc
 80069b4:	20000ac8 	.word	0x20000ac8
 80069b8:	20000010 	.word	0x20000010

080069bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60fb      	str	r3, [r7, #12]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <vTaskPlaceOnEventList+0x44>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3318      	adds	r3, #24
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fe fca3 	bl	8005336 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069f0:	2101      	movs	r1, #1
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f000 fa80 	bl	8006ef8 <prvAddCurrentTaskToDelayedList>
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20000ac8 	.word	0x20000ac8

08006a04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3318      	adds	r3, #24
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7fe fc5a 	bl	80052ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a40:	f04f 33ff 	mov.w	r3, #4294967295
 8006a44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	68b8      	ldr	r0, [r7, #8]
 8006a4a:	f000 fa55 	bl	8006ef8 <prvAddCurrentTaskToDelayedList>
	}
 8006a4e:	bf00      	nop
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000ac8 	.word	0x20000ac8

08006a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60fb      	str	r3, [r7, #12]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3318      	adds	r3, #24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fc8b 	bl	80053a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a92:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <xTaskRemoveFromEventList+0xb0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11d      	bne.n	8006ad6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fc82 	bl	80053a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa8:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <xTaskRemoveFromEventList+0xb4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d903      	bls.n	8006ab8 <xTaskRemoveFromEventList+0x5c>
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <xTaskRemoveFromEventList+0xb4>)
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <xTaskRemoveFromEventList+0xb8>)
 8006ac6:	441a      	add	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4619      	mov	r1, r3
 8006ace:	4610      	mov	r0, r2
 8006ad0:	f7fe fc0d 	bl	80052ee <vListInsertEnd>
 8006ad4:	e005      	b.n	8006ae2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3318      	adds	r3, #24
 8006ada:	4619      	mov	r1, r3
 8006adc:	480e      	ldr	r0, [pc, #56]	; (8006b18 <xTaskRemoveFromEventList+0xbc>)
 8006ade:	f7fe fc06 	bl	80052ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <xTaskRemoveFromEventList+0xc0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d905      	bls.n	8006afc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006af0:	2301      	movs	r3, #1
 8006af2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <xTaskRemoveFromEventList+0xc4>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e001      	b.n	8006b00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b00:	697b      	ldr	r3, [r7, #20]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000fc4 	.word	0x20000fc4
 8006b10:	20000fa4 	.word	0x20000fa4
 8006b14:	20000acc 	.word	0x20000acc
 8006b18:	20000f5c 	.word	0x20000f5c
 8006b1c:	20000ac8 	.word	0x20000ac8
 8006b20:	20000fb0 	.word	0x20000fb0

08006b24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <vTaskInternalSetTimeOutState+0x24>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <vTaskInternalSetTimeOutState+0x28>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	605a      	str	r2, [r3, #4]
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	20000fb4 	.word	0x20000fb4
 8006b4c:	20000fa0 	.word	0x20000fa0

08006b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	613b      	str	r3, [r7, #16]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60fb      	str	r3, [r7, #12]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b92:	f000 fe7f 	bl	8007894 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b96:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <xTaskCheckForTimeOut+0xbc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d102      	bne.n	8006bb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e023      	b.n	8006bfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <xTaskCheckForTimeOut+0xc0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d007      	beq.n	8006bd2 <xTaskCheckForTimeOut+0x82>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d302      	bcc.n	8006bd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e015      	b.n	8006bfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d20b      	bcs.n	8006bf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ff9b 	bl	8006b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	e004      	b.n	8006bfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bfe:	f000 fe79 	bl	80078f4 <vPortExitCritical>

	return xReturn;
 8006c02:	69fb      	ldr	r3, [r7, #28]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20000fa0 	.word	0x20000fa0
 8006c10:	20000fb4 	.word	0x20000fb4

08006c14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c18:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <vTaskMissedYield+0x14>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20000fb0 	.word	0x20000fb0

08006c2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c34:	f000 f852 	bl	8006cdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <prvIdleTask+0x28>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d9f9      	bls.n	8006c34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <prvIdleTask+0x2c>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c50:	e7f0      	b.n	8006c34 <prvIdleTask+0x8>
 8006c52:	bf00      	nop
 8006c54:	20000acc 	.word	0x20000acc
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c62:	2300      	movs	r3, #0
 8006c64:	607b      	str	r3, [r7, #4]
 8006c66:	e00c      	b.n	8006c82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4a12      	ldr	r2, [pc, #72]	; (8006cbc <prvInitialiseTaskLists+0x60>)
 8006c74:	4413      	add	r3, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fb0c 	bl	8005294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	607b      	str	r3, [r7, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b37      	cmp	r3, #55	; 0x37
 8006c86:	d9ef      	bls.n	8006c68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c88:	480d      	ldr	r0, [pc, #52]	; (8006cc0 <prvInitialiseTaskLists+0x64>)
 8006c8a:	f7fe fb03 	bl	8005294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c8e:	480d      	ldr	r0, [pc, #52]	; (8006cc4 <prvInitialiseTaskLists+0x68>)
 8006c90:	f7fe fb00 	bl	8005294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c94:	480c      	ldr	r0, [pc, #48]	; (8006cc8 <prvInitialiseTaskLists+0x6c>)
 8006c96:	f7fe fafd 	bl	8005294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c9a:	480c      	ldr	r0, [pc, #48]	; (8006ccc <prvInitialiseTaskLists+0x70>)
 8006c9c:	f7fe fafa 	bl	8005294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ca0:	480b      	ldr	r0, [pc, #44]	; (8006cd0 <prvInitialiseTaskLists+0x74>)
 8006ca2:	f7fe faf7 	bl	8005294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <prvInitialiseTaskLists+0x78>)
 8006ca8:	4a05      	ldr	r2, [pc, #20]	; (8006cc0 <prvInitialiseTaskLists+0x64>)
 8006caa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <prvInitialiseTaskLists+0x7c>)
 8006cae:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <prvInitialiseTaskLists+0x68>)
 8006cb0:	601a      	str	r2, [r3, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000acc 	.word	0x20000acc
 8006cc0:	20000f2c 	.word	0x20000f2c
 8006cc4:	20000f40 	.word	0x20000f40
 8006cc8:	20000f5c 	.word	0x20000f5c
 8006ccc:	20000f70 	.word	0x20000f70
 8006cd0:	20000f88 	.word	0x20000f88
 8006cd4:	20000f54 	.word	0x20000f54
 8006cd8:	20000f58 	.word	0x20000f58

08006cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ce2:	e019      	b.n	8006d18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ce4:	f000 fdd6 	bl	8007894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <prvCheckTasksWaitingTermination+0x50>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe fb57 	bl	80053a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <prvCheckTasksWaitingTermination+0x54>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	4a0b      	ldr	r2, [pc, #44]	; (8006d30 <prvCheckTasksWaitingTermination+0x54>)
 8006d02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d04:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d0e:	f000 fdf1 	bl	80078f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f810 	bl	8006d38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <prvCheckTasksWaitingTermination+0x58>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e1      	bne.n	8006ce4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000f70 	.word	0x20000f70
 8006d30:	20000f9c 	.word	0x20000f9c
 8006d34:	20000f84 	.word	0x20000f84

08006d38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3354      	adds	r3, #84	; 0x54
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 f995 	bl	8008074 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 ff89 	bl	8007c70 <vPortFree>
				vPortFree( pxTCB );
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 ff86 	bl	8007c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d64:	e018      	b.n	8006d98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d103      	bne.n	8006d78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 ff7d 	bl	8007c70 <vPortFree>
	}
 8006d76:	e00f      	b.n	8006d98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d00a      	beq.n	8006d98 <prvDeleteTCB+0x60>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	60fb      	str	r3, [r7, #12]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <prvDeleteTCB+0x5e>
	}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <prvResetNextTaskUnblockTime+0x38>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <prvResetNextTaskUnblockTime+0x3c>)
 8006db2:	f04f 32ff 	mov.w	r2, #4294967295
 8006db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006db8:	e008      	b.n	8006dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <prvResetNextTaskUnblockTime+0x38>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a04      	ldr	r2, [pc, #16]	; (8006ddc <prvResetNextTaskUnblockTime+0x3c>)
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20000f54 	.word	0x20000f54
 8006ddc:	20000fbc 	.word	0x20000fbc

08006de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <xTaskGetSchedulerState+0x34>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dee:	2301      	movs	r3, #1
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	e008      	b.n	8006e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <xTaskGetSchedulerState+0x38>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	e001      	b.n	8006e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e06:	687b      	ldr	r3, [r7, #4]
	}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20000fa8 	.word	0x20000fa8
 8006e18:	20000fc4 	.word	0x20000fc4

08006e1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d056      	beq.n	8006ee0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e32:	4b2e      	ldr	r3, [pc, #184]	; (8006eec <xTaskPriorityDisinherit+0xd0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d00a      	beq.n	8006e52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60fb      	str	r3, [r7, #12]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	60bb      	str	r3, [r7, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	1e5a      	subs	r2, r3, #1
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d02c      	beq.n	8006ee0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d128      	bne.n	8006ee0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe fa88 	bl	80053a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <xTaskPriorityDisinherit+0xd4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d903      	bls.n	8006ec0 <xTaskPriorityDisinherit+0xa4>
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4a0c      	ldr	r2, [pc, #48]	; (8006ef0 <xTaskPriorityDisinherit+0xd4>)
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <xTaskPriorityDisinherit+0xd8>)
 8006ece:	441a      	add	r2, r3
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f7fe fa09 	bl	80052ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006edc:	2301      	movs	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ee0:	697b      	ldr	r3, [r7, #20]
	}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000ac8 	.word	0x20000ac8
 8006ef0:	20000fa4 	.word	0x20000fa4
 8006ef4:	20000acc 	.word	0x20000acc

08006ef8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f02:	4b21      	ldr	r3, [pc, #132]	; (8006f88 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fa4a 	bl	80053a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d10a      	bne.n	8006f32 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f22:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4819      	ldr	r0, [pc, #100]	; (8006f90 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f2c:	f7fe f9df 	bl	80052ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f30:	e026      	b.n	8006f80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f3a:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d209      	bcs.n	8006f5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f4a:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe f9ed 	bl	8005336 <vListInsert>
}
 8006f5c:	e010      	b.n	8006f80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f5e:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fe f9e3 	bl	8005336 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f70:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d202      	bcs.n	8006f80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f7a:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6013      	str	r3, [r2, #0]
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000fa0 	.word	0x20000fa0
 8006f8c:	20000ac8 	.word	0x20000ac8
 8006f90:	20000f88 	.word	0x20000f88
 8006f94:	20000f58 	.word	0x20000f58
 8006f98:	20000f54 	.word	0x20000f54
 8006f9c:	20000fbc 	.word	0x20000fbc

08006fa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006faa:	f000 fb07 	bl	80075bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fae:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <xTimerCreateTimerTask+0x80>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d021      	beq.n	8006ffa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fbe:	1d3a      	adds	r2, r7, #4
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	f107 030c 	add.w	r3, r7, #12
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe f949 	bl	8005260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	9202      	str	r2, [sp, #8]
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	2302      	movs	r3, #2
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	460a      	mov	r2, r1
 8006fe0:	4910      	ldr	r1, [pc, #64]	; (8007024 <xTimerCreateTimerTask+0x84>)
 8006fe2:	4811      	ldr	r0, [pc, #68]	; (8007028 <xTimerCreateTimerTask+0x88>)
 8006fe4:	f7ff f8b4 	bl	8006150 <xTaskCreateStatic>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4a10      	ldr	r2, [pc, #64]	; (800702c <xTimerCreateTimerTask+0x8c>)
 8006fec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <xTimerCreateTimerTask+0x8c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007016:	697b      	ldr	r3, [r7, #20]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000ff8 	.word	0x20000ff8
 8007024:	080089a0 	.word	0x080089a0
 8007028:	08007165 	.word	0x08007165
 800702c:	20000ffc 	.word	0x20000ffc

08007030 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08a      	sub	sp, #40	; 0x28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800703e:	2300      	movs	r3, #0
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	623b      	str	r3, [r7, #32]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800705e:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <xTimerGenericCommand+0x98>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02a      	beq.n	80070bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b05      	cmp	r3, #5
 8007076:	dc18      	bgt.n	80070aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007078:	f7ff feb2 	bl	8006de0 <xTaskGetSchedulerState>
 800707c:	4603      	mov	r3, r0
 800707e:	2b02      	cmp	r3, #2
 8007080:	d109      	bne.n	8007096 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007082:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <xTimerGenericCommand+0x98>)
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f107 0110 	add.w	r1, r7, #16
 800708a:	2300      	movs	r3, #0
 800708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708e:	f7fe fba9 	bl	80057e4 <xQueueGenericSend>
 8007092:	6278      	str	r0, [r7, #36]	; 0x24
 8007094:	e012      	b.n	80070bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <xTimerGenericCommand+0x98>)
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	f107 0110 	add.w	r1, r7, #16
 800709e:	2300      	movs	r3, #0
 80070a0:	2200      	movs	r2, #0
 80070a2:	f7fe fb9f 	bl	80057e4 <xQueueGenericSend>
 80070a6:	6278      	str	r0, [r7, #36]	; 0x24
 80070a8:	e008      	b.n	80070bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <xTimerGenericCommand+0x98>)
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	f107 0110 	add.w	r1, r7, #16
 80070b2:	2300      	movs	r3, #0
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	f7fe fc93 	bl	80059e0 <xQueueGenericSendFromISR>
 80070ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3728      	adds	r7, #40	; 0x28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000ff8 	.word	0x20000ff8

080070cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b088      	sub	sp, #32
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d6:	4b22      	ldr	r3, [pc, #136]	; (8007160 <prvProcessExpiredTimer+0x94>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe f95f 	bl	80053a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d022      	beq.n	800713e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	699a      	ldr	r2, [r3, #24]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	18d1      	adds	r1, r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	6978      	ldr	r0, [r7, #20]
 8007106:	f000 f8d1 	bl	80072ac <prvInsertTimerInActiveList>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01f      	beq.n	8007150 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007110:	2300      	movs	r3, #0
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	2100      	movs	r1, #0
 800711a:	6978      	ldr	r0, [r7, #20]
 800711c:	f7ff ff88 	bl	8007030 <xTimerGenericCommand>
 8007120:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d113      	bne.n	8007150 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	60fb      	str	r3, [r7, #12]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	6978      	ldr	r0, [r7, #20]
 8007156:	4798      	blx	r3
}
 8007158:	bf00      	nop
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000ff0 	.word	0x20000ff0

08007164 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800716c:	f107 0308 	add.w	r3, r7, #8
 8007170:	4618      	mov	r0, r3
 8007172:	f000 f857 	bl	8007224 <prvGetNextExpireTime>
 8007176:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4619      	mov	r1, r3
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f803 	bl	8007188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007182:	f000 f8d5 	bl	8007330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007186:	e7f1      	b.n	800716c <prvTimerTask+0x8>

08007188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007192:	f7ff fa39 	bl	8006608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007196:	f107 0308 	add.w	r3, r7, #8
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f866 	bl	800726c <prvSampleTimeNow>
 80071a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d130      	bne.n	800720a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <prvProcessTimerOrBlockTask+0x3c>
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d806      	bhi.n	80071c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071b6:	f7ff fa35 	bl	8006624 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ff85 	bl	80070cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071c2:	e024      	b.n	800720e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d008      	beq.n	80071dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071ca:	4b13      	ldr	r3, [pc, #76]	; (8007218 <prvProcessTimerOrBlockTask+0x90>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <prvProcessTimerOrBlockTask+0x50>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <prvProcessTimerOrBlockTask+0x52>
 80071d8:	2300      	movs	r3, #0
 80071da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <prvProcessTimerOrBlockTask+0x94>)
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	4619      	mov	r1, r3
 80071ea:	f7fe ff7d 	bl	80060e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071ee:	f7ff fa19 	bl	8006624 <xTaskResumeAll>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <prvProcessTimerOrBlockTask+0x98>)
 80071fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	f3bf 8f6f 	isb	sy
}
 8007208:	e001      	b.n	800720e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800720a:	f7ff fa0b 	bl	8006624 <xTaskResumeAll>
}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000ff4 	.word	0x20000ff4
 800721c:	20000ff8 	.word	0x20000ff8
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <prvGetNextExpireTime+0x44>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <prvGetNextExpireTime+0x16>
 8007236:	2201      	movs	r2, #1
 8007238:	e000      	b.n	800723c <prvGetNextExpireTime+0x18>
 800723a:	2200      	movs	r2, #0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d105      	bne.n	8007254 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <prvGetNextExpireTime+0x44>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e001      	b.n	8007258 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000ff0 	.word	0x20000ff0

0800726c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007274:	f7ff fa74 	bl	8006760 <xTaskGetTickCount>
 8007278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800727a:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <prvSampleTimeNow+0x3c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	429a      	cmp	r2, r3
 8007282:	d205      	bcs.n	8007290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007284:	f000 f936 	bl	80074f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	e002      	b.n	8007296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007296:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <prvSampleTimeNow+0x3c>)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800729c:	68fb      	ldr	r3, [r7, #12]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20001000 	.word	0x20001000

080072ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d812      	bhi.n	80072f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d302      	bcc.n	80072e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e01b      	b.n	800731e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <prvInsertTimerInActiveList+0x7c>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fe f820 	bl	8005336 <vListInsert>
 80072f6:	e012      	b.n	800731e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d206      	bcs.n	800730e <prvInsertTimerInActiveList+0x62>
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d302      	bcc.n	800730e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007308:	2301      	movs	r3, #1
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e007      	b.n	800731e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <prvInsertTimerInActiveList+0x80>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f7fe f80c 	bl	8005336 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800731e:	697b      	ldr	r3, [r7, #20]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000ff4 	.word	0x20000ff4
 800732c:	20000ff0 	.word	0x20000ff0

08007330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08e      	sub	sp, #56	; 0x38
 8007334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007336:	e0ca      	b.n	80074ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da18      	bge.n	8007370 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	3304      	adds	r3, #4
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	61fb      	str	r3, [r7, #28]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007366:	6850      	ldr	r0, [r2, #4]
 8007368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800736a:	6892      	ldr	r2, [r2, #8]
 800736c:	4611      	mov	r1, r2
 800736e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	f2c0 80aa 	blt.w	80074cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	3304      	adds	r3, #4
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe f80d 	bl	80053a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800738e:	463b      	mov	r3, r7
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff ff6b 	bl	800726c <prvSampleTimeNow>
 8007396:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b09      	cmp	r3, #9
 800739c:	f200 8097 	bhi.w	80074ce <prvProcessReceivedCommands+0x19e>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <prvProcessReceivedCommands+0x78>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080073d1 	.word	0x080073d1
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073d1 	.word	0x080073d1
 80073b4:	08007445 	.word	0x08007445
 80073b8:	08007459 	.word	0x08007459
 80073bc:	080074a3 	.word	0x080074a3
 80073c0:	080073d1 	.word	0x080073d1
 80073c4:	080073d1 	.word	0x080073d1
 80073c8:	08007445 	.word	0x08007445
 80073cc:	08007459 	.word	0x08007459
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	18d1      	adds	r1, r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073f0:	f7ff ff5c 	bl	80072ac <prvInsertTimerInActiveList>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d069      	beq.n	80074ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d05e      	beq.n	80074ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	441a      	add	r2, r3
 8007418:	2300      	movs	r3, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2300      	movs	r3, #0
 800741e:	2100      	movs	r1, #0
 8007420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007422:	f7ff fe05 	bl	8007030 <xTimerGenericCommand>
 8007426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d14f      	bne.n	80074ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	61bb      	str	r3, [r7, #24]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007456:	e03a      	b.n	80074ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10a      	bne.n	800748e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	617b      	str	r3, [r7, #20]
}
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	18d1      	adds	r1, r2, r3
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800749c:	f7ff ff06 	bl	80072ac <prvInsertTimerInActiveList>
					break;
 80074a0:	e015      	b.n	80074ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80074b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b2:	f000 fbdd 	bl	8007c70 <vPortFree>
 80074b6:	e00a      	b.n	80074ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074ca:	e000      	b.n	80074ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80074cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <prvProcessReceivedCommands+0x1c0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	1d39      	adds	r1, r7, #4
 80074d4:	2200      	movs	r2, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fb1e 	bl	8005b18 <xQueueReceive>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f47f af2a 	bne.w	8007338 <prvProcessReceivedCommands+0x8>
	}
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	3730      	adds	r7, #48	; 0x30
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000ff8 	.word	0x20000ff8

080074f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074fa:	e048      	b.n	800758e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074fc:	4b2d      	ldr	r3, [pc, #180]	; (80075b4 <prvSwitchTimerLists+0xc0>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007506:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <prvSwitchTimerLists+0xc0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7fd ff47 	bl	80053a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d02e      	beq.n	800758e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4413      	add	r3, r2
 8007538:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	429a      	cmp	r2, r3
 8007540:	d90e      	bls.n	8007560 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800754e:	4b19      	ldr	r3, [pc, #100]	; (80075b4 <prvSwitchTimerLists+0xc0>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3304      	adds	r3, #4
 8007556:	4619      	mov	r1, r3
 8007558:	4610      	mov	r0, r2
 800755a:	f7fd feec 	bl	8005336 <vListInsert>
 800755e:	e016      	b.n	800758e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007560:	2300      	movs	r3, #0
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	2100      	movs	r1, #0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fd60 	bl	8007030 <xTimerGenericCommand>
 8007570:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	603b      	str	r3, [r7, #0]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <prvSwitchTimerLists+0xc0>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1b1      	bne.n	80074fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007598:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <prvSwitchTimerLists+0xc0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800759e:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <prvSwitchTimerLists+0xc4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a04      	ldr	r2, [pc, #16]	; (80075b4 <prvSwitchTimerLists+0xc0>)
 80075a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075a6:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <prvSwitchTimerLists+0xc4>)
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	6013      	str	r3, [r2, #0]
}
 80075ac:	bf00      	nop
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000ff0 	.word	0x20000ff0
 80075b8:	20000ff4 	.word	0x20000ff4

080075bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075c2:	f000 f967 	bl	8007894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075c6:	4b15      	ldr	r3, [pc, #84]	; (800761c <prvCheckForValidListAndQueue+0x60>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d120      	bne.n	8007610 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075ce:	4814      	ldr	r0, [pc, #80]	; (8007620 <prvCheckForValidListAndQueue+0x64>)
 80075d0:	f7fd fe60 	bl	8005294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075d4:	4813      	ldr	r0, [pc, #76]	; (8007624 <prvCheckForValidListAndQueue+0x68>)
 80075d6:	f7fd fe5d 	bl	8005294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <prvCheckForValidListAndQueue+0x6c>)
 80075dc:	4a10      	ldr	r2, [pc, #64]	; (8007620 <prvCheckForValidListAndQueue+0x64>)
 80075de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075e0:	4b12      	ldr	r3, [pc, #72]	; (800762c <prvCheckForValidListAndQueue+0x70>)
 80075e2:	4a10      	ldr	r2, [pc, #64]	; (8007624 <prvCheckForValidListAndQueue+0x68>)
 80075e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075e6:	2300      	movs	r3, #0
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	4b11      	ldr	r3, [pc, #68]	; (8007630 <prvCheckForValidListAndQueue+0x74>)
 80075ec:	4a11      	ldr	r2, [pc, #68]	; (8007634 <prvCheckForValidListAndQueue+0x78>)
 80075ee:	2110      	movs	r1, #16
 80075f0:	200a      	movs	r0, #10
 80075f2:	f7fd ff6b 	bl	80054cc <xQueueGenericCreateStatic>
 80075f6:	4603      	mov	r3, r0
 80075f8:	4a08      	ldr	r2, [pc, #32]	; (800761c <prvCheckForValidListAndQueue+0x60>)
 80075fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075fc:	4b07      	ldr	r3, [pc, #28]	; (800761c <prvCheckForValidListAndQueue+0x60>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <prvCheckForValidListAndQueue+0x60>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	490b      	ldr	r1, [pc, #44]	; (8007638 <prvCheckForValidListAndQueue+0x7c>)
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fd18 	bl	8006040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007610:	f000 f970 	bl	80078f4 <vPortExitCritical>
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000ff8 	.word	0x20000ff8
 8007620:	20000fc8 	.word	0x20000fc8
 8007624:	20000fdc 	.word	0x20000fdc
 8007628:	20000ff0 	.word	0x20000ff0
 800762c:	20000ff4 	.word	0x20000ff4
 8007630:	200010a4 	.word	0x200010a4
 8007634:	20001004 	.word	0x20001004
 8007638:	080089a8 	.word	0x080089a8

0800763c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3b04      	subs	r3, #4
 800764c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3b04      	subs	r3, #4
 800765a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f023 0201 	bic.w	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3b04      	subs	r3, #4
 800766a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800766c:	4a0c      	ldr	r2, [pc, #48]	; (80076a0 <pxPortInitialiseStack+0x64>)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3b14      	subs	r3, #20
 8007676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3b04      	subs	r3, #4
 8007682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f06f 0202 	mvn.w	r2, #2
 800768a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3b20      	subs	r3, #32
 8007690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007692:	68fb      	ldr	r3, [r7, #12]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	080076a5 	.word	0x080076a5

080076a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <prvTaskExitError+0x54>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d00a      	beq.n	80076ce <prvTaskExitError+0x2a>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <prvTaskExitError+0x28>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	60bb      	str	r3, [r7, #8]
}
 80076e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076e2:	bf00      	nop
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0fc      	beq.n	80076e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	2000000c 	.word	0x2000000c
 80076fc:	00000000 	.word	0x00000000

08007700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <pxCurrentTCBConst2>)
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	6808      	ldr	r0, [r1, #0]
 8007706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	f380 8809 	msr	PSP, r0
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8811 	msr	BASEPRI, r0
 800771a:	4770      	bx	lr
 800771c:	f3af 8000 	nop.w

08007720 <pxCurrentTCBConst2>:
 8007720:	20000ac8 	.word	0x20000ac8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007728:	4808      	ldr	r0, [pc, #32]	; (800774c <prvPortStartFirstTask+0x24>)
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f380 8808 	msr	MSP, r0
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8814 	msr	CONTROL, r0
 800773a:	b662      	cpsie	i
 800773c:	b661      	cpsie	f
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	df00      	svc	0
 8007748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800774a:	bf00      	nop
 800774c:	e000ed08 	.word	0xe000ed08

08007750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007756:	4b46      	ldr	r3, [pc, #280]	; (8007870 <xPortStartScheduler+0x120>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a46      	ldr	r2, [pc, #280]	; (8007874 <xPortStartScheduler+0x124>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10a      	bne.n	8007776 <xPortStartScheduler+0x26>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	613b      	str	r3, [r7, #16]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007776:	4b3e      	ldr	r3, [pc, #248]	; (8007870 <xPortStartScheduler+0x120>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a3f      	ldr	r2, [pc, #252]	; (8007878 <xPortStartScheduler+0x128>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10a      	bne.n	8007796 <xPortStartScheduler+0x46>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007796:	4b39      	ldr	r3, [pc, #228]	; (800787c <xPortStartScheduler+0x12c>)
 8007798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	4b31      	ldr	r3, [pc, #196]	; (8007880 <xPortStartScheduler+0x130>)
 80077bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077be:	4b31      	ldr	r3, [pc, #196]	; (8007884 <xPortStartScheduler+0x134>)
 80077c0:	2207      	movs	r2, #7
 80077c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077c4:	e009      	b.n	80077da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077c6:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <xPortStartScheduler+0x134>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	4a2d      	ldr	r2, [pc, #180]	; (8007884 <xPortStartScheduler+0x134>)
 80077ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e2:	2b80      	cmp	r3, #128	; 0x80
 80077e4:	d0ef      	beq.n	80077c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077e6:	4b27      	ldr	r3, [pc, #156]	; (8007884 <xPortStartScheduler+0x134>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f1c3 0307 	rsb	r3, r3, #7
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d00a      	beq.n	8007808 <xPortStartScheduler+0xb8>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007808:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <xPortStartScheduler+0x134>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	4a1d      	ldr	r2, [pc, #116]	; (8007884 <xPortStartScheduler+0x134>)
 8007810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007812:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <xPortStartScheduler+0x134>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800781a:	4a1a      	ldr	r2, [pc, #104]	; (8007884 <xPortStartScheduler+0x134>)
 800781c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	b2da      	uxtb	r2, r3
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007826:	4b18      	ldr	r3, [pc, #96]	; (8007888 <xPortStartScheduler+0x138>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a17      	ldr	r2, [pc, #92]	; (8007888 <xPortStartScheduler+0x138>)
 800782c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007832:	4b15      	ldr	r3, [pc, #84]	; (8007888 <xPortStartScheduler+0x138>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a14      	ldr	r2, [pc, #80]	; (8007888 <xPortStartScheduler+0x138>)
 8007838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800783c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800783e:	f000 f8dd 	bl	80079fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <xPortStartScheduler+0x13c>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007848:	f000 f8fc 	bl	8007a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800784c:	4b10      	ldr	r3, [pc, #64]	; (8007890 <xPortStartScheduler+0x140>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0f      	ldr	r2, [pc, #60]	; (8007890 <xPortStartScheduler+0x140>)
 8007852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007858:	f7ff ff66 	bl	8007728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800785c:	f7ff f84a 	bl	80068f4 <vTaskSwitchContext>
	prvTaskExitError();
 8007860:	f7ff ff20 	bl	80076a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	e000ed00 	.word	0xe000ed00
 8007874:	410fc271 	.word	0x410fc271
 8007878:	410fc270 	.word	0x410fc270
 800787c:	e000e400 	.word	0xe000e400
 8007880:	200010f4 	.word	0x200010f4
 8007884:	200010f8 	.word	0x200010f8
 8007888:	e000ed20 	.word	0xe000ed20
 800788c:	2000000c 	.word	0x2000000c
 8007890:	e000ef34 	.word	0xe000ef34

08007894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	607b      	str	r3, [r7, #4]
}
 80078ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <vPortEnterCritical+0x58>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	4a0d      	ldr	r2, [pc, #52]	; (80078ec <vPortEnterCritical+0x58>)
 80078b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <vPortEnterCritical+0x58>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d10f      	bne.n	80078e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <vPortEnterCritical+0x5c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	603b      	str	r3, [r7, #0]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <vPortEnterCritical+0x4a>
	}
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	2000000c 	.word	0x2000000c
 80078f0:	e000ed04 	.word	0xe000ed04

080078f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078fa:	4b12      	ldr	r3, [pc, #72]	; (8007944 <vPortExitCritical+0x50>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <vPortExitCritical+0x24>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	607b      	str	r3, [r7, #4]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <vPortExitCritical+0x50>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	4a09      	ldr	r2, [pc, #36]	; (8007944 <vPortExitCritical+0x50>)
 8007920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007922:	4b08      	ldr	r3, [pc, #32]	; (8007944 <vPortExitCritical+0x50>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <vPortExitCritical+0x42>
 800792a:	2300      	movs	r3, #0
 800792c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	f383 8811 	msr	BASEPRI, r3
}
 8007934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	2000000c 	.word	0x2000000c
	...

08007950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007950:	f3ef 8009 	mrs	r0, PSP
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <pxCurrentTCBConst>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f01e 0f10 	tst.w	lr, #16
 8007960:	bf08      	it	eq
 8007962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	6010      	str	r0, [r2, #0]
 800796c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007974:	f380 8811 	msr	BASEPRI, r0
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f7fe ffb8 	bl	80068f4 <vTaskSwitchContext>
 8007984:	f04f 0000 	mov.w	r0, #0
 8007988:	f380 8811 	msr	BASEPRI, r0
 800798c:	bc09      	pop	{r0, r3}
 800798e:	6819      	ldr	r1, [r3, #0]
 8007990:	6808      	ldr	r0, [r1, #0]
 8007992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007996:	f01e 0f10 	tst.w	lr, #16
 800799a:	bf08      	it	eq
 800799c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079a0:	f380 8809 	msr	PSP, r0
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst>:
 80079b0:	20000ac8 	.word	0x20000ac8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	607b      	str	r3, [r7, #4]
}
 80079d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079d2:	f7fe fed5 	bl	8006780 <xTaskIncrementTick>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <xPortSysTickHandler+0x40>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f383 8811 	msr	BASEPRI, r3
}
 80079ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <vPortSetupTimerInterrupt+0x38>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <vPortSetupTimerInterrupt+0x3c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <vPortSetupTimerInterrupt+0x40>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <vPortSetupTimerInterrupt+0x44>)
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a1e:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	bf00      	nop
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	e000e010 	.word	0xe000e010
 8007a34:	e000e018 	.word	0xe000e018
 8007a38:	20000000 	.word	0x20000000
 8007a3c:	10624dd3 	.word	0x10624dd3
 8007a40:	e000e014 	.word	0xe000e014

08007a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a54 <vPortEnableVFP+0x10>
 8007a48:	6801      	ldr	r1, [r0, #0]
 8007a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a4e:	6001      	str	r1, [r0, #0]
 8007a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a52:	bf00      	nop
 8007a54:	e000ed88 	.word	0xe000ed88

08007a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a5e:	f3ef 8305 	mrs	r3, IPSR
 8007a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d914      	bls.n	8007a94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a6a:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <vPortValidateInterruptPriority+0x70>)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a74:	4b15      	ldr	r3, [pc, #84]	; (8007acc <vPortValidateInterruptPriority+0x74>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	7afa      	ldrb	r2, [r7, #11]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d20a      	bcs.n	8007a94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	607b      	str	r3, [r7, #4]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a94:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <vPortValidateInterruptPriority+0x78>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <vPortValidateInterruptPriority+0x7c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d90a      	bls.n	8007aba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	603b      	str	r3, [r7, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <vPortValidateInterruptPriority+0x60>
	}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	e000e3f0 	.word	0xe000e3f0
 8007acc:	200010f4 	.word	0x200010f4
 8007ad0:	e000ed0c 	.word	0xe000ed0c
 8007ad4:	200010f8 	.word	0x200010f8

08007ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ae4:	f7fe fd90 	bl	8006608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ae8:	4b5b      	ldr	r3, [pc, #364]	; (8007c58 <pvPortMalloc+0x180>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007af0:	f000 f920 	bl	8007d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007af4:	4b59      	ldr	r3, [pc, #356]	; (8007c5c <pvPortMalloc+0x184>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 8093 	bne.w	8007c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01d      	beq.n	8007b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b08:	2208      	movs	r2, #8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d014      	beq.n	8007b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f023 0307 	bic.w	r3, r3, #7
 8007b20:	3308      	adds	r3, #8
 8007b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <pvPortMalloc+0x6c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	617b      	str	r3, [r7, #20]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d06e      	beq.n	8007c28 <pvPortMalloc+0x150>
 8007b4a:	4b45      	ldr	r3, [pc, #276]	; (8007c60 <pvPortMalloc+0x188>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d869      	bhi.n	8007c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b54:	4b43      	ldr	r3, [pc, #268]	; (8007c64 <pvPortMalloc+0x18c>)
 8007b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b58:	4b42      	ldr	r3, [pc, #264]	; (8007c64 <pvPortMalloc+0x18c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b5e:	e004      	b.n	8007b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d903      	bls.n	8007b7c <pvPortMalloc+0xa4>
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f1      	bne.n	8007b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b7c:	4b36      	ldr	r3, [pc, #216]	; (8007c58 <pvPortMalloc+0x180>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d050      	beq.n	8007c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2208      	movs	r2, #8
 8007b8c:	4413      	add	r3, r2
 8007b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d91f      	bls.n	8007be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4413      	add	r3, r2
 8007bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	613b      	str	r3, [r7, #16]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	1ad2      	subs	r2, r2, r3
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007be2:	69b8      	ldr	r0, [r7, #24]
 8007be4:	f000 f908 	bl	8007df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007be8:	4b1d      	ldr	r3, [pc, #116]	; (8007c60 <pvPortMalloc+0x188>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <pvPortMalloc+0x188>)
 8007bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <pvPortMalloc+0x188>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <pvPortMalloc+0x190>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d203      	bcs.n	8007c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <pvPortMalloc+0x188>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a18      	ldr	r2, [pc, #96]	; (8007c68 <pvPortMalloc+0x190>)
 8007c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <pvPortMalloc+0x184>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	431a      	orrs	r2, r3
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c1e:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <pvPortMalloc+0x194>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	4a11      	ldr	r2, [pc, #68]	; (8007c6c <pvPortMalloc+0x194>)
 8007c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c28:	f7fe fcfc 	bl	8006624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <pvPortMalloc+0x174>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60fb      	str	r3, [r7, #12]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <pvPortMalloc+0x172>
	return pvReturn;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3728      	adds	r7, #40	; 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20004d04 	.word	0x20004d04
 8007c5c:	20004d18 	.word	0x20004d18
 8007c60:	20004d08 	.word	0x20004d08
 8007c64:	20004cfc 	.word	0x20004cfc
 8007c68:	20004d0c 	.word	0x20004d0c
 8007c6c:	20004d10 	.word	0x20004d10

08007c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d04d      	beq.n	8007d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c82:	2308      	movs	r3, #8
 8007c84:	425b      	negs	r3, r3
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	4413      	add	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <vPortFree+0xb8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10a      	bne.n	8007cb4 <vPortFree+0x44>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	60fb      	str	r3, [r7, #12]
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <vPortFree+0x62>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60bb      	str	r3, [r7, #8]
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <vPortFree+0xb8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01e      	beq.n	8007d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d11a      	bne.n	8007d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <vPortFree+0xb8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cf8:	f7fe fc86 	bl	8006608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <vPortFree+0xbc>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4413      	add	r3, r2
 8007d06:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <vPortFree+0xbc>)
 8007d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d0a:	6938      	ldr	r0, [r7, #16]
 8007d0c:	f000 f874 	bl	8007df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <vPortFree+0xc0>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	4a06      	ldr	r2, [pc, #24]	; (8007d30 <vPortFree+0xc0>)
 8007d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d1a:	f7fe fc83 	bl	8006624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d1e:	bf00      	nop
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20004d18 	.word	0x20004d18
 8007d2c:	20004d08 	.word	0x20004d08
 8007d30:	20004d14 	.word	0x20004d14

08007d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d40:	4b27      	ldr	r3, [pc, #156]	; (8007de0 <prvHeapInit+0xac>)
 8007d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00c      	beq.n	8007d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3307      	adds	r3, #7
 8007d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0307 	bic.w	r3, r3, #7
 8007d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <prvHeapInit+0xac>)
 8007d64:	4413      	add	r3, r2
 8007d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d6c:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <prvHeapInit+0xb0>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d72:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <prvHeapInit+0xb0>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d80:	2208      	movs	r2, #8
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0307 	bic.w	r3, r3, #7
 8007d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <prvHeapInit+0xb4>)
 8007d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <prvHeapInit+0xb4>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d9e:	4b12      	ldr	r3, [pc, #72]	; (8007de8 <prvHeapInit+0xb4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007db4:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <prvHeapInit+0xb4>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	4a0a      	ldr	r2, [pc, #40]	; (8007dec <prvHeapInit+0xb8>)
 8007dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	4a09      	ldr	r2, [pc, #36]	; (8007df0 <prvHeapInit+0xbc>)
 8007dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dcc:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <prvHeapInit+0xc0>)
 8007dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dd2:	601a      	str	r2, [r3, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	200010fc 	.word	0x200010fc
 8007de4:	20004cfc 	.word	0x20004cfc
 8007de8:	20004d04 	.word	0x20004d04
 8007dec:	20004d0c 	.word	0x20004d0c
 8007df0:	20004d08 	.word	0x20004d08
 8007df4:	20004d18 	.word	0x20004d18

08007df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e00:	4b28      	ldr	r3, [pc, #160]	; (8007ea4 <prvInsertBlockIntoFreeList+0xac>)
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	e002      	b.n	8007e0c <prvInsertBlockIntoFreeList+0x14>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d8f7      	bhi.n	8007e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	4413      	add	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d108      	bne.n	8007e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	441a      	add	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	441a      	add	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d118      	bne.n	8007e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b15      	ldr	r3, [pc, #84]	; (8007ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d00d      	beq.n	8007e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	441a      	add	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	e008      	b.n	8007e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	e003      	b.n	8007e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d002      	beq.n	8007e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20004cfc 	.word	0x20004cfc
 8007ea8:	20004d04 	.word	0x20004d04

08007eac <__errno>:
 8007eac:	4b01      	ldr	r3, [pc, #4]	; (8007eb4 <__errno+0x8>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000010 	.word	0x20000010

08007eb8 <__libc_init_array>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4d0d      	ldr	r5, [pc, #52]	; (8007ef0 <__libc_init_array+0x38>)
 8007ebc:	4c0d      	ldr	r4, [pc, #52]	; (8007ef4 <__libc_init_array+0x3c>)
 8007ebe:	1b64      	subs	r4, r4, r5
 8007ec0:	10a4      	asrs	r4, r4, #2
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	d109      	bne.n	8007edc <__libc_init_array+0x24>
 8007ec8:	4d0b      	ldr	r5, [pc, #44]	; (8007ef8 <__libc_init_array+0x40>)
 8007eca:	4c0c      	ldr	r4, [pc, #48]	; (8007efc <__libc_init_array+0x44>)
 8007ecc:	f000 fd18 	bl	8008900 <_init>
 8007ed0:	1b64      	subs	r4, r4, r5
 8007ed2:	10a4      	asrs	r4, r4, #2
 8007ed4:	2600      	movs	r6, #0
 8007ed6:	42a6      	cmp	r6, r4
 8007ed8:	d105      	bne.n	8007ee6 <__libc_init_array+0x2e>
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee0:	4798      	blx	r3
 8007ee2:	3601      	adds	r6, #1
 8007ee4:	e7ee      	b.n	8007ec4 <__libc_init_array+0xc>
 8007ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eea:	4798      	blx	r3
 8007eec:	3601      	adds	r6, #1
 8007eee:	e7f2      	b.n	8007ed6 <__libc_init_array+0x1e>
 8007ef0:	08008acc 	.word	0x08008acc
 8007ef4:	08008acc 	.word	0x08008acc
 8007ef8:	08008acc 	.word	0x08008acc
 8007efc:	08008ad0 	.word	0x08008ad0

08007f00 <__retarget_lock_acquire_recursive>:
 8007f00:	4770      	bx	lr

08007f02 <__retarget_lock_release_recursive>:
 8007f02:	4770      	bx	lr

08007f04 <memcpy>:
 8007f04:	440a      	add	r2, r1
 8007f06:	4291      	cmp	r1, r2
 8007f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f0c:	d100      	bne.n	8007f10 <memcpy+0xc>
 8007f0e:	4770      	bx	lr
 8007f10:	b510      	push	{r4, lr}
 8007f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f1a:	4291      	cmp	r1, r2
 8007f1c:	d1f9      	bne.n	8007f12 <memcpy+0xe>
 8007f1e:	bd10      	pop	{r4, pc}

08007f20 <memset>:
 8007f20:	4402      	add	r2, r0
 8007f22:	4603      	mov	r3, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d100      	bne.n	8007f2a <memset+0xa>
 8007f28:	4770      	bx	lr
 8007f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2e:	e7f9      	b.n	8007f24 <memset+0x4>

08007f30 <sbrk_aligned>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4e0e      	ldr	r6, [pc, #56]	; (8007f6c <sbrk_aligned+0x3c>)
 8007f34:	460c      	mov	r4, r1
 8007f36:	6831      	ldr	r1, [r6, #0]
 8007f38:	4605      	mov	r5, r0
 8007f3a:	b911      	cbnz	r1, 8007f42 <sbrk_aligned+0x12>
 8007f3c:	f000 f8f6 	bl	800812c <_sbrk_r>
 8007f40:	6030      	str	r0, [r6, #0]
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 f8f1 	bl	800812c <_sbrk_r>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d00a      	beq.n	8007f64 <sbrk_aligned+0x34>
 8007f4e:	1cc4      	adds	r4, r0, #3
 8007f50:	f024 0403 	bic.w	r4, r4, #3
 8007f54:	42a0      	cmp	r0, r4
 8007f56:	d007      	beq.n	8007f68 <sbrk_aligned+0x38>
 8007f58:	1a21      	subs	r1, r4, r0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 f8e6 	bl	800812c <_sbrk_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d101      	bne.n	8007f68 <sbrk_aligned+0x38>
 8007f64:	f04f 34ff 	mov.w	r4, #4294967295
 8007f68:	4620      	mov	r0, r4
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}
 8007f6c:	20004d24 	.word	0x20004d24

08007f70 <_malloc_r>:
 8007f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f74:	1ccd      	adds	r5, r1, #3
 8007f76:	f025 0503 	bic.w	r5, r5, #3
 8007f7a:	3508      	adds	r5, #8
 8007f7c:	2d0c      	cmp	r5, #12
 8007f7e:	bf38      	it	cc
 8007f80:	250c      	movcc	r5, #12
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	4607      	mov	r7, r0
 8007f86:	db01      	blt.n	8007f8c <_malloc_r+0x1c>
 8007f88:	42a9      	cmp	r1, r5
 8007f8a:	d905      	bls.n	8007f98 <_malloc_r+0x28>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	2600      	movs	r6, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f98:	4e2e      	ldr	r6, [pc, #184]	; (8008054 <_malloc_r+0xe4>)
 8007f9a:	f000 f917 	bl	80081cc <__malloc_lock>
 8007f9e:	6833      	ldr	r3, [r6, #0]
 8007fa0:	461c      	mov	r4, r3
 8007fa2:	bb34      	cbnz	r4, 8007ff2 <_malloc_r+0x82>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f7ff ffc2 	bl	8007f30 <sbrk_aligned>
 8007fac:	1c43      	adds	r3, r0, #1
 8007fae:	4604      	mov	r4, r0
 8007fb0:	d14d      	bne.n	800804e <_malloc_r+0xde>
 8007fb2:	6834      	ldr	r4, [r6, #0]
 8007fb4:	4626      	mov	r6, r4
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	d140      	bne.n	800803c <_malloc_r+0xcc>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	eb04 0803 	add.w	r8, r4, r3
 8007fc4:	f000 f8b2 	bl	800812c <_sbrk_r>
 8007fc8:	4580      	cmp	r8, r0
 8007fca:	d13a      	bne.n	8008042 <_malloc_r+0xd2>
 8007fcc:	6821      	ldr	r1, [r4, #0]
 8007fce:	3503      	adds	r5, #3
 8007fd0:	1a6d      	subs	r5, r5, r1
 8007fd2:	f025 0503 	bic.w	r5, r5, #3
 8007fd6:	3508      	adds	r5, #8
 8007fd8:	2d0c      	cmp	r5, #12
 8007fda:	bf38      	it	cc
 8007fdc:	250c      	movcc	r5, #12
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff ffa5 	bl	8007f30 <sbrk_aligned>
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d02b      	beq.n	8008042 <_malloc_r+0xd2>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	442b      	add	r3, r5
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	e00e      	b.n	8008010 <_malloc_r+0xa0>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	1b52      	subs	r2, r2, r5
 8007ff6:	d41e      	bmi.n	8008036 <_malloc_r+0xc6>
 8007ff8:	2a0b      	cmp	r2, #11
 8007ffa:	d916      	bls.n	800802a <_malloc_r+0xba>
 8007ffc:	1961      	adds	r1, r4, r5
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	6025      	str	r5, [r4, #0]
 8008002:	bf18      	it	ne
 8008004:	6059      	strne	r1, [r3, #4]
 8008006:	6863      	ldr	r3, [r4, #4]
 8008008:	bf08      	it	eq
 800800a:	6031      	streq	r1, [r6, #0]
 800800c:	5162      	str	r2, [r4, r5]
 800800e:	604b      	str	r3, [r1, #4]
 8008010:	4638      	mov	r0, r7
 8008012:	f104 060b 	add.w	r6, r4, #11
 8008016:	f000 f8df 	bl	80081d8 <__malloc_unlock>
 800801a:	f026 0607 	bic.w	r6, r6, #7
 800801e:	1d23      	adds	r3, r4, #4
 8008020:	1af2      	subs	r2, r6, r3
 8008022:	d0b6      	beq.n	8007f92 <_malloc_r+0x22>
 8008024:	1b9b      	subs	r3, r3, r6
 8008026:	50a3      	str	r3, [r4, r2]
 8008028:	e7b3      	b.n	8007f92 <_malloc_r+0x22>
 800802a:	6862      	ldr	r2, [r4, #4]
 800802c:	42a3      	cmp	r3, r4
 800802e:	bf0c      	ite	eq
 8008030:	6032      	streq	r2, [r6, #0]
 8008032:	605a      	strne	r2, [r3, #4]
 8008034:	e7ec      	b.n	8008010 <_malloc_r+0xa0>
 8008036:	4623      	mov	r3, r4
 8008038:	6864      	ldr	r4, [r4, #4]
 800803a:	e7b2      	b.n	8007fa2 <_malloc_r+0x32>
 800803c:	4634      	mov	r4, r6
 800803e:	6876      	ldr	r6, [r6, #4]
 8008040:	e7b9      	b.n	8007fb6 <_malloc_r+0x46>
 8008042:	230c      	movs	r3, #12
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	4638      	mov	r0, r7
 8008048:	f000 f8c6 	bl	80081d8 <__malloc_unlock>
 800804c:	e7a1      	b.n	8007f92 <_malloc_r+0x22>
 800804e:	6025      	str	r5, [r4, #0]
 8008050:	e7de      	b.n	8008010 <_malloc_r+0xa0>
 8008052:	bf00      	nop
 8008054:	20004d20 	.word	0x20004d20

08008058 <cleanup_glue>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	460c      	mov	r4, r1
 800805c:	6809      	ldr	r1, [r1, #0]
 800805e:	4605      	mov	r5, r0
 8008060:	b109      	cbz	r1, 8008066 <cleanup_glue+0xe>
 8008062:	f7ff fff9 	bl	8008058 <cleanup_glue>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800806e:	f000 b8b9 	b.w	80081e4 <_free_r>
	...

08008074 <_reclaim_reent>:
 8008074:	4b2c      	ldr	r3, [pc, #176]	; (8008128 <_reclaim_reent+0xb4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4283      	cmp	r3, r0
 800807a:	b570      	push	{r4, r5, r6, lr}
 800807c:	4604      	mov	r4, r0
 800807e:	d051      	beq.n	8008124 <_reclaim_reent+0xb0>
 8008080:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008082:	b143      	cbz	r3, 8008096 <_reclaim_reent+0x22>
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d14a      	bne.n	8008120 <_reclaim_reent+0xac>
 800808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	b111      	cbz	r1, 8008096 <_reclaim_reent+0x22>
 8008090:	4620      	mov	r0, r4
 8008092:	f000 f8a7 	bl	80081e4 <_free_r>
 8008096:	6961      	ldr	r1, [r4, #20]
 8008098:	b111      	cbz	r1, 80080a0 <_reclaim_reent+0x2c>
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f8a2 	bl	80081e4 <_free_r>
 80080a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080a2:	b111      	cbz	r1, 80080aa <_reclaim_reent+0x36>
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 f89d 	bl	80081e4 <_free_r>
 80080aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080ac:	b111      	cbz	r1, 80080b4 <_reclaim_reent+0x40>
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f898 	bl	80081e4 <_free_r>
 80080b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80080b6:	b111      	cbz	r1, 80080be <_reclaim_reent+0x4a>
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 f893 	bl	80081e4 <_free_r>
 80080be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080c0:	b111      	cbz	r1, 80080c8 <_reclaim_reent+0x54>
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f88e 	bl	80081e4 <_free_r>
 80080c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80080ca:	b111      	cbz	r1, 80080d2 <_reclaim_reent+0x5e>
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 f889 	bl	80081e4 <_free_r>
 80080d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80080d4:	b111      	cbz	r1, 80080dc <_reclaim_reent+0x68>
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 f884 	bl	80081e4 <_free_r>
 80080dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080de:	b111      	cbz	r1, 80080e6 <_reclaim_reent+0x72>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f87f 	bl	80081e4 <_free_r>
 80080e6:	69a3      	ldr	r3, [r4, #24]
 80080e8:	b1e3      	cbz	r3, 8008124 <_reclaim_reent+0xb0>
 80080ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080ec:	4620      	mov	r0, r4
 80080ee:	4798      	blx	r3
 80080f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080f2:	b1b9      	cbz	r1, 8008124 <_reclaim_reent+0xb0>
 80080f4:	4620      	mov	r0, r4
 80080f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080fa:	f7ff bfad 	b.w	8008058 <cleanup_glue>
 80080fe:	5949      	ldr	r1, [r1, r5]
 8008100:	b941      	cbnz	r1, 8008114 <_reclaim_reent+0xa0>
 8008102:	3504      	adds	r5, #4
 8008104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008106:	2d80      	cmp	r5, #128	; 0x80
 8008108:	68d9      	ldr	r1, [r3, #12]
 800810a:	d1f8      	bne.n	80080fe <_reclaim_reent+0x8a>
 800810c:	4620      	mov	r0, r4
 800810e:	f000 f869 	bl	80081e4 <_free_r>
 8008112:	e7ba      	b.n	800808a <_reclaim_reent+0x16>
 8008114:	680e      	ldr	r6, [r1, #0]
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f864 	bl	80081e4 <_free_r>
 800811c:	4631      	mov	r1, r6
 800811e:	e7ef      	b.n	8008100 <_reclaim_reent+0x8c>
 8008120:	2500      	movs	r5, #0
 8008122:	e7ef      	b.n	8008104 <_reclaim_reent+0x90>
 8008124:	bd70      	pop	{r4, r5, r6, pc}
 8008126:	bf00      	nop
 8008128:	20000010 	.word	0x20000010

0800812c <_sbrk_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	; (8008148 <_sbrk_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f9 fb9a 	bl	8001870 <_sbrk>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_sbrk_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_sbrk_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	20004d28 	.word	0x20004d28

0800814c <sniprintf>:
 800814c:	b40c      	push	{r2, r3}
 800814e:	b530      	push	{r4, r5, lr}
 8008150:	4b17      	ldr	r3, [pc, #92]	; (80081b0 <sniprintf+0x64>)
 8008152:	1e0c      	subs	r4, r1, #0
 8008154:	681d      	ldr	r5, [r3, #0]
 8008156:	b09d      	sub	sp, #116	; 0x74
 8008158:	da08      	bge.n	800816c <sniprintf+0x20>
 800815a:	238b      	movs	r3, #139	; 0x8b
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	f04f 30ff 	mov.w	r0, #4294967295
 8008162:	b01d      	add	sp, #116	; 0x74
 8008164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008168:	b002      	add	sp, #8
 800816a:	4770      	bx	lr
 800816c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008170:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008174:	bf14      	ite	ne
 8008176:	f104 33ff 	addne.w	r3, r4, #4294967295
 800817a:	4623      	moveq	r3, r4
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008184:	9002      	str	r0, [sp, #8]
 8008186:	9006      	str	r0, [sp, #24]
 8008188:	f8ad 3016 	strh.w	r3, [sp, #22]
 800818c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800818e:	ab21      	add	r3, sp, #132	; 0x84
 8008190:	a902      	add	r1, sp, #8
 8008192:	4628      	mov	r0, r5
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	f000 f8cd 	bl	8008334 <_svfiprintf_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	bfbc      	itt	lt
 800819e:	238b      	movlt	r3, #139	; 0x8b
 80081a0:	602b      	strlt	r3, [r5, #0]
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	d0dd      	beq.n	8008162 <sniprintf+0x16>
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	e7d9      	b.n	8008162 <sniprintf+0x16>
 80081ae:	bf00      	nop
 80081b0:	20000010 	.word	0x20000010

080081b4 <strnlen>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	4602      	mov	r2, r0
 80081b8:	4401      	add	r1, r0
 80081ba:	428a      	cmp	r2, r1
 80081bc:	4613      	mov	r3, r2
 80081be:	d003      	beq.n	80081c8 <strnlen+0x14>
 80081c0:	781c      	ldrb	r4, [r3, #0]
 80081c2:	3201      	adds	r2, #1
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	d1f8      	bne.n	80081ba <strnlen+0x6>
 80081c8:	1a18      	subs	r0, r3, r0
 80081ca:	bd10      	pop	{r4, pc}

080081cc <__malloc_lock>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__malloc_lock+0x8>)
 80081ce:	f7ff be97 	b.w	8007f00 <__retarget_lock_acquire_recursive>
 80081d2:	bf00      	nop
 80081d4:	20004d1c 	.word	0x20004d1c

080081d8 <__malloc_unlock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__malloc_unlock+0x8>)
 80081da:	f7ff be92 	b.w	8007f02 <__retarget_lock_release_recursive>
 80081de:	bf00      	nop
 80081e0:	20004d1c 	.word	0x20004d1c

080081e4 <_free_r>:
 80081e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d044      	beq.n	8008274 <_free_r+0x90>
 80081ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ee:	9001      	str	r0, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f1a1 0404 	sub.w	r4, r1, #4
 80081f6:	bfb8      	it	lt
 80081f8:	18e4      	addlt	r4, r4, r3
 80081fa:	f7ff ffe7 	bl	80081cc <__malloc_lock>
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <_free_r+0x94>)
 8008200:	9801      	ldr	r0, [sp, #4]
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	b933      	cbnz	r3, 8008214 <_free_r+0x30>
 8008206:	6063      	str	r3, [r4, #4]
 8008208:	6014      	str	r4, [r2, #0]
 800820a:	b003      	add	sp, #12
 800820c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008210:	f7ff bfe2 	b.w	80081d8 <__malloc_unlock>
 8008214:	42a3      	cmp	r3, r4
 8008216:	d908      	bls.n	800822a <_free_r+0x46>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf01      	itttt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	e7ed      	b.n	8008206 <_free_r+0x22>
 800822a:	461a      	mov	r2, r3
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b10b      	cbz	r3, 8008234 <_free_r+0x50>
 8008230:	42a3      	cmp	r3, r4
 8008232:	d9fa      	bls.n	800822a <_free_r+0x46>
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	1855      	adds	r5, r2, r1
 8008238:	42a5      	cmp	r5, r4
 800823a:	d10b      	bne.n	8008254 <_free_r+0x70>
 800823c:	6824      	ldr	r4, [r4, #0]
 800823e:	4421      	add	r1, r4
 8008240:	1854      	adds	r4, r2, r1
 8008242:	42a3      	cmp	r3, r4
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	d1e0      	bne.n	800820a <_free_r+0x26>
 8008248:	681c      	ldr	r4, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	6053      	str	r3, [r2, #4]
 800824e:	4421      	add	r1, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	e7da      	b.n	800820a <_free_r+0x26>
 8008254:	d902      	bls.n	800825c <_free_r+0x78>
 8008256:	230c      	movs	r3, #12
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	e7d6      	b.n	800820a <_free_r+0x26>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf04      	itt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	6063      	str	r3, [r4, #4]
 800826a:	bf04      	itt	eq
 800826c:	1949      	addeq	r1, r1, r5
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6054      	str	r4, [r2, #4]
 8008272:	e7ca      	b.n	800820a <_free_r+0x26>
 8008274:	b003      	add	sp, #12
 8008276:	bd30      	pop	{r4, r5, pc}
 8008278:	20004d20 	.word	0x20004d20

0800827c <__ssputs_r>:
 800827c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008280:	688e      	ldr	r6, [r1, #8]
 8008282:	429e      	cmp	r6, r3
 8008284:	4682      	mov	sl, r0
 8008286:	460c      	mov	r4, r1
 8008288:	4690      	mov	r8, r2
 800828a:	461f      	mov	r7, r3
 800828c:	d838      	bhi.n	8008300 <__ssputs_r+0x84>
 800828e:	898a      	ldrh	r2, [r1, #12]
 8008290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008294:	d032      	beq.n	80082fc <__ssputs_r+0x80>
 8008296:	6825      	ldr	r5, [r4, #0]
 8008298:	6909      	ldr	r1, [r1, #16]
 800829a:	eba5 0901 	sub.w	r9, r5, r1
 800829e:	6965      	ldr	r5, [r4, #20]
 80082a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082a8:	3301      	adds	r3, #1
 80082aa:	444b      	add	r3, r9
 80082ac:	106d      	asrs	r5, r5, #1
 80082ae:	429d      	cmp	r5, r3
 80082b0:	bf38      	it	cc
 80082b2:	461d      	movcc	r5, r3
 80082b4:	0553      	lsls	r3, r2, #21
 80082b6:	d531      	bpl.n	800831c <__ssputs_r+0xa0>
 80082b8:	4629      	mov	r1, r5
 80082ba:	f7ff fe59 	bl	8007f70 <_malloc_r>
 80082be:	4606      	mov	r6, r0
 80082c0:	b950      	cbnz	r0, 80082d8 <__ssputs_r+0x5c>
 80082c2:	230c      	movs	r3, #12
 80082c4:	f8ca 3000 	str.w	r3, [sl]
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295
 80082d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d8:	6921      	ldr	r1, [r4, #16]
 80082da:	464a      	mov	r2, r9
 80082dc:	f7ff fe12 	bl	8007f04 <memcpy>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	6126      	str	r6, [r4, #16]
 80082ee:	6165      	str	r5, [r4, #20]
 80082f0:	444e      	add	r6, r9
 80082f2:	eba5 0509 	sub.w	r5, r5, r9
 80082f6:	6026      	str	r6, [r4, #0]
 80082f8:	60a5      	str	r5, [r4, #8]
 80082fa:	463e      	mov	r6, r7
 80082fc:	42be      	cmp	r6, r7
 80082fe:	d900      	bls.n	8008302 <__ssputs_r+0x86>
 8008300:	463e      	mov	r6, r7
 8008302:	6820      	ldr	r0, [r4, #0]
 8008304:	4632      	mov	r2, r6
 8008306:	4641      	mov	r1, r8
 8008308:	f000 faa8 	bl	800885c <memmove>
 800830c:	68a3      	ldr	r3, [r4, #8]
 800830e:	1b9b      	subs	r3, r3, r6
 8008310:	60a3      	str	r3, [r4, #8]
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	4433      	add	r3, r6
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	2000      	movs	r0, #0
 800831a:	e7db      	b.n	80082d4 <__ssputs_r+0x58>
 800831c:	462a      	mov	r2, r5
 800831e:	f000 fab7 	bl	8008890 <_realloc_r>
 8008322:	4606      	mov	r6, r0
 8008324:	2800      	cmp	r0, #0
 8008326:	d1e1      	bne.n	80082ec <__ssputs_r+0x70>
 8008328:	6921      	ldr	r1, [r4, #16]
 800832a:	4650      	mov	r0, sl
 800832c:	f7ff ff5a 	bl	80081e4 <_free_r>
 8008330:	e7c7      	b.n	80082c2 <__ssputs_r+0x46>
	...

08008334 <_svfiprintf_r>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	4698      	mov	r8, r3
 800833a:	898b      	ldrh	r3, [r1, #12]
 800833c:	061b      	lsls	r3, r3, #24
 800833e:	b09d      	sub	sp, #116	; 0x74
 8008340:	4607      	mov	r7, r0
 8008342:	460d      	mov	r5, r1
 8008344:	4614      	mov	r4, r2
 8008346:	d50e      	bpl.n	8008366 <_svfiprintf_r+0x32>
 8008348:	690b      	ldr	r3, [r1, #16]
 800834a:	b963      	cbnz	r3, 8008366 <_svfiprintf_r+0x32>
 800834c:	2140      	movs	r1, #64	; 0x40
 800834e:	f7ff fe0f 	bl	8007f70 <_malloc_r>
 8008352:	6028      	str	r0, [r5, #0]
 8008354:	6128      	str	r0, [r5, #16]
 8008356:	b920      	cbnz	r0, 8008362 <_svfiprintf_r+0x2e>
 8008358:	230c      	movs	r3, #12
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	e0d1      	b.n	8008506 <_svfiprintf_r+0x1d2>
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	616b      	str	r3, [r5, #20]
 8008366:	2300      	movs	r3, #0
 8008368:	9309      	str	r3, [sp, #36]	; 0x24
 800836a:	2320      	movs	r3, #32
 800836c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008370:	f8cd 800c 	str.w	r8, [sp, #12]
 8008374:	2330      	movs	r3, #48	; 0x30
 8008376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008520 <_svfiprintf_r+0x1ec>
 800837a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800837e:	f04f 0901 	mov.w	r9, #1
 8008382:	4623      	mov	r3, r4
 8008384:	469a      	mov	sl, r3
 8008386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800838a:	b10a      	cbz	r2, 8008390 <_svfiprintf_r+0x5c>
 800838c:	2a25      	cmp	r2, #37	; 0x25
 800838e:	d1f9      	bne.n	8008384 <_svfiprintf_r+0x50>
 8008390:	ebba 0b04 	subs.w	fp, sl, r4
 8008394:	d00b      	beq.n	80083ae <_svfiprintf_r+0x7a>
 8008396:	465b      	mov	r3, fp
 8008398:	4622      	mov	r2, r4
 800839a:	4629      	mov	r1, r5
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff ff6d 	bl	800827c <__ssputs_r>
 80083a2:	3001      	adds	r0, #1
 80083a4:	f000 80aa 	beq.w	80084fc <_svfiprintf_r+0x1c8>
 80083a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083aa:	445a      	add	r2, fp
 80083ac:	9209      	str	r2, [sp, #36]	; 0x24
 80083ae:	f89a 3000 	ldrb.w	r3, [sl]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80a2 	beq.w	80084fc <_svfiprintf_r+0x1c8>
 80083b8:	2300      	movs	r3, #0
 80083ba:	f04f 32ff 	mov.w	r2, #4294967295
 80083be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c2:	f10a 0a01 	add.w	sl, sl, #1
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	9307      	str	r3, [sp, #28]
 80083ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ce:	931a      	str	r3, [sp, #104]	; 0x68
 80083d0:	4654      	mov	r4, sl
 80083d2:	2205      	movs	r2, #5
 80083d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d8:	4851      	ldr	r0, [pc, #324]	; (8008520 <_svfiprintf_r+0x1ec>)
 80083da:	f7f7 ff09 	bl	80001f0 <memchr>
 80083de:	9a04      	ldr	r2, [sp, #16]
 80083e0:	b9d8      	cbnz	r0, 800841a <_svfiprintf_r+0xe6>
 80083e2:	06d0      	lsls	r0, r2, #27
 80083e4:	bf44      	itt	mi
 80083e6:	2320      	movmi	r3, #32
 80083e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ec:	0711      	lsls	r1, r2, #28
 80083ee:	bf44      	itt	mi
 80083f0:	232b      	movmi	r3, #43	; 0x2b
 80083f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083f6:	f89a 3000 	ldrb.w	r3, [sl]
 80083fa:	2b2a      	cmp	r3, #42	; 0x2a
 80083fc:	d015      	beq.n	800842a <_svfiprintf_r+0xf6>
 80083fe:	9a07      	ldr	r2, [sp, #28]
 8008400:	4654      	mov	r4, sl
 8008402:	2000      	movs	r0, #0
 8008404:	f04f 0c0a 	mov.w	ip, #10
 8008408:	4621      	mov	r1, r4
 800840a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800840e:	3b30      	subs	r3, #48	; 0x30
 8008410:	2b09      	cmp	r3, #9
 8008412:	d94e      	bls.n	80084b2 <_svfiprintf_r+0x17e>
 8008414:	b1b0      	cbz	r0, 8008444 <_svfiprintf_r+0x110>
 8008416:	9207      	str	r2, [sp, #28]
 8008418:	e014      	b.n	8008444 <_svfiprintf_r+0x110>
 800841a:	eba0 0308 	sub.w	r3, r0, r8
 800841e:	fa09 f303 	lsl.w	r3, r9, r3
 8008422:	4313      	orrs	r3, r2
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	46a2      	mov	sl, r4
 8008428:	e7d2      	b.n	80083d0 <_svfiprintf_r+0x9c>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	1d19      	adds	r1, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	9103      	str	r1, [sp, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	bfbb      	ittet	lt
 8008436:	425b      	neglt	r3, r3
 8008438:	f042 0202 	orrlt.w	r2, r2, #2
 800843c:	9307      	strge	r3, [sp, #28]
 800843e:	9307      	strlt	r3, [sp, #28]
 8008440:	bfb8      	it	lt
 8008442:	9204      	strlt	r2, [sp, #16]
 8008444:	7823      	ldrb	r3, [r4, #0]
 8008446:	2b2e      	cmp	r3, #46	; 0x2e
 8008448:	d10c      	bne.n	8008464 <_svfiprintf_r+0x130>
 800844a:	7863      	ldrb	r3, [r4, #1]
 800844c:	2b2a      	cmp	r3, #42	; 0x2a
 800844e:	d135      	bne.n	80084bc <_svfiprintf_r+0x188>
 8008450:	9b03      	ldr	r3, [sp, #12]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	9203      	str	r2, [sp, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	bfb8      	it	lt
 800845c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008460:	3402      	adds	r4, #2
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008530 <_svfiprintf_r+0x1fc>
 8008468:	7821      	ldrb	r1, [r4, #0]
 800846a:	2203      	movs	r2, #3
 800846c:	4650      	mov	r0, sl
 800846e:	f7f7 febf 	bl	80001f0 <memchr>
 8008472:	b140      	cbz	r0, 8008486 <_svfiprintf_r+0x152>
 8008474:	2340      	movs	r3, #64	; 0x40
 8008476:	eba0 000a 	sub.w	r0, r0, sl
 800847a:	fa03 f000 	lsl.w	r0, r3, r0
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	4303      	orrs	r3, r0
 8008482:	3401      	adds	r4, #1
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848a:	4826      	ldr	r0, [pc, #152]	; (8008524 <_svfiprintf_r+0x1f0>)
 800848c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008490:	2206      	movs	r2, #6
 8008492:	f7f7 fead 	bl	80001f0 <memchr>
 8008496:	2800      	cmp	r0, #0
 8008498:	d038      	beq.n	800850c <_svfiprintf_r+0x1d8>
 800849a:	4b23      	ldr	r3, [pc, #140]	; (8008528 <_svfiprintf_r+0x1f4>)
 800849c:	bb1b      	cbnz	r3, 80084e6 <_svfiprintf_r+0x1b2>
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	3307      	adds	r3, #7
 80084a2:	f023 0307 	bic.w	r3, r3, #7
 80084a6:	3308      	adds	r3, #8
 80084a8:	9303      	str	r3, [sp, #12]
 80084aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ac:	4433      	add	r3, r6
 80084ae:	9309      	str	r3, [sp, #36]	; 0x24
 80084b0:	e767      	b.n	8008382 <_svfiprintf_r+0x4e>
 80084b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b6:	460c      	mov	r4, r1
 80084b8:	2001      	movs	r0, #1
 80084ba:	e7a5      	b.n	8008408 <_svfiprintf_r+0xd4>
 80084bc:	2300      	movs	r3, #0
 80084be:	3401      	adds	r4, #1
 80084c0:	9305      	str	r3, [sp, #20]
 80084c2:	4619      	mov	r1, r3
 80084c4:	f04f 0c0a 	mov.w	ip, #10
 80084c8:	4620      	mov	r0, r4
 80084ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ce:	3a30      	subs	r2, #48	; 0x30
 80084d0:	2a09      	cmp	r2, #9
 80084d2:	d903      	bls.n	80084dc <_svfiprintf_r+0x1a8>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0c5      	beq.n	8008464 <_svfiprintf_r+0x130>
 80084d8:	9105      	str	r1, [sp, #20]
 80084da:	e7c3      	b.n	8008464 <_svfiprintf_r+0x130>
 80084dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e0:	4604      	mov	r4, r0
 80084e2:	2301      	movs	r3, #1
 80084e4:	e7f0      	b.n	80084c8 <_svfiprintf_r+0x194>
 80084e6:	ab03      	add	r3, sp, #12
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	462a      	mov	r2, r5
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <_svfiprintf_r+0x1f8>)
 80084ee:	a904      	add	r1, sp, #16
 80084f0:	4638      	mov	r0, r7
 80084f2:	f3af 8000 	nop.w
 80084f6:	1c42      	adds	r2, r0, #1
 80084f8:	4606      	mov	r6, r0
 80084fa:	d1d6      	bne.n	80084aa <_svfiprintf_r+0x176>
 80084fc:	89ab      	ldrh	r3, [r5, #12]
 80084fe:	065b      	lsls	r3, r3, #25
 8008500:	f53f af2c 	bmi.w	800835c <_svfiprintf_r+0x28>
 8008504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008506:	b01d      	add	sp, #116	; 0x74
 8008508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850c:	ab03      	add	r3, sp, #12
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	462a      	mov	r2, r5
 8008512:	4b06      	ldr	r3, [pc, #24]	; (800852c <_svfiprintf_r+0x1f8>)
 8008514:	a904      	add	r1, sp, #16
 8008516:	4638      	mov	r0, r7
 8008518:	f000 f87a 	bl	8008610 <_printf_i>
 800851c:	e7eb      	b.n	80084f6 <_svfiprintf_r+0x1c2>
 800851e:	bf00      	nop
 8008520:	08008a90 	.word	0x08008a90
 8008524:	08008a9a 	.word	0x08008a9a
 8008528:	00000000 	.word	0x00000000
 800852c:	0800827d 	.word	0x0800827d
 8008530:	08008a96 	.word	0x08008a96

08008534 <_printf_common>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	4616      	mov	r6, r2
 800853a:	4699      	mov	r9, r3
 800853c:	688a      	ldr	r2, [r1, #8]
 800853e:	690b      	ldr	r3, [r1, #16]
 8008540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008544:	4293      	cmp	r3, r2
 8008546:	bfb8      	it	lt
 8008548:	4613      	movlt	r3, r2
 800854a:	6033      	str	r3, [r6, #0]
 800854c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008550:	4607      	mov	r7, r0
 8008552:	460c      	mov	r4, r1
 8008554:	b10a      	cbz	r2, 800855a <_printf_common+0x26>
 8008556:	3301      	adds	r3, #1
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	0699      	lsls	r1, r3, #26
 800855e:	bf42      	ittt	mi
 8008560:	6833      	ldrmi	r3, [r6, #0]
 8008562:	3302      	addmi	r3, #2
 8008564:	6033      	strmi	r3, [r6, #0]
 8008566:	6825      	ldr	r5, [r4, #0]
 8008568:	f015 0506 	ands.w	r5, r5, #6
 800856c:	d106      	bne.n	800857c <_printf_common+0x48>
 800856e:	f104 0a19 	add.w	sl, r4, #25
 8008572:	68e3      	ldr	r3, [r4, #12]
 8008574:	6832      	ldr	r2, [r6, #0]
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	42ab      	cmp	r3, r5
 800857a:	dc26      	bgt.n	80085ca <_printf_common+0x96>
 800857c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008580:	1e13      	subs	r3, r2, #0
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	bf18      	it	ne
 8008586:	2301      	movne	r3, #1
 8008588:	0692      	lsls	r2, r2, #26
 800858a:	d42b      	bmi.n	80085e4 <_printf_common+0xb0>
 800858c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008590:	4649      	mov	r1, r9
 8008592:	4638      	mov	r0, r7
 8008594:	47c0      	blx	r8
 8008596:	3001      	adds	r0, #1
 8008598:	d01e      	beq.n	80085d8 <_printf_common+0xa4>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	68e5      	ldr	r5, [r4, #12]
 800859e:	6832      	ldr	r2, [r6, #0]
 80085a0:	f003 0306 	and.w	r3, r3, #6
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	bf08      	it	eq
 80085a8:	1aad      	subeq	r5, r5, r2
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	6922      	ldr	r2, [r4, #16]
 80085ae:	bf0c      	ite	eq
 80085b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b4:	2500      	movne	r5, #0
 80085b6:	4293      	cmp	r3, r2
 80085b8:	bfc4      	itt	gt
 80085ba:	1a9b      	subgt	r3, r3, r2
 80085bc:	18ed      	addgt	r5, r5, r3
 80085be:	2600      	movs	r6, #0
 80085c0:	341a      	adds	r4, #26
 80085c2:	42b5      	cmp	r5, r6
 80085c4:	d11a      	bne.n	80085fc <_printf_common+0xc8>
 80085c6:	2000      	movs	r0, #0
 80085c8:	e008      	b.n	80085dc <_printf_common+0xa8>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4652      	mov	r2, sl
 80085ce:	4649      	mov	r1, r9
 80085d0:	4638      	mov	r0, r7
 80085d2:	47c0      	blx	r8
 80085d4:	3001      	adds	r0, #1
 80085d6:	d103      	bne.n	80085e0 <_printf_common+0xac>
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295
 80085dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e0:	3501      	adds	r5, #1
 80085e2:	e7c6      	b.n	8008572 <_printf_common+0x3e>
 80085e4:	18e1      	adds	r1, r4, r3
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	2030      	movs	r0, #48	; 0x30
 80085ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085ee:	4422      	add	r2, r4
 80085f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085f8:	3302      	adds	r3, #2
 80085fa:	e7c7      	b.n	800858c <_printf_common+0x58>
 80085fc:	2301      	movs	r3, #1
 80085fe:	4622      	mov	r2, r4
 8008600:	4649      	mov	r1, r9
 8008602:	4638      	mov	r0, r7
 8008604:	47c0      	blx	r8
 8008606:	3001      	adds	r0, #1
 8008608:	d0e6      	beq.n	80085d8 <_printf_common+0xa4>
 800860a:	3601      	adds	r6, #1
 800860c:	e7d9      	b.n	80085c2 <_printf_common+0x8e>
	...

08008610 <_printf_i>:
 8008610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008614:	7e0f      	ldrb	r7, [r1, #24]
 8008616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008618:	2f78      	cmp	r7, #120	; 0x78
 800861a:	4691      	mov	r9, r2
 800861c:	4680      	mov	r8, r0
 800861e:	460c      	mov	r4, r1
 8008620:	469a      	mov	sl, r3
 8008622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008626:	d807      	bhi.n	8008638 <_printf_i+0x28>
 8008628:	2f62      	cmp	r7, #98	; 0x62
 800862a:	d80a      	bhi.n	8008642 <_printf_i+0x32>
 800862c:	2f00      	cmp	r7, #0
 800862e:	f000 80d8 	beq.w	80087e2 <_printf_i+0x1d2>
 8008632:	2f58      	cmp	r7, #88	; 0x58
 8008634:	f000 80a3 	beq.w	800877e <_printf_i+0x16e>
 8008638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800863c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008640:	e03a      	b.n	80086b8 <_printf_i+0xa8>
 8008642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008646:	2b15      	cmp	r3, #21
 8008648:	d8f6      	bhi.n	8008638 <_printf_i+0x28>
 800864a:	a101      	add	r1, pc, #4	; (adr r1, 8008650 <_printf_i+0x40>)
 800864c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008650:	080086a9 	.word	0x080086a9
 8008654:	080086bd 	.word	0x080086bd
 8008658:	08008639 	.word	0x08008639
 800865c:	08008639 	.word	0x08008639
 8008660:	08008639 	.word	0x08008639
 8008664:	08008639 	.word	0x08008639
 8008668:	080086bd 	.word	0x080086bd
 800866c:	08008639 	.word	0x08008639
 8008670:	08008639 	.word	0x08008639
 8008674:	08008639 	.word	0x08008639
 8008678:	08008639 	.word	0x08008639
 800867c:	080087c9 	.word	0x080087c9
 8008680:	080086ed 	.word	0x080086ed
 8008684:	080087ab 	.word	0x080087ab
 8008688:	08008639 	.word	0x08008639
 800868c:	08008639 	.word	0x08008639
 8008690:	080087eb 	.word	0x080087eb
 8008694:	08008639 	.word	0x08008639
 8008698:	080086ed 	.word	0x080086ed
 800869c:	08008639 	.word	0x08008639
 80086a0:	08008639 	.word	0x08008639
 80086a4:	080087b3 	.word	0x080087b3
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	602a      	str	r2, [r5, #0]
 80086b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086b8:	2301      	movs	r3, #1
 80086ba:	e0a3      	b.n	8008804 <_printf_i+0x1f4>
 80086bc:	6820      	ldr	r0, [r4, #0]
 80086be:	6829      	ldr	r1, [r5, #0]
 80086c0:	0606      	lsls	r6, r0, #24
 80086c2:	f101 0304 	add.w	r3, r1, #4
 80086c6:	d50a      	bpl.n	80086de <_printf_i+0xce>
 80086c8:	680e      	ldr	r6, [r1, #0]
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	2e00      	cmp	r6, #0
 80086ce:	da03      	bge.n	80086d8 <_printf_i+0xc8>
 80086d0:	232d      	movs	r3, #45	; 0x2d
 80086d2:	4276      	negs	r6, r6
 80086d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d8:	485e      	ldr	r0, [pc, #376]	; (8008854 <_printf_i+0x244>)
 80086da:	230a      	movs	r3, #10
 80086dc:	e019      	b.n	8008712 <_printf_i+0x102>
 80086de:	680e      	ldr	r6, [r1, #0]
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086e6:	bf18      	it	ne
 80086e8:	b236      	sxthne	r6, r6
 80086ea:	e7ef      	b.n	80086cc <_printf_i+0xbc>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	6820      	ldr	r0, [r4, #0]
 80086f0:	1d19      	adds	r1, r3, #4
 80086f2:	6029      	str	r1, [r5, #0]
 80086f4:	0601      	lsls	r1, r0, #24
 80086f6:	d501      	bpl.n	80086fc <_printf_i+0xec>
 80086f8:	681e      	ldr	r6, [r3, #0]
 80086fa:	e002      	b.n	8008702 <_printf_i+0xf2>
 80086fc:	0646      	lsls	r6, r0, #25
 80086fe:	d5fb      	bpl.n	80086f8 <_printf_i+0xe8>
 8008700:	881e      	ldrh	r6, [r3, #0]
 8008702:	4854      	ldr	r0, [pc, #336]	; (8008854 <_printf_i+0x244>)
 8008704:	2f6f      	cmp	r7, #111	; 0x6f
 8008706:	bf0c      	ite	eq
 8008708:	2308      	moveq	r3, #8
 800870a:	230a      	movne	r3, #10
 800870c:	2100      	movs	r1, #0
 800870e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008712:	6865      	ldr	r5, [r4, #4]
 8008714:	60a5      	str	r5, [r4, #8]
 8008716:	2d00      	cmp	r5, #0
 8008718:	bfa2      	ittt	ge
 800871a:	6821      	ldrge	r1, [r4, #0]
 800871c:	f021 0104 	bicge.w	r1, r1, #4
 8008720:	6021      	strge	r1, [r4, #0]
 8008722:	b90e      	cbnz	r6, 8008728 <_printf_i+0x118>
 8008724:	2d00      	cmp	r5, #0
 8008726:	d04d      	beq.n	80087c4 <_printf_i+0x1b4>
 8008728:	4615      	mov	r5, r2
 800872a:	fbb6 f1f3 	udiv	r1, r6, r3
 800872e:	fb03 6711 	mls	r7, r3, r1, r6
 8008732:	5dc7      	ldrb	r7, [r0, r7]
 8008734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008738:	4637      	mov	r7, r6
 800873a:	42bb      	cmp	r3, r7
 800873c:	460e      	mov	r6, r1
 800873e:	d9f4      	bls.n	800872a <_printf_i+0x11a>
 8008740:	2b08      	cmp	r3, #8
 8008742:	d10b      	bne.n	800875c <_printf_i+0x14c>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	07de      	lsls	r6, r3, #31
 8008748:	d508      	bpl.n	800875c <_printf_i+0x14c>
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	6861      	ldr	r1, [r4, #4]
 800874e:	4299      	cmp	r1, r3
 8008750:	bfde      	ittt	le
 8008752:	2330      	movle	r3, #48	; 0x30
 8008754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800875c:	1b52      	subs	r2, r2, r5
 800875e:	6122      	str	r2, [r4, #16]
 8008760:	f8cd a000 	str.w	sl, [sp]
 8008764:	464b      	mov	r3, r9
 8008766:	aa03      	add	r2, sp, #12
 8008768:	4621      	mov	r1, r4
 800876a:	4640      	mov	r0, r8
 800876c:	f7ff fee2 	bl	8008534 <_printf_common>
 8008770:	3001      	adds	r0, #1
 8008772:	d14c      	bne.n	800880e <_printf_i+0x1fe>
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	b004      	add	sp, #16
 800877a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877e:	4835      	ldr	r0, [pc, #212]	; (8008854 <_printf_i+0x244>)
 8008780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008784:	6829      	ldr	r1, [r5, #0]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	f851 6b04 	ldr.w	r6, [r1], #4
 800878c:	6029      	str	r1, [r5, #0]
 800878e:	061d      	lsls	r5, r3, #24
 8008790:	d514      	bpl.n	80087bc <_printf_i+0x1ac>
 8008792:	07df      	lsls	r7, r3, #31
 8008794:	bf44      	itt	mi
 8008796:	f043 0320 	orrmi.w	r3, r3, #32
 800879a:	6023      	strmi	r3, [r4, #0]
 800879c:	b91e      	cbnz	r6, 80087a6 <_printf_i+0x196>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	f023 0320 	bic.w	r3, r3, #32
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	2310      	movs	r3, #16
 80087a8:	e7b0      	b.n	800870c <_printf_i+0xfc>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	f043 0320 	orr.w	r3, r3, #32
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	2378      	movs	r3, #120	; 0x78
 80087b4:	4828      	ldr	r0, [pc, #160]	; (8008858 <_printf_i+0x248>)
 80087b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087ba:	e7e3      	b.n	8008784 <_printf_i+0x174>
 80087bc:	0659      	lsls	r1, r3, #25
 80087be:	bf48      	it	mi
 80087c0:	b2b6      	uxthmi	r6, r6
 80087c2:	e7e6      	b.n	8008792 <_printf_i+0x182>
 80087c4:	4615      	mov	r5, r2
 80087c6:	e7bb      	b.n	8008740 <_printf_i+0x130>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	6826      	ldr	r6, [r4, #0]
 80087cc:	6961      	ldr	r1, [r4, #20]
 80087ce:	1d18      	adds	r0, r3, #4
 80087d0:	6028      	str	r0, [r5, #0]
 80087d2:	0635      	lsls	r5, r6, #24
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	d501      	bpl.n	80087dc <_printf_i+0x1cc>
 80087d8:	6019      	str	r1, [r3, #0]
 80087da:	e002      	b.n	80087e2 <_printf_i+0x1d2>
 80087dc:	0670      	lsls	r0, r6, #25
 80087de:	d5fb      	bpl.n	80087d8 <_printf_i+0x1c8>
 80087e0:	8019      	strh	r1, [r3, #0]
 80087e2:	2300      	movs	r3, #0
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	4615      	mov	r5, r2
 80087e8:	e7ba      	b.n	8008760 <_printf_i+0x150>
 80087ea:	682b      	ldr	r3, [r5, #0]
 80087ec:	1d1a      	adds	r2, r3, #4
 80087ee:	602a      	str	r2, [r5, #0]
 80087f0:	681d      	ldr	r5, [r3, #0]
 80087f2:	6862      	ldr	r2, [r4, #4]
 80087f4:	2100      	movs	r1, #0
 80087f6:	4628      	mov	r0, r5
 80087f8:	f7f7 fcfa 	bl	80001f0 <memchr>
 80087fc:	b108      	cbz	r0, 8008802 <_printf_i+0x1f2>
 80087fe:	1b40      	subs	r0, r0, r5
 8008800:	6060      	str	r0, [r4, #4]
 8008802:	6863      	ldr	r3, [r4, #4]
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	2300      	movs	r3, #0
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880c:	e7a8      	b.n	8008760 <_printf_i+0x150>
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	462a      	mov	r2, r5
 8008812:	4649      	mov	r1, r9
 8008814:	4640      	mov	r0, r8
 8008816:	47d0      	blx	sl
 8008818:	3001      	adds	r0, #1
 800881a:	d0ab      	beq.n	8008774 <_printf_i+0x164>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	079b      	lsls	r3, r3, #30
 8008820:	d413      	bmi.n	800884a <_printf_i+0x23a>
 8008822:	68e0      	ldr	r0, [r4, #12]
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	4298      	cmp	r0, r3
 8008828:	bfb8      	it	lt
 800882a:	4618      	movlt	r0, r3
 800882c:	e7a4      	b.n	8008778 <_printf_i+0x168>
 800882e:	2301      	movs	r3, #1
 8008830:	4632      	mov	r2, r6
 8008832:	4649      	mov	r1, r9
 8008834:	4640      	mov	r0, r8
 8008836:	47d0      	blx	sl
 8008838:	3001      	adds	r0, #1
 800883a:	d09b      	beq.n	8008774 <_printf_i+0x164>
 800883c:	3501      	adds	r5, #1
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	9903      	ldr	r1, [sp, #12]
 8008842:	1a5b      	subs	r3, r3, r1
 8008844:	42ab      	cmp	r3, r5
 8008846:	dcf2      	bgt.n	800882e <_printf_i+0x21e>
 8008848:	e7eb      	b.n	8008822 <_printf_i+0x212>
 800884a:	2500      	movs	r5, #0
 800884c:	f104 0619 	add.w	r6, r4, #25
 8008850:	e7f5      	b.n	800883e <_printf_i+0x22e>
 8008852:	bf00      	nop
 8008854:	08008aa1 	.word	0x08008aa1
 8008858:	08008ab2 	.word	0x08008ab2

0800885c <memmove>:
 800885c:	4288      	cmp	r0, r1
 800885e:	b510      	push	{r4, lr}
 8008860:	eb01 0402 	add.w	r4, r1, r2
 8008864:	d902      	bls.n	800886c <memmove+0x10>
 8008866:	4284      	cmp	r4, r0
 8008868:	4623      	mov	r3, r4
 800886a:	d807      	bhi.n	800887c <memmove+0x20>
 800886c:	1e43      	subs	r3, r0, #1
 800886e:	42a1      	cmp	r1, r4
 8008870:	d008      	beq.n	8008884 <memmove+0x28>
 8008872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800887a:	e7f8      	b.n	800886e <memmove+0x12>
 800887c:	4402      	add	r2, r0
 800887e:	4601      	mov	r1, r0
 8008880:	428a      	cmp	r2, r1
 8008882:	d100      	bne.n	8008886 <memmove+0x2a>
 8008884:	bd10      	pop	{r4, pc}
 8008886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800888a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800888e:	e7f7      	b.n	8008880 <memmove+0x24>

08008890 <_realloc_r>:
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	4680      	mov	r8, r0
 8008896:	4614      	mov	r4, r2
 8008898:	460e      	mov	r6, r1
 800889a:	b921      	cbnz	r1, 80088a6 <_realloc_r+0x16>
 800889c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a0:	4611      	mov	r1, r2
 80088a2:	f7ff bb65 	b.w	8007f70 <_malloc_r>
 80088a6:	b92a      	cbnz	r2, 80088b4 <_realloc_r+0x24>
 80088a8:	f7ff fc9c 	bl	80081e4 <_free_r>
 80088ac:	4625      	mov	r5, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b4:	f000 f81b 	bl	80088ee <_malloc_usable_size_r>
 80088b8:	4284      	cmp	r4, r0
 80088ba:	4607      	mov	r7, r0
 80088bc:	d802      	bhi.n	80088c4 <_realloc_r+0x34>
 80088be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088c2:	d812      	bhi.n	80088ea <_realloc_r+0x5a>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4640      	mov	r0, r8
 80088c8:	f7ff fb52 	bl	8007f70 <_malloc_r>
 80088cc:	4605      	mov	r5, r0
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d0ed      	beq.n	80088ae <_realloc_r+0x1e>
 80088d2:	42bc      	cmp	r4, r7
 80088d4:	4622      	mov	r2, r4
 80088d6:	4631      	mov	r1, r6
 80088d8:	bf28      	it	cs
 80088da:	463a      	movcs	r2, r7
 80088dc:	f7ff fb12 	bl	8007f04 <memcpy>
 80088e0:	4631      	mov	r1, r6
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7ff fc7e 	bl	80081e4 <_free_r>
 80088e8:	e7e1      	b.n	80088ae <_realloc_r+0x1e>
 80088ea:	4635      	mov	r5, r6
 80088ec:	e7df      	b.n	80088ae <_realloc_r+0x1e>

080088ee <_malloc_usable_size_r>:
 80088ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f2:	1f18      	subs	r0, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bfbc      	itt	lt
 80088f8:	580b      	ldrlt	r3, [r1, r0]
 80088fa:	18c0      	addlt	r0, r0, r3
 80088fc:	4770      	bx	lr
	...

08008900 <_init>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr

0800890c <_fini>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr
