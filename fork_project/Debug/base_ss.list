
base_ss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007990  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d28  08007d28  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d30  08007d30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ff8  20000074  08007dac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000506c  08007dac  0002506c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea38  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003932  00000000  00000000  0003eadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00042410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00043db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047c6  00000000  00000000  00045640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea89  00000000  00000000  00049e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d3b4  00000000  00000000  0006888f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007194  00000000  00000000  00105c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b18 	.word	0x08007b18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007b18 	.word	0x08007b18

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2110      	movs	r1, #16
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <lcd_start_write+0x14>)
 80004ee:	f001 fe53 	bl	8002198 <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40020000 	.word	0x40020000

080004fc <lcd_end_write>:

static void lcd_end_write(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2110      	movs	r1, #16
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <lcd_end_write+0x14>)
 8000506:	f001 fe47 	bl	8002198 <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020000 	.word	0x40020000

08000514 <lcd_start_command>:

static void lcd_start_command(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2102      	movs	r1, #2
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <lcd_start_command+0x14>)
 800051e:	f001 fe3b 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020000 	.word	0x40020000

0800052c <lcd_start_data>:

static void lcd_start_data(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2102      	movs	r1, #2
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <lcd_start_data+0x14>)
 8000536:	f001 fe2f 	bl	8002198 <HAL_GPIO_WritePin>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40020000 	.word	0x40020000

08000544 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef stat;
  lcd_start_command();
 800054e:	f7ff ffe1 	bl	8000514 <lcd_start_command>
  stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 8000552:	1df9      	adds	r1, r7, #7
 8000554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000558:	2201      	movs	r2, #1
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <lcd_spi_send_com+0x30>)
 800055c:	f002 fc73 	bl	8002e46 <HAL_SPI_Transmit>
 8000560:	4603      	mov	r3, r0
 8000562:	73fb      	strb	r3, [r7, #15]
  if (stat != HAL_OK) {
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d000      	beq.n	800056c <lcd_spi_send_com+0x28>
    while (1) {}
 800056a:	e7fe      	b.n	800056a <lcd_spi_send_com+0x26>
  }
}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000f0 	.word	0x200000f0

08000578 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef stat;
  if (size) {
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00f      	beq.n	80005a8 <lcd_spi_send_data+0x30>
    lcd_start_data();
 8000588:	f7ff ffd0 	bl	800052c <lcd_start_data>
    stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b29a      	uxth	r2, r3
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <lcd_spi_send_data+0x38>)
 8000598:	f002 fc55 	bl	8002e46 <HAL_SPI_Transmit>
 800059c:	4603      	mov	r3, r0
 800059e:	73fb      	strb	r3, [r7, #15]
    if (stat != HAL_OK) {
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d000      	beq.n	80005a8 <lcd_spi_send_data+0x30>
      while (1) {}
 80005a6:	e7fe      	b.n	80005a6 <lcd_spi_send_data+0x2e>
    }
  }
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000f0 	.word	0x200000f0

080005b4 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	4603      	mov	r3, r0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	807b      	strh	r3, [r7, #2]
 80005ce:	4613      	mov	r3, r2
 80005d0:	803b      	strh	r3, [r7, #0]
  x += _xstart;
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <lcd_set_window+0xc4>)
 80005d4:	881a      	ldrh	r2, [r3, #0]
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	4413      	add	r3, r2
 80005da:	80fb      	strh	r3, [r7, #6]
  y += _ystart;
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <lcd_set_window+0xc8>)
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	80bb      	strh	r3, [r7, #4]

  uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	733b      	strb	r3, [r7, #12]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	737b      	strb	r3, [r7, #13]
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	4413      	add	r3, r2
 80005fc:	3b01      	subs	r3, #1
 80005fe:	121b      	asrs	r3, r3, #8
 8000600:	b2db      	uxtb	r3, r3
 8000602:	73bb      	strb	r3, [r7, #14]
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4413      	add	r3, r2
 800060e:	b2db      	uxtb	r3, r3
 8000610:	3b01      	subs	r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]
  uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 8000616:	88bb      	ldrh	r3, [r7, #4]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	b29b      	uxth	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	723b      	strb	r3, [r7, #8]
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	727b      	strb	r3, [r7, #9]
 8000626:	88ba      	ldrh	r2, [r7, #4]
 8000628:	883b      	ldrh	r3, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	3b01      	subs	r3, #1
 800062e:	121b      	asrs	r3, r3, #8
 8000630:	b2db      	uxtb	r3, r3
 8000632:	72bb      	strb	r3, [r7, #10]
 8000634:	88bb      	ldrh	r3, [r7, #4]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	883b      	ldrh	r3, [r7, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4413      	add	r3, r2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	3b01      	subs	r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72fb      	strb	r3, [r7, #11]

  lcd_spi_send_com(ST77XX_CASET);
 8000646:	202a      	movs	r0, #42	; 0x2a
 8000648:	f7ff ff7c 	bl	8000544 <lcd_spi_send_com>
  lcd_spi_send_data(xa, 4);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff90 	bl	8000578 <lcd_spi_send_data>
  lcd_spi_send_com(ST77XX_RASET);
 8000658:	202b      	movs	r0, #43	; 0x2b
 800065a:	f7ff ff73 	bl	8000544 <lcd_spi_send_com>
  lcd_spi_send_data(ya, 4);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2104      	movs	r1, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff87 	bl	8000578 <lcd_spi_send_data>
  lcd_spi_send_com(ST77XX_RAMWR);
 800066a:	202c      	movs	r0, #44	; 0x2c
 800066c:	f7ff ff6a 	bl	8000544 <lcd_spi_send_com>
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	20000092 	.word	0x20000092
 800067c:	20000094 	.word	0x20000094

08000680 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
  uint8_t numCommands, cmd, numArgs;
  uint16_t ms;

  const uint8_t *ptr = Rcmd;
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <lcd_init+0xd4>)
 8000688:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2108      	movs	r1, #8
 800068e:	4832      	ldr	r0, [pc, #200]	; (8000758 <lcd_init+0xd8>)
 8000690:	f001 fd82 	bl	8002198 <HAL_GPIO_WritePin>
  osDelay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f003 fd91 	bl	80041bc <osDelay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	482e      	ldr	r0, [pc, #184]	; (8000758 <lcd_init+0xd8>)
 80006a0:	f001 fd7a 	bl	8002198 <HAL_GPIO_WritePin>
  osDelay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f003 fd89 	bl	80041bc <osDelay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2108      	movs	r1, #8
 80006ae:	482a      	ldr	r0, [pc, #168]	; (8000758 <lcd_init+0xd8>)
 80006b0:	f001 fd72 	bl	8002198 <HAL_GPIO_WritePin>
  osDelay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f003 fd81 	bl	80041bc <osDelay>

  numCommands = *ptr++;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	60ba      	str	r2, [r7, #8]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	73fb      	strb	r3, [r7, #15]
  while (numCommands--) {
 80006c4:	e035      	b.n	8000732 <lcd_init+0xb2>
    cmd = *ptr++;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	60ba      	str	r2, [r7, #8]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
    numArgs = *ptr++;
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	71bb      	strb	r3, [r7, #6]
    ms = numArgs & ST_CMD_DELAY;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e2:	81bb      	strh	r3, [r7, #12]
    numArgs &= ~ST_CMD_DELAY;
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ea:	71bb      	strb	r3, [r7, #6]
    lcd_start_write();
 80006ec:	f7ff fefa 	bl	80004e4 <lcd_start_write>
    lcd_spi_send_com(cmd);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff26 	bl	8000544 <lcd_spi_send_com>
    lcd_spi_send_data((uint8_t*)ptr, numArgs);
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	4619      	mov	r1, r3
 80006fc:	68b8      	ldr	r0, [r7, #8]
 80006fe:	f7ff ff3b 	bl	8000578 <lcd_spi_send_data>
    lcd_end_write();
 8000702:	f7ff fefb 	bl	80004fc <lcd_end_write>
    ptr += numArgs;
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	4413      	add	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]

    if (ms) {
 800070e:	89bb      	ldrh	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00e      	beq.n	8000732 <lcd_init+0xb2>
      ms = *ptr++;
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	81bb      	strh	r3, [r7, #12]
      if (ms == 255)
 800071e:	89bb      	ldrh	r3, [r7, #12]
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	d102      	bne.n	800072a <lcd_init+0xaa>
        ms = 500;
 8000724:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000728:	81bb      	strh	r3, [r7, #12]
      osDelay(ms);
 800072a:	89bb      	ldrh	r3, [r7, #12]
 800072c:	4618      	mov	r0, r3
 800072e:	f003 fd45 	bl	80041bc <osDelay>
  while (numCommands--) {
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	73fa      	strb	r2, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1c4      	bne.n	80006c6 <lcd_init+0x46>
    }
  }

  lcd_start_write();
 800073c:	f7ff fed2 	bl	80004e4 <lcd_start_write>
  lcd_set_rotation(2);
 8000740:	2002      	movs	r0, #2
 8000742:	f000 f80b 	bl	800075c <lcd_set_rotation>
  lcd_end_write();
 8000746:	f7ff fed9 	bl	80004fc <lcd_end_write>

  return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08007b9c 	.word	0x08007b9c
 8000758:	40020000 	.word	0x40020000

0800075c <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint8_t madctl = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]

  rotation = m & 3; // can't be higher than 3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0303 	and.w	r3, r3, #3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b35      	ldr	r3, [pc, #212]	; (8000848 <lcd_set_rotation+0xec>)
 8000774:	701a      	strb	r2, [r3, #0]

  switch (rotation) {
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <lcd_set_rotation+0xec>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d856      	bhi.n	800082c <lcd_set_rotation+0xd0>
 800077e:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <lcd_set_rotation+0x28>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	08000795 	.word	0x08000795
 8000788:	080007bb 	.word	0x080007bb
 800078c:	080007e1 	.word	0x080007e1
 8000790:	08000807 	.word	0x08000807
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	73fb      	strb	r3, [r7, #15]
    _height = ST7735_TFTHEIGHT_160;
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <lcd_set_rotation+0xf0>)
 800079a:	22a0      	movs	r2, #160	; 0xa0
 800079c:	801a      	strh	r2, [r3, #0]
    _width = ST7735_TFTWIDTH_128;
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <lcd_set_rotation+0xf4>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <lcd_set_rotation+0xf8>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <lcd_set_rotation+0xfc>)
 80007ac:	801a      	strh	r2, [r3, #0]
    _ystart = _rowstart;
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <lcd_set_rotation+0x100>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <lcd_set_rotation+0x104>)
 80007b6:	801a      	strh	r2, [r3, #0]
    break;
 80007b8:	e038      	b.n	800082c <lcd_set_rotation+0xd0>
  case 1:
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80007ba:	23a0      	movs	r3, #160	; 0xa0
 80007bc:	73fb      	strb	r3, [r7, #15]
    _width = ST7735_TFTHEIGHT_160;
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <lcd_set_rotation+0xf4>)
 80007c0:	22a0      	movs	r2, #160	; 0xa0
 80007c2:	801a      	strh	r2, [r3, #0]
    _height = ST7735_TFTWIDTH_128;
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <lcd_set_rotation+0xf0>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <lcd_set_rotation+0xf8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <lcd_set_rotation+0x104>)
 80007d2:	801a      	strh	r2, [r3, #0]
    _xstart = _rowstart;
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <lcd_set_rotation+0x100>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <lcd_set_rotation+0xfc>)
 80007dc:	801a      	strh	r2, [r3, #0]
    break;
 80007de:	e025      	b.n	800082c <lcd_set_rotation+0xd0>
  case 2:
    madctl = ST77XX_MADCTL_RGB;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
    _height = ST7735_TFTHEIGHT_160;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <lcd_set_rotation+0xf0>)
 80007e6:	22a0      	movs	r2, #160	; 0xa0
 80007e8:	801a      	strh	r2, [r3, #0]
    _width = ST7735_TFTWIDTH_128;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <lcd_set_rotation+0xf4>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <lcd_set_rotation+0xf8>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <lcd_set_rotation+0xfc>)
 80007f8:	801a      	strh	r2, [r3, #0]
    _ystart = _rowstart;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <lcd_set_rotation+0x100>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <lcd_set_rotation+0x104>)
 8000802:	801a      	strh	r2, [r3, #0]
    break;
 8000804:	e012      	b.n	800082c <lcd_set_rotation+0xd0>
  case 3:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8000806:	2368      	movs	r3, #104	; 0x68
 8000808:	73fb      	strb	r3, [r7, #15]
    _width = ST7735_TFTHEIGHT_160;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <lcd_set_rotation+0xf4>)
 800080c:	22a0      	movs	r2, #160	; 0xa0
 800080e:	801a      	strh	r2, [r3, #0]
    _height = ST7735_TFTWIDTH_128;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <lcd_set_rotation+0xf0>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <lcd_set_rotation+0xf8>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <lcd_set_rotation+0x104>)
 800081e:	801a      	strh	r2, [r3, #0]
    _xstart = _rowstart;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <lcd_set_rotation+0x100>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <lcd_set_rotation+0xfc>)
 8000828:	801a      	strh	r2, [r3, #0]
    break;
 800082a:	bf00      	nop
  }

  lcd_spi_send_com(ST77XX_MADCTL);
 800082c:	2036      	movs	r0, #54	; 0x36
 800082e:	f7ff fe89 	bl	8000544 <lcd_spi_send_com>
  lcd_spi_send_data(&madctl, 1);
 8000832:	f107 030f 	add.w	r3, r7, #15
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe9d 	bl	8000578 <lcd_spi_send_data>
  return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000090 	.word	0x20000090
 800084c:	20000098 	.word	0x20000098
 8000850:	20000096 	.word	0x20000096
 8000854:	2000009a 	.word	0x2000009a
 8000858:	20000092 	.word	0x20000092
 800085c:	2000009b 	.word	0x2000009b
 8000860:	20000094 	.word	0x20000094

08000864 <lcd_vline>:
    lcd_spi_send_data(c, 2);
    lcd_end_write();
  }
}

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	80fb      	strh	r3, [r7, #6]
 8000876:	4603      	mov	r3, r0
 8000878:	80bb      	strh	r3, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	807b      	strh	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	803b      	strh	r3, [r7, #0]
  lcd_start_write();
 8000882:	f7ff fe2f 	bl	80004e4 <lcd_start_write>
  lcd_set_window(x, y, 1, h);
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	88b9      	ldrh	r1, [r7, #4]
 800088a:	88f8      	ldrh	r0, [r7, #6]
 800088c:	2201      	movs	r2, #1
 800088e:	f7ff fe91 	bl	80005b4 <lcd_set_window>
  lcd_start_data();
 8000892:	f7ff fe4b 	bl	800052c <lcd_start_data>
  uint8_t c[2] = { color >> 8, color};
 8000896:	883b      	ldrh	r3, [r7, #0]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	b29b      	uxth	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	733b      	strb	r3, [r7, #12]
 80008a0:	883b      	ldrh	r3, [r7, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	737b      	strb	r3, [r7, #13]
  do
    lcd_spi_send_data(c, 2);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2102      	movs	r1, #2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe63 	bl	8000578 <lcd_spi_send_data>
  while (h--);
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	807a      	strh	r2, [r7, #2]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f4      	bne.n	80008a6 <lcd_vline+0x42>
  lcd_end_write();
 80008bc:	f7ff fe1e 	bl	80004fc <lcd_end_write>
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}

080008c8 <lcd_fill_rect>:
  lcd_vline(x+w, y, h, color);
  lcd_hline(x, y, w, color);
  lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4604      	mov	r4, r0
 80008d0:	4608      	mov	r0, r1
 80008d2:	4611      	mov	r1, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	4623      	mov	r3, r4
 80008d8:	80fb      	strh	r3, [r7, #6]
 80008da:	4603      	mov	r3, r0
 80008dc:	80bb      	strh	r3, [r7, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	807b      	strh	r3, [r7, #2]
 80008e2:	4613      	mov	r3, r2
 80008e4:	803b      	strh	r3, [r7, #0]
  if (x < 0) x = 0;
 80008e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	da01      	bge.n	80008f2 <lcd_fill_rect+0x2a>
 80008ee:	2300      	movs	r3, #0
 80008f0:	80fb      	strh	r3, [r7, #6]
  if (y < 0) y = 0;
 80008f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	da01      	bge.n	80008fe <lcd_fill_rect+0x36>
 80008fa:	2300      	movs	r3, #0
 80008fc:	80bb      	strh	r3, [r7, #4]
  if (x + w > _width) w = _width - x;
 80008fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000902:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000906:	4413      	add	r3, r2
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <lcd_fill_rect+0xc4>)
 800090a:	8812      	ldrh	r2, [r2, #0]
 800090c:	4293      	cmp	r3, r2
 800090e:	dd05      	ble.n	800091c <lcd_fill_rect+0x54>
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <lcd_fill_rect+0xc4>)
 8000912:	881a      	ldrh	r2, [r3, #0]
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29b      	uxth	r3, r3
 800091a:	807b      	strh	r3, [r7, #2]
  if (y + h > _height) h = _height - y;
 800091c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000920:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000924:	4413      	add	r3, r2
 8000926:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <lcd_fill_rect+0xc8>)
 8000928:	8812      	ldrh	r2, [r2, #0]
 800092a:	4293      	cmp	r3, r2
 800092c:	dd05      	ble.n	800093a <lcd_fill_rect+0x72>
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <lcd_fill_rect+0xc8>)
 8000930:	881a      	ldrh	r2, [r3, #0]
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	b29b      	uxth	r3, r3
 8000938:	803b      	strh	r3, [r7, #0]
  lcd_start_write();
 800093a:	f7ff fdd3 	bl	80004e4 <lcd_start_write>
  lcd_set_window(x, y, w, h);
 800093e:	88f8      	ldrh	r0, [r7, #6]
 8000940:	88b9      	ldrh	r1, [r7, #4]
 8000942:	887a      	ldrh	r2, [r7, #2]
 8000944:	883b      	ldrh	r3, [r7, #0]
 8000946:	f7ff fe35 	bl	80005b4 <lcd_set_window>
  uint8_t c[2] = { color >> 8, color};
 800094a:	8c3b      	ldrh	r3, [r7, #32]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b29b      	uxth	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	723b      	strb	r3, [r7, #8]
 8000954:	8c3b      	ldrh	r3, [r7, #32]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	727b      	strb	r3, [r7, #9]
  uint32_t cnt = w * h;
 800095a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800095e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000962:	fb02 f303 	mul.w	r3, r2, r3
 8000966:	60fb      	str	r3, [r7, #12]
  while (cnt--)
 8000968:	e005      	b.n	8000976 <lcd_fill_rect+0xae>
    lcd_spi_send_data(c, 2);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2102      	movs	r1, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe01 	bl	8000578 <lcd_spi_send_data>
  while (cnt--)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	60fa      	str	r2, [r7, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f4      	bne.n	800096a <lcd_fill_rect+0xa2>
  lcd_end_write();
 8000980:	f7ff fdbc 	bl	80004fc <lcd_end_write>
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	20000096 	.word	0x20000096
 8000990:	20000098 	.word	0x20000098

08000994 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af02      	add	r7, sp, #8
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
  lcd_fill_rect(0, 0, _width, _height, color);
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <lcd_fill+0x2c>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <lcd_fill+0x30>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b219      	sxth	r1, r3
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	460b      	mov	r3, r1
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff88 	bl	80008c8 <lcd_fill_rect>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000096 	.word	0x20000096
 80009c4:	20000098 	.word	0x20000098

080009c8 <lcd_fill_circle>:
    lcd_pixel(x0 - y, y0 - x, color);
  }
  lcd_end_write();
}

void lcd_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4623      	mov	r3, r4
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	4603      	mov	r3, r0
 80009dc:	80bb      	strh	r3, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	807b      	strh	r3, [r7, #2]
 80009e2:	4613      	mov	r3, r2
 80009e4:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	f1c3 0301 	rsb	r3, r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	461a      	mov	r2, r3
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	81fb      	strh	r3, [r7, #14]
  int16_t px = x;
 8000a0a:	8a3b      	ldrh	r3, [r7, #16]
 8000a0c:	81bb      	strh	r3, [r7, #12]
  int16_t py = y;
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	817b      	strh	r3, [r7, #10]

  while (x < y) {
 8000a12:	e071      	b.n	8000af8 <lcd_fill_circle+0x130>
    if (f >= 0) {
 8000a14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0e      	blt.n	8000a3a <lcd_fill_circle+0x72>
      y--;
 8000a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	3b01      	subs	r3, #1
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000a28:	8a7b      	ldrh	r3, [r7, #18]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000a30:	8afa      	ldrh	r2, [r7, #22]
 8000a32:	8a7b      	ldrh	r3, [r7, #18]
 8000a34:	4413      	add	r3, r2
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000a3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	3301      	adds	r3, #1
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000a46:	8abb      	ldrh	r3, [r7, #20]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000a4e:	8afa      	ldrh	r2, [r7, #22]
 8000a50:	8abb      	ldrh	r3, [r7, #20]
 8000a52:	4413      	add	r3, r2
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	82fb      	strh	r3, [r7, #22]
    if (x < (y + 1)) {
 8000a58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	db1f      	blt.n	8000aa4 <lcd_fill_circle+0xdc>
      lcd_vline(x0 + x, y0 - y, 2 * y + 1, color);
 8000a64:	88fa      	ldrh	r2, [r7, #6]
 8000a66:	8a3b      	ldrh	r3, [r7, #16]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	88ba      	ldrh	r2, [r7, #4]
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	b299      	uxth	r1, r3
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	883b      	ldrh	r3, [r7, #0]
 8000a80:	f7ff fef0 	bl	8000864 <lcd_vline>
      lcd_vline(x0 - x, y0 - y, 2 * y + 1, color);
 8000a84:	88fa      	ldrh	r2, [r7, #6]
 8000a86:	8a3b      	ldrh	r3, [r7, #16]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	b298      	uxth	r0, r3
 8000a8c:	88ba      	ldrh	r2, [r7, #4]
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b299      	uxth	r1, r3
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	883b      	ldrh	r3, [r7, #0]
 8000aa0:	f7ff fee0 	bl	8000864 <lcd_vline>
    }
    if (y != py) {
 8000aa4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000aa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d021      	beq.n	8000af4 <lcd_fill_circle+0x12c>
      lcd_vline(x0 + py, y0 - px, 2 * px + 1, color);
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	897b      	ldrh	r3, [r7, #10]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	88ba      	ldrh	r2, [r7, #4]
 8000aba:	89bb      	ldrh	r3, [r7, #12]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	b299      	uxth	r1, r3
 8000ac0:	89bb      	ldrh	r3, [r7, #12]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	883b      	ldrh	r3, [r7, #0]
 8000acc:	f7ff feca 	bl	8000864 <lcd_vline>
      lcd_vline(x0 - py, y0 - px, 2 * px + 1, color);
 8000ad0:	88fa      	ldrh	r2, [r7, #6]
 8000ad2:	897b      	ldrh	r3, [r7, #10]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	b298      	uxth	r0, r3
 8000ad8:	88ba      	ldrh	r2, [r7, #4]
 8000ada:	89bb      	ldrh	r3, [r7, #12]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	b299      	uxth	r1, r3
 8000ae0:	89bb      	ldrh	r3, [r7, #12]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	883b      	ldrh	r3, [r7, #0]
 8000aec:	f7ff feba 	bl	8000864 <lcd_vline>
      py = y;
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	817b      	strh	r3, [r7, #10]
    }
    px = x;
 8000af4:	8a3b      	ldrh	r3, [r7, #16]
 8000af6:	81bb      	strh	r3, [r7, #12]
  while (x < y) {
 8000af8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	db87      	blt.n	8000a14 <lcd_fill_circle+0x4c>
  }
  lcd_vline(x0, y0 - r, 2 * r + 1, color);
 8000b04:	88f8      	ldrh	r0, [r7, #6]
 8000b06:	88ba      	ldrh	r2, [r7, #4]
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	b299      	uxth	r1, r3
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	3301      	adds	r3, #1
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	883b      	ldrh	r3, [r7, #0]
 8000b1a:	f7ff fea3 	bl	8000864 <lcd_vline>
}
 8000b1e:	bf00      	nop
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
	...

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fcee 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f866 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f9ca 	bl	8000ecc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b38:	f000 f9a8 	bl	8000e8c <MX_DMA_Init>
  MX_TIM3_Init();
 8000b3c:	f000 f92e 	bl	8000d9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b40:	f000 f97a 	bl	8000e38 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b44:	f000 f8c6 	bl	8000cd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b48:	f000 f8f2 	bl	8000d30 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b4c:	f003 fa5a 	bl	8004004 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex */
  mutexHandle = osMutexNew(&mutex_attributes);
 8000b50:	481b      	ldr	r0, [pc, #108]	; (8000bc0 <main+0x98>)
 8000b52:	f003 fb4e 	bl	80041f2 <osMutexNew>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a1a      	ldr	r2, [pc, #104]	; (8000bc4 <main+0x9c>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* creation of muxLCD */
  muxLCDHandle = osMutexNew(&muxLCD_attributes);
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <main+0xa0>)
 8000b5e:	f003 fb48 	bl	80041f2 <osMutexNew>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <main+0xa4>)
 8000b66:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of init_Sem */
  init_SemHandle = osSemaphoreNew(1, 1, &init_Sem_attributes);
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <main+0xa8>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f003 fc4e 	bl	800440e <osSemaphoreNew>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <main+0xac>)
 8000b76:	6013      	str	r3, [r2, #0]

  /* creation of SemDMACplt */
  SemDMACpltHandle = osSemaphoreNew(1, 1, &SemDMACplt_attributes);
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <main+0xb0>)
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f003 fc46 	bl	800440e <osSemaphoreNew>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <main+0xb4>)
 8000b86:	6013      	str	r3, [r2, #0]

  /* creation of MEANING_SEM */
  MEANING_SEMHandle = osSemaphoreNew(5, 5, &MEANING_SEM_attributes);
 8000b88:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <main+0xb8>)
 8000b8a:	2105      	movs	r1, #5
 8000b8c:	2005      	movs	r0, #5
 8000b8e:	f003 fc3e 	bl	800440e <osSemaphoreNew>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <main+0xbc>)
 8000b96:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_take_raw_s */
  task_take_raw_sHandle = osThreadNew(start_task_take_raw_s, NULL, &task_take_raw_s_attributes);
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <main+0xc0>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <main+0xc4>)
 8000b9e:	f003 fa7b 	bl	8004098 <osThreadNew>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <main+0xc8>)
 8000ba6:	6013      	str	r3, [r2, #0]

  /* creation of task_showing */
  task_showingHandle = osThreadNew(start_task_showing, NULL, &task_showing_attributes);
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <main+0xcc>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <main+0xd0>)
 8000bae:	f003 fa73 	bl	8004098 <osThreadNew>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <main+0xd4>)
 8000bb6:	6013      	str	r3, [r2, #0]
  /* add events, ... */
//	 muxLcd = osMutexNew(&muxLcd_attributes);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bb8:	f003 fa48 	bl	800404c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <main+0x94>
 8000bbe:	bf00      	nop
 8000bc0:	08007c58 	.word	0x08007c58
 8000bc4:	2000023c 	.word	0x2000023c
 8000bc8:	08007c68 	.word	0x08007c68
 8000bcc:	20000240 	.word	0x20000240
 8000bd0:	08007c78 	.word	0x08007c78
 8000bd4:	20000244 	.word	0x20000244
 8000bd8:	08007c88 	.word	0x08007c88
 8000bdc:	20000248 	.word	0x20000248
 8000be0:	08007c98 	.word	0x08007c98
 8000be4:	2000024c 	.word	0x2000024c
 8000be8:	08007c10 	.word	0x08007c10
 8000bec:	0800100d 	.word	0x0800100d
 8000bf0:	20000234 	.word	0x20000234
 8000bf4:	08007c34 	.word	0x08007c34
 8000bf8:	0800108d 	.word	0x0800108d
 8000bfc:	20000238 	.word	0x20000238

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	2230      	movs	r2, #48	; 0x30
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 feb8 	bl	8007984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c32:	6413      	str	r3, [r2, #64]	; 0x40
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <SystemClock_Config+0xd0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c4c:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <SystemClock_Config+0xd0>)
 8000c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <SystemClock_Config+0xd0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c74:	2308      	movs	r3, #8
 8000c76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c78:	2354      	movs	r3, #84	; 0x54
 8000c7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c80:	2304      	movs	r3, #4
 8000c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fbfb 	bl	8002484 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c94:	f000 fa34 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fe5d 	bl	8002974 <HAL_RCC_ClockConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cc0:	f000 fa1e 	bl	8001100 <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3750      	adds	r7, #80	; 0x50
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_I2C1_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x58>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d12:	f001 fa73 	bl	80021fc <HAL_I2C_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d1c:	f000 f9f0 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000009c 	.word	0x2000009c
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	000186a0 	.word	0x000186a0

08000d30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <MX_SPI1_Init+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d82:	f001 ffd7 	bl	8002d34 <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d8c:	f000 f9b8 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000f0 	.word	0x200000f0
 8000d98:	40013000 	.word	0x40013000

08000d9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <MX_TIM3_Init+0x98>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000dc0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000dc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000de2:	f002 fa37 	bl	8003254 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dec:	f000 f988 	bl	8001100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000dfe:	f002 fb80 	bl	8003502 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 f97a 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_TIM3_Init+0x94>)
 8000e1a:	f002 fd7b 	bl	8003914 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f96c 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200001a8 	.word	0x200001a8
 8000e34:	40000400 	.word	0x40000400

08000e38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_USART1_UART_Init+0x50>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e70:	f002 fdd2 	bl	8003a18 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f941 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001f0 	.word	0x200001f0
 8000e88:	40011000 	.word	0x40011000

08000e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_DMA_Init+0x3c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <MX_DMA_Init+0x3c>)
 8000e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_DMA_Init+0x3c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	203b      	movs	r0, #59	; 0x3b
 8000eb4:	f000 fc77 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000eb8:	203b      	movs	r0, #59	; 0x3b
 8000eba:	f000 fc90 	bl	80017de <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <MX_GPIO_Init+0x10c>)
 8000f5a:	f001 f91d 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_A0_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	211a      	movs	r1, #26
 8000f62:	481e      	ldr	r0, [pc, #120]	; (8000fdc <MX_GPIO_Init+0x110>)
 8000f64:	f001 f918 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <MX_GPIO_Init+0x10c>)
 8000f82:	f000 ff85 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_A0_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_A0_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8000f86:	231a      	movs	r3, #26
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <MX_GPIO_Init+0x110>)
 8000f9e:	f000 ff77 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4809      	ldr	r0, [pc, #36]	; (8000fdc <MX_GPIO_Init+0x110>)
 8000fb8:	f000 ff6a 	bl	8001e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2105      	movs	r1, #5
 8000fc0:	2017      	movs	r0, #23
 8000fc2:	f000 fbf0 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fc6:	2017      	movs	r0, #23
 8000fc8:	f000 fc09 	bl	80017de <HAL_NVIC_EnableIRQ>

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  //osSemaphoreRelease(semButtonPressedHandle);
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <start_task_take_raw_s>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_task_take_raw_s */
void start_task_take_raw_s(void *argument)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	lcd_init();
 8001014:	f7ff fb34 	bl	8000680 <lcd_init>
	lcd_fill(ST7735_BLACK);
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fcbb 	bl	8000994 <lcd_fill>
	osSemaphoreRelease(init_SemHandle);
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <start_task_take_raw_s+0x78>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f003 face 	bl	80045c4 <osSemaphoreRelease>
   /* Infinite loop */
   for(;;)
   {
	    osMutexAcquire(muxLCDHandle, osWaitForever);
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <start_task_take_raw_s+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f964 	bl	80042fe <osMutexAcquire>
	    lcd_fill_circle(30, 30, 25, ST77XX_BLACK);
 8001036:	2300      	movs	r3, #0
 8001038:	2219      	movs	r2, #25
 800103a:	211e      	movs	r1, #30
 800103c:	201e      	movs	r0, #30
 800103e:	f7ff fcc3 	bl	80009c8 <lcd_fill_circle>
	    osMutexRelease(muxLCDHandle);
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <start_task_take_raw_s+0x7c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f003 f9a4 	bl	8004394 <osMutexRelease>
		osDelay(300);
 800104c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001050:	f003 f8b4 	bl	80041bc <osDelay>
	    osMutexAcquire(muxLCDHandle, osWaitForever);
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <start_task_take_raw_s+0x7c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f94e 	bl	80042fe <osMutexAcquire>
		lcd_fill_circle(30, 30, 25, ST77XX_BLUE);
 8001062:	231f      	movs	r3, #31
 8001064:	2219      	movs	r2, #25
 8001066:	211e      	movs	r1, #30
 8001068:	201e      	movs	r0, #30
 800106a:	f7ff fcad 	bl	80009c8 <lcd_fill_circle>
		osMutexRelease(muxLCDHandle);
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <start_task_take_raw_s+0x7c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f98e 	bl	8004394 <osMutexRelease>
		osDelay(300);
 8001078:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800107c:	f003 f89e 	bl	80041bc <osDelay>
	    osMutexAcquire(muxLCDHandle, osWaitForever);
 8001080:	e7d2      	b.n	8001028 <start_task_take_raw_s+0x1c>
 8001082:	bf00      	nop
 8001084:	20000244 	.word	0x20000244
 8001088:	20000240 	.word	0x20000240

0800108c <start_task_showing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task_showing */
void start_task_showing(void *argument)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task_showing */
	osSemaphoreAcquire(init_SemHandle,osWaitForever);
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <start_task_showing+0x6c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fa3f 	bl	8004520 <osSemaphoreAcquire>
  /* Infinite loop */
  for(;;)
  {
	    osMutexAcquire(muxLCDHandle, osWaitForever);
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <start_task_showing+0x70>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 31ff 	mov.w	r1, #4294967295
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 f927 	bl	80042fe <osMutexAcquire>
	    lcd_fill_circle(80, 80, 30, ST77XX_BLACK);
 80010b0:	2300      	movs	r3, #0
 80010b2:	221e      	movs	r2, #30
 80010b4:	2150      	movs	r1, #80	; 0x50
 80010b6:	2050      	movs	r0, #80	; 0x50
 80010b8:	f7ff fc86 	bl	80009c8 <lcd_fill_circle>
	    osMutexRelease(muxLCDHandle);
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <start_task_showing+0x70>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 f967 	bl	8004394 <osMutexRelease>
		osDelay(200);
 80010c6:	20c8      	movs	r0, #200	; 0xc8
 80010c8:	f003 f878 	bl	80041bc <osDelay>
		osMutexAcquire(muxLCDHandle, osWaitForever);
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <start_task_showing+0x70>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 f912 	bl	80042fe <osMutexAcquire>
		lcd_fill_circle(80, 80, 30, ST77XX_BLUE);
 80010da:	231f      	movs	r3, #31
 80010dc:	221e      	movs	r2, #30
 80010de:	2150      	movs	r1, #80	; 0x50
 80010e0:	2050      	movs	r0, #80	; 0x50
 80010e2:	f7ff fc71 	bl	80009c8 <lcd_fill_circle>
		osMutexRelease(muxLCDHandle);
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <start_task_showing+0x70>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 f952 	bl	8004394 <osMutexRelease>
		osDelay(200);
 80010f0:	20c8      	movs	r0, #200	; 0xc8
 80010f2:	f003 f863 	bl	80041bc <osDelay>
	    osMutexAcquire(muxLCDHandle, osWaitForever);
 80010f6:	e7d4      	b.n	80010a2 <start_task_showing+0x16>
 80010f8:	20000244 	.word	0x20000244
 80010fc:	20000240 	.word	0x20000240

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>
	...

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_MspInit+0x54>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_MspInit+0x54>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_MspInit+0x54>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_MspInit+0x54>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_MspInit+0x54>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	; 0x40
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_MspInit+0x54>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	210f      	movs	r1, #15
 800114e:	f06f 0001 	mvn.w	r0, #1
 8001152:	f000 fb28 	bl	80017a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_I2C_MspInit+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12c      	bne.n	80011e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a8:	2312      	movs	r3, #18
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b4:	2304      	movs	r3, #4
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <HAL_I2C_MspInit+0x8c>)
 80011c0:	f000 fe66 	bl	8001e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a35      	ldr	r2, [pc, #212]	; (80012e8 <HAL_SPI_MspInit+0xf4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d163      	bne.n	80012de <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <HAL_SPI_MspInit+0xf8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a33      	ldr	r2, [pc, #204]	; (80012ec <HAL_SPI_MspInit+0xf8>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_SPI_MspInit+0xf8>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_SPI_MspInit+0xf8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <HAL_SPI_MspInit+0xf8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_SPI_MspInit+0xf8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125e:	2305      	movs	r3, #5
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4821      	ldr	r0, [pc, #132]	; (80012f0 <HAL_SPI_MspInit+0xfc>)
 800126a:	f000 fe11 	bl	8001e90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_SPI_MspInit+0x104>)
 8001272:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 8001276:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800127a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 800128a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 80012b0:	f000 fab0 	bl	8001814 <HAL_DMA_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80012ba:	f7ff ff21 	bl	8001100 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 80012c2:	649a      	str	r2, [r3, #72]	; 0x48
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */
    HAL_DMA_RegisterCallback(&hdma_spi1_tx, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_SPI_MspInit+0x108>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 80012d0:	f000 fcd8 	bl	8001c84 <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_spi1_tx, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_SPI_MspInit+0x10c>)
 80012d6:	2104      	movs	r1, #4
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <HAL_SPI_MspInit+0x100>)
 80012da:	f000 fcd3 	bl	8001c84 <HAL_DMA_RegisterCallback>

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40013000 	.word	0x40013000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	20000148 	.word	0x20000148
 80012f8:	40026458 	.word	0x40026458
 80012fc:	080013e5 	.word	0x080013e5
 8001300:	08001405 	.word	0x08001405

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_TIM_Base_MspInit+0x48>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d115      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_TIM_Base_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_TIM_Base_MspInit+0x4c>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_TIM_Base_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	201d      	movs	r0, #29
 8001338:	f000 fa35 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800133c:	201d      	movs	r0, #29
 800133e:	f000 fa4e 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40000400 	.word	0x40000400
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x84>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12b      	bne.n	80013ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0x88>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_UART_MspInit+0x88>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ae:	23c0      	movs	r3, #192	; 0xc0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013be:	2307      	movs	r3, #7
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_UART_MspInit+0x8c>)
 80013ca:	f000 fd61 	bl	8001e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40011000 	.word	0x40011000
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020400 	.word	0x40020400

080013e4 <TransferComplete>:
}

/* USER CODE BEGIN 1 */

static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(SemDMACpltHandle);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <TransferComplete+0x1c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 f8e7 	bl	80045c4 <osSemaphoreRelease>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000248 	.word	0x20000248

08001404 <TransferError>:

static void TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8b2 	bl	80015b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800144c:	f005 f902 	bl	8006654 <xTaskGetSchedulerState>
 8001450:	4603      	mov	r3, r0
 8001452:	2b01      	cmp	r3, #1
 8001454:	d001      	beq.n	800145a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001456:	f005 ffe7 	bl	8007428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001462:	2040      	movs	r0, #64	; 0x40
 8001464:	f000 feb2 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <TIM3_IRQHandler+0x10>)
 8001472:	f001 ff3e 	bl	80032f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001a8 	.word	0x200001a8

08001480 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <DMA2_Stream3_IRQHandler+0x10>)
 8001486:	f000 fa73 	bl	8001970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000148 	.word	0x20000148

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014be:	490e      	ldr	r1, [pc, #56]	; (80014f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d4:	4c0b      	ldr	r4, [pc, #44]	; (8001504 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e2:	f7ff ffd7 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f006 fa19 	bl	800791c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff fb1d 	bl	8000b28 <main>
  bx  lr    
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014fc:	08007d38 	.word	0x08007d38
  ldr r2, =_sbss
 8001500:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001504:	2000506c 	.word	0x2000506c

08001508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>
	...

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_Init+0x40>)
 8001516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_Init+0x40>)
 8001522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_Init+0x40>)
 800152e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 f92b 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153a:	200f      	movs	r0, #15
 800153c:	f000 f808 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001540:	f7ff fde4 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023c00 	.word	0x40023c00

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x54>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f943 	bl	80017fa <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 f90b 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <HAL_InitTick+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000250 	.word	0x20000250

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000250 	.word	0x20000250

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff feda 	bl	80015d8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e099      	b.n	8001964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001850:	e00f      	b.n	8001872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001852:	f7ff fec1 	bl	80015d8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b05      	cmp	r3, #5
 800185e:	d908      	bls.n	8001872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2220      	movs	r2, #32
 8001864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e078      	b.n	8001964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e8      	bne.n	8001852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_DMA_Init+0x158>)
 800188c:	4013      	ands	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d107      	bne.n	80018dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4313      	orrs	r3, r2
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f023 0307 	bic.w	r3, r3, #7
 80018f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	2b04      	cmp	r3, #4
 8001904:	d117      	bne.n	8001936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00e      	beq.n	8001936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fa3d 	bl	8001d98 <DMA_CheckFifoParam>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001932:	2301      	movs	r3, #1
 8001934:	e016      	b.n	8001964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f9f4 	bl	8001d2c <DMA_CalcBaseAndBitshift>
 8001944:	4603      	mov	r3, r0
 8001946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	223f      	movs	r2, #63	; 0x3f
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	f010803f 	.word	0xf010803f

08001970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800197c:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <HAL_DMA_IRQHandler+0x248>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a8e      	ldr	r2, [pc, #568]	; (8001bbc <HAL_DMA_IRQHandler+0x24c>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2208      	movs	r2, #8
 800199c:	409a      	lsls	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01a      	beq.n	80019dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0204 	bic.w	r2, r2, #4
 80019c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c8:	2208      	movs	r2, #8
 80019ca:	409a      	lsls	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	2201      	movs	r2, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d012      	beq.n	8001a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fe:	2201      	movs	r2, #1
 8001a00:	409a      	lsls	r2, r3
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	2204      	movs	r2, #4
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d012      	beq.n	8001a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	2204      	movs	r2, #4
 8001a36:	409a      	lsls	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	f043 0204 	orr.w	r2, r3, #4
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d043      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03c      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d018      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d024      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
 8001a9e:	e01f      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01b      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
 8001ab0:	e016      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d107      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0208 	bic.w	r2, r2, #8
 8001ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 808f 	beq.w	8001c10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8087 	beq.w	8001c10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b06:	2220      	movs	r2, #32
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d136      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0216 	bic.w	r2, r2, #22
 8001b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d103      	bne.n	8001b4a <HAL_DMA_IRQHandler+0x1da>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0208 	bic.w	r2, r2, #8
 8001b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	223f      	movs	r2, #63	; 0x3f
 8001b60:	409a      	lsls	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d07e      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
        }
        return;
 8001b86:	e079      	b.n	8001c7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01d      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d031      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
 8001bb4:	e02c      	b.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d023      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
 8001bd0:	e01e      	b.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10f      	bne.n	8001c00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0210 	bic.w	r2, r2, #16
 8001bee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d032      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2205      	movs	r2, #5
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d307      	bcc.n	8001c58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f2      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x2cc>
 8001c56:	e000      	b.n	8001c5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
 8001c7a:	e000      	b.n	8001c7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c7c:	bf00      	nop
    }
  }
}
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_RegisterCallback+0x20>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e03d      	b.n	8001d20 <HAL_DMA_RegisterCallback+0x9c>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d12c      	bne.n	8001d12 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d826      	bhi.n	8001d0c <HAL_DMA_RegisterCallback+0x88>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <HAL_DMA_RegisterCallback+0x40>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001cdd 	.word	0x08001cdd
 8001cc8:	08001ce5 	.word	0x08001ce5
 8001ccc:	08001ced 	.word	0x08001ced
 8001cd0:	08001cf5 	.word	0x08001cf5
 8001cd4:	08001cfd 	.word	0x08001cfd
 8001cd8:	08001d05 	.word	0x08001d05
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001ce2:	e018      	b.n	8001d16 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001cea:	e014      	b.n	8001d16 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001cf2:	e010      	b.n	8001d16 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001cfa:	e00c      	b.n	8001d16 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001d02:	e008      	b.n	8001d16 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001d0a:	e004      	b.n	8001d16 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d10:	e001      	b.n	8001d16 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3b10      	subs	r3, #16
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <DMA_CalcBaseAndBitshift+0x64>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <DMA_CalcBaseAndBitshift+0x68>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d909      	bls.n	8001d6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	1d1a      	adds	r2, r3, #4
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d6c:	e007      	b.n	8001d7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	aaaaaaab 	.word	0xaaaaaaab
 8001d94:	08007cc0 	.word	0x08007cc0

08001d98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11f      	bne.n	8001df2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d856      	bhi.n	8001e66 <DMA_CheckFifoParam+0xce>
 8001db8:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DMA_CheckFifoParam+0x28>)
 8001dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbe:	bf00      	nop
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001de3 	.word	0x08001de3
 8001dc8:	08001dd1 	.word	0x08001dd1
 8001dcc:	08001e67 	.word	0x08001e67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d046      	beq.n	8001e6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de0:	e043      	b.n	8001e6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dea:	d140      	bne.n	8001e6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df0:	e03d      	b.n	8001e6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfa:	d121      	bne.n	8001e40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d837      	bhi.n	8001e72 <DMA_CheckFifoParam+0xda>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <DMA_CheckFifoParam+0x70>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e1f 	.word	0x08001e1f
 8001e10:	08001e19 	.word	0x08001e19
 8001e14:	08001e31 	.word	0x08001e31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1c:	e030      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d025      	beq.n	8001e76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2e:	e022      	b.n	8001e76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e38:	d11f      	bne.n	8001e7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e3e:	e01c      	b.n	8001e7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d903      	bls.n	8001e4e <DMA_CheckFifoParam+0xb6>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d003      	beq.n	8001e54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e4c:	e018      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
      break;
 8001e52:	e015      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e00b      	b.n	8001e7e <DMA_CheckFifoParam+0xe6>
      break;
 8001e66:	bf00      	nop
 8001e68:	e00a      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e008      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e006      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e72:	bf00      	nop
 8001e74:	e004      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e002      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e159      	b.n	8002160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8148 	bne.w	800215a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d005      	beq.n	8001ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d130      	bne.n	8001f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 0201 	and.w	r2, r3, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d017      	beq.n	8001f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d123      	bne.n	8001fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a2 	beq.w	800215a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b57      	ldr	r3, [pc, #348]	; (8002178 <HAL_GPIO_Init+0x2e8>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a56      	ldr	r2, [pc, #344]	; (8002178 <HAL_GPIO_Init+0x2e8>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b54      	ldr	r3, [pc, #336]	; (8002178 <HAL_GPIO_Init+0x2e8>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_GPIO_Init+0x2ec>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a49      	ldr	r2, [pc, #292]	; (8002180 <HAL_GPIO_Init+0x2f0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x202>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_GPIO_Init+0x2f4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x1fe>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a47      	ldr	r2, [pc, #284]	; (8002188 <HAL_GPIO_Init+0x2f8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x1fa>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a46      	ldr	r2, [pc, #280]	; (800218c <HAL_GPIO_Init+0x2fc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x1f6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a45      	ldr	r2, [pc, #276]	; (8002190 <HAL_GPIO_Init+0x300>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x1f2>
 800207e:	2304      	movs	r3, #4
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x204>
 8002082:	2307      	movs	r3, #7
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x204>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x204>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x204>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x204>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a4:	4935      	ldr	r1, [pc, #212]	; (800217c <HAL_GPIO_Init+0x2ec>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b38      	ldr	r3, [pc, #224]	; (8002194 <HAL_GPIO_Init+0x304>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d6:	4a2f      	ldr	r2, [pc, #188]	; (8002194 <HAL_GPIO_Init+0x304>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_GPIO_Init+0x304>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212a:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_GPIO_Init+0x304>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002130:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002154:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_GPIO_Init+0x304>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f aea2 	bls.w	8001eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40013c00 	.word	0x40013c00

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b4:	e003      	b.n	80021be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	041a      	lsls	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fef8 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40013c00 	.word	0x40013c00

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e12b      	b.n	8002466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe ff9e 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002260:	f000 fd40 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 8002264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a81      	ldr	r2, [pc, #516]	; (8002470 <HAL_I2C_Init+0x274>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d807      	bhi.n	8002280 <HAL_I2C_Init+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a80      	ldr	r2, [pc, #512]	; (8002474 <HAL_I2C_Init+0x278>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e006      	b.n	800228e <HAL_I2C_Init+0x92>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a7d      	ldr	r2, [pc, #500]	; (8002478 <HAL_I2C_Init+0x27c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e7      	b.n	8002466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a78      	ldr	r2, [pc, #480]	; (800247c <HAL_I2C_Init+0x280>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_I2C_Init+0x274>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d802      	bhi.n	80022d0 <HAL_I2C_Init+0xd4>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	e009      	b.n	80022e4 <HAL_I2C_Init+0xe8>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a69      	ldr	r2, [pc, #420]	; (8002480 <HAL_I2C_Init+0x284>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	495c      	ldr	r1, [pc, #368]	; (8002470 <HAL_I2C_Init+0x274>)
 8002300:	428b      	cmp	r3, r1
 8002302:	d819      	bhi.n	8002338 <HAL_I2C_Init+0x13c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002318:	400b      	ands	r3, r1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_I2C_Init+0x138>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb1 f3f3 	udiv	r3, r1, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002332:	e051      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002334:	2304      	movs	r3, #4
 8002336:	e04f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d111      	bne.n	8002364 <HAL_I2C_Init+0x168>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e012      	b.n	800238a <HAL_I2C_Init+0x18e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x196>
 800238e:	2301      	movs	r3, #1
 8002390:	e022      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <HAL_I2C_Init+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1e58      	subs	r0, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b6:	e00f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	0099      	lsls	r1, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	6809      	ldr	r1, [r1, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6911      	ldr	r1, [r2, #16]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	4311      	orrs	r1, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	000186a0 	.word	0x000186a0
 8002474:	001e847f 	.word	0x001e847f
 8002478:	003d08ff 	.word	0x003d08ff
 800247c:	431bde83 	.word	0x431bde83
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e267      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d075      	beq.n	800258e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a2:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4b85      	ldr	r3, [pc, #532]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b82      	ldr	r3, [pc, #520]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b7e      	ldr	r3, [pc, #504]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e242      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x74>
 80024ea:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a75      	ldr	r2, [pc, #468]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b70      	ldr	r3, [pc, #448]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6f      	ldr	r2, [pc, #444]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6c      	ldr	r2, [pc, #432]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 800251c:	4b69      	ldr	r3, [pc, #420]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a68      	ldr	r2, [pc, #416]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a65      	ldr	r2, [pc, #404]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff f84c 	bl	80015d8 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff f848 	bl	80015d8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e207      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b5b      	ldr	r3, [pc, #364]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7ff f838 	bl	80015d8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff f834 	bl	80015d8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1f3      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b51      	ldr	r3, [pc, #324]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b44      	ldr	r3, [pc, #272]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1c7      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_OscConfig+0x244>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe ffed 	bl	80015d8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002602:	f7fe ffe9 	bl	80015d8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1a8      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4925      	ldr	r1, [pc, #148]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x244>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe ffcc 	bl	80015d8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe ffc8 	bl	80015d8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e187      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_RCC_OscConfig+0x248>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe ffac 	bl	80015d8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe ffa8 	bl	80015d8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e167      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x200>
 80026a2:	e01b      	b.n	80026dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_OscConfig+0x248>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe ff95 	bl	80015d8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e00e      	b.n	80026d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe ff91 	bl	80015d8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d907      	bls.n	80026d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e150      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470000 	.word	0x42470000
 80026cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ea      	bne.n	80026b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8097 	beq.w	8002818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b7d      	ldr	r3, [pc, #500]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a7c      	ldr	r2, [pc, #496]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b7a      	ldr	r3, [pc, #488]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b77      	ldr	r3, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b74      	ldr	r3, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7fe ff51 	bl	80015d8 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7fe ff4d 	bl	80015d8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e10c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_OscConfig+0x474>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x2ea>
 8002760:	4b64      	ldr	r3, [pc, #400]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a63      	ldr	r2, [pc, #396]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x30c>
 8002776:	4b5f      	ldr	r3, [pc, #380]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	4a5e      	ldr	r2, [pc, #376]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6713      	str	r3, [r2, #112]	; 0x70
 8002782:	4b5c      	ldr	r3, [pc, #368]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a5b      	ldr	r2, [pc, #364]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 8002790:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	4b55      	ldr	r3, [pc, #340]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a54      	ldr	r2, [pc, #336]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe ff12 	bl	80015d8 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe ff0e 	bl	80015d8 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0cb      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RCC_OscConfig+0x334>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe fefc 	bl	80015d8 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fef8 	bl	80015d8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0b5      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	4a38      	ldr	r2, [pc, #224]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a1 	beq.w	8002964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d05c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d141      	bne.n	80028ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fecc 	bl	80015d8 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fec8 	bl	80015d8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e087      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	491b      	ldr	r1, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x478>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fea1 	bl	80015d8 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fe9d 	bl	80015d8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e05c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x416>
 80028b8:	e054      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fe8a 	bl	80015d8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fe86 	bl	80015d8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e045      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
 80028e6:	e03d      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e038      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x4ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d028      	beq.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d121      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d11a      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	4293      	cmp	r3, r2
 800293a:	d111      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	3b01      	subs	r3, #1
 800294a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cc      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d90c      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d044      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d119      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e067      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4934      	ldr	r1, [pc, #208]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fdb8 	bl	80015d8 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fe fdb4 	bl	80015d8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d20c      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490a      	ldr	r1, [pc, #40]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fd18 	bl	8001550 <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	08007ca8 	.word	0x08007ca8
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b090      	sub	sp, #64	; 0x40
 8002b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b50:	2300      	movs	r3, #0
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d00d      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x40>
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	f200 80a1 	bhi.w	8002cac <HAL_RCC_GetSysClockFreq+0x16c>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b72:	e09b      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b78:	e09b      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b7e:	e098      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d028      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	623b      	str	r3, [r7, #32]
 8002ba0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bac:	fb03 f201 	mul.w	r2, r3, r1
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	fb00 f303 	mul.w	r3, r0, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a43      	ldr	r2, [pc, #268]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bba:	fba0 1202 	umull	r1, r2, r0, r2
 8002bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc0:	460a      	mov	r2, r1
 8002bc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	4413      	add	r3, r2
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	61fa      	str	r2, [r7, #28]
 8002bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bda:	f7fd fb01 	bl	80001e0 <__aeabi_uldivmod>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4613      	mov	r3, r2
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be6:	e053      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be8:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	2200      	movs	r2, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	617a      	str	r2, [r7, #20]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bfa:	f04f 0b00 	mov.w	fp, #0
 8002bfe:	4652      	mov	r2, sl
 8002c00:	465b      	mov	r3, fp
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	0159      	lsls	r1, r3, #5
 8002c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c10:	0150      	lsls	r0, r2, #5
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	ebb2 080a 	subs.w	r8, r2, sl
 8002c1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c32:	ebb2 0408 	subs.w	r4, r2, r8
 8002c36:	eb63 0509 	sbc.w	r5, r3, r9
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	00eb      	lsls	r3, r5, #3
 8002c44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c48:	00e2      	lsls	r2, r4, #3
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	461d      	mov	r5, r3
 8002c4e:	eb14 030a 	adds.w	r3, r4, sl
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	eb45 030b 	adc.w	r3, r5, fp
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c66:	4629      	mov	r1, r5
 8002c68:	028b      	lsls	r3, r1, #10
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c70:	4621      	mov	r1, r4
 8002c72:	028a      	lsls	r2, r1, #10
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	60fa      	str	r2, [r7, #12]
 8002c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c84:	f7fd faac 	bl	80001e0 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3740      	adds	r7, #64	; 0x40
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	00f42400 	.word	0x00f42400
 8002cc8:	017d7840 	.word	0x017d7840

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000000 	.word	0x20000000

08002ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce8:	f7ff fff0 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0a9b      	lsrs	r3, r3, #10
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4903      	ldr	r1, [pc, #12]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08007cb8 	.word	0x08007cb8

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d10:	f7ff ffdc 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0b5b      	lsrs	r3, r3, #13
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4903      	ldr	r1, [pc, #12]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08007cb8 	.word	0x08007cb8

08002d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07b      	b.n	8002e3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d56:	d009      	beq.n	8002d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
 8002d5e:	e005      	b.n	8002d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fa34 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	ea42 0103 	orr.w	r1, r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0104 	and.w	r1, r3, #4
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f003 0210 	and.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b088      	sub	sp, #32
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_SPI_Transmit+0x22>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e126      	b.n	80030b6 <HAL_SPI_Transmit+0x270>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e70:	f7fe fbb2 	bl	80015d8 <HAL_GetTick>
 8002e74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d002      	beq.n	8002e8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
 8002e88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e8a:	e10b      	b.n	80030a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_Transmit+0x52>
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e9c:	e102      	b.n	80030a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee4:	d10f      	bne.n	8002f06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d007      	beq.n	8002f24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f2c:	d14b      	bne.n	8002fc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_SPI_Transmit+0xf6>
 8002f36:	8afb      	ldrh	r3, [r7, #22]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d13e      	bne.n	8002fba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	1c9a      	adds	r2, r3, #2
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f60:	e02b      	b.n	8002fba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d112      	bne.n	8002f96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	1c9a      	adds	r2, r3, #2
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f94:	e011      	b.n	8002fba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f96:	f7fe fb1f 	bl	80015d8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d803      	bhi.n	8002fae <HAL_SPI_Transmit+0x168>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d102      	bne.n	8002fb4 <HAL_SPI_Transmit+0x16e>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fb8:	e074      	b.n	80030a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ce      	bne.n	8002f62 <HAL_SPI_Transmit+0x11c>
 8002fc4:	e04c      	b.n	8003060 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_SPI_Transmit+0x18e>
 8002fce:	8afb      	ldrh	r3, [r7, #22]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d140      	bne.n	8003056 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ffa:	e02c      	b.n	8003056 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d113      	bne.n	8003032 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003030:	e011      	b.n	8003056 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003032:	f7fe fad1 	bl	80015d8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d803      	bhi.n	800304a <HAL_SPI_Transmit+0x204>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d102      	bne.n	8003050 <HAL_SPI_Transmit+0x20a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003054:	e026      	b.n	80030a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1cd      	bne.n	8002ffc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	6839      	ldr	r1, [r7, #0]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f8b3 	bl	80031d0 <SPI_EndRxTxTransaction>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e000      	b.n	80030a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80030a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030d0:	f7fe fa82 	bl	80015d8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030e0:	f7fe fa7a 	bl	80015d8 <HAL_GetTick>
 80030e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	015b      	lsls	r3, r3, #5
 80030ec:	0d1b      	lsrs	r3, r3, #20
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f6:	e054      	b.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d050      	beq.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003100:	f7fe fa6a 	bl	80015d8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	429a      	cmp	r2, r3
 800310e:	d902      	bls.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d13d      	bne.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312e:	d111      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d004      	beq.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d107      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315c:	d10f      	bne.n	800317e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e017      	b.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3b01      	subs	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d19b      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000000 	.word	0x20000000

080031d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <SPI_EndRxTxTransaction+0x7c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <SPI_EndRxTxTransaction+0x80>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0d5b      	lsrs	r3, r3, #21
 80031e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031fa:	d112      	bne.n	8003222 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2200      	movs	r2, #0
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff ff5a 	bl	80030c0 <SPI_WaitFlagStateUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e00f      	b.n	8003242 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3b01      	subs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d0f2      	beq.n	8003222 <SPI_EndRxTxTransaction+0x52>
 800323c:	e000      	b.n	8003240 <SPI_EndRxTxTransaction+0x70>
        break;
 800323e:	bf00      	nop
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000
 8003250:	165e9f81 	.word	0x165e9f81

08003254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e041      	b.n	80032ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe f842 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f000 fa24 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d122      	bne.n	800334e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d11b      	bne.n	800334e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f06f 0202 	mvn.w	r2, #2
 800331e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f9b5 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 800333a:	e005      	b.n	8003348 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f9a7 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9b8 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d122      	bne.n	80033a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d11b      	bne.n	80033a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0204 	mvn.w	r2, #4
 8003372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f98b 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 800338e:	e005      	b.n	800339c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f97d 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f98e 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d122      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d11b      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0208 	mvn.w	r2, #8
 80033c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f961 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 80033e2:	e005      	b.n	80033f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f953 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f964 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b10      	cmp	r3, #16
 8003402:	d122      	bne.n	800344a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d11b      	bne.n	800344a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0210 	mvn.w	r2, #16
 800341a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2208      	movs	r2, #8
 8003420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f937 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 8003436:	e005      	b.n	8003444 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f929 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f93a 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0201 	mvn.w	r2, #1
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fd fdc0 	bl	8000ff6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fab1 	bl	8003a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d10e      	bne.n	80034ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d107      	bne.n	80034ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8ff 	bl	80036cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d10e      	bne.n	80034fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d107      	bne.n	80034fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f06f 0220 	mvn.w	r2, #32
 80034f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fa7b 	bl	80039f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_TIM_ConfigClockSource+0x1c>
 800351a:	2302      	movs	r3, #2
 800351c:	e0b4      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x186>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800353c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003544:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003556:	d03e      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xd4>
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	f200 8087 	bhi.w	800366e <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	f000 8086 	beq.w	8003674 <HAL_TIM_ConfigClockSource+0x172>
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d87f      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
 800356e:	2b70      	cmp	r3, #112	; 0x70
 8003570:	d01a      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0xa6>
 8003572:	2b70      	cmp	r3, #112	; 0x70
 8003574:	d87b      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
 8003576:	2b60      	cmp	r3, #96	; 0x60
 8003578:	d050      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x11a>
 800357a:	2b60      	cmp	r3, #96	; 0x60
 800357c:	d877      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
 800357e:	2b50      	cmp	r3, #80	; 0x50
 8003580:	d03c      	beq.n	80035fc <HAL_TIM_ConfigClockSource+0xfa>
 8003582:	2b50      	cmp	r3, #80	; 0x50
 8003584:	d873      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d058      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x13a>
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d86f      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
 800358e:	2b30      	cmp	r3, #48	; 0x30
 8003590:	d064      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x15a>
 8003592:	2b30      	cmp	r3, #48	; 0x30
 8003594:	d86b      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
 8003596:	2b20      	cmp	r3, #32
 8003598:	d060      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x15a>
 800359a:	2b20      	cmp	r3, #32
 800359c:	d867      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d05c      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x15a>
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d05a      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x15a>
 80035a6:	e062      	b.n	800366e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f000 f98c 	bl	80038d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
      break;
 80035d4:	e04f      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 f975 	bl	80038d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f8:	609a      	str	r2, [r3, #8]
      break;
 80035fa:	e03c      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	461a      	mov	r2, r3
 800360a:	f000 f8e9 	bl	80037e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2150      	movs	r1, #80	; 0x50
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f942 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 800361a:	e02c      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	f000 f908 	bl	800383e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2160      	movs	r1, #96	; 0x60
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f932 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 800363a:	e01c      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	461a      	mov	r2, r3
 800364a:	f000 f8c9 	bl	80037e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2140      	movs	r1, #64	; 0x40
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f922 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 800365a:	e00c      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 f919 	bl	800389e <TIM_ITRx_SetConfig>
      break;
 800366c:	e003      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      break;
 8003672:	e000      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003674:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00f      	beq.n	8003718 <TIM_Base_SetConfig+0x38>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d00b      	beq.n	8003718 <TIM_Base_SetConfig+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a31      	ldr	r2, [pc, #196]	; (80037c8 <TIM_Base_SetConfig+0xe8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <TIM_Base_SetConfig+0x38>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a30      	ldr	r2, [pc, #192]	; (80037cc <TIM_Base_SetConfig+0xec>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0x38>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <TIM_Base_SetConfig+0xf0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d108      	bne.n	800372a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a25      	ldr	r2, [pc, #148]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01b      	beq.n	800376a <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d017      	beq.n	800376a <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <TIM_Base_SetConfig+0xe8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a21      	ldr	r2, [pc, #132]	; (80037cc <TIM_Base_SetConfig+0xec>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00f      	beq.n	800376a <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <TIM_Base_SetConfig+0xf0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <TIM_Base_SetConfig+0xf4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <TIM_Base_SetConfig+0xf8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <TIM_Base_SetConfig+0xfc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	615a      	str	r2, [r3, #20]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40010000 	.word	0x40010000
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800

080037e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f023 0201 	bic.w	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800380a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 030a 	bic.w	r3, r3, #10
 800381c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	621a      	str	r2, [r3, #32]
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800383e:	b480      	push	{r7}
 8003840:	b087      	sub	sp, #28
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0210 	bic.w	r2, r3, #16
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	031b      	lsls	r3, r3, #12
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800387a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f043 0307 	orr.w	r3, r3, #7
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	609a      	str	r2, [r3, #8]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003928:	2302      	movs	r3, #2
 800392a:	e050      	b.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d013      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10c      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40014000 	.word	0x40014000

080039f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e03f      	b.n	8003aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd fc88 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f829 	bl	8003ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab8:	b0c0      	sub	sp, #256	; 0x100
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	68d9      	ldr	r1, [r3, #12]
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	ea40 0301 	orr.w	r3, r0, r1
 8003adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b0c:	f021 010c 	bic.w	r1, r1, #12
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	6999      	ldr	r1, [r3, #24]
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	ea40 0301 	orr.w	r3, r0, r1
 8003b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b8f      	ldr	r3, [pc, #572]	; (8003d80 <UART_SetConfig+0x2cc>)
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d005      	beq.n	8003b54 <UART_SetConfig+0xa0>
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b8d      	ldr	r3, [pc, #564]	; (8003d84 <UART_SetConfig+0x2d0>)
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d104      	bne.n	8003b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7ff f8da 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8003b58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b5c:	e003      	b.n	8003b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b5e:	f7ff f8c1 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 8003b62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b70:	f040 810c 	bne.w	8003d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	1891      	adds	r1, r2, r2
 8003b8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b8e:	415b      	adcs	r3, r3
 8003b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b96:	4621      	mov	r1, r4
 8003b98:	eb12 0801 	adds.w	r8, r2, r1
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	eb43 0901 	adc.w	r9, r3, r1
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bb6:	4690      	mov	r8, r2
 8003bb8:	4699      	mov	r9, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	eb18 0303 	adds.w	r3, r8, r3
 8003bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	eb49 0303 	adc.w	r3, r9, r3
 8003bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003be2:	460b      	mov	r3, r1
 8003be4:	18db      	adds	r3, r3, r3
 8003be6:	653b      	str	r3, [r7, #80]	; 0x50
 8003be8:	4613      	mov	r3, r2
 8003bea:	eb42 0303 	adc.w	r3, r2, r3
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bf8:	f7fc faf2 	bl	80001e0 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b61      	ldr	r3, [pc, #388]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	011c      	lsls	r4, r3, #4
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c24:	415b      	adcs	r3, r3
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c32:	4649      	mov	r1, r9
 8003c34:	eb43 0b01 	adc.w	fp, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4c:	4692      	mov	sl, r2
 8003c4e:	469b      	mov	fp, r3
 8003c50:	4643      	mov	r3, r8
 8003c52:	eb1a 0303 	adds.w	r3, sl, r3
 8003c56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	18db      	adds	r3, r3, r3
 8003c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7e:	4613      	mov	r3, r2
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
 8003c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c8e:	f7fc faa7 	bl	80001e0 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2264      	movs	r2, #100	; 0x64
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	1acb      	subs	r3, r1, r3
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cbc:	441c      	add	r4, r3
 8003cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	1851      	adds	r1, r2, r1
 8003ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	414b      	adcs	r3, r1
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cf8:	4659      	mov	r1, fp
 8003cfa:	00cb      	lsls	r3, r1, #3
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d02:	4651      	mov	r1, sl
 8003d04:	00ca      	lsls	r2, r1, #3
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d14:	464b      	mov	r3, r9
 8003d16:	460a      	mov	r2, r1
 8003d18:	eb42 0303 	adc.w	r3, r2, r3
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d34:	460b      	mov	r3, r1
 8003d36:	18db      	adds	r3, r3, r3
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d4a:	f7fc fa49 	bl	80001e0 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	3332      	adds	r3, #50	; 0x32
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <UART_SetConfig+0x2d4>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	f003 0207 	and.w	r2, r3, #7
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4422      	add	r2, r4
 8003d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d7c:	e105      	b.n	8003f8a <UART_SetConfig+0x4d6>
 8003d7e:	bf00      	nop
 8003d80:	40011000 	.word	0x40011000
 8003d84:	40011400 	.word	0x40011400
 8003d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d9e:	4642      	mov	r2, r8
 8003da0:	464b      	mov	r3, r9
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	6239      	str	r1, [r7, #32]
 8003da6:	415b      	adcs	r3, r3
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
 8003daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dae:	4641      	mov	r1, r8
 8003db0:	1854      	adds	r4, r2, r1
 8003db2:	4649      	mov	r1, r9
 8003db4:	eb43 0501 	adc.w	r5, r3, r1
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	00eb      	lsls	r3, r5, #3
 8003dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc6:	00e2      	lsls	r2, r4, #3
 8003dc8:	4614      	mov	r4, r2
 8003dca:	461d      	mov	r5, r3
 8003dcc:	4643      	mov	r3, r8
 8003dce:	18e3      	adds	r3, r4, r3
 8003dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	eb45 0303 	adc.w	r3, r5, r3
 8003dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	008b      	lsls	r3, r1, #2
 8003dfe:	4621      	mov	r1, r4
 8003e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e04:	4621      	mov	r1, r4
 8003e06:	008a      	lsls	r2, r1, #2
 8003e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e0c:	f7fc f9e8 	bl	80001e0 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4b60      	ldr	r3, [pc, #384]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003e16:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	011c      	lsls	r4, r3, #4
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	61b9      	str	r1, [r7, #24]
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e40:	4641      	mov	r1, r8
 8003e42:	1851      	adds	r1, r2, r1
 8003e44:	6139      	str	r1, [r7, #16]
 8003e46:	4649      	mov	r1, r9
 8003e48:	414b      	adcs	r3, r1
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e58:	4659      	mov	r1, fp
 8003e5a:	00cb      	lsls	r3, r1, #3
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e62:	4651      	mov	r1, sl
 8003e64:	00ca      	lsls	r2, r1, #3
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e74:	464b      	mov	r3, r9
 8003e76:	460a      	mov	r2, r1
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e98:	4649      	mov	r1, r9
 8003e9a:	008b      	lsls	r3, r1, #2
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	008a      	lsls	r2, r1, #2
 8003ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eaa:	f7fc f999 	bl	80001e0 <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a34      	ldr	r2, [pc, #208]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	441c      	add	r4, r3
 8003ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed8:	2200      	movs	r2, #0
 8003eda:	673b      	str	r3, [r7, #112]	; 0x70
 8003edc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ede:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	415b      	adcs	r3, r3
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1851      	adds	r1, r2, r1
 8003ef6:	6039      	str	r1, [r7, #0]
 8003ef8:	4649      	mov	r1, r9
 8003efa:	414b      	adcs	r3, r1
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f0a:	4659      	mov	r1, fp
 8003f0c:	00cb      	lsls	r3, r1, #3
 8003f0e:	4651      	mov	r1, sl
 8003f10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f14:	4651      	mov	r1, sl
 8003f16:	00ca      	lsls	r2, r1, #3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4642      	mov	r2, r8
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f24:	464b      	mov	r3, r9
 8003f26:	460a      	mov	r2, r1
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	663b      	str	r3, [r7, #96]	; 0x60
 8003f38:	667a      	str	r2, [r7, #100]	; 0x64
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f46:	4649      	mov	r1, r9
 8003f48:	008b      	lsls	r3, r1, #2
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f50:	4641      	mov	r1, r8
 8003f52:	008a      	lsls	r2, r1, #2
 8003f54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f58:	f7fc f942 	bl	80001e0 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003f62:	fba3 1302 	umull	r1, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2164      	movs	r1, #100	; 0x64
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <UART_SetConfig+0x4e4>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4422      	add	r2, r4
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	bf00      	nop
 8003f8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f96:	bf00      	nop
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <__NVIC_SetPriority>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	6039      	str	r1, [r7, #0]
 8003fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db0a      	blt.n	8003fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	490c      	ldr	r1, [pc, #48]	; (8003fe8 <__NVIC_SetPriority+0x4c>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fc4:	e00a      	b.n	8003fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <__NVIC_SetPriority+0x50>)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	440b      	add	r3, r1
 8003fda:	761a      	strb	r2, [r3, #24]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e100 	.word	0xe000e100
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	f06f 0004 	mvn.w	r0, #4
 8003ffa:	f7ff ffcf 	bl	8003f9c <__NVIC_SetPriority>
#endif
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800400a:	f3ef 8305 	mrs	r3, IPSR
 800400e:	603b      	str	r3, [r7, #0]
  return(result);
 8004010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004016:	f06f 0305 	mvn.w	r3, #5
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	e00c      	b.n	8004038 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <osKernelInitialize+0x44>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d105      	bne.n	8004032 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <osKernelInitialize+0x44>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800402c:	2300      	movs	r3, #0
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	e002      	b.n	8004038 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004038:	687b      	ldr	r3, [r7, #4]
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000254 	.word	0x20000254

0800404c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004052:	f3ef 8305 	mrs	r3, IPSR
 8004056:	603b      	str	r3, [r7, #0]
  return(result);
 8004058:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <osKernelStart+0x1a>
    stat = osErrorISR;
 800405e:	f06f 0305 	mvn.w	r3, #5
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	e010      	b.n	8004088 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <osKernelStart+0x48>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d109      	bne.n	8004082 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800406e:	f7ff ffbf 	bl	8003ff0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <osKernelStart+0x48>)
 8004074:	2202      	movs	r2, #2
 8004076:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004078:	f001 fe80 	bl	8005d7c <vTaskStartScheduler>
      stat = osOK;
 800407c:	2300      	movs	r3, #0
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	e002      	b.n	8004088 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004088:	687b      	ldr	r3, [r7, #4]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000254 	.word	0x20000254

08004098 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af04      	add	r7, sp, #16
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a8:	f3ef 8305 	mrs	r3, IPSR
 80040ac:	617b      	str	r3, [r7, #20]
  return(result);
 80040ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d17e      	bne.n	80041b2 <osThreadNew+0x11a>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d07b      	beq.n	80041b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040be:	2318      	movs	r3, #24
 80040c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d045      	beq.n	800415e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <osThreadNew+0x48>
        name = attr->name;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <osThreadNew+0x6e>
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b38      	cmp	r3, #56	; 0x38
 80040f8:	d805      	bhi.n	8004106 <osThreadNew+0x6e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <osThreadNew+0x72>
        return (NULL);
 8004106:	2300      	movs	r3, #0
 8004108:	e054      	b.n	80041b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <osThreadNew+0xa8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2bbb      	cmp	r3, #187	; 0xbb
 8004128:	d90a      	bls.n	8004140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <osThreadNew+0xa8>
        mem = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e010      	b.n	8004162 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10c      	bne.n	8004162 <osThreadNew+0xca>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d108      	bne.n	8004162 <osThreadNew+0xca>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <osThreadNew+0xca>
          mem = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e001      	b.n	8004162 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d110      	bne.n	800418a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004170:	9202      	str	r2, [sp, #8]
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f001 fc10 	bl	80059a4 <xTaskCreateStatic>
 8004184:	4603      	mov	r3, r0
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e013      	b.n	80041b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d110      	bne.n	80041b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	b29a      	uxth	r2, r3
 8004194:	f107 0310 	add.w	r3, r7, #16
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f001 fc5b 	bl	8005a5e <xTaskCreate>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <osThreadNew+0x11a>
            hTask = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041b2:	693b      	ldr	r3, [r7, #16]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3728      	adds	r7, #40	; 0x28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041c4:	f3ef 8305 	mrs	r3, IPSR
 80041c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <osDelay+0x1c>
    stat = osErrorISR;
 80041d0:	f06f 0305 	mvn.w	r3, #5
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e007      	b.n	80041e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 fd96 	bl	8005d14 <vTaskDelay>
    }
  }

  return (stat);
 80041e8:	68fb      	ldr	r3, [r7, #12]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b088      	sub	sp, #32
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041fe:	f3ef 8305 	mrs	r3, IPSR
 8004202:	60bb      	str	r3, [r7, #8]
  return(result);
 8004204:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004206:	2b00      	cmp	r3, #0
 8004208:	d174      	bne.n	80042f4 <osMutexNew+0x102>
    if (attr != NULL) {
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	e001      	b.n	800421c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <osMutexNew+0x3a>
      rmtx = 1U;
 8004226:	2301      	movs	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e001      	b.n	8004230 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d15c      	bne.n	80042f4 <osMutexNew+0x102>
      mem = -1;
 800423a:	f04f 33ff 	mov.w	r3, #4294967295
 800423e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d015      	beq.n	8004272 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d006      	beq.n	800425c <osMutexNew+0x6a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b4f      	cmp	r3, #79	; 0x4f
 8004254:	d902      	bls.n	800425c <osMutexNew+0x6a>
          mem = 1;
 8004256:	2301      	movs	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e00c      	b.n	8004276 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <osMutexNew+0x84>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d104      	bne.n	8004276 <osMutexNew+0x84>
            mem = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	e001      	b.n	8004276 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d112      	bne.n	80042a2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	4619      	mov	r1, r3
 8004288:	2004      	movs	r0, #4
 800428a:	f000 fc36 	bl	8004afa <xQueueCreateMutexStatic>
 800428e:	61f8      	str	r0, [r7, #28]
 8004290:	e016      	b.n	80042c0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4619      	mov	r1, r3
 8004298:	2001      	movs	r0, #1
 800429a:	f000 fc2e 	bl	8004afa <xQueueCreateMutexStatic>
 800429e:	61f8      	str	r0, [r7, #28]
 80042a0:	e00e      	b.n	80042c0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80042ae:	2004      	movs	r0, #4
 80042b0:	f000 fc0b 	bl	8004aca <xQueueCreateMutex>
 80042b4:	61f8      	str	r0, [r7, #28]
 80042b6:	e003      	b.n	80042c0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80042b8:	2001      	movs	r0, #1
 80042ba:	f000 fc06 	bl	8004aca <xQueueCreateMutex>
 80042be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00c      	beq.n	80042e0 <osMutexNew+0xee>
        if (attr != NULL) {
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <osMutexNew+0xe2>
          name = attr->name;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e001      	b.n	80042d8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	69f8      	ldr	r0, [r7, #28]
 80042dc:	f001 fada 	bl	8005894 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <osMutexNew+0x102>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80042f4:	69fb      	ldr	r3, [r7, #28]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800431c:	f3ef 8305 	mrs	r3, IPSR
 8004320:	60bb      	str	r3, [r7, #8]
  return(result);
 8004322:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004328:	f06f 0305 	mvn.w	r3, #5
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e02c      	b.n	800438a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004336:	f06f 0303 	mvn.w	r3, #3
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e025      	b.n	800438a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d011      	beq.n	8004368 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004344:	6839      	ldr	r1, [r7, #0]
 8004346:	6938      	ldr	r0, [r7, #16]
 8004348:	f000 fc26 	bl	8004b98 <xQueueTakeMutexRecursive>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d01b      	beq.n	800438a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004358:	f06f 0301 	mvn.w	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e014      	b.n	800438a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004360:	f06f 0302 	mvn.w	r3, #2
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e010      	b.n	800438a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	6938      	ldr	r0, [r7, #16]
 800436c:	f000 ffba 	bl	80052e4 <xQueueSemaphoreTake>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d009      	beq.n	800438a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800437c:	f06f 0301 	mvn.w	r3, #1
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e002      	b.n	800438a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004384:	f06f 0302 	mvn.w	r3, #2
 8004388:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800438a:	697b      	ldr	r3, [r7, #20]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b0:	f3ef 8305 	mrs	r3, IPSR
 80043b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80043bc:	f06f 0305 	mvn.w	r3, #5
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e01f      	b.n	8004404 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80043ca:	f06f 0303 	mvn.w	r3, #3
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e018      	b.n	8004404 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80043d8:	6938      	ldr	r0, [r7, #16]
 80043da:	f000 fba9 	bl	8004b30 <xQueueGiveMutexRecursive>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d00f      	beq.n	8004404 <osMutexRelease+0x70>
        stat = osErrorResource;
 80043e4:	f06f 0302 	mvn.w	r3, #2
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e00b      	b.n	8004404 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80043ec:	2300      	movs	r3, #0
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	6938      	ldr	r0, [r7, #16]
 80043f4:	f000 fc70 	bl	8004cd8 <xQueueGenericSend>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d002      	beq.n	8004404 <osMutexRelease+0x70>
        stat = osErrorResource;
 80043fe:	f06f 0302 	mvn.w	r3, #2
 8004402:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004404:	697b      	ldr	r3, [r7, #20]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800440e:	b580      	push	{r7, lr}
 8004410:	b08a      	sub	sp, #40	; 0x28
 8004412:	af02      	add	r7, sp, #8
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441e:	f3ef 8305 	mrs	r3, IPSR
 8004422:	613b      	str	r3, [r7, #16]
  return(result);
 8004424:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004426:	2b00      	cmp	r3, #0
 8004428:	d175      	bne.n	8004516 <osSemaphoreNew+0x108>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d072      	beq.n	8004516 <osSemaphoreNew+0x108>
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d86e      	bhi.n	8004516 <osSemaphoreNew+0x108>
    mem = -1;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d006      	beq.n	800445a <osSemaphoreNew+0x4c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b4f      	cmp	r3, #79	; 0x4f
 8004452:	d902      	bls.n	800445a <osSemaphoreNew+0x4c>
        mem = 1;
 8004454:	2301      	movs	r3, #1
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e00c      	b.n	8004474 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <osSemaphoreNew+0x66>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <osSemaphoreNew+0x66>
          mem = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e001      	b.n	8004474 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d04c      	beq.n	8004516 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d128      	bne.n	80044d4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10a      	bne.n	800449e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2203      	movs	r2, #3
 800448e:	9200      	str	r2, [sp, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	2001      	movs	r0, #1
 8004496:	f000 fa29 	bl	80048ec <xQueueGenericCreateStatic>
 800449a:	61f8      	str	r0, [r7, #28]
 800449c:	e005      	b.n	80044aa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800449e:	2203      	movs	r2, #3
 80044a0:	2100      	movs	r1, #0
 80044a2:	2001      	movs	r0, #1
 80044a4:	f000 fa9a 	bl	80049dc <xQueueGenericCreate>
 80044a8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d022      	beq.n	80044f6 <osSemaphoreNew+0xe8>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01f      	beq.n	80044f6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80044b6:	2300      	movs	r3, #0
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	69f8      	ldr	r0, [r7, #28]
 80044be:	f000 fc0b 	bl	8004cd8 <xQueueGenericSend>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d016      	beq.n	80044f6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80044c8:	69f8      	ldr	r0, [r7, #28]
 80044ca:	f001 f897 	bl	80055fc <vQueueDelete>
            hSemaphore = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	e010      	b.n	80044f6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d108      	bne.n	80044ec <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	461a      	mov	r2, r3
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fb8e 	bl	8004c04 <xQueueCreateCountingSemaphoreStatic>
 80044e8:	61f8      	str	r0, [r7, #28]
 80044ea:	e004      	b.n	80044f6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fbbf 	bl	8004c72 <xQueueCreateCountingSemaphore>
 80044f4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00c      	beq.n	8004516 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e001      	b.n	800450e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800450e:	6979      	ldr	r1, [r7, #20]
 8004510:	69f8      	ldr	r0, [r7, #28]
 8004512:	f001 f9bf 	bl	8005894 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004516:	69fb      	ldr	r3, [r7, #28]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004538:	f06f 0303 	mvn.w	r3, #3
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e039      	b.n	80045b4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004540:	f3ef 8305 	mrs	r3, IPSR
 8004544:	60fb      	str	r3, [r7, #12]
  return(result);
 8004546:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004548:	2b00      	cmp	r3, #0
 800454a:	d022      	beq.n	8004592 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004552:	f06f 0303 	mvn.w	r3, #3
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	e02c      	b.n	80045b4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800455e:	f107 0308 	add.w	r3, r7, #8
 8004562:	461a      	mov	r2, r3
 8004564:	2100      	movs	r1, #0
 8004566:	6938      	ldr	r0, [r7, #16]
 8004568:	f000 ffc8 	bl	80054fc <xQueueReceiveFromISR>
 800456c:	4603      	mov	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d003      	beq.n	800457a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004572:	f06f 0302 	mvn.w	r3, #2
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e01c      	b.n	80045b4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d019      	beq.n	80045b4 <osSemaphoreAcquire+0x94>
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <osSemaphoreAcquire+0xa0>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	e010      	b.n	80045b4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004592:	6839      	ldr	r1, [r7, #0]
 8004594:	6938      	ldr	r0, [r7, #16]
 8004596:	f000 fea5 	bl	80052e4 <xQueueSemaphoreTake>
 800459a:	4603      	mov	r3, r0
 800459c:	2b01      	cmp	r3, #1
 800459e:	d009      	beq.n	80045b4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80045a6:	f06f 0301 	mvn.w	r3, #1
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e002      	b.n	80045b4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80045ae:	f06f 0302 	mvn.w	r3, #2
 80045b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80045b4:	697b      	ldr	r3, [r7, #20]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80045da:	f06f 0303 	mvn.w	r3, #3
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e02c      	b.n	800463c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e2:	f3ef 8305 	mrs	r3, IPSR
 80045e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80045e8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01a      	beq.n	8004624 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80045f2:	f107 0308 	add.w	r3, r7, #8
 80045f6:	4619      	mov	r1, r3
 80045f8:	6938      	ldr	r0, [r7, #16]
 80045fa:	f000 fd06 	bl	800500a <xQueueGiveFromISR>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d003      	beq.n	800460c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004604:	f06f 0302 	mvn.w	r3, #2
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e017      	b.n	800463c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <osSemaphoreRelease+0x78>
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <osSemaphoreRelease+0x84>)
 8004614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	e00b      	b.n	800463c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004624:	2300      	movs	r3, #0
 8004626:	2200      	movs	r2, #0
 8004628:	2100      	movs	r1, #0
 800462a:	6938      	ldr	r0, [r7, #16]
 800462c:	f000 fb54 	bl	8004cd8 <xQueueGenericSend>
 8004630:	4603      	mov	r3, r0
 8004632:	2b01      	cmp	r3, #1
 8004634:	d002      	beq.n	800463c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004636:	f06f 0302 	mvn.w	r3, #2
 800463a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800463c:	697b      	ldr	r3, [r7, #20]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a07      	ldr	r2, [pc, #28]	; (8004678 <vApplicationGetIdleTaskMemory+0x2c>)
 800465c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a06      	ldr	r2, [pc, #24]	; (800467c <vApplicationGetIdleTaskMemory+0x30>)
 8004662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	601a      	str	r2, [r3, #0]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000258 	.word	0x20000258
 800467c:	20000314 	.word	0x20000314

08004680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a07      	ldr	r2, [pc, #28]	; (80046ac <vApplicationGetTimerTaskMemory+0x2c>)
 8004690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <vApplicationGetTimerTaskMemory+0x30>)
 8004696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800469e:	601a      	str	r2, [r3, #0]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	20000514 	.word	0x20000514
 80046b0:	200005d0 	.word	0x200005d0

080046b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f103 0208 	add.w	r2, r3, #8
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f103 0208 	add.w	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 0208 	add.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	601a      	str	r2, [r3, #0]
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476c:	d103      	bne.n	8004776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e00c      	b.n	8004790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3308      	adds	r3, #8
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e002      	b.n	8004784 <vListInsert+0x2e>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	429a      	cmp	r2, r3
 800478e:	d2f6      	bcs.n	800477e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6892      	ldr	r2, [r2, #8]
 80047de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6852      	ldr	r2, [r2, #4]
 80047e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d103      	bne.n	80047fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	1e5a      	subs	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004846:	f002 fd5d 	bl	8007304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	3b01      	subs	r3, #1
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	22ff      	movs	r2, #255	; 0xff
 8004892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01a      	beq.n	80048da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3310      	adds	r3, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 fd01 	bl	80062b0 <xTaskRemoveFromEventList>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <xQueueGenericReset+0xcc>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	e009      	b.n	80048da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3310      	adds	r3, #16
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fef2 	bl	80046b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff feed 	bl	80046b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048da:	f002 fd43 	bl	8007364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08e      	sub	sp, #56	; 0x38
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <xQueueGenericCreateStatic+0x52>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <xQueueGenericCreateStatic+0x56>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericCreateStatic+0x58>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	623b      	str	r3, [r7, #32]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <xQueueGenericCreateStatic+0x7e>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <xQueueGenericCreateStatic+0x82>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <xQueueGenericCreateStatic+0x84>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61fb      	str	r3, [r7, #28]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800498a:	2350      	movs	r3, #80	; 0x50
 800498c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b50      	cmp	r3, #80	; 0x50
 8004992:	d00a      	beq.n	80049aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	61bb      	str	r3, [r7, #24]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f83f 	bl	8004a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xQueueGenericCreate+0x2a>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3350      	adds	r3, #80	; 0x50
 8004a14:	4618      	mov	r0, r3
 8004a16:	f002 fd97 	bl	8007548 <pvPortMalloc>
 8004a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3350      	adds	r3, #80	; 0x50
 8004a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a34:	79fa      	ldrb	r2, [r7, #7]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f805 	bl	8004a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a46:	69bb      	ldr	r3, [r7, #24]
	}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e002      	b.n	8004a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a7e:	2101      	movs	r1, #1
 8004a80:	69b8      	ldr	r0, [r7, #24]
 8004a82:	f7ff fecb 	bl	800481c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00e      	beq.n	8004ac2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2100      	movs	r1, #0
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f90b 	bl	8004cd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6939      	ldr	r1, [r7, #16]
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7ff ff7a 	bl	80049dc <xQueueGenericCreate>
 8004ae8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff ffd3 	bl	8004a96 <prvInitialiseMutex>

		return xNewQueue;
 8004af0:	68fb      	ldr	r3, [r7, #12]
	}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b088      	sub	sp, #32
 8004afe:	af02      	add	r7, sp, #8
 8004b00:	4603      	mov	r3, r0
 8004b02:	6039      	str	r1, [r7, #0]
 8004b04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b06:	2301      	movs	r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f7ff fee7 	bl	80048ec <xQueueGenericCreateStatic>
 8004b1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ffb8 	bl	8004a96 <prvInitialiseMutex>

		return xNewQueue;
 8004b26:	68fb      	ldr	r3, [r7, #12]
	}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	689c      	ldr	r4, [r3, #8]
 8004b5c:	f001 fd6a 	bl	8006634 <xTaskGetCurrentTaskHandle>
 8004b60:	4603      	mov	r3, r0
 8004b62:	429c      	cmp	r4, r3
 8004b64:	d111      	bne.n	8004b8a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	1e5a      	subs	r2, r3, #1
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6938      	ldr	r0, [r7, #16]
 8004b80:	f000 f8aa 	bl	8004cd8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004b84:	2301      	movs	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e001      	b.n	8004b8e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004b8e:	697b      	ldr	r3, [r7, #20]
	}
 8004b90:	4618      	mov	r0, r3
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd90      	pop	{r4, r7, pc}

08004b98 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	689c      	ldr	r4, [r3, #8]
 8004bc6:	f001 fd35 	bl	8006634 <xTaskGetCurrentTaskHandle>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	d107      	bne.n	8004be0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e00c      	b.n	8004bfa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f000 fb7e 	bl	80052e4 <xQueueSemaphoreTake>
 8004be8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004bfa:	697b      	ldr	r3, [r7, #20]
	}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd90      	pop	{r4, r7, pc}

08004c04 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	61bb      	str	r3, [r7, #24]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d90a      	bls.n	8004c4a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	617b      	str	r3, [r7, #20]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	2100      	movs	r1, #0
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fe49 	bl	80048ec <xQueueGenericCreateStatic>
 8004c5a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004c68:	69fb      	ldr	r3, [r7, #28]
	}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	613b      	str	r3, [r7, #16]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d90a      	bls.n	8004cb6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60fb      	str	r3, [r7, #12]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	2100      	movs	r1, #0
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fe8e 	bl	80049dc <xQueueGenericCreate>
 8004cc0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004cce:	697b      	ldr	r3, [r7, #20]
	}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <xQueueGenericSend+0x32>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <xQueueGenericSend+0x40>
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <xQueueGenericSend+0x44>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <xQueueGenericSend+0x46>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <xQueueGenericSend+0x60>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d103      	bne.n	8004d46 <xQueueGenericSend+0x6e>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <xQueueGenericSend+0x72>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <xQueueGenericSend+0x74>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	623b      	str	r3, [r7, #32]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d66:	f001 fc75 	bl	8006654 <xTaskGetSchedulerState>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <xQueueGenericSend+0x9e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <xQueueGenericSend+0xa2>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <xQueueGenericSend+0xa4>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	61fb      	str	r3, [r7, #28]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d96:	f002 fab5 	bl	8007304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <xQueueGenericSend+0xd4>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d129      	bne.n	8004e00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004db2:	f000 fc5e 	bl	8005672 <prvCopyDataToQueue>
 8004db6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d010      	beq.n	8004de2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	3324      	adds	r3, #36	; 0x24
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fa73 	bl	80062b0 <xTaskRemoveFromEventList>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d013      	beq.n	8004df8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004dd0:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <xQueueGenericSend+0x1f8>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	e00a      	b.n	8004df8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <xQueueGenericSend+0x1f8>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004df8:	f002 fab4 	bl	8007364 <vPortExitCritical>
				return pdPASS;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e063      	b.n	8004ec8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d103      	bne.n	8004e0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e06:	f002 faad 	bl	8007364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e05c      	b.n	8004ec8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 faad 	bl	8006378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e22:	f002 fa9f 	bl	8007364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e26:	f001 f819 	bl	8005e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e2a:	f002 fa6b 	bl	8007304 <vPortEnterCritical>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d103      	bne.n	8004e44 <xQueueGenericSend+0x16c>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d103      	bne.n	8004e5a <xQueueGenericSend+0x182>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e5a:	f002 fa83 	bl	8007364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e5e:	1d3a      	adds	r2, r7, #4
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f001 fa9c 	bl	80063a4 <xTaskCheckForTimeOut>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d124      	bne.n	8004ebc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e74:	f000 fcf5 	bl	8005862 <prvIsQueueFull>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	3310      	adds	r3, #16
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 f9c2 	bl	8006210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8e:	f000 fc80 	bl	8005792 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e92:	f000 fff1 	bl	8005e78 <xTaskResumeAll>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f af7c 	bne.w	8004d96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <xQueueGenericSend+0x1f8>)
 8004ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	e772      	b.n	8004d96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eb2:	f000 fc6e 	bl	8005792 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eb6:	f000 ffdf 	bl	8005e78 <xTaskResumeAll>
 8004eba:	e76c      	b.n	8004d96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ebe:	f000 fc68 	bl	8005792 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ec2:	f000 ffd9 	bl	8005e78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ec6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3738      	adds	r7, #56	; 0x38
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b090      	sub	sp, #64	; 0x40
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <xQueueGenericSendFromISR+0x3c>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <xQueueGenericSendFromISR+0x40>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <xQueueGenericSendFromISR+0x42>
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d103      	bne.n	8004f3e <xQueueGenericSendFromISR+0x6a>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <xQueueGenericSendFromISR+0x6e>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <xQueueGenericSendFromISR+0x70>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	623b      	str	r3, [r7, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f5e:	f002 fab3 	bl	80074c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f62:	f3ef 8211 	mrs	r2, BASEPRI
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	61fa      	str	r2, [r7, #28]
 8004f78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <xQueueGenericSendFromISR+0xbc>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d12f      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fa6:	f000 fb64 	bl	8005672 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004faa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d112      	bne.n	8004fda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d016      	beq.n	8004fea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	3324      	adds	r3, #36	; 0x24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f975 	bl	80062b0 <xTaskRemoveFromEventList>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00e      	beq.n	8004fea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e007      	b.n	8004fea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	b25a      	sxtb	r2, r3
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fea:	2301      	movs	r3, #1
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fee:	e001      	b.n	8004ff4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ffe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005002:	4618      	mov	r0, r3
 8005004:	3740      	adds	r7, #64	; 0x40
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b08e      	sub	sp, #56	; 0x38
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	623b      	str	r3, [r7, #32]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <xQueueGiveFromISR+0x48>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	61fb      	str	r3, [r7, #28]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <xQueueGiveFromISR+0x58>
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <xQueueGiveFromISR+0x5c>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <xQueueGiveFromISR+0x5e>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <xQueueGiveFromISR+0x78>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	61bb      	str	r3, [r7, #24]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005082:	f002 fa21 	bl	80074c8 <vPortValidateInterruptPriority>
	__asm volatile
 8005086:	f3ef 8211 	mrs	r2, BASEPRI
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	617a      	str	r2, [r7, #20]
 800509c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800509e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d22b      	bcs.n	800510a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d112      	bne.n	80050f4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d016      	beq.n	8005104 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 f8e8 	bl	80062b0 <xTaskRemoveFromEventList>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e007      	b.n	8005104 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f8:	3301      	adds	r3, #1
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	b25a      	sxtb	r2, r3
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005104:	2301      	movs	r3, #1
 8005106:	637b      	str	r3, [r7, #52]	; 0x34
 8005108:	e001      	b.n	800510e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800510a:	2300      	movs	r3, #0
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f383 8811 	msr	BASEPRI, r3
}
 8005118:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800511c:	4618      	mov	r0, r3
 800511e:	3738      	adds	r7, #56	; 0x38
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	; 0x30
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005130:	2300      	movs	r3, #0
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <xQueueReceive+0x30>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	623b      	str	r3, [r7, #32]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <xQueueReceive+0x3e>
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <xQueueReceive+0x42>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <xQueueReceive+0x44>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <xQueueReceive+0x5e>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	61fb      	str	r3, [r7, #28]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005182:	f001 fa67 	bl	8006654 <xTaskGetSchedulerState>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <xQueueReceive+0x6e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <xQueueReceive+0x72>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <xQueueReceive+0x74>
 8005196:	2300      	movs	r3, #0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <xQueueReceive+0x8e>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	61bb      	str	r3, [r7, #24]
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051b2:	f002 f8a7 	bl	8007304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01f      	beq.n	8005202 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c6:	f000 fabe 	bl	8005746 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00f      	beq.n	80051fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	3310      	adds	r3, #16
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f866 	bl	80062b0 <xTaskRemoveFromEventList>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051ea:	4b3d      	ldr	r3, [pc, #244]	; (80052e0 <xQueueReceive+0x1bc>)
 80051ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051fa:	f002 f8b3 	bl	8007364 <vPortExitCritical>
				return pdPASS;
 80051fe:	2301      	movs	r3, #1
 8005200:	e069      	b.n	80052d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d103      	bne.n	8005210 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005208:	f002 f8ac 	bl	8007364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800520c:	2300      	movs	r3, #0
 800520e:	e062      	b.n	80052d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005216:	f107 0310 	add.w	r3, r7, #16
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f8ac 	bl	8006378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005224:	f002 f89e 	bl	8007364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005228:	f000 fe18 	bl	8005e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800522c:	f002 f86a 	bl	8007304 <vPortEnterCritical>
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005236:	b25b      	sxtb	r3, r3
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d103      	bne.n	8005246 <xQueueReceive+0x122>
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800524c:	b25b      	sxtb	r3, r3
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d103      	bne.n	800525c <xQueueReceive+0x138>
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800525c:	f002 f882 	bl	8007364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005260:	1d3a      	adds	r2, r7, #4
 8005262:	f107 0310 	add.w	r3, r7, #16
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f001 f89b 	bl	80063a4 <xTaskCheckForTimeOut>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d123      	bne.n	80052bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005276:	f000 fade 	bl	8005836 <prvIsQueueEmpty>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d017      	beq.n	80052b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f000 ffc1 	bl	8006210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800528e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005290:	f000 fa7f 	bl	8005792 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005294:	f000 fdf0 	bl	8005e78 <xTaskResumeAll>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d189      	bne.n	80051b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <xQueueReceive+0x1bc>)
 80052a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	e780      	b.n	80051b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052b2:	f000 fa6e 	bl	8005792 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052b6:	f000 fddf 	bl	8005e78 <xTaskResumeAll>
 80052ba:	e77a      	b.n	80051b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	f000 fa68 	bl	8005792 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052c2:	f000 fdd9 	bl	8005e78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c8:	f000 fab5 	bl	8005836 <prvIsQueueEmpty>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f43f af6f 	beq.w	80051b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3730      	adds	r7, #48	; 0x30
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	623b      	str	r3, [r7, #32]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	61fb      	str	r3, [r7, #28]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005334:	f001 f98e 	bl	8006654 <xTaskGetSchedulerState>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <xQueueSemaphoreTake+0x60>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <xQueueSemaphoreTake+0x64>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <xQueueSemaphoreTake+0x66>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61bb      	str	r3, [r7, #24]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005364:	f001 ffce 	bl	8007304 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d024      	beq.n	80053be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	1e5a      	subs	r2, r3, #1
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005384:	f001 fadc 	bl	8006940 <pvTaskIncrementMutexHeldCount>
 8005388:	4602      	mov	r2, r0
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00f      	beq.n	80053b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	3310      	adds	r3, #16
 800539a:	4618      	mov	r0, r3
 800539c:	f000 ff88 	bl	80062b0 <xTaskRemoveFromEventList>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053a6:	4b54      	ldr	r3, [pc, #336]	; (80054f8 <xQueueSemaphoreTake+0x214>)
 80053a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053b6:	f001 ffd5 	bl	8007364 <vPortExitCritical>
				return pdPASS;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e097      	b.n	80054ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d111      	bne.n	80053e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	617b      	str	r3, [r7, #20]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80053e0:	f001 ffc0 	bl	8007364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e082      	b.n	80054ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 ffc0 	bl	8006378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053f8:	2301      	movs	r3, #1
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053fc:	f001 ffb2 	bl	8007364 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005400:	f000 fd2c 	bl	8005e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005404:	f001 ff7e 	bl	8007304 <vPortEnterCritical>
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800540e:	b25b      	sxtb	r3, r3
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d103      	bne.n	800541e <xQueueSemaphoreTake+0x13a>
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005424:	b25b      	sxtb	r3, r3
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d103      	bne.n	8005434 <xQueueSemaphoreTake+0x150>
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005434:	f001 ff96 	bl	8007364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005438:	463a      	mov	r2, r7
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 ffaf 	bl	80063a4 <xTaskCheckForTimeOut>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d132      	bne.n	80054b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800544c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800544e:	f000 f9f2 	bl	8005836 <prvIsQueueEmpty>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d026      	beq.n	80054a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005460:	f001 ff50 	bl	8007304 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f911 	bl	8006690 <xTaskPriorityInherit>
 800546e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005470:	f001 ff78 	bl	8007364 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	3324      	adds	r3, #36	; 0x24
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fec7 	bl	8006210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005484:	f000 f985 	bl	8005792 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005488:	f000 fcf6 	bl	8005e78 <xTaskResumeAll>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	f47f af68 	bne.w	8005364 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005494:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <xQueueSemaphoreTake+0x214>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	e75e      	b.n	8005364 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80054a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054a8:	f000 f973 	bl	8005792 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054ac:	f000 fce4 	bl	8005e78 <xTaskResumeAll>
 80054b0:	e758      	b.n	8005364 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80054b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054b4:	f000 f96d 	bl	8005792 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b8:	f000 fcde 	bl	8005e78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054be:	f000 f9ba 	bl	8005836 <prvIsQueueEmpty>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f43f af4d 	beq.w	8005364 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80054d0:	f001 ff18 	bl	8007304 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80054d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054d6:	f000 f8b4 	bl	8005642 <prvGetDisinheritPriorityAfterTimeout>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f9aa 	bl	800683c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80054e8:	f001 ff3c 	bl	8007364 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3738      	adds	r7, #56	; 0x38
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	623b      	str	r3, [r7, #32]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <xQueueReceiveFromISR+0x3a>
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueReceiveFromISR+0x3e>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueReceiveFromISR+0x40>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005556:	f001 ffb7 	bl	80074c8 <vPortValidateInterruptPriority>
	__asm volatile
 800555a:	f3ef 8211 	mrs	r2, BASEPRI
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61ba      	str	r2, [r7, #24]
 8005570:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005572:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02f      	beq.n	80055e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005590:	f000 f8d9 	bl	8005746 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800559c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d112      	bne.n	80055cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	3310      	adds	r3, #16
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fe7c 	bl	80062b0 <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00e      	beq.n	80055dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e007      	b.n	80055dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80055cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055d0:	3301      	adds	r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	b25a      	sxtb	r2, r3
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80055dc:	2301      	movs	r3, #1
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
 80055e0:	e001      	b.n	80055e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f383 8811 	msr	BASEPRI, r3
}
 80055f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3738      	adds	r7, #56	; 0x38
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <vQueueDelete+0x28>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f95f 	bl	80058e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f002 f853 	bl	80076e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d006      	beq.n	8005660 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e001      	b.n	8005664 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005664:	68fb      	ldr	r3, [r7, #12]
	}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b086      	sub	sp, #24
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10d      	bne.n	80056ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d14d      	bne.n	8005734 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4618      	mov	r0, r3
 800569e:	f001 f85f 	bl	8006760 <xTaskPriorityDisinherit>
 80056a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	e043      	b.n	8005734 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d119      	bne.n	80056e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6858      	ldr	r0, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	461a      	mov	r2, r3
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	f002 f953 	bl	8007968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	441a      	add	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d32b      	bcc.n	8005734 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	e026      	b.n	8005734 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68d8      	ldr	r0, [r3, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	461a      	mov	r2, r3
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	f002 f939 	bl	8007968 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	425b      	negs	r3, r3
 8005700:	441a      	add	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d207      	bcs.n	8005722 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	425b      	negs	r3, r3
 800571c:	441a      	add	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d105      	bne.n	8005734 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3b01      	subs	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800573c:	697b      	ldr	r3, [r7, #20]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d018      	beq.n	800578a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	429a      	cmp	r2, r3
 8005770:	d303      	bcc.n	800577a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68d9      	ldr	r1, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	461a      	mov	r2, r3
 8005784:	6838      	ldr	r0, [r7, #0]
 8005786:	f002 f8ef 	bl	8007968 <memcpy>
	}
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800579a:	f001 fdb3 	bl	8007304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a6:	e011      	b.n	80057cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d012      	beq.n	80057d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3324      	adds	r3, #36	; 0x24
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fd7b 	bl	80062b0 <xTaskRemoveFromEventList>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057c0:	f000 fe52 	bl	8006468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	dce9      	bgt.n	80057a8 <prvUnlockQueue+0x16>
 80057d4:	e000      	b.n	80057d8 <prvUnlockQueue+0x46>
					break;
 80057d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	22ff      	movs	r2, #255	; 0xff
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057e0:	f001 fdc0 	bl	8007364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057e4:	f001 fd8e 	bl	8007304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057f0:	e011      	b.n	8005816 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d012      	beq.n	8005820 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3310      	adds	r3, #16
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fd56 	bl	80062b0 <xTaskRemoveFromEventList>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800580a:	f000 fe2d 	bl	8006468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	3b01      	subs	r3, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800581a:	2b00      	cmp	r3, #0
 800581c:	dce9      	bgt.n	80057f2 <prvUnlockQueue+0x60>
 800581e:	e000      	b.n	8005822 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005820:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800582a:	f001 fd9b 	bl	8007364 <vPortExitCritical>
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800583e:	f001 fd61 	bl	8007304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800584a:	2301      	movs	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e001      	b.n	8005854 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005854:	f001 fd86 	bl	8007364 <vPortExitCritical>

	return xReturn;
 8005858:	68fb      	ldr	r3, [r7, #12]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800586a:	f001 fd4b 	bl	8007304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	429a      	cmp	r2, r3
 8005878:	d102      	bne.n	8005880 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e001      	b.n	8005884 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005884:	f001 fd6e 	bl	8007364 <vPortExitCritical>

	return xReturn;
 8005888:	68fb      	ldr	r3, [r7, #12]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e014      	b.n	80058ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058a4:	4a0f      	ldr	r2, [pc, #60]	; (80058e4 <vQueueAddToRegistry+0x50>)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058b0:	490c      	ldr	r1, [pc, #48]	; (80058e4 <vQueueAddToRegistry+0x50>)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058ba:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <vQueueAddToRegistry+0x50>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058c6:	e006      	b.n	80058d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b07      	cmp	r3, #7
 80058d2:	d9e7      	bls.n	80058a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	200009d0 	.word	0x200009d0

080058e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e016      	b.n	8005924 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80058f6:	4a10      	ldr	r2, [pc, #64]	; (8005938 <vQueueUnregisterQueue+0x50>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d10b      	bne.n	800591e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005906:	4a0c      	ldr	r2, [pc, #48]	; (8005938 <vQueueUnregisterQueue+0x50>)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2100      	movs	r1, #0
 800590c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005910:	4a09      	ldr	r2, [pc, #36]	; (8005938 <vQueueUnregisterQueue+0x50>)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4413      	add	r3, r2
 8005918:	2200      	movs	r2, #0
 800591a:	605a      	str	r2, [r3, #4]
				break;
 800591c:	e006      	b.n	800592c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b07      	cmp	r3, #7
 8005928:	d9e5      	bls.n	80058f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	200009d0 	.word	0x200009d0

0800593c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800594c:	f001 fcda 	bl	8007304 <vPortEnterCritical>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005956:	b25b      	sxtb	r3, r3
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d103      	bne.n	8005966 <vQueueWaitForMessageRestricted+0x2a>
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800596c:	b25b      	sxtb	r3, r3
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d103      	bne.n	800597c <vQueueWaitForMessageRestricted+0x40>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800597c:	f001 fcf2 	bl	8007364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	3324      	adds	r3, #36	; 0x24
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fc61 	bl	8006258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005996:	6978      	ldr	r0, [r7, #20]
 8005998:	f7ff fefb 	bl	8005792 <prvUnlockQueue>
	}
 800599c:	bf00      	nop
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08e      	sub	sp, #56	; 0x38
 80059a8:	af04      	add	r7, sp, #16
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	623b      	str	r3, [r7, #32]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xTaskCreateStatic+0x46>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	61fb      	str	r3, [r7, #28]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059ea:	23bc      	movs	r3, #188	; 0xbc
 80059ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2bbc      	cmp	r3, #188	; 0xbc
 80059f2:	d00a      	beq.n	8005a0a <xTaskCreateStatic+0x66>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	61bb      	str	r3, [r7, #24]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01e      	beq.n	8005a50 <xTaskCreateStatic+0xac>
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9303      	str	r3, [sp, #12]
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	9302      	str	r3, [sp, #8]
 8005a32:	f107 0314 	add.w	r3, r7, #20
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f850 	bl	8005ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a4a:	f000 f8f3 	bl	8005c34 <prvAddNewTaskToReadyList>
 8005a4e:	e001      	b.n	8005a54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a54:	697b      	ldr	r3, [r7, #20]
	}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3728      	adds	r7, #40	; 0x28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b08c      	sub	sp, #48	; 0x30
 8005a62:	af04      	add	r7, sp, #16
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fd68 	bl	8007548 <pvPortMalloc>
 8005a78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00e      	beq.n	8005a9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a80:	20bc      	movs	r0, #188	; 0xbc
 8005a82:	f001 fd61 	bl	8007548 <pvPortMalloc>
 8005a86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
 8005a94:	e005      	b.n	8005aa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a96:	6978      	ldr	r0, [r7, #20]
 8005a98:	f001 fe22 	bl	80076e0 <vPortFree>
 8005a9c:	e001      	b.n	8005aa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d017      	beq.n	8005ad8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	9302      	str	r3, [sp, #8]
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f80e 	bl	8005ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005acc:	69f8      	ldr	r0, [r7, #28]
 8005ace:	f000 f8b1 	bl	8005c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e002      	b.n	8005ade <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8005adc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ade:	69bb      	ldr	r3, [r7, #24]
	}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	461a      	mov	r2, r3
 8005b00:	21a5      	movs	r1, #165	; 0xa5
 8005b02:	f001 ff3f 	bl	8007984 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b10:	3b01      	subs	r3, #1
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	617b      	str	r3, [r7, #20]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01f      	beq.n	8005b86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e012      	b.n	8005b72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	7819      	ldrb	r1, [r3, #0]
 8005b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	3334      	adds	r3, #52	; 0x34
 8005b5c:	460a      	mov	r2, r1
 8005b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d006      	beq.n	8005b7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b0f      	cmp	r3, #15
 8005b76:	d9e9      	bls.n	8005b4c <prvInitialiseNewTask+0x64>
 8005b78:	e000      	b.n	8005b7c <prvInitialiseNewTask+0x94>
			{
				break;
 8005b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b84:	e003      	b.n	8005b8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	2b37      	cmp	r3, #55	; 0x37
 8005b92:	d901      	bls.n	8005b98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b94:	2337      	movs	r3, #55	; 0x37
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fda0 	bl	80046f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	3318      	adds	r3, #24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fd9b 	bl	80046f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	3354      	adds	r3, #84	; 0x54
 8005be8:	2260      	movs	r2, #96	; 0x60
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 fec9 	bl	8007984 <memset>
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	4a0c      	ldr	r2, [pc, #48]	; (8005c28 <prvInitialiseNewTask+0x140>)
 8005bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <prvInitialiseNewTask+0x144>)
 8005bfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <prvInitialiseNewTask+0x148>)
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	69b8      	ldr	r0, [r7, #24]
 8005c0a:	f001 fa4f 	bl	80070ac <pxPortInitialiseStack>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c20:	bf00      	nop
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08007ce8 	.word	0x08007ce8
 8005c2c:	08007d08 	.word	0x08007d08
 8005c30:	08007cc8 	.word	0x08007cc8

08005c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c3c:	f001 fb62 	bl	8007304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c40:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <prvAddNewTaskToReadyList+0xc4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	4a2c      	ldr	r2, [pc, #176]	; (8005cf8 <prvAddNewTaskToReadyList+0xc4>)
 8005c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c4a:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c52:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c58:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <prvAddNewTaskToReadyList+0xc4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d110      	bne.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c60:	f000 fc26 	bl	80064b0 <prvInitialiseTaskLists>
 8005c64:	e00d      	b.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c66:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <prvAddNewTaskToReadyList+0xcc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c6e:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d802      	bhi.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c7c:	4a1f      	ldr	r2, [pc, #124]	; (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <prvAddNewTaskToReadyList+0xd0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <prvAddNewTaskToReadyList+0xd0>)
 8005c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <prvAddNewTaskToReadyList+0xd0>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <prvAddNewTaskToReadyList+0xd4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d903      	bls.n	8005ca8 <prvAddNewTaskToReadyList+0x74>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <prvAddNewTaskToReadyList+0xd4>)
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <prvAddNewTaskToReadyList+0xd8>)
 8005cb6:	441a      	add	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7fe fd25 	bl	800470e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cc4:	f001 fb4e 	bl	8007364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <prvAddNewTaskToReadyList+0xcc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00e      	beq.n	8005cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d207      	bcs.n	8005cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cde:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <prvAddNewTaskToReadyList+0xdc>)
 8005ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000ee4 	.word	0x20000ee4
 8005cfc:	20000a10 	.word	0x20000a10
 8005d00:	20000ef0 	.word	0x20000ef0
 8005d04:	20000f00 	.word	0x20000f00
 8005d08:	20000eec 	.word	0x20000eec
 8005d0c:	20000a14 	.word	0x20000a14
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d017      	beq.n	8005d56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <vTaskDelay+0x60>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <vTaskDelay+0x30>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60bb      	str	r3, [r7, #8]
}
 8005d40:	bf00      	nop
 8005d42:	e7fe      	b.n	8005d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d44:	f000 f88a 	bl	8005e5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d48:	2100      	movs	r1, #0
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fe0c 	bl	8006968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d50:	f000 f892 	bl	8005e78 <xTaskResumeAll>
 8005d54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <vTaskDelay+0x64>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000f0c 	.word	0x20000f0c
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d8a:	463a      	mov	r2, r7
 8005d8c:	1d39      	adds	r1, r7, #4
 8005d8e:	f107 0308 	add.w	r3, r7, #8
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fc5a 	bl	800464c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	9202      	str	r2, [sp, #8]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	2300      	movs	r3, #0
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	2300      	movs	r3, #0
 8005da8:	460a      	mov	r2, r1
 8005daa:	4924      	ldr	r1, [pc, #144]	; (8005e3c <vTaskStartScheduler+0xc0>)
 8005dac:	4824      	ldr	r0, [pc, #144]	; (8005e40 <vTaskStartScheduler+0xc4>)
 8005dae:	f7ff fdf9 	bl	80059a4 <xTaskCreateStatic>
 8005db2:	4603      	mov	r3, r0
 8005db4:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <vTaskStartScheduler+0xc8>)
 8005db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005db8:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <vTaskStartScheduler+0xc8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e001      	b.n	8005dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dd0:	f000 fe1e 	bl	8006a10 <xTimerCreateTimerTask>
 8005dd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d11b      	bne.n	8005e14 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	613b      	str	r3, [r7, #16]
}
 8005dee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005df0:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <vTaskStartScheduler+0xcc>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3354      	adds	r3, #84	; 0x54
 8005df6:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <vTaskStartScheduler+0xd0>)
 8005df8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dfa:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <vTaskStartScheduler+0xd4>)
 8005dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005e00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <vTaskStartScheduler+0xd8>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e08:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <vTaskStartScheduler+0xdc>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e0e:	f001 f9d7 	bl	80071c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e12:	e00e      	b.n	8005e32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d10a      	bne.n	8005e32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60fb      	str	r3, [r7, #12]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <vTaskStartScheduler+0xb4>
}
 8005e32:	bf00      	nop
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	08007b84 	.word	0x08007b84
 8005e40:	08006481 	.word	0x08006481
 8005e44:	20000f08 	.word	0x20000f08
 8005e48:	20000a10 	.word	0x20000a10
 8005e4c:	20000010 	.word	0x20000010
 8005e50:	20000f04 	.word	0x20000f04
 8005e54:	20000ef0 	.word	0x20000ef0
 8005e58:	20000ee8 	.word	0x20000ee8

08005e5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <vTaskSuspendAll+0x18>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a03      	ldr	r2, [pc, #12]	; (8005e74 <vTaskSuspendAll+0x18>)
 8005e68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e6a:	bf00      	nop
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	20000f0c 	.word	0x20000f0c

08005e78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e86:	4b42      	ldr	r3, [pc, #264]	; (8005f90 <xTaskResumeAll+0x118>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	603b      	str	r3, [r7, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ea4:	f001 fa2e 	bl	8007304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ea8:	4b39      	ldr	r3, [pc, #228]	; (8005f90 <xTaskResumeAll+0x118>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4a38      	ldr	r2, [pc, #224]	; (8005f90 <xTaskResumeAll+0x118>)
 8005eb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb2:	4b37      	ldr	r3, [pc, #220]	; (8005f90 <xTaskResumeAll+0x118>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d162      	bne.n	8005f80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eba:	4b36      	ldr	r3, [pc, #216]	; (8005f94 <xTaskResumeAll+0x11c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d05e      	beq.n	8005f80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ec2:	e02f      	b.n	8005f24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec4:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <xTaskResumeAll+0x120>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3318      	adds	r3, #24
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fc79 	bl	80047c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fc74 	bl	80047c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	4b2d      	ldr	r3, [pc, #180]	; (8005f9c <xTaskResumeAll+0x124>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d903      	bls.n	8005ef4 <xTaskResumeAll+0x7c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <xTaskResumeAll+0x124>)
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4a27      	ldr	r2, [pc, #156]	; (8005fa0 <xTaskResumeAll+0x128>)
 8005f02:	441a      	add	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7fe fbff 	bl	800470e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <xTaskResumeAll+0x12c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f1e:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <xTaskResumeAll+0x130>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f24:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <xTaskResumeAll+0x120>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1cb      	bne.n	8005ec4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f32:	f000 fb5f 	bl	80065f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f36:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <xTaskResumeAll+0x134>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d010      	beq.n	8005f64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f42:	f000 f847 	bl	8005fd4 <xTaskIncrementTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f4c:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <xTaskResumeAll+0x130>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f1      	bne.n	8005f42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <xTaskResumeAll+0x134>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f64:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <xTaskResumeAll+0x130>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d009      	beq.n	8005f80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <xTaskResumeAll+0x138>)
 8005f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f80:	f001 f9f0 	bl	8007364 <vPortExitCritical>

	return xAlreadyYielded;
 8005f84:	68bb      	ldr	r3, [r7, #8]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000f0c 	.word	0x20000f0c
 8005f94:	20000ee4 	.word	0x20000ee4
 8005f98:	20000ea4 	.word	0x20000ea4
 8005f9c:	20000eec 	.word	0x20000eec
 8005fa0:	20000a14 	.word	0x20000a14
 8005fa4:	20000a10 	.word	0x20000a10
 8005fa8:	20000ef8 	.word	0x20000ef8
 8005fac:	20000ef4 	.word	0x20000ef4
 8005fb0:	e000ed04 	.word	0xe000ed04

08005fb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <xTaskGetTickCount+0x1c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fc0:	687b      	ldr	r3, [r7, #4]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000ee8 	.word	0x20000ee8

08005fd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fde:	4b4f      	ldr	r3, [pc, #316]	; (800611c <xTaskIncrementTick+0x148>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 808f 	bne.w	8006106 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fe8:	4b4d      	ldr	r3, [pc, #308]	; (8006120 <xTaskIncrementTick+0x14c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ff0:	4a4b      	ldr	r2, [pc, #300]	; (8006120 <xTaskIncrementTick+0x14c>)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d120      	bne.n	800603e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ffc:	4b49      	ldr	r3, [pc, #292]	; (8006124 <xTaskIncrementTick+0x150>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <xTaskIncrementTick+0x48>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	603b      	str	r3, [r7, #0]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xTaskIncrementTick+0x46>
 800601c:	4b41      	ldr	r3, [pc, #260]	; (8006124 <xTaskIncrementTick+0x150>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	4b41      	ldr	r3, [pc, #260]	; (8006128 <xTaskIncrementTick+0x154>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a3f      	ldr	r2, [pc, #252]	; (8006124 <xTaskIncrementTick+0x150>)
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	4a3f      	ldr	r2, [pc, #252]	; (8006128 <xTaskIncrementTick+0x154>)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4b3e      	ldr	r3, [pc, #248]	; (800612c <xTaskIncrementTick+0x158>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	4a3d      	ldr	r2, [pc, #244]	; (800612c <xTaskIncrementTick+0x158>)
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	f000 fadb 	bl	80065f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800603e:	4b3c      	ldr	r3, [pc, #240]	; (8006130 <xTaskIncrementTick+0x15c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	429a      	cmp	r2, r3
 8006046:	d349      	bcc.n	80060dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006048:	4b36      	ldr	r3, [pc, #216]	; (8006124 <xTaskIncrementTick+0x150>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d104      	bne.n	800605c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006052:	4b37      	ldr	r3, [pc, #220]	; (8006130 <xTaskIncrementTick+0x15c>)
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	601a      	str	r2, [r3, #0]
					break;
 800605a:	e03f      	b.n	80060dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605c:	4b31      	ldr	r3, [pc, #196]	; (8006124 <xTaskIncrementTick+0x150>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d203      	bcs.n	800607c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006074:	4a2e      	ldr	r2, [pc, #184]	; (8006130 <xTaskIncrementTick+0x15c>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800607a:	e02f      	b.n	80060dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	3304      	adds	r3, #4
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fba1 	bl	80047c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	3318      	adds	r3, #24
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fb98 	bl	80047c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	4b25      	ldr	r3, [pc, #148]	; (8006134 <xTaskIncrementTick+0x160>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d903      	bls.n	80060ac <xTaskIncrementTick+0xd8>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	4a22      	ldr	r2, [pc, #136]	; (8006134 <xTaskIncrementTick+0x160>)
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4a1f      	ldr	r2, [pc, #124]	; (8006138 <xTaskIncrementTick+0x164>)
 80060ba:	441a      	add	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7fe fb23 	bl	800470e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <xTaskIncrementTick+0x168>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d3b8      	bcc.n	8006048 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80060d6:	2301      	movs	r3, #1
 80060d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060da:	e7b5      	b.n	8006048 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060dc:	4b17      	ldr	r3, [pc, #92]	; (800613c <xTaskIncrementTick+0x168>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	4915      	ldr	r1, [pc, #84]	; (8006138 <xTaskIncrementTick+0x164>)
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d901      	bls.n	80060f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060f8:	4b11      	ldr	r3, [pc, #68]	; (8006140 <xTaskIncrementTick+0x16c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e004      	b.n	8006110 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <xTaskIncrementTick+0x170>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <xTaskIncrementTick+0x170>)
 800610e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006110:	697b      	ldr	r3, [r7, #20]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000f0c 	.word	0x20000f0c
 8006120:	20000ee8 	.word	0x20000ee8
 8006124:	20000e9c 	.word	0x20000e9c
 8006128:	20000ea0 	.word	0x20000ea0
 800612c:	20000efc 	.word	0x20000efc
 8006130:	20000f04 	.word	0x20000f04
 8006134:	20000eec 	.word	0x20000eec
 8006138:	20000a14 	.word	0x20000a14
 800613c:	20000a10 	.word	0x20000a10
 8006140:	20000ef8 	.word	0x20000ef8
 8006144:	20000ef4 	.word	0x20000ef4

08006148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800614e:	4b2a      	ldr	r3, [pc, #168]	; (80061f8 <vTaskSwitchContext+0xb0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <vTaskSwitchContext+0xb4>)
 8006158:	2201      	movs	r2, #1
 800615a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800615c:	e046      	b.n	80061ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800615e:	4b27      	ldr	r3, [pc, #156]	; (80061fc <vTaskSwitchContext+0xb4>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006164:	4b26      	ldr	r3, [pc, #152]	; (8006200 <vTaskSwitchContext+0xb8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e010      	b.n	800618e <vTaskSwitchContext+0x46>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <vTaskSwitchContext+0x40>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	607b      	str	r3, [r7, #4]
}
 8006184:	bf00      	nop
 8006186:	e7fe      	b.n	8006186 <vTaskSwitchContext+0x3e>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3b01      	subs	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	491d      	ldr	r1, [pc, #116]	; (8006204 <vTaskSwitchContext+0xbc>)
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0e4      	beq.n	800616c <vTaskSwitchContext+0x24>
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4a15      	ldr	r2, [pc, #84]	; (8006204 <vTaskSwitchContext+0xbc>)
 80061ae:	4413      	add	r3, r2
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	3308      	adds	r3, #8
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d104      	bne.n	80061d2 <vTaskSwitchContext+0x8a>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <vTaskSwitchContext+0xc0>)
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <vTaskSwitchContext+0xb8>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <vTaskSwitchContext+0xc0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3354      	adds	r3, #84	; 0x54
 80061e8:	4a08      	ldr	r2, [pc, #32]	; (800620c <vTaskSwitchContext+0xc4>)
 80061ea:	6013      	str	r3, [r2, #0]
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	20000f0c 	.word	0x20000f0c
 80061fc:	20000ef8 	.word	0x20000ef8
 8006200:	20000eec 	.word	0x20000eec
 8006204:	20000a14 	.word	0x20000a14
 8006208:	20000a10 	.word	0x20000a10
 800620c:	20000010 	.word	0x20000010

08006210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <vTaskPlaceOnEventList+0x44>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3318      	adds	r3, #24
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fe fa89 	bl	8004756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006244:	2101      	movs	r1, #1
 8006246:	6838      	ldr	r0, [r7, #0]
 8006248:	f000 fb8e 	bl	8006968 <prvAddCurrentTaskToDelayedList>
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000a10 	.word	0x20000a10

08006258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	617b      	str	r3, [r7, #20]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3318      	adds	r3, #24
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7fe fa40 	bl	800470e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f000 fb63 	bl	8006968 <prvAddCurrentTaskToDelayedList>
	}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000a10 	.word	0x20000a10

080062b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	3318      	adds	r3, #24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fa71 	bl	80047c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e6:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <xTaskRemoveFromEventList+0xb0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d11d      	bne.n	800632a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fa68 	bl	80047c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <xTaskRemoveFromEventList+0xb4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d903      	bls.n	800630c <xTaskRemoveFromEventList+0x5c>
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a16      	ldr	r2, [pc, #88]	; (8006364 <xTaskRemoveFromEventList+0xb4>)
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4a13      	ldr	r2, [pc, #76]	; (8006368 <xTaskRemoveFromEventList+0xb8>)
 800631a:	441a      	add	r2, r3
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f7fe f9f3 	bl	800470e <vListInsertEnd>
 8006328:	e005      	b.n	8006336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3318      	adds	r3, #24
 800632e:	4619      	mov	r1, r3
 8006330:	480e      	ldr	r0, [pc, #56]	; (800636c <xTaskRemoveFromEventList+0xbc>)
 8006332:	f7fe f9ec 	bl	800470e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <xTaskRemoveFromEventList+0xc0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d905      	bls.n	8006350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006344:	2301      	movs	r3, #1
 8006346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <xTaskRemoveFromEventList+0xc4>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e001      	b.n	8006354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006354:	697b      	ldr	r3, [r7, #20]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000f0c 	.word	0x20000f0c
 8006364:	20000eec 	.word	0x20000eec
 8006368:	20000a14 	.word	0x20000a14
 800636c:	20000ea4 	.word	0x20000ea4
 8006370:	20000a10 	.word	0x20000a10
 8006374:	20000ef8 	.word	0x20000ef8

08006378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <vTaskInternalSetTimeOutState+0x24>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <vTaskInternalSetTimeOutState+0x28>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	605a      	str	r2, [r3, #4]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000efc 	.word	0x20000efc
 80063a0:	20000ee8 	.word	0x20000ee8

080063a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	613b      	str	r3, [r7, #16]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80063e6:	f000 ff8d 	bl	8007304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <xTaskCheckForTimeOut+0xbc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e023      	b.n	8006452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <xTaskCheckForTimeOut+0xc0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d007      	beq.n	8006426 <xTaskCheckForTimeOut+0x82>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	429a      	cmp	r2, r3
 800641e:	d302      	bcc.n	8006426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e015      	b.n	8006452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d20b      	bcs.n	8006448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff9b 	bl	8006378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e004      	b.n	8006452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f000 ff87 	bl	8007364 <vPortExitCritical>

	return xReturn;
 8006456:	69fb      	ldr	r3, [r7, #28]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000ee8 	.word	0x20000ee8
 8006464:	20000efc 	.word	0x20000efc

08006468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <vTaskMissedYield+0x14>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000ef8 	.word	0x20000ef8

08006480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006488:	f000 f852 	bl	8006530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <prvIdleTask+0x28>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d9f9      	bls.n	8006488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <prvIdleTask+0x2c>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064a4:	e7f0      	b.n	8006488 <prvIdleTask+0x8>
 80064a6:	bf00      	nop
 80064a8:	20000a14 	.word	0x20000a14
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	e00c      	b.n	80064d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4a12      	ldr	r2, [pc, #72]	; (8006510 <prvInitialiseTaskLists+0x60>)
 80064c8:	4413      	add	r3, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe f8f2 	bl	80046b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b37      	cmp	r3, #55	; 0x37
 80064da:	d9ef      	bls.n	80064bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064dc:	480d      	ldr	r0, [pc, #52]	; (8006514 <prvInitialiseTaskLists+0x64>)
 80064de:	f7fe f8e9 	bl	80046b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064e2:	480d      	ldr	r0, [pc, #52]	; (8006518 <prvInitialiseTaskLists+0x68>)
 80064e4:	f7fe f8e6 	bl	80046b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064e8:	480c      	ldr	r0, [pc, #48]	; (800651c <prvInitialiseTaskLists+0x6c>)
 80064ea:	f7fe f8e3 	bl	80046b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ee:	480c      	ldr	r0, [pc, #48]	; (8006520 <prvInitialiseTaskLists+0x70>)
 80064f0:	f7fe f8e0 	bl	80046b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064f4:	480b      	ldr	r0, [pc, #44]	; (8006524 <prvInitialiseTaskLists+0x74>)
 80064f6:	f7fe f8dd 	bl	80046b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <prvInitialiseTaskLists+0x78>)
 80064fc:	4a05      	ldr	r2, [pc, #20]	; (8006514 <prvInitialiseTaskLists+0x64>)
 80064fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <prvInitialiseTaskLists+0x7c>)
 8006502:	4a05      	ldr	r2, [pc, #20]	; (8006518 <prvInitialiseTaskLists+0x68>)
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000a14 	.word	0x20000a14
 8006514:	20000e74 	.word	0x20000e74
 8006518:	20000e88 	.word	0x20000e88
 800651c:	20000ea4 	.word	0x20000ea4
 8006520:	20000eb8 	.word	0x20000eb8
 8006524:	20000ed0 	.word	0x20000ed0
 8006528:	20000e9c 	.word	0x20000e9c
 800652c:	20000ea0 	.word	0x20000ea0

08006530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006536:	e019      	b.n	800656c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006538:	f000 fee4 	bl	8007304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <prvCheckTasksWaitingTermination+0x50>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe f93d 	bl	80047c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800654e:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3b01      	subs	r3, #1
 8006554:	4a0b      	ldr	r2, [pc, #44]	; (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <prvCheckTasksWaitingTermination+0x58>)
 8006560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006562:	f000 feff 	bl	8007364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f810 	bl	800658c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e1      	bne.n	8006538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000eb8 	.word	0x20000eb8
 8006584:	20000ee4 	.word	0x20000ee4
 8006588:	20000ecc 	.word	0x20000ecc

0800658c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3354      	adds	r3, #84	; 0x54
 8006598:	4618      	mov	r0, r3
 800659a:	f001 fa09 	bl	80079b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d108      	bne.n	80065ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 f897 	bl	80076e0 <vPortFree>
				vPortFree( pxTCB );
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 f894 	bl	80076e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065b8:	e018      	b.n	80065ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d103      	bne.n	80065cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 f88b 	bl	80076e0 <vPortFree>
	}
 80065ca:	e00f      	b.n	80065ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d00a      	beq.n	80065ec <prvDeleteTCB+0x60>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <prvDeleteTCB+0x5e>
	}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <prvResetNextTaskUnblockTime+0x38>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <prvResetNextTaskUnblockTime+0x3c>)
 8006606:	f04f 32ff 	mov.w	r2, #4294967295
 800660a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800660c:	e008      	b.n	8006620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <prvResetNextTaskUnblockTime+0x38>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4a04      	ldr	r2, [pc, #16]	; (8006630 <prvResetNextTaskUnblockTime+0x3c>)
 800661e:	6013      	str	r3, [r2, #0]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	20000e9c 	.word	0x20000e9c
 8006630:	20000f04 	.word	0x20000f04

08006634 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <xTaskGetCurrentTaskHandle+0x1c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006640:	687b      	ldr	r3, [r7, #4]
	}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000a10 	.word	0x20000a10

08006654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <xTaskGetSchedulerState+0x34>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006662:	2301      	movs	r3, #1
 8006664:	607b      	str	r3, [r7, #4]
 8006666:	e008      	b.n	800667a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006668:	4b08      	ldr	r3, [pc, #32]	; (800668c <xTaskGetSchedulerState+0x38>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006670:	2302      	movs	r3, #2
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	e001      	b.n	800667a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800667a:	687b      	ldr	r3, [r7, #4]
	}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000ef0 	.word	0x20000ef0
 800668c:	20000f0c 	.word	0x20000f0c

08006690 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d051      	beq.n	800674a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	4b2a      	ldr	r3, [pc, #168]	; (8006754 <xTaskPriorityInherit+0xc4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d241      	bcs.n	8006738 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	db06      	blt.n	80066ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066bc:	4b25      	ldr	r3, [pc, #148]	; (8006754 <xTaskPriorityInherit+0xc4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6959      	ldr	r1, [r3, #20]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <xTaskPriorityInherit+0xc8>)
 80066dc:	4413      	add	r3, r2
 80066de:	4299      	cmp	r1, r3
 80066e0:	d122      	bne.n	8006728 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe f86e 	bl	80047c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <xTaskPriorityInherit+0xc4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <xTaskPriorityInherit+0xcc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d903      	bls.n	800670a <xTaskPriorityInherit+0x7a>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	4a15      	ldr	r2, [pc, #84]	; (800675c <xTaskPriorityInherit+0xcc>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a10      	ldr	r2, [pc, #64]	; (8006758 <xTaskPriorityInherit+0xc8>)
 8006718:	441a      	add	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fd fff4 	bl	800470e <vListInsertEnd>
 8006726:	e004      	b.n	8006732 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <xTaskPriorityInherit+0xc4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006732:	2301      	movs	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e008      	b.n	800674a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <xTaskPriorityInherit+0xc4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	429a      	cmp	r2, r3
 8006744:	d201      	bcs.n	800674a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006746:	2301      	movs	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800674a:	68fb      	ldr	r3, [r7, #12]
	}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000a10 	.word	0x20000a10
 8006758:	20000a14 	.word	0x20000a14
 800675c:	20000eec 	.word	0x20000eec

08006760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d056      	beq.n	8006824 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006776:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <xTaskPriorityDisinherit+0xd0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	429a      	cmp	r2, r3
 800677e:	d00a      	beq.n	8006796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	60bb      	str	r3, [r7, #8]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b8:	1e5a      	subs	r2, r3, #1
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d02c      	beq.n	8006824 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d128      	bne.n	8006824 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd fff6 	bl	80047c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <xTaskPriorityDisinherit+0xd4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d903      	bls.n	8006804 <xTaskPriorityDisinherit+0xa4>
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	4a0c      	ldr	r2, [pc, #48]	; (8006834 <xTaskPriorityDisinherit+0xd4>)
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4a09      	ldr	r2, [pc, #36]	; (8006838 <xTaskPriorityDisinherit+0xd8>)
 8006812:	441a      	add	r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3304      	adds	r3, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f7fd ff77 	bl	800470e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006824:	697b      	ldr	r3, [r7, #20]
	}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000a10 	.word	0x20000a10
 8006834:	20000eec 	.word	0x20000eec
 8006838:	20000a14 	.word	0x20000a14

0800683c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800684a:	2301      	movs	r3, #1
 800684c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d06a      	beq.n	800692a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	60fb      	str	r3, [r7, #12]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d902      	bls.n	8006882 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	e002      	b.n	8006888 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006886:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	429a      	cmp	r2, r3
 8006890:	d04b      	beq.n	800692a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	429a      	cmp	r2, r3
 800689a:	d146      	bne.n	800692a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800689c:	4b25      	ldr	r3, [pc, #148]	; (8006934 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d10a      	bne.n	80068bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60bb      	str	r3, [r7, #8]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	db04      	blt.n	80068da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	6959      	ldr	r1, [r3, #20]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4a13      	ldr	r2, [pc, #76]	; (8006938 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80068ea:	4413      	add	r3, r2
 80068ec:	4299      	cmp	r1, r3
 80068ee:	d11c      	bne.n	800692a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fd ff67 	bl	80047c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	4b0f      	ldr	r3, [pc, #60]	; (800693c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d903      	bls.n	800690e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	4a0c      	ldr	r2, [pc, #48]	; (800693c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4a07      	ldr	r2, [pc, #28]	; (8006938 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800691c:	441a      	add	r2, r3
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fd fef2 	bl	800470e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800692a:	bf00      	nop
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000a10 	.word	0x20000a10
 8006938:	20000a14 	.word	0x20000a14
 800693c:	20000eec 	.word	0x20000eec

08006940 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006944:	4b07      	ldr	r3, [pc, #28]	; (8006964 <pvTaskIncrementMutexHeldCount+0x24>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800694c:	4b05      	ldr	r3, [pc, #20]	; (8006964 <pvTaskIncrementMutexHeldCount+0x24>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006952:	3201      	adds	r2, #1
 8006954:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006956:	4b03      	ldr	r3, [pc, #12]	; (8006964 <pvTaskIncrementMutexHeldCount+0x24>)
 8006958:	681b      	ldr	r3, [r3, #0]
	}
 800695a:	4618      	mov	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000a10 	.word	0x20000a10

08006968 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006972:	4b21      	ldr	r3, [pc, #132]	; (80069f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006978:	4b20      	ldr	r3, [pc, #128]	; (80069fc <prvAddCurrentTaskToDelayedList+0x94>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3304      	adds	r3, #4
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd ff22 	bl	80047c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d10a      	bne.n	80069a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006992:	4b1a      	ldr	r3, [pc, #104]	; (80069fc <prvAddCurrentTaskToDelayedList+0x94>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4819      	ldr	r0, [pc, #100]	; (8006a00 <prvAddCurrentTaskToDelayedList+0x98>)
 800699c:	f7fd feb7 	bl	800470e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069a0:	e026      	b.n	80069f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4413      	add	r3, r2
 80069a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069aa:	4b14      	ldr	r3, [pc, #80]	; (80069fc <prvAddCurrentTaskToDelayedList+0x94>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d209      	bcs.n	80069ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <prvAddCurrentTaskToDelayedList+0x94>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f7fd fec5 	bl	8004756 <vListInsert>
}
 80069cc:	e010      	b.n	80069f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ce:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <prvAddCurrentTaskToDelayedList+0x94>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7fd febb 	bl	8004756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d202      	bcs.n	80069f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069ea:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	6013      	str	r3, [r2, #0]
}
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000ee8 	.word	0x20000ee8
 80069fc:	20000a10 	.word	0x20000a10
 8006a00:	20000ed0 	.word	0x20000ed0
 8006a04:	20000ea0 	.word	0x20000ea0
 8006a08:	20000e9c 	.word	0x20000e9c
 8006a0c:	20000f04 	.word	0x20000f04

08006a10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a1a:	f000 fb07 	bl	800702c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a1e:	4b1c      	ldr	r3, [pc, #112]	; (8006a90 <xTimerCreateTimerTask+0x80>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d021      	beq.n	8006a6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a2e:	1d3a      	adds	r2, r7, #4
 8006a30:	f107 0108 	add.w	r1, r7, #8
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fd fe21 	bl	8004680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	9202      	str	r2, [sp, #8]
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	2302      	movs	r3, #2
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	460a      	mov	r2, r1
 8006a50:	4910      	ldr	r1, [pc, #64]	; (8006a94 <xTimerCreateTimerTask+0x84>)
 8006a52:	4811      	ldr	r0, [pc, #68]	; (8006a98 <xTimerCreateTimerTask+0x88>)
 8006a54:	f7fe ffa6 	bl	80059a4 <xTaskCreateStatic>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	4a10      	ldr	r2, [pc, #64]	; (8006a9c <xTimerCreateTimerTask+0x8c>)
 8006a5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <xTimerCreateTimerTask+0x8c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a66:	2301      	movs	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	613b      	str	r3, [r7, #16]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a86:	697b      	ldr	r3, [r7, #20]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000f40 	.word	0x20000f40
 8006a94:	08007b8c 	.word	0x08007b8c
 8006a98:	08006bd5 	.word	0x08006bd5
 8006a9c:	20000f44 	.word	0x20000f44

08006aa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	623b      	str	r3, [r7, #32]
}
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ace:	4b1a      	ldr	r3, [pc, #104]	; (8006b38 <xTimerGenericCommand+0x98>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d02a      	beq.n	8006b2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	dc18      	bgt.n	8006b1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ae8:	f7ff fdb4 	bl	8006654 <xTaskGetSchedulerState>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d109      	bne.n	8006b06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <xTimerGenericCommand+0x98>)
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	f107 0110 	add.w	r1, r7, #16
 8006afa:	2300      	movs	r3, #0
 8006afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afe:	f7fe f8eb 	bl	8004cd8 <xQueueGenericSend>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24
 8006b04:	e012      	b.n	8006b2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b06:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <xTimerGenericCommand+0x98>)
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	f107 0110 	add.w	r1, r7, #16
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2200      	movs	r2, #0
 8006b12:	f7fe f8e1 	bl	8004cd8 <xQueueGenericSend>
 8006b16:	6278      	str	r0, [r7, #36]	; 0x24
 8006b18:	e008      	b.n	8006b2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b1a:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <xTimerGenericCommand+0x98>)
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	f107 0110 	add.w	r1, r7, #16
 8006b22:	2300      	movs	r3, #0
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	f7fe f9d5 	bl	8004ed4 <xQueueGenericSendFromISR>
 8006b2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	; 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000f40 	.word	0x20000f40

08006b3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b46:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <prvProcessExpiredTimer+0x94>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fd fe37 	bl	80047c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d022      	beq.n	8006bae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	18d1      	adds	r1, r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	6978      	ldr	r0, [r7, #20]
 8006b76:	f000 f8d1 	bl	8006d1c <prvInsertTimerInActiveList>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01f      	beq.n	8006bc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b80:	2300      	movs	r3, #0
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	6978      	ldr	r0, [r7, #20]
 8006b8c:	f7ff ff88 	bl	8006aa0 <xTimerGenericCommand>
 8006b90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d113      	bne.n	8006bc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb4:	f023 0301 	bic.w	r3, r3, #1
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	6978      	ldr	r0, [r7, #20]
 8006bc6:	4798      	blx	r3
}
 8006bc8:	bf00      	nop
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20000f38 	.word	0x20000f38

08006bd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bdc:	f107 0308 	add.w	r3, r7, #8
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f857 	bl	8006c94 <prvGetNextExpireTime>
 8006be6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4619      	mov	r1, r3
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f803 	bl	8006bf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bf2:	f000 f8d5 	bl	8006da0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bf6:	e7f1      	b.n	8006bdc <prvTimerTask+0x8>

08006bf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c02:	f7ff f92b 	bl	8005e5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f866 	bl	8006cdc <prvSampleTimeNow>
 8006c10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d130      	bne.n	8006c7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <prvProcessTimerOrBlockTask+0x3c>
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d806      	bhi.n	8006c34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c26:	f7ff f927 	bl	8005e78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ff85 	bl	8006b3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c32:	e024      	b.n	8006c7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <prvProcessTimerOrBlockTask+0x90>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <prvProcessTimerOrBlockTask+0x50>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <prvProcessTimerOrBlockTask+0x52>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <prvProcessTimerOrBlockTask+0x94>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	f7fe fe6f 	bl	800593c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c5e:	f7ff f90b 	bl	8005e78 <xTaskResumeAll>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c68:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <prvProcessTimerOrBlockTask+0x98>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
}
 8006c78:	e001      	b.n	8006c7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c7a:	f7ff f8fd 	bl	8005e78 <xTaskResumeAll>
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000f3c 	.word	0x20000f3c
 8006c8c:	20000f40 	.word	0x20000f40
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c9c:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <prvGetNextExpireTime+0x44>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <prvGetNextExpireTime+0x16>
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	e000      	b.n	8006cac <prvGetNextExpireTime+0x18>
 8006caa:	2200      	movs	r2, #0
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cb8:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <prvGetNextExpireTime+0x44>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e001      	b.n	8006cc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20000f38 	.word	0x20000f38

08006cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ce4:	f7ff f966 	bl	8005fb4 <xTaskGetTickCount>
 8006ce8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <prvSampleTimeNow+0x3c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d205      	bcs.n	8006d00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cf4:	f000 f936 	bl	8006f64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e002      	b.n	8006d06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d06:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <prvSampleTimeNow+0x3c>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000f48 	.word	0x20000f48

08006d1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d812      	bhi.n	8006d68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	1ad2      	subs	r2, r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d302      	bcc.n	8006d56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d50:	2301      	movs	r3, #1
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e01b      	b.n	8006d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d56:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <prvInsertTimerInActiveList+0x7c>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fd fcf8 	bl	8004756 <vListInsert>
 8006d66:	e012      	b.n	8006d8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d206      	bcs.n	8006d7e <prvInsertTimerInActiveList+0x62>
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d302      	bcc.n	8006d7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e007      	b.n	8006d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d7e:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <prvInsertTimerInActiveList+0x80>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f7fd fce4 	bl	8004756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d8e:	697b      	ldr	r3, [r7, #20]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000f3c 	.word	0x20000f3c
 8006d9c:	20000f38 	.word	0x20000f38

08006da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08e      	sub	sp, #56	; 0x38
 8006da4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006da6:	e0ca      	b.n	8006f3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da18      	bge.n	8006de0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	3304      	adds	r3, #4
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	61fb      	str	r3, [r7, #28]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd6:	6850      	ldr	r0, [r2, #4]
 8006dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dda:	6892      	ldr	r2, [r2, #8]
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f2c0 80aa 	blt.w	8006f3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fd fce5 	bl	80047c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dfe:	463b      	mov	r3, r7
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff ff6b 	bl	8006cdc <prvSampleTimeNow>
 8006e06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b09      	cmp	r3, #9
 8006e0c:	f200 8097 	bhi.w	8006f3e <prvProcessReceivedCommands+0x19e>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <prvProcessReceivedCommands+0x78>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e41 	.word	0x08006e41
 8006e1c:	08006e41 	.word	0x08006e41
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006eb5 	.word	0x08006eb5
 8006e28:	08006ec9 	.word	0x08006ec9
 8006e2c:	08006f13 	.word	0x08006f13
 8006e30:	08006e41 	.word	0x08006e41
 8006e34:	08006e41 	.word	0x08006e41
 8006e38:	08006eb5 	.word	0x08006eb5
 8006e3c:	08006ec9 	.word	0x08006ec9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	18d1      	adds	r1, r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e60:	f7ff ff5c 	bl	8006d1c <prvInsertTimerInActiveList>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d069      	beq.n	8006f3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d05e      	beq.n	8006f3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	441a      	add	r2, r3
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e92:	f7ff fe05 	bl	8006aa0 <xTimerGenericCommand>
 8006e96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d14f      	bne.n	8006f3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	61bb      	str	r3, [r7, #24]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ec6:	e03a      	b.n	8006f3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	617b      	str	r3, [r7, #20]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	18d1      	adds	r1, r2, r3
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f0c:	f7ff ff06 	bl	8006d1c <prvInsertTimerInActiveList>
					break;
 8006f10:	e015      	b.n	8006f3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d103      	bne.n	8006f28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f22:	f000 fbdd 	bl	80076e0 <vPortFree>
 8006f26:	e00a      	b.n	8006f3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f3a:	e000      	b.n	8006f3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f3e:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <prvProcessReceivedCommands+0x1c0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	1d39      	adds	r1, r7, #4
 8006f44:	2200      	movs	r2, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f8ec 	bl	8005124 <xQueueReceive>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f47f af2a 	bne.w	8006da8 <prvProcessReceivedCommands+0x8>
	}
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	3730      	adds	r7, #48	; 0x30
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000f40 	.word	0x20000f40

08006f64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f6a:	e048      	b.n	8006ffe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f6c:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <prvSwitchTimerLists+0xc0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f76:	4b2b      	ldr	r3, [pc, #172]	; (8007024 <prvSwitchTimerLists+0xc0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fd fc1f 	bl	80047c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d02e      	beq.n	8006ffe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d90e      	bls.n	8006fd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fbe:	4b19      	ldr	r3, [pc, #100]	; (8007024 <prvSwitchTimerLists+0xc0>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f7fd fbc4 	bl	8004756 <vListInsert>
 8006fce:	e016      	b.n	8006ffe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff fd60 	bl	8006aa0 <xTimerGenericCommand>
 8006fe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	603b      	str	r3, [r7, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	e7fe      	b.n	8006ffc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ffe:	4b09      	ldr	r3, [pc, #36]	; (8007024 <prvSwitchTimerLists+0xc0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1b1      	bne.n	8006f6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <prvSwitchTimerLists+0xc0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <prvSwitchTimerLists+0xc4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a04      	ldr	r2, [pc, #16]	; (8007024 <prvSwitchTimerLists+0xc0>)
 8007014:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007016:	4a04      	ldr	r2, [pc, #16]	; (8007028 <prvSwitchTimerLists+0xc4>)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	6013      	str	r3, [r2, #0]
}
 800701c:	bf00      	nop
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000f38 	.word	0x20000f38
 8007028:	20000f3c 	.word	0x20000f3c

0800702c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007032:	f000 f967 	bl	8007304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007036:	4b15      	ldr	r3, [pc, #84]	; (800708c <prvCheckForValidListAndQueue+0x60>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d120      	bne.n	8007080 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800703e:	4814      	ldr	r0, [pc, #80]	; (8007090 <prvCheckForValidListAndQueue+0x64>)
 8007040:	f7fd fb38 	bl	80046b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007044:	4813      	ldr	r0, [pc, #76]	; (8007094 <prvCheckForValidListAndQueue+0x68>)
 8007046:	f7fd fb35 	bl	80046b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <prvCheckForValidListAndQueue+0x6c>)
 800704c:	4a10      	ldr	r2, [pc, #64]	; (8007090 <prvCheckForValidListAndQueue+0x64>)
 800704e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007050:	4b12      	ldr	r3, [pc, #72]	; (800709c <prvCheckForValidListAndQueue+0x70>)
 8007052:	4a10      	ldr	r2, [pc, #64]	; (8007094 <prvCheckForValidListAndQueue+0x68>)
 8007054:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007056:	2300      	movs	r3, #0
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <prvCheckForValidListAndQueue+0x74>)
 800705c:	4a11      	ldr	r2, [pc, #68]	; (80070a4 <prvCheckForValidListAndQueue+0x78>)
 800705e:	2110      	movs	r1, #16
 8007060:	200a      	movs	r0, #10
 8007062:	f7fd fc43 	bl	80048ec <xQueueGenericCreateStatic>
 8007066:	4603      	mov	r3, r0
 8007068:	4a08      	ldr	r2, [pc, #32]	; (800708c <prvCheckForValidListAndQueue+0x60>)
 800706a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800706c:	4b07      	ldr	r3, [pc, #28]	; (800708c <prvCheckForValidListAndQueue+0x60>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <prvCheckForValidListAndQueue+0x60>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	490b      	ldr	r1, [pc, #44]	; (80070a8 <prvCheckForValidListAndQueue+0x7c>)
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fc0a 	bl	8005894 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007080:	f000 f970 	bl	8007364 <vPortExitCritical>
}
 8007084:	bf00      	nop
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000f40 	.word	0x20000f40
 8007090:	20000f10 	.word	0x20000f10
 8007094:	20000f24 	.word	0x20000f24
 8007098:	20000f38 	.word	0x20000f38
 800709c:	20000f3c 	.word	0x20000f3c
 80070a0:	20000fec 	.word	0x20000fec
 80070a4:	20000f4c 	.word	0x20000f4c
 80070a8:	08007b94 	.word	0x08007b94

080070ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3b04      	subs	r3, #4
 80070bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3b04      	subs	r3, #4
 80070ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f023 0201 	bic.w	r2, r3, #1
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3b04      	subs	r3, #4
 80070da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070dc:	4a0c      	ldr	r2, [pc, #48]	; (8007110 <pxPortInitialiseStack+0x64>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3b14      	subs	r3, #20
 80070e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3b04      	subs	r3, #4
 80070f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f06f 0202 	mvn.w	r2, #2
 80070fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3b20      	subs	r3, #32
 8007100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007102:	68fb      	ldr	r3, [r7, #12]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	08007115 	.word	0x08007115

08007114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <prvTaskExitError+0x54>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d00a      	beq.n	800713e <prvTaskExitError+0x2a>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	60fb      	str	r3, [r7, #12]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <prvTaskExitError+0x28>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60bb      	str	r3, [r7, #8]
}
 8007150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007152:	bf00      	nop
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0fc      	beq.n	8007154 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	2000000c 	.word	0x2000000c
 800716c:	00000000 	.word	0x00000000

08007170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <pxCurrentTCBConst2>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	f380 8809 	msr	PSP, r0
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	4770      	bx	lr
 800718c:	f3af 8000 	nop.w

08007190 <pxCurrentTCBConst2>:
 8007190:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop

08007198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007198:	4808      	ldr	r0, [pc, #32]	; (80071bc <prvPortStartFirstTask+0x24>)
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	6800      	ldr	r0, [r0, #0]
 800719e:	f380 8808 	msr	MSP, r0
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f380 8814 	msr	CONTROL, r0
 80071aa:	b662      	cpsie	i
 80071ac:	b661      	cpsie	f
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	df00      	svc	0
 80071b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ba:	bf00      	nop
 80071bc:	e000ed08 	.word	0xe000ed08

080071c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071c6:	4b46      	ldr	r3, [pc, #280]	; (80072e0 <xPortStartScheduler+0x120>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a46      	ldr	r2, [pc, #280]	; (80072e4 <xPortStartScheduler+0x124>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d10a      	bne.n	80071e6 <xPortStartScheduler+0x26>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071e6:	4b3e      	ldr	r3, [pc, #248]	; (80072e0 <xPortStartScheduler+0x120>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a3f      	ldr	r2, [pc, #252]	; (80072e8 <xPortStartScheduler+0x128>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d10a      	bne.n	8007206 <xPortStartScheduler+0x46>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	60fb      	str	r3, [r7, #12]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007206:	4b39      	ldr	r3, [pc, #228]	; (80072ec <xPortStartScheduler+0x12c>)
 8007208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	22ff      	movs	r2, #255	; 0xff
 8007216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007228:	b2da      	uxtb	r2, r3
 800722a:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <xPortStartScheduler+0x130>)
 800722c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800722e:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <xPortStartScheduler+0x134>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007234:	e009      	b.n	800724a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007236:	4b2f      	ldr	r3, [pc, #188]	; (80072f4 <xPortStartScheduler+0x134>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3b01      	subs	r3, #1
 800723c:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <xPortStartScheduler+0x134>)
 800723e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	b2db      	uxtb	r3, r3
 8007248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d0ef      	beq.n	8007236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007256:	4b27      	ldr	r3, [pc, #156]	; (80072f4 <xPortStartScheduler+0x134>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f1c3 0307 	rsb	r3, r3, #7
 800725e:	2b04      	cmp	r3, #4
 8007260:	d00a      	beq.n	8007278 <xPortStartScheduler+0xb8>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60bb      	str	r3, [r7, #8]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007278:	4b1e      	ldr	r3, [pc, #120]	; (80072f4 <xPortStartScheduler+0x134>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <xPortStartScheduler+0x134>)
 8007280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007282:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <xPortStartScheduler+0x134>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800728a:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <xPortStartScheduler+0x134>)
 800728c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007296:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <xPortStartScheduler+0x138>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <xPortStartScheduler+0x138>)
 800729c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <xPortStartScheduler+0x138>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <xPortStartScheduler+0x138>)
 80072a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072ae:	f000 f8dd 	bl	800746c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072b2:	4b12      	ldr	r3, [pc, #72]	; (80072fc <xPortStartScheduler+0x13c>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072b8:	f000 f8fc 	bl	80074b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072bc:	4b10      	ldr	r3, [pc, #64]	; (8007300 <xPortStartScheduler+0x140>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <xPortStartScheduler+0x140>)
 80072c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072c8:	f7ff ff66 	bl	8007198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072cc:	f7fe ff3c 	bl	8006148 <vTaskSwitchContext>
	prvTaskExitError();
 80072d0:	f7ff ff20 	bl	8007114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	e000ed00 	.word	0xe000ed00
 80072e4:	410fc271 	.word	0x410fc271
 80072e8:	410fc270 	.word	0x410fc270
 80072ec:	e000e400 	.word	0xe000e400
 80072f0:	2000103c 	.word	0x2000103c
 80072f4:	20001040 	.word	0x20001040
 80072f8:	e000ed20 	.word	0xe000ed20
 80072fc:	2000000c 	.word	0x2000000c
 8007300:	e000ef34 	.word	0xe000ef34

08007304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	607b      	str	r3, [r7, #4]
}
 800731c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800731e:	4b0f      	ldr	r3, [pc, #60]	; (800735c <vPortEnterCritical+0x58>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	4a0d      	ldr	r2, [pc, #52]	; (800735c <vPortEnterCritical+0x58>)
 8007326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <vPortEnterCritical+0x58>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d10f      	bne.n	8007350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007330:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <vPortEnterCritical+0x5c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <vPortEnterCritical+0x4c>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	603b      	str	r3, [r7, #0]
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <vPortEnterCritical+0x4a>
	}
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	2000000c 	.word	0x2000000c
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800736a:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <vPortExitCritical+0x50>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <vPortExitCritical+0x24>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	607b      	str	r3, [r7, #4]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007388:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <vPortExitCritical+0x50>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3b01      	subs	r3, #1
 800738e:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <vPortExitCritical+0x50>)
 8007390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <vPortExitCritical+0x50>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <vPortExitCritical+0x42>
 800739a:	2300      	movs	r3, #0
 800739c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	f383 8811 	msr	BASEPRI, r3
}
 80073a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	2000000c 	.word	0x2000000c
	...

080073c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073c0:	f3ef 8009 	mrs	r0, PSP
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4b15      	ldr	r3, [pc, #84]	; (8007420 <pxCurrentTCBConst>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	f01e 0f10 	tst.w	lr, #16
 80073d0:	bf08      	it	eq
 80073d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	6010      	str	r0, [r2, #0]
 80073dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073e4:	f380 8811 	msr	BASEPRI, r0
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f7fe feaa 	bl	8006148 <vTaskSwitchContext>
 80073f4:	f04f 0000 	mov.w	r0, #0
 80073f8:	f380 8811 	msr	BASEPRI, r0
 80073fc:	bc09      	pop	{r0, r3}
 80073fe:	6819      	ldr	r1, [r3, #0]
 8007400:	6808      	ldr	r0, [r1, #0]
 8007402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007406:	f01e 0f10 	tst.w	lr, #16
 800740a:	bf08      	it	eq
 800740c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007410:	f380 8809 	msr	PSP, r0
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst>:
 8007420:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007442:	f7fe fdc7 	bl	8005fd4 <xTaskIncrementTick>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <xPortSysTickHandler+0x40>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f383 8811 	msr	BASEPRI, r3
}
 800745e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <vPortSetupTimerInterrupt+0x38>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <vPortSetupTimerInterrupt+0x3c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <vPortSetupTimerInterrupt+0x40>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <vPortSetupTimerInterrupt+0x44>)
 800748a:	3b01      	subs	r3, #1
 800748c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800748e:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007490:	2207      	movs	r2, #7
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	e000e010 	.word	0xe000e010
 80074a4:	e000e018 	.word	0xe000e018
 80074a8:	20000000 	.word	0x20000000
 80074ac:	10624dd3 	.word	0x10624dd3
 80074b0:	e000e014 	.word	0xe000e014

080074b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074c4 <vPortEnableVFP+0x10>
 80074b8:	6801      	ldr	r1, [r0, #0]
 80074ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074be:	6001      	str	r1, [r0, #0]
 80074c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074c2:	bf00      	nop
 80074c4:	e000ed88 	.word	0xe000ed88

080074c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074ce:	f3ef 8305 	mrs	r3, IPSR
 80074d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d914      	bls.n	8007504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <vPortValidateInterruptPriority+0x70>)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074e4:	4b15      	ldr	r3, [pc, #84]	; (800753c <vPortValidateInterruptPriority+0x74>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	7afa      	ldrb	r2, [r7, #11]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d20a      	bcs.n	8007504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007504:	4b0e      	ldr	r3, [pc, #56]	; (8007540 <vPortValidateInterruptPriority+0x78>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800750c:	4b0d      	ldr	r3, [pc, #52]	; (8007544 <vPortValidateInterruptPriority+0x7c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d90a      	bls.n	800752a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	603b      	str	r3, [r7, #0]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <vPortValidateInterruptPriority+0x60>
	}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	e000e3f0 	.word	0xe000e3f0
 800753c:	2000103c 	.word	0x2000103c
 8007540:	e000ed0c 	.word	0xe000ed0c
 8007544:	20001040 	.word	0x20001040

08007548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08a      	sub	sp, #40	; 0x28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007554:	f7fe fc82 	bl	8005e5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007558:	4b5b      	ldr	r3, [pc, #364]	; (80076c8 <pvPortMalloc+0x180>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007560:	f000 f920 	bl	80077a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007564:	4b59      	ldr	r3, [pc, #356]	; (80076cc <pvPortMalloc+0x184>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	f040 8093 	bne.w	8007698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01d      	beq.n	80075b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007578:	2208      	movs	r2, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	2b00      	cmp	r3, #0
 8007588:	d014      	beq.n	80075b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f023 0307 	bic.w	r3, r3, #7
 8007590:	3308      	adds	r3, #8
 8007592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <pvPortMalloc+0x6c>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	617b      	str	r3, [r7, #20]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d06e      	beq.n	8007698 <pvPortMalloc+0x150>
 80075ba:	4b45      	ldr	r3, [pc, #276]	; (80076d0 <pvPortMalloc+0x188>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d869      	bhi.n	8007698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075c4:	4b43      	ldr	r3, [pc, #268]	; (80076d4 <pvPortMalloc+0x18c>)
 80075c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075c8:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <pvPortMalloc+0x18c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075ce:	e004      	b.n	80075da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <pvPortMalloc+0xa4>
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f1      	bne.n	80075d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075ec:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <pvPortMalloc+0x180>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d050      	beq.n	8007698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2208      	movs	r2, #8
 80075fc:	4413      	add	r3, r2
 80075fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	2308      	movs	r3, #8
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	429a      	cmp	r2, r3
 8007616:	d91f      	bls.n	8007658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <pvPortMalloc+0xf8>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	613b      	str	r3, [r7, #16]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007652:	69b8      	ldr	r0, [r7, #24]
 8007654:	f000 f908 	bl	8007868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007658:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <pvPortMalloc+0x188>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <pvPortMalloc+0x188>)
 8007664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007666:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <pvPortMalloc+0x188>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <pvPortMalloc+0x190>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d203      	bcs.n	800767a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007672:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <pvPortMalloc+0x188>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <pvPortMalloc+0x190>)
 8007678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	4b13      	ldr	r3, [pc, #76]	; (80076cc <pvPortMalloc+0x184>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	431a      	orrs	r2, r3
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <pvPortMalloc+0x194>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3301      	adds	r3, #1
 8007694:	4a11      	ldr	r2, [pc, #68]	; (80076dc <pvPortMalloc+0x194>)
 8007696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007698:	f7fe fbee 	bl	8005e78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <pvPortMalloc+0x174>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60fb      	str	r3, [r7, #12]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <pvPortMalloc+0x172>
	return pvReturn;
 80076bc:	69fb      	ldr	r3, [r7, #28]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3728      	adds	r7, #40	; 0x28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	2000504c 	.word	0x2000504c
 80076cc:	20005060 	.word	0x20005060
 80076d0:	20005050 	.word	0x20005050
 80076d4:	20005044 	.word	0x20005044
 80076d8:	20005054 	.word	0x20005054
 80076dc:	20005058 	.word	0x20005058

080076e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d04d      	beq.n	800778e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076f2:	2308      	movs	r3, #8
 80076f4:	425b      	negs	r3, r3
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	4b24      	ldr	r3, [pc, #144]	; (8007798 <vPortFree+0xb8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4013      	ands	r3, r2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <vPortFree+0x44>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60fb      	str	r3, [r7, #12]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <vPortFree+0x62>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	60bb      	str	r3, [r7, #8]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <vPortFree+0xb8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01e      	beq.n	800778e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d11a      	bne.n	800778e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <vPortFree+0xb8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	43db      	mvns	r3, r3
 8007762:	401a      	ands	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007768:	f7fe fb78 	bl	8005e5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <vPortFree+0xbc>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4413      	add	r3, r2
 8007776:	4a09      	ldr	r2, [pc, #36]	; (800779c <vPortFree+0xbc>)
 8007778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800777a:	6938      	ldr	r0, [r7, #16]
 800777c:	f000 f874 	bl	8007868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <vPortFree+0xc0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a06      	ldr	r2, [pc, #24]	; (80077a0 <vPortFree+0xc0>)
 8007788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800778a:	f7fe fb75 	bl	8005e78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800778e:	bf00      	nop
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20005060 	.word	0x20005060
 800779c:	20005050 	.word	0x20005050
 80077a0:	2000505c 	.word	0x2000505c

080077a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077b0:	4b27      	ldr	r3, [pc, #156]	; (8007850 <prvHeapInit+0xac>)
 80077b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00c      	beq.n	80077d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3307      	adds	r3, #7
 80077c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0307 	bic.w	r3, r3, #7
 80077ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	4a1f      	ldr	r2, [pc, #124]	; (8007850 <prvHeapInit+0xac>)
 80077d4:	4413      	add	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077dc:	4a1d      	ldr	r2, [pc, #116]	; (8007854 <prvHeapInit+0xb0>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077e2:	4b1c      	ldr	r3, [pc, #112]	; (8007854 <prvHeapInit+0xb0>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4413      	add	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077f0:	2208      	movs	r2, #8
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1a9b      	subs	r3, r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0307 	bic.w	r3, r3, #7
 80077fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4a15      	ldr	r2, [pc, #84]	; (8007858 <prvHeapInit+0xb4>)
 8007804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007806:	4b14      	ldr	r3, [pc, #80]	; (8007858 <prvHeapInit+0xb4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2200      	movs	r2, #0
 800780c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <prvHeapInit+0xb4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007824:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <prvHeapInit+0xb4>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4a0a      	ldr	r2, [pc, #40]	; (800785c <prvHeapInit+0xb8>)
 8007832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	4a09      	ldr	r2, [pc, #36]	; (8007860 <prvHeapInit+0xbc>)
 800783a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800783c:	4b09      	ldr	r3, [pc, #36]	; (8007864 <prvHeapInit+0xc0>)
 800783e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007842:	601a      	str	r2, [r3, #0]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20001044 	.word	0x20001044
 8007854:	20005044 	.word	0x20005044
 8007858:	2000504c 	.word	0x2000504c
 800785c:	20005054 	.word	0x20005054
 8007860:	20005050 	.word	0x20005050
 8007864:	20005060 	.word	0x20005060

08007868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007870:	4b28      	ldr	r3, [pc, #160]	; (8007914 <prvInsertBlockIntoFreeList+0xac>)
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e002      	b.n	800787c <prvInsertBlockIntoFreeList+0x14>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	429a      	cmp	r2, r3
 8007884:	d8f7      	bhi.n	8007876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4413      	add	r3, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	d108      	bne.n	80078aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d118      	bne.n	80078f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4b15      	ldr	r3, [pc, #84]	; (8007918 <prvInsertBlockIntoFreeList+0xb0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d00d      	beq.n	80078e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	441a      	add	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e008      	b.n	80078f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078e6:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <prvInsertBlockIntoFreeList+0xb0>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e003      	b.n	80078f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d002      	beq.n	8007906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007906:	bf00      	nop
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20005044 	.word	0x20005044
 8007918:	2000504c 	.word	0x2000504c

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4d0d      	ldr	r5, [pc, #52]	; (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	; (8007958 <__libc_init_array+0x3c>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2600      	movs	r6, #0
 8007928:	42a6      	cmp	r6, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4d0b      	ldr	r5, [pc, #44]	; (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	; (8007960 <__libc_init_array+0x44>)
 8007930:	f000 f8f2 	bl	8007b18 <_init>
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2600      	movs	r6, #0
 800793a:	42a6      	cmp	r6, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f855 3b04 	ldr.w	r3, [r5], #4
 8007944:	4798      	blx	r3
 8007946:	3601      	adds	r6, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f855 3b04 	ldr.w	r3, [r5], #4
 800794e:	4798      	blx	r3
 8007950:	3601      	adds	r6, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	08007d30 	.word	0x08007d30
 8007958:	08007d30 	.word	0x08007d30
 800795c:	08007d30 	.word	0x08007d30
 8007960:	08007d34 	.word	0x08007d34

08007964 <__retarget_lock_acquire_recursive>:
 8007964:	4770      	bx	lr

08007966 <__retarget_lock_release_recursive>:
 8007966:	4770      	bx	lr

08007968 <memcpy>:
 8007968:	440a      	add	r2, r1
 800796a:	4291      	cmp	r1, r2
 800796c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007970:	d100      	bne.n	8007974 <memcpy+0xc>
 8007972:	4770      	bx	lr
 8007974:	b510      	push	{r4, lr}
 8007976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800797a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797e:	4291      	cmp	r1, r2
 8007980:	d1f9      	bne.n	8007976 <memcpy+0xe>
 8007982:	bd10      	pop	{r4, pc}

08007984 <memset>:
 8007984:	4402      	add	r2, r0
 8007986:	4603      	mov	r3, r0
 8007988:	4293      	cmp	r3, r2
 800798a:	d100      	bne.n	800798e <memset+0xa>
 800798c:	4770      	bx	lr
 800798e:	f803 1b01 	strb.w	r1, [r3], #1
 8007992:	e7f9      	b.n	8007988 <memset+0x4>

08007994 <cleanup_glue>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	460c      	mov	r4, r1
 8007998:	6809      	ldr	r1, [r1, #0]
 800799a:	4605      	mov	r5, r0
 800799c:	b109      	cbz	r1, 80079a2 <cleanup_glue+0xe>
 800799e:	f7ff fff9 	bl	8007994 <cleanup_glue>
 80079a2:	4621      	mov	r1, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079aa:	f000 b869 	b.w	8007a80 <_free_r>
	...

080079b0 <_reclaim_reent>:
 80079b0:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <_reclaim_reent+0xb4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4283      	cmp	r3, r0
 80079b6:	b570      	push	{r4, r5, r6, lr}
 80079b8:	4604      	mov	r4, r0
 80079ba:	d051      	beq.n	8007a60 <_reclaim_reent+0xb0>
 80079bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079be:	b143      	cbz	r3, 80079d2 <_reclaim_reent+0x22>
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d14a      	bne.n	8007a5c <_reclaim_reent+0xac>
 80079c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c8:	6819      	ldr	r1, [r3, #0]
 80079ca:	b111      	cbz	r1, 80079d2 <_reclaim_reent+0x22>
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 f857 	bl	8007a80 <_free_r>
 80079d2:	6961      	ldr	r1, [r4, #20]
 80079d4:	b111      	cbz	r1, 80079dc <_reclaim_reent+0x2c>
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 f852 	bl	8007a80 <_free_r>
 80079dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079de:	b111      	cbz	r1, 80079e6 <_reclaim_reent+0x36>
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 f84d 	bl	8007a80 <_free_r>
 80079e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079e8:	b111      	cbz	r1, 80079f0 <_reclaim_reent+0x40>
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 f848 	bl	8007a80 <_free_r>
 80079f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80079f2:	b111      	cbz	r1, 80079fa <_reclaim_reent+0x4a>
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 f843 	bl	8007a80 <_free_r>
 80079fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80079fc:	b111      	cbz	r1, 8007a04 <_reclaim_reent+0x54>
 80079fe:	4620      	mov	r0, r4
 8007a00:	f000 f83e 	bl	8007a80 <_free_r>
 8007a04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a06:	b111      	cbz	r1, 8007a0e <_reclaim_reent+0x5e>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f839 	bl	8007a80 <_free_r>
 8007a0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a10:	b111      	cbz	r1, 8007a18 <_reclaim_reent+0x68>
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 f834 	bl	8007a80 <_free_r>
 8007a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a1a:	b111      	cbz	r1, 8007a22 <_reclaim_reent+0x72>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f82f 	bl	8007a80 <_free_r>
 8007a22:	69a3      	ldr	r3, [r4, #24]
 8007a24:	b1e3      	cbz	r3, 8007a60 <_reclaim_reent+0xb0>
 8007a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a28:	4620      	mov	r0, r4
 8007a2a:	4798      	blx	r3
 8007a2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a2e:	b1b9      	cbz	r1, 8007a60 <_reclaim_reent+0xb0>
 8007a30:	4620      	mov	r0, r4
 8007a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a36:	f7ff bfad 	b.w	8007994 <cleanup_glue>
 8007a3a:	5949      	ldr	r1, [r1, r5]
 8007a3c:	b941      	cbnz	r1, 8007a50 <_reclaim_reent+0xa0>
 8007a3e:	3504      	adds	r5, #4
 8007a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a42:	2d80      	cmp	r5, #128	; 0x80
 8007a44:	68d9      	ldr	r1, [r3, #12]
 8007a46:	d1f8      	bne.n	8007a3a <_reclaim_reent+0x8a>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 f819 	bl	8007a80 <_free_r>
 8007a4e:	e7ba      	b.n	80079c6 <_reclaim_reent+0x16>
 8007a50:	680e      	ldr	r6, [r1, #0]
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f814 	bl	8007a80 <_free_r>
 8007a58:	4631      	mov	r1, r6
 8007a5a:	e7ef      	b.n	8007a3c <_reclaim_reent+0x8c>
 8007a5c:	2500      	movs	r5, #0
 8007a5e:	e7ef      	b.n	8007a40 <_reclaim_reent+0x90>
 8007a60:	bd70      	pop	{r4, r5, r6, pc}
 8007a62:	bf00      	nop
 8007a64:	20000010 	.word	0x20000010

08007a68 <__malloc_lock>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__malloc_lock+0x8>)
 8007a6a:	f7ff bf7b 	b.w	8007964 <__retarget_lock_acquire_recursive>
 8007a6e:	bf00      	nop
 8007a70:	20005064 	.word	0x20005064

08007a74 <__malloc_unlock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__malloc_unlock+0x8>)
 8007a76:	f7ff bf76 	b.w	8007966 <__retarget_lock_release_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	20005064 	.word	0x20005064

08007a80 <_free_r>:
 8007a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a82:	2900      	cmp	r1, #0
 8007a84:	d044      	beq.n	8007b10 <_free_r+0x90>
 8007a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a8a:	9001      	str	r0, [sp, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a92:	bfb8      	it	lt
 8007a94:	18e4      	addlt	r4, r4, r3
 8007a96:	f7ff ffe7 	bl	8007a68 <__malloc_lock>
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <_free_r+0x94>)
 8007a9c:	9801      	ldr	r0, [sp, #4]
 8007a9e:	6813      	ldr	r3, [r2, #0]
 8007aa0:	b933      	cbnz	r3, 8007ab0 <_free_r+0x30>
 8007aa2:	6063      	str	r3, [r4, #4]
 8007aa4:	6014      	str	r4, [r2, #0]
 8007aa6:	b003      	add	sp, #12
 8007aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007aac:	f7ff bfe2 	b.w	8007a74 <__malloc_unlock>
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d908      	bls.n	8007ac6 <_free_r+0x46>
 8007ab4:	6825      	ldr	r5, [r4, #0]
 8007ab6:	1961      	adds	r1, r4, r5
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	bf01      	itttt	eq
 8007abc:	6819      	ldreq	r1, [r3, #0]
 8007abe:	685b      	ldreq	r3, [r3, #4]
 8007ac0:	1949      	addeq	r1, r1, r5
 8007ac2:	6021      	streq	r1, [r4, #0]
 8007ac4:	e7ed      	b.n	8007aa2 <_free_r+0x22>
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	b10b      	cbz	r3, 8007ad0 <_free_r+0x50>
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d9fa      	bls.n	8007ac6 <_free_r+0x46>
 8007ad0:	6811      	ldr	r1, [r2, #0]
 8007ad2:	1855      	adds	r5, r2, r1
 8007ad4:	42a5      	cmp	r5, r4
 8007ad6:	d10b      	bne.n	8007af0 <_free_r+0x70>
 8007ad8:	6824      	ldr	r4, [r4, #0]
 8007ada:	4421      	add	r1, r4
 8007adc:	1854      	adds	r4, r2, r1
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	6011      	str	r1, [r2, #0]
 8007ae2:	d1e0      	bne.n	8007aa6 <_free_r+0x26>
 8007ae4:	681c      	ldr	r4, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	6053      	str	r3, [r2, #4]
 8007aea:	4421      	add	r1, r4
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	e7da      	b.n	8007aa6 <_free_r+0x26>
 8007af0:	d902      	bls.n	8007af8 <_free_r+0x78>
 8007af2:	230c      	movs	r3, #12
 8007af4:	6003      	str	r3, [r0, #0]
 8007af6:	e7d6      	b.n	8007aa6 <_free_r+0x26>
 8007af8:	6825      	ldr	r5, [r4, #0]
 8007afa:	1961      	adds	r1, r4, r5
 8007afc:	428b      	cmp	r3, r1
 8007afe:	bf04      	itt	eq
 8007b00:	6819      	ldreq	r1, [r3, #0]
 8007b02:	685b      	ldreq	r3, [r3, #4]
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	bf04      	itt	eq
 8007b08:	1949      	addeq	r1, r1, r5
 8007b0a:	6021      	streq	r1, [r4, #0]
 8007b0c:	6054      	str	r4, [r2, #4]
 8007b0e:	e7ca      	b.n	8007aa6 <_free_r+0x26>
 8007b10:	b003      	add	sp, #12
 8007b12:	bd30      	pop	{r4, r5, pc}
 8007b14:	20005068 	.word	0x20005068

08007b18 <_init>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr

08007b24 <_fini>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr
