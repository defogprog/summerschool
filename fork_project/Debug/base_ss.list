
base_ss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009494  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009894  08009894  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009898  08009898  00019898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800989c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000516c  2000007c  08009918  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051e8  08009918  000251e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020491  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc7  00000000  00000000  0004053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  00044308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a18  00000000  00000000  00045e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005af7  00000000  00000000  00047888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021515  00000000  00000000  0004d37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aac1c  00000000  00000000  0006e894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001194b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f40  00000000  00000000  00119500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800961c 	.word	0x0800961c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800961c 	.word	0x0800961c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <lcd_start_write+0x14>)
 800058e:	f002 f9b5 	bl	80028fc <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020000 	.word	0x40020000

0800059c <lcd_end_write>:

static void lcd_end_write(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <lcd_end_write+0x14>)
 80005a6:	f002 f9a9 	bl	80028fc <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <lcd_start_command>:

static void lcd_start_command(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2102      	movs	r1, #2
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <lcd_start_command+0x14>)
 80005be:	f002 f99d 	bl	80028fc <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <lcd_start_data>:

static void lcd_start_data(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2102      	movs	r1, #2
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <lcd_start_data+0x14>)
 80005d6:	f002 f991 	bl	80028fc <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 80005ee:	f7ff ffe1 	bl	80005b4 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	2201      	movs	r2, #1
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <lcd_spi_send_com+0x30>)
 80005fc:	f002 ffd5 	bl	80035aa <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d000      	beq.n	800060c <lcd_spi_send_com+0x28>
		while (1) {}
 800060a:	e7fe      	b.n	800060a <lcd_spi_send_com+0x26>
	}
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000140 	.word	0x20000140

08000618 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00f      	beq.n	8000648 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000628:	f7ff ffd0 	bl	80005cc <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b29a      	uxth	r2, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lcd_spi_send_data+0x38>)
 8000638:	f002 ffb7 	bl	80035aa <HAL_SPI_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <lcd_spi_send_data+0x30>
			while (1) {}
 8000646:	e7fe      	b.n	8000646 <lcd_spi_send_data+0x2e>
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000140 	.word	0x20000140

08000654 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4604      	mov	r4, r0
 800065c:	4608      	mov	r0, r1
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	4623      	mov	r3, r4
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4603      	mov	r3, r0
 8000668:	80bb      	strh	r3, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	807b      	strh	r3, [r7, #2]
 800066e:	4613      	mov	r3, r2
 8000670:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <lcd_set_window+0xc4>)
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4413      	add	r3, r2
 800067a:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <lcd_set_window+0xc8>)
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	733b      	strb	r3, [r7, #12]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4413      	add	r3, r2
 800069c:	3b01      	subs	r3, #1
 800069e:	121b      	asrs	r3, r3, #8
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73bb      	strb	r3, [r7, #14]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	723b      	strb	r3, [r7, #8]
 80006c0:	88bb      	ldrh	r3, [r7, #4]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	727b      	strb	r3, [r7, #9]
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	883b      	ldrh	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	3b01      	subs	r3, #1
 80006ce:	121b      	asrs	r3, r3, #8
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	72bb      	strb	r3, [r7, #10]
 80006d4:	88bb      	ldrh	r3, [r7, #4]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	883b      	ldrh	r3, [r7, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 80006e6:	202a      	movs	r0, #42	; 0x2a
 80006e8:	f7ff ff7c 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff90 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80006f8:	202b      	movs	r0, #43	; 0x2b
 80006fa:	f7ff ff73 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2104      	movs	r1, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff87 	bl	8000618 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 800070a:	202c      	movs	r0, #44	; 0x2c
 800070c:	f7ff ff6a 	bl	80005e4 <lcd_spi_send_com>
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	2000009a 	.word	0x2000009a
 800071c:	2000009c 	.word	0x2000009c

08000720 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <lcd_init+0xd4>)
 8000728:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2108      	movs	r1, #8
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <lcd_init+0xd8>)
 8000730:	f002 f8e4 	bl	80028fc <HAL_GPIO_WritePin>
	osDelay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f004 fc79 	bl	800502c <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2108      	movs	r1, #8
 800073e:	482e      	ldr	r0, [pc, #184]	; (80007f8 <lcd_init+0xd8>)
 8000740:	f002 f8dc 	bl	80028fc <HAL_GPIO_WritePin>
	osDelay(100);
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	f004 fc71 	bl	800502c <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2108      	movs	r1, #8
 800074e:	482a      	ldr	r0, [pc, #168]	; (80007f8 <lcd_init+0xd8>)
 8000750:	f002 f8d4 	bl	80028fc <HAL_GPIO_WritePin>
	osDelay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f004 fc69 	bl	800502c <osDelay>

	numCommands = *ptr++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8000764:	e035      	b.n	80007d2 <lcd_init+0xb2>
		cmd = *ptr++;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078a:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 800078c:	f7ff fefa 	bl	8000584 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff26 	bl	80005e4 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	4619      	mov	r1, r3
 800079c:	68b8      	ldr	r0, [r7, #8]
 800079e:	f7ff ff3b 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 80007a2:	f7ff fefb 	bl	800059c <lcd_end_write>
		ptr += numArgs;
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	60bb      	str	r3, [r7, #8]

		if (ms) {
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <lcd_init+0xb2>
			ms = *ptr++;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	2bff      	cmp	r3, #255	; 0xff
 80007c2:	d102      	bne.n	80007ca <lcd_init+0xaa>
				ms = 500;
 80007c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c8:	81bb      	strh	r3, [r7, #12]
			osDelay(ms);
 80007ca:	89bb      	ldrh	r3, [r7, #12]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fc2d 	bl	800502c <osDelay>
	while (numCommands--) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	73fa      	strb	r2, [r7, #15]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1c4      	bne.n	8000766 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 80007dc:	f7ff fed2 	bl	8000584 <lcd_start_write>
	lcd_set_rotation(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 f80b 	bl	80007fc <lcd_set_rotation>
	lcd_end_write();
 80007e6:	f7ff fed9 	bl	800059c <lcd_end_write>

	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	080096e8 	.word	0x080096e8
 80007f8:	40020000 	.word	0x40020000

080007fc <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <lcd_set_rotation+0xec>)
 8000814:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <lcd_set_rotation+0xec>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d856      	bhi.n	80008cc <lcd_set_rotation+0xd0>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <lcd_set_rotation+0x28>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000835 	.word	0x08000835
 8000828:	0800085b 	.word	0x0800085b
 800082c:	08000881 	.word	0x08000881
 8000830:	080008a7 	.word	0x080008a7
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <lcd_set_rotation+0xf0>)
 800083a:	22a0      	movs	r2, #160	; 0xa0
 800083c:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <lcd_set_rotation+0xfc>)
 800084c:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <lcd_set_rotation+0x100>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <lcd_set_rotation+0x104>)
 8000856:	801a      	strh	r2, [r3, #0]
		break;
 8000858:	e038      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <lcd_set_rotation+0xf4>)
 8000860:	22a0      	movs	r2, #160	; 0xa0
 8000862:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <lcd_set_rotation+0xf0>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <lcd_set_rotation+0xf8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <lcd_set_rotation+0x104>)
 8000872:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <lcd_set_rotation+0x100>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <lcd_set_rotation+0xfc>)
 800087c:	801a      	strh	r2, [r3, #0]
		break;
 800087e:	e025      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <lcd_set_rotation+0xf0>)
 8000886:	22a0      	movs	r2, #160	; 0xa0
 8000888:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <lcd_set_rotation+0xf4>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <lcd_set_rotation+0xf8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <lcd_set_rotation+0xfc>)
 8000898:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <lcd_set_rotation+0x100>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <lcd_set_rotation+0x104>)
 80008a2:	801a      	strh	r2, [r3, #0]
		break;
 80008a4:	e012      	b.n	80008cc <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 80008a6:	2368      	movs	r3, #104	; 0x68
 80008a8:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <lcd_set_rotation+0xf4>)
 80008ac:	22a0      	movs	r2, #160	; 0xa0
 80008ae:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <lcd_set_rotation+0xf0>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <lcd_set_rotation+0xf8>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <lcd_set_rotation+0x104>)
 80008be:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <lcd_set_rotation+0x100>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <lcd_set_rotation+0xfc>)
 80008c8:	801a      	strh	r2, [r3, #0]
		break;
 80008ca:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 80008cc:	2036      	movs	r0, #54	; 0x36
 80008ce:	f7ff fe89 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 80008d2:	f107 030f 	add.w	r3, r7, #15
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe9d 	bl	8000618 <lcd_spi_send_data>
	return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000098 	.word	0x20000098
 80008ec:	200000a0 	.word	0x200000a0
 80008f0:	2000009e 	.word	0x2000009e
 80008f4:	200000a2 	.word	0x200000a2
 80008f8:	2000009a 	.word	0x2000009a
 80008fc:	200000a3 	.word	0x200000a3
 8000900:	2000009c 	.word	0x2000009c

08000904 <lcd_vline>:
		lcd_spi_send_data(c, 2);
		lcd_end_write();
	}
}

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4604      	mov	r4, r0
 800090c:	4608      	mov	r0, r1
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	4623      	mov	r3, r4
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	4603      	mov	r3, r0
 8000918:	80bb      	strh	r3, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	807b      	strh	r3, [r7, #2]
 800091e:	4613      	mov	r3, r2
 8000920:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8000922:	f7ff fe2f 	bl	8000584 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	88b9      	ldrh	r1, [r7, #4]
 800092a:	88f8      	ldrh	r0, [r7, #6]
 800092c:	2201      	movs	r2, #1
 800092e:	f7ff fe91 	bl	8000654 <lcd_set_window>
	lcd_start_data();
 8000932:	f7ff fe4b 	bl	80005cc <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 8000936:	883b      	ldrh	r3, [r7, #0]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b29b      	uxth	r3, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	733b      	strb	r3, [r7, #12]
 8000940:	883b      	ldrh	r3, [r7, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fe63 	bl	8000618 <lcd_spi_send_data>
	while (h--);
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	807a      	strh	r2, [r7, #2]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f4      	bne.n	8000946 <lcd_vline+0x42>
	lcd_end_write();
 800095c:	f7ff fe1e 	bl	800059c <lcd_end_write>
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <lcd_fill_circle>:
    lcd_pixel(x0 - y, y0 - x, color);
  }
  lcd_end_write();
}

void lcd_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	4604      	mov	r4, r0
 8000970:	4608      	mov	r0, r1
 8000972:	4611      	mov	r1, r2
 8000974:	461a      	mov	r2, r3
 8000976:	4623      	mov	r3, r4
 8000978:	80fb      	strh	r3, [r7, #6]
 800097a:	4603      	mov	r3, r0
 800097c:	80bb      	strh	r3, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
 8000982:	4613      	mov	r3, r2
 8000984:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	f1c3 0301 	rsb	r3, r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	461a      	mov	r2, r3
 8000998:	03d2      	lsls	r2, r2, #15
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	b29b      	uxth	r3, r3
 80009a0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80009a6:	887b      	ldrh	r3, [r7, #2]
 80009a8:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 80009aa:	8a3b      	ldrh	r3, [r7, #16]
 80009ac:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	817b      	strh	r3, [r7, #10]

	while (x < y) {
 80009b2:	e071      	b.n	8000a98 <lcd_fill_circle+0x130>
		if (f >= 0) {
 80009b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0e      	blt.n	80009da <lcd_fill_circle+0x72>
			y--;
 80009bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3b01      	subs	r3, #1
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80009c8:	8a7b      	ldrh	r3, [r7, #18]
 80009ca:	3302      	adds	r3, #2
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80009d0:	8afa      	ldrh	r2, [r7, #22]
 80009d2:	8a7b      	ldrh	r3, [r7, #18]
 80009d4:	4413      	add	r3, r2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80009da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	3301      	adds	r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80009e6:	8abb      	ldrh	r3, [r7, #20]
 80009e8:	3302      	adds	r3, #2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80009ee:	8afa      	ldrh	r2, [r7, #22]
 80009f0:	8abb      	ldrh	r3, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	82fb      	strh	r3, [r7, #22]
		if (x < (y + 1)) {
 80009f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	db1f      	blt.n	8000a44 <lcd_fill_circle+0xdc>
			lcd_vline(x0 + x, y0 - y, 2 * y + 1, color);
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	8a3b      	ldrh	r3, [r7, #16]
 8000a08:	4413      	add	r3, r2
 8000a0a:	b298      	uxth	r0, r3
 8000a0c:	88ba      	ldrh	r2, [r7, #4]
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	b299      	uxth	r1, r3
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	883b      	ldrh	r3, [r7, #0]
 8000a20:	f7ff ff70 	bl	8000904 <lcd_vline>
			lcd_vline(x0 - x, y0 - y, 2 * y + 1, color);
 8000a24:	88fa      	ldrh	r2, [r7, #6]
 8000a26:	8a3b      	ldrh	r3, [r7, #16]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b298      	uxth	r0, r3
 8000a2c:	88ba      	ldrh	r2, [r7, #4]
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	b299      	uxth	r1, r3
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	883b      	ldrh	r3, [r7, #0]
 8000a40:	f7ff ff60 	bl	8000904 <lcd_vline>
		}
		if (y != py) {
 8000a44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d021      	beq.n	8000a94 <lcd_fill_circle+0x12c>
			lcd_vline(x0 + py, y0 - px, 2 * px + 1, color);
 8000a50:	88fa      	ldrh	r2, [r7, #6]
 8000a52:	897b      	ldrh	r3, [r7, #10]
 8000a54:	4413      	add	r3, r2
 8000a56:	b298      	uxth	r0, r3
 8000a58:	88ba      	ldrh	r2, [r7, #4]
 8000a5a:	89bb      	ldrh	r3, [r7, #12]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	89bb      	ldrh	r3, [r7, #12]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	3301      	adds	r3, #1
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	883b      	ldrh	r3, [r7, #0]
 8000a6c:	f7ff ff4a 	bl	8000904 <lcd_vline>
			lcd_vline(x0 - py, y0 - px, 2 * px + 1, color);
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	897b      	ldrh	r3, [r7, #10]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	b298      	uxth	r0, r3
 8000a78:	88ba      	ldrh	r2, [r7, #4]
 8000a7a:	89bb      	ldrh	r3, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	89bb      	ldrh	r3, [r7, #12]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	883b      	ldrh	r3, [r7, #0]
 8000a8c:	f7ff ff3a 	bl	8000904 <lcd_vline>
			py = y;
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 8000a94:	8a3b      	ldrh	r3, [r7, #16]
 8000a96:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8000a98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	db87      	blt.n	80009b4 <lcd_fill_circle+0x4c>
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
 8000aa4:	88f8      	ldrh	r0, [r7, #6]
 8000aa6:	88ba      	ldrh	r2, [r7, #4]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b299      	uxth	r1, r3
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	883b      	ldrh	r3, [r7, #0]
 8000aba:	f7ff ff23 	bl	8000904 <lcd_vline>
}
 8000abe:	bf00      	nop
 8000ac0:	371c      	adds	r7, #28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd90      	pop	{r4, r7, pc}
	...

08000ac8 <__io_getchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char text[100];

int __io_getchar(void) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
	rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <__io_getchar+0x68>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000ad8:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <__io_getchar+0x6c>)
 8000ada:	4413      	add	r3, r2
 8000adc:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <__io_getchar+0x70>)
 8000ade:	6013      	str	r3, [r2, #0]

	while (rx_tail == rx_head) {
 8000ae0:	e008      	b.n	8000af4 <__io_getchar+0x2c>
		rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <__io_getchar+0x68>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000aec:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <__io_getchar+0x6c>)
 8000aee:	4413      	add	r3, r2
 8000af0:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <__io_getchar+0x70>)
 8000af2:	6013      	str	r3, [r2, #0]
	while (rx_tail == rx_head) {
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <__io_getchar+0x74>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <__io_getchar+0x70>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d0f0      	beq.n	8000ae2 <__io_getchar+0x1a>
//		osDelay(1);
	}

	uint8_t b = *rx_tail;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <__io_getchar+0x74>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]

	if (++rx_tail == (rx_buffer + UART_RX_BUF_SIZE))
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__io_getchar+0x74>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <__io_getchar+0x74>)
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <__io_getchar+0x74>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <__io_getchar+0x78>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d102      	bne.n	8000b22 <__io_getchar+0x5a>
//	if (++rx_tail == &rx_buffer[UART_RX_BUF_SIZE])
		rx_tail = rx_buffer;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <__io_getchar+0x74>)
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <__io_getchar+0x6c>)
 8000b20:	601a      	str	r2, [r3, #0]

	return (int)b;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20000224 	.word	0x20000224
 8000b34:	20000294 	.word	0x20000294
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	2000035c 	.word	0x2000035c

08000b44 <__io_putchar>:

int __io_putchar(int ch) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 8000b4c:	1d39      	adds	r1, r7, #4
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	2201      	movs	r2, #1
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <__io_putchar+0x20>)
 8000b54:	f003 fb69 	bl	800422a <HAL_UART_Transmit>
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001e0 	.word	0x200001e0

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 fdeb 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f899 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 fa4f 	bl	8001018 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7a:	f000 fa2d 	bl	8000fd8 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b7e:	f000 f9b3 	bl	8000ee8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b82:	f000 f9ff 	bl	8000f84 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b86:	f000 f94b 	bl	8000e20 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b8a:	f000 f977 	bl	8000e7c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000b8e:	f000 f8f5 	bl	8000d7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer)) != HAL_OK) {
 8000b92:	22c8      	movs	r2, #200	; 0xc8
 8000b94:	4931      	ldr	r1, [pc, #196]	; (8000c5c <main+0xf4>)
 8000b96:	4832      	ldr	r0, [pc, #200]	; (8000c60 <main+0xf8>)
 8000b98:	f003 fbd9 	bl	800434e <HAL_UART_Receive_DMA>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d012      	beq.n	8000bc8 <main+0x60>
	  snprintf(text, countof(text), "Error start UART RX %d\n", __LINE__);
 8000ba2:	23ae      	movs	r3, #174	; 0xae
 8000ba4:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <main+0xfc>)
 8000ba6:	2164      	movs	r1, #100	; 0x64
 8000ba8:	482f      	ldr	r0, [pc, #188]	; (8000c68 <main+0x100>)
 8000baa:	f007 fd6f 	bl	800868c <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000bae:	2164      	movs	r1, #100	; 0x64
 8000bb0:	482d      	ldr	r0, [pc, #180]	; (8000c68 <main+0x100>)
 8000bb2:	f007 fde2 	bl	800877a <strnlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	492a      	ldr	r1, [pc, #168]	; (8000c68 <main+0x100>)
 8000bc0:	4827      	ldr	r0, [pc, #156]	; (8000c60 <main+0xf8>)
 8000bc2:	f003 fb32 	bl	800422a <HAL_UART_Transmit>
	  while (1) {}
 8000bc6:	e7fe      	b.n	8000bc6 <main+0x5e>
  }

  snprintf(text, countof(text), "Start UART RX %d\n", __LINE__);
 8000bc8:	23b3      	movs	r3, #179	; 0xb3
 8000bca:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <main+0x104>)
 8000bcc:	2164      	movs	r1, #100	; 0x64
 8000bce:	4826      	ldr	r0, [pc, #152]	; (8000c68 <main+0x100>)
 8000bd0:	f007 fd5c 	bl	800868c <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000bd4:	2164      	movs	r1, #100	; 0x64
 8000bd6:	4824      	ldr	r0, [pc, #144]	; (8000c68 <main+0x100>)
 8000bd8:	f007 fdcf 	bl	800877a <strnlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be4:	4920      	ldr	r1, [pc, #128]	; (8000c68 <main+0x100>)
 8000be6:	481e      	ldr	r0, [pc, #120]	; (8000c60 <main+0xf8>)
 8000be8:	f003 fb1f 	bl	800422a <HAL_UART_Transmit>
//  lcd_print("\nNew line!");

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bec:	f004 f942 	bl	8004e74 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART */
  muxUARTHandle = osMutexNew(&muxUART_attributes);
 8000bf0:	481f      	ldr	r0, [pc, #124]	; (8000c70 <main+0x108>)
 8000bf2:	f004 fa36 	bl	8005062 <osMutexNew>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <main+0x10c>)
 8000bfa:	6013      	str	r3, [r2, #0]

  /* creation of muxLCD */
  muxLCDHandle = osMutexNew(&muxLCD_attributes);
 8000bfc:	481e      	ldr	r0, [pc, #120]	; (8000c78 <main+0x110>)
 8000bfe:	f004 fa30 	bl	8005062 <osMutexNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <main+0x114>)
 8000c06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_take_raw_s */
  task_take_raw_sHandle = osThreadNew(start_task_take_raw_s, NULL, &task_take_raw_s_attributes);
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <main+0x118>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	481d      	ldr	r0, [pc, #116]	; (8000c84 <main+0x11c>)
 8000c0e:	f004 f97b 	bl	8004f08 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <main+0x120>)
 8000c16:	6013      	str	r3, [r2, #0]

  /* creation of task_showing */
  task_showingHandle = osThreadNew(start_task_showing, NULL, &task_showing_attributes);
 8000c18:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <main+0x124>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <main+0x128>)
 8000c1e:	f004 f973 	bl	8004f08 <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <main+0x12c>)
 8000c26:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  lcd_init();
 8000c28:	f7ff fd7a 	bl	8000720 <lcd_init>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c2c:	f004 f946 	bl	8004ebc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("This text is from printf(), %d, %s, %s, %s\n", __LINE__, __FILE__, __FUNCTION__, __PRETTY_FUNCTION__);
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <main+0x130>)
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <main+0x134>)
 8000c36:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <main+0x138>)
 8000c38:	f240 1101 	movw	r1, #257	; 0x101
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <main+0x13c>)
 8000c3e:	f007 fc93 	bl	8008568 <iprintf>

  while (1)
  {
	  int c = __io_getchar();
 8000c42:	f7ff ff41 	bl	8000ac8 <__io_getchar>
 8000c46:	4603      	mov	r3, r0
 8000c48:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 1000);
 8000c4a:	1d39      	adds	r1, r7, #4
 8000c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c50:	2201      	movs	r2, #1
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <main+0xf8>)
 8000c54:	f003 fae9 	bl	800422a <HAL_UART_Transmit>
  {
 8000c58:	e7f3      	b.n	8000c42 <main+0xda>
 8000c5a:	bf00      	nop
 8000c5c:	20000294 	.word	0x20000294
 8000c60:	200001e0 	.word	0x200001e0
 8000c64:	08009664 	.word	0x08009664
 8000c68:	2000035c 	.word	0x2000035c
 8000c6c:	0800967c 	.word	0x0800967c
 8000c70:	080097a4 	.word	0x080097a4
 8000c74:	2000028c 	.word	0x2000028c
 8000c78:	080097b4 	.word	0x080097b4
 8000c7c:	20000290 	.word	0x20000290
 8000c80:	0800975c 	.word	0x0800975c
 8000c84:	08001145 	.word	0x08001145
 8000c88:	20000284 	.word	0x20000284
 8000c8c:	08009780 	.word	0x08009780
 8000c90:	080011ad 	.word	0x080011ad
 8000c94:	20000288 	.word	0x20000288
 8000c98:	080097cc 	.word	0x080097cc
 8000c9c:	080097c4 	.word	0x080097c4
 8000ca0:	08009690 	.word	0x08009690
 8000ca4:	080096a4 	.word	0x080096a4

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	; 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fbb9 	bl	800842e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <SystemClock_Config+0xcc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <SystemClock_Config+0xcc>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <SystemClock_Config+0xcc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <SystemClock_Config+0xd0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <SystemClock_Config+0xd0>)
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <SystemClock_Config+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d10:	2310      	movs	r3, #16
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d20:	2354      	movs	r3, #84	; 0x54
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff59 	bl	8002be8 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d3c:	f000 fa3e 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2302      	movs	r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 f9bb 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d68:	f000 fa28 	bl	80011bc <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3750      	adds	r7, #80	; 0x50
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f000 fd25 	bl	800182c <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f000 f9e8 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f000 fd59 	bl	80018b4 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f000 f9d8 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000a4 	.word	0x200000a4
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <MX_I2C1_Init+0x54>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_I2C1_Init+0x58>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e5e:	f001 fd7f 	bl	8002960 <HAL_I2C_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e68:	f000 f9a8 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000ec 	.word	0x200000ec
 8000e74:	40005400 	.word	0x40005400
 8000e78:	000186a0 	.word	0x000186a0

08000e7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <MX_SPI1_Init+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec8:	220a      	movs	r2, #10
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_SPI1_Init+0x64>)
 8000ece:	f002 fae3 	bl	8003498 <HAL_SPI_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ed8:	f000 f970 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000140 	.word	0x20000140
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <MX_TIM3_Init+0x98>)
 8000f08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f0c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f2c:	4813      	ldr	r0, [pc, #76]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f2e:	f002 fd43 	bl	80039b8 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f38:	f000 f940 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f4a:	f002 fe8c 	bl	8003c66 <HAL_TIM_ConfigClockSource>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 f932 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_TIM3_Init+0x94>)
 8000f66:	f003 f891 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f70:	f000 f924 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000198 	.word	0x20000198
 8000f80:	40000400 	.word	0x40000400

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_USART1_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	f003 f8e8 	bl	8004190 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f8f9 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001e0 	.word	0x200001e0
 8000fd4:	40011000 	.word	0x40011000

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_DMA_Init+0x3c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <MX_DMA_Init+0x3c>)
 8000fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_DMA_Init+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	203a      	movs	r0, #58	; 0x3a
 8001000:	f000 ff51 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001004:	203a      	movs	r0, #58	; 0x3a
 8001006:	f000 ff6a 	bl	8001ede <HAL_NVIC_EnableIRQ>

}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <MX_GPIO_Init+0x108>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <MX_GPIO_Init+0x108>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <MX_GPIO_Init+0x108>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <MX_GPIO_Init+0x108>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a33      	ldr	r2, [pc, #204]	; (8001120 <MX_GPIO_Init+0x108>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <MX_GPIO_Init+0x108>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <MX_GPIO_Init+0x108>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a2c      	ldr	r2, [pc, #176]	; (8001120 <MX_GPIO_Init+0x108>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <MX_GPIO_Init+0x108>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_GPIO_Init+0x108>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <MX_GPIO_Init+0x108>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_GPIO_Init+0x108>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a4:	481f      	ldr	r0, [pc, #124]	; (8001124 <MX_GPIO_Init+0x10c>)
 80010a6:	f001 fc29 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_A0_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	211a      	movs	r1, #26
 80010ae:	481e      	ldr	r0, [pc, #120]	; (8001128 <MX_GPIO_Init+0x110>)
 80010b0:	f001 fc24 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4815      	ldr	r0, [pc, #84]	; (8001124 <MX_GPIO_Init+0x10c>)
 80010ce:	f001 fa91 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_A0_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_A0_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 80010d2:	231a      	movs	r3, #26
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <MX_GPIO_Init+0x110>)
 80010ea:	f001 fa83 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80010ee:	2340      	movs	r3, #64	; 0x40
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_GPIO_Init+0x110>)
 8001104:	f001 fa76 	bl	80025f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2105      	movs	r1, #5
 800110c:	2017      	movs	r0, #23
 800110e:	f000 feca 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001112:	2017      	movs	r0, #23
 8001114:	f000 fee3 	bl	8001ede <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40020800 	.word	0x40020800
 8001128:	40020000 	.word	0x40020000

0800112c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <start_task_take_raw_s>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_task_take_raw_s */
void start_task_take_raw_s(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <start_task_take_raw_s+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	4618      	mov	r0, r3
 8001156:	f004 f80a 	bl	800516e <osMutexAcquire>
	  lcd_fill_circle(80, 80, 30, ST77XX_BLACK);
 800115a:	2300      	movs	r3, #0
 800115c:	221e      	movs	r2, #30
 800115e:	2150      	movs	r1, #80	; 0x50
 8001160:	2050      	movs	r0, #80	; 0x50
 8001162:	f7ff fc01 	bl	8000968 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <start_task_take_raw_s+0x64>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 f84a 	bl	8005204 <osMutexRelease>
	  osDelay(300);
 8001170:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001174:	f003 ff5a 	bl	800502c <osDelay>

	  osMutexAcquire(muxLCDHandle, osWaitForever);
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <start_task_take_raw_s+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fff4 	bl	800516e <osMutexAcquire>
	  lcd_fill_circle(80, 80, 30, ST77XX_RED);
 8001186:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800118a:	221e      	movs	r2, #30
 800118c:	2150      	movs	r1, #80	; 0x50
 800118e:	2050      	movs	r0, #80	; 0x50
 8001190:	f7ff fbea 	bl	8000968 <lcd_fill_circle>
	  osMutexRelease(muxLCDHandle);
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <start_task_take_raw_s+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f004 f833 	bl	8005204 <osMutexRelease>
	  osDelay(300);
 800119e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011a2:	f003 ff43 	bl	800502c <osDelay>
	  osMutexAcquire(muxLCDHandle, osWaitForever);
 80011a6:	e7d1      	b.n	800114c <start_task_take_raw_s+0x8>
 80011a8:	20000290 	.word	0x20000290

080011ac <start_task_showing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task_showing */
void start_task_showing(void *argument)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task_showing */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f003 ff39 	bl	800502c <osDelay>
 80011ba:	e7fb      	b.n	80011b4 <start_task_showing+0x8>

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_MspInit+0x54>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <HAL_MspInit+0x54>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x54>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_MspInit+0x54>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_MspInit+0x54>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_MspInit+0x54>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	210f      	movs	r1, #15
 800120a:	f06f 0001 	mvn.w	r0, #1
 800120e:	f000 fe4a 	bl	8001ea6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_ADC_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d127      	bne.n	8001292 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_ADC_MspInit+0x84>)
 800128e:	f001 f9b1 	bl	80025f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40012000 	.word	0x40012000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_I2C_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12c      	bne.n	8001324 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_I2C_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_I2C_MspInit+0x88>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_I2C_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f8:	2304      	movs	r3, #4
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480c      	ldr	r0, [pc, #48]	; (8001334 <HAL_I2C_MspInit+0x8c>)
 8001304:	f001 f976 	bl	80025f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_I2C_MspInit+0x88>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_I2C_MspInit+0x88>)
 8001312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_I2C_MspInit+0x88>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40005400 	.word	0x40005400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_SPI_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12b      	bne.n	80013b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 8001392:	23a0      	movs	r3, #160	; 0xa0
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a2:	2305      	movs	r3, #5
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_SPI_MspInit+0x8c>)
 80013ae:	f001 f921 	bl	80025f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40013000 	.word	0x40013000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_TIM_Base_MspInit+0x48>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d115      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_TIM_Base_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x4c>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_TIM_Base_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2105      	movs	r1, #5
 80013fa:	201d      	movs	r0, #29
 80013fc:	f000 fd53 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001400:	201d      	movs	r0, #29
 8001402:	f000 fd6c 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40000400 	.word	0x40000400
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a30      	ldr	r2, [pc, #192]	; (80014f8 <HAL_UART_MspInit+0xe0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d15a      	bne.n	80014f0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <HAL_UART_MspInit+0xe4>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a2e      	ldr	r2, [pc, #184]	; (80014fc <HAL_UART_MspInit+0xe4>)
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_UART_MspInit+0xe4>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_UART_MspInit+0xe4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_UART_MspInit+0xe4>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_UART_MspInit+0xe4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001472:	23c0      	movs	r3, #192	; 0xc0
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001482:	2307      	movs	r3, #7
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	481c      	ldr	r0, [pc, #112]	; (8001500 <HAL_UART_MspInit+0xe8>)
 800148e:	f001 f8b1 	bl	80025f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_UART_MspInit+0xec>)
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <HAL_UART_MspInit+0xf0>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_UART_MspInit+0xec>)
 800149a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014d6:	f000 fd1d 	bl	8001f14 <HAL_DMA_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80014e0:	f7ff fe6c 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
 80014ea:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_UART_MspInit+0xec>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400
 8001504:	20000224 	.word	0x20000224
 8001508:	40026440 	.word	0x40026440

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f956 	bl	80017ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001540:	f005 fcde 	bl	8006f00 <xTaskGetSchedulerState>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800154a:	f006 fbc5 	bl	8007cd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}

08001552 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001556:	2040      	movs	r0, #64	; 0x40
 8001558:	f001 f9ea 	bl	8002930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <TIM3_IRQHandler+0x10>)
 8001566:	f002 fa76 	bl	8003a56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000198 	.word	0x20000198

08001574 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA2_Stream2_IRQHandler+0x10>)
 800157a:	f000 fdd1 	bl	8002120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000224 	.word	0x20000224

08001588 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e00a      	b.n	80015b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800159a:	f7ff fa95 	bl	8000ac8 <__io_getchar>
 800159e:	4601      	mov	r1, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	b2ca      	uxtb	r2, r1
 80015a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf0      	blt.n	800159a <_read+0x12>
	}

return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e009      	b.n	80015e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fab1 	bl	8000b44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf1      	blt.n	80015d4 <_write+0x12>
	}
	return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_close>:

int _close(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001622:	605a      	str	r2, [r3, #4]
	return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_isatty>:

int _isatty(int file)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return 1;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f006 fd9a 	bl	80081cc <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20010000 	.word	0x20010000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	200003c0 	.word	0x200003c0
 80016cc:	200051e8 	.word	0x200051e8

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff ffd7 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f006 fe4f 	bl	80083c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff fa1f 	bl	8000b68 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001738:	0800989c 	.word	0x0800989c
  ldr r2, =_sbss
 800173c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001740:	200051e8 	.word	0x200051e8

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 fb8d 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	200f      	movs	r0, #15
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fd24 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fba5 	bl	8001efa <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 fb6d 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000010 	.word	0x20000010
 80017e8:	2000000c 	.word	0x2000000c

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000010 	.word	0x20000010
 8001810:	200003c4 	.word	0x200003c4

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200003c4 	.word	0x200003c4

0800182c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e033      	b.n	80018aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fce8 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b00      	cmp	r3, #0
 8001868:	d118      	bne.n	800189c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001872:	f023 0302 	bic.w	r3, r3, #2
 8001876:	f043 0202 	orr.w	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f93a 	bl	8001af8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
 800189a:	e001      	b.n	80018a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1c>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e105      	b.n	8001adc <HAL_ADC_ConfigChannel+0x228>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d925      	bls.n	800192c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	3b1e      	subs	r3, #30
 80018f6:	2207      	movs	r2, #7
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43da      	mvns	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	400a      	ands	r2, r1
 8001904:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68d9      	ldr	r1, [r3, #12]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	4603      	mov	r3, r0
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4403      	add	r3, r0
 800191e:	3b1e      	subs	r3, #30
 8001920:	409a      	lsls	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	e022      	b.n	8001972 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6919      	ldr	r1, [r3, #16]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	2207      	movs	r2, #7
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	400a      	ands	r2, r1
 800194e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6919      	ldr	r1, [r3, #16]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	4603      	mov	r3, r0
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4403      	add	r3, r0
 8001968:	409a      	lsls	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b06      	cmp	r3, #6
 8001978:	d824      	bhi.n	80019c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3b05      	subs	r3, #5
 800198c:	221f      	movs	r2, #31
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b05      	subs	r3, #5
 80019b6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
 80019c2:	e04c      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d824      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	3b23      	subs	r3, #35	; 0x23
 80019de:	221f      	movs	r2, #31
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43da      	mvns	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	400a      	ands	r2, r1
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b23      	subs	r3, #35	; 0x23
 8001a08:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
 8001a14:	e023      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3b41      	subs	r3, #65	; 0x41
 8001a28:	221f      	movs	r2, #31
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	400a      	ands	r2, r1
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b41      	subs	r3, #65	; 0x41
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_ADC_ConfigChannel+0x234>)
 8001a60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a21      	ldr	r2, [pc, #132]	; (8001aec <HAL_ADC_ConfigChannel+0x238>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d109      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1cc>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b12      	cmp	r3, #18
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_ADC_ConfigChannel+0x238>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d123      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x21e>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d003      	beq.n	8001a9a <HAL_ADC_ConfigChannel+0x1e6>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b11      	cmp	r3, #17
 8001a98:	d11b      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d111      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_ADC_ConfigChannel+0x23c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_ADC_ConfigChannel+0x240>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9a      	lsrs	r2, r3, #18
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40012300 	.word	0x40012300
 8001aec:	40012000 	.word	0x40012000
 8001af0:	20000008 	.word	0x20000008
 8001af4:	431bde83 	.word	0x431bde83

08001af8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b00:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <ADC_Init+0x1f0>)
 8001b02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	021a      	lsls	r2, r3, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6899      	ldr	r1, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	4a58      	ldr	r2, [pc, #352]	; (8001cec <ADC_Init+0x1f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e00f      	b.n	8001bf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0202 	bic.w	r2, r2, #2
 8001c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e1b      	ldrb	r3, [r3, #24]
 8001c10:	005a      	lsls	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	035a      	lsls	r2, r3, #13
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	e007      	b.n	8001c6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	051a      	lsls	r2, r3, #20
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6899      	ldr	r1, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	029a      	lsls	r2, r3, #10
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	609a      	str	r2, [r3, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40012300 	.word	0x40012300
 8001cec:	0f000001 	.word	0x0f000001

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <__NVIC_EnableIRQ+0x38>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff29 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff3e 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff8e 	bl	8001de4 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5d 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff31 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa2 	bl	8001e4c <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fc78 	bl	8001814 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e099      	b.n	8002064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f50:	e00f      	b.n	8001f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f52:	f7ff fc5f 	bl	8001814 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d908      	bls.n	8001f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e078      	b.n	8002064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e8      	bne.n	8001f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_DMA_Init+0x158>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d107      	bne.n	8001fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	2b04      	cmp	r3, #4
 8002004:	d117      	bne.n	8002036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00e      	beq.n	8002036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fa6f 	bl	80024fc <DMA_CheckFifoParam>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002032:	2301      	movs	r3, #1
 8002034:	e016      	b.n	8002064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa26 	bl	8002490 <DMA_CalcBaseAndBitshift>
 8002044:	4603      	mov	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	223f      	movs	r2, #63	; 0x3f
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	f010803f 	.word	0xf010803f

08002070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_DMA_Start_IT+0x26>
 8002092:	2302      	movs	r3, #2
 8002094:	e040      	b.n	8002118 <HAL_DMA_Start_IT+0xa8>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d12f      	bne.n	800210a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f9b8 	bl	8002434 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	223f      	movs	r2, #63	; 0x3f
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0216 	orr.w	r2, r2, #22
 80020de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0208 	orr.w	r2, r2, #8
 80020f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e005      	b.n	8002116 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002112:	2302      	movs	r3, #2
 8002114:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002116:	7dfb      	ldrb	r3, [r7, #23]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800212c:	4b8e      	ldr	r3, [pc, #568]	; (8002368 <HAL_DMA_IRQHandler+0x248>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a8e      	ldr	r2, [pc, #568]	; (800236c <HAL_DMA_IRQHandler+0x24c>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0a9b      	lsrs	r3, r3, #10
 8002138:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	2208      	movs	r2, #8
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01a      	beq.n	800218c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0204 	bic.w	r2, r2, #4
 8002172:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2208      	movs	r2, #8
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2201      	movs	r2, #1
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d012      	beq.n	80021c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2201      	movs	r2, #1
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	2204      	movs	r2, #4
 80021c8:	409a      	lsls	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2204      	movs	r2, #4
 80021e6:	409a      	lsls	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2210      	movs	r2, #16
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d043      	beq.n	8002290 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03c      	beq.n	8002290 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	2210      	movs	r2, #16
 800221c:	409a      	lsls	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d018      	beq.n	8002262 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d108      	bne.n	8002250 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d024      	beq.n	8002290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
 800224e:	e01f      	b.n	8002290 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
 8002260:	e016      	b.n	8002290 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0208 	bic.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	2220      	movs	r2, #32
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 808f 	beq.w	80023c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8087 	beq.w	80023c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	2220      	movs	r2, #32
 80022b8:	409a      	lsls	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d136      	bne.n	8002338 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0216 	bic.w	r2, r2, #22
 80022d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <HAL_DMA_IRQHandler+0x1da>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0208 	bic.w	r2, r2, #8
 8002308:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	223f      	movs	r2, #63	; 0x3f
 8002310:	409a      	lsls	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232a:	2b00      	cmp	r3, #0
 800232c:	d07e      	beq.n	800242c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
        }
        return;
 8002336:	e079      	b.n	800242c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01d      	beq.n	8002382 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10d      	bne.n	8002370 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	2b00      	cmp	r3, #0
 800235a:	d031      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
 8002364:	e02c      	b.n	80023c0 <HAL_DMA_IRQHandler+0x2a0>
 8002366:	bf00      	nop
 8002368:	20000008 	.word	0x20000008
 800236c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d023      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
 8002380:	e01e      	b.n	80023c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10f      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0210 	bic.w	r2, r2, #16
 800239e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d032      	beq.n	800242e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d022      	beq.n	800241a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2205      	movs	r2, #5
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	3301      	adds	r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d307      	bcc.n	8002408 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f2      	bne.n	80023ec <HAL_DMA_IRQHandler+0x2cc>
 8002406:	e000      	b.n	800240a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002408:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
 800242a:	e000      	b.n	800242e <HAL_DMA_IRQHandler+0x30e>
        return;
 800242c:	bf00      	nop
    }
  }
}
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002450:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	d108      	bne.n	8002474 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002472:	e007      	b.n	8002484 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	60da      	str	r2, [r3, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3b10      	subs	r3, #16
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <DMA_CalcBaseAndBitshift+0x64>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024aa:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <DMA_CalcBaseAndBitshift+0x68>)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d909      	bls.n	80024d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	1d1a      	adds	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	659a      	str	r2, [r3, #88]	; 0x58
 80024d0:	e007      	b.n	80024e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	aaaaaaab 	.word	0xaaaaaaab
 80024f8:	080097ec 	.word	0x080097ec

080024fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11f      	bne.n	8002556 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d856      	bhi.n	80025ca <DMA_CheckFifoParam+0xce>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <DMA_CheckFifoParam+0x28>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002535 	.word	0x08002535
 8002528:	08002547 	.word	0x08002547
 800252c:	08002535 	.word	0x08002535
 8002530:	080025cb 	.word	0x080025cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d046      	beq.n	80025ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e043      	b.n	80025ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800254e:	d140      	bne.n	80025d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002554:	e03d      	b.n	80025d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255e:	d121      	bne.n	80025a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d837      	bhi.n	80025d6 <DMA_CheckFifoParam+0xda>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <DMA_CheckFifoParam+0x70>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	0800257d 	.word	0x0800257d
 8002570:	08002583 	.word	0x08002583
 8002574:	0800257d 	.word	0x0800257d
 8002578:	08002595 	.word	0x08002595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      break;
 8002580:	e030      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d025      	beq.n	80025da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002592:	e022      	b.n	80025da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800259c:	d11f      	bne.n	80025de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025a2:	e01c      	b.n	80025de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d903      	bls.n	80025b2 <DMA_CheckFifoParam+0xb6>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d003      	beq.n	80025b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025b0:	e018      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      break;
 80025b6:	e015      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      break;
 80025c8:	e00b      	b.n	80025e2 <DMA_CheckFifoParam+0xe6>
      break;
 80025ca:	bf00      	nop
 80025cc:	e00a      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      break;
 80025ce:	bf00      	nop
 80025d0:	e008      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
 80025d4:	e006      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e004      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e002      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
    }
  } 
  
  return status; 
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e159      	b.n	80028c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	f040 8148 	bne.w	80028be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d005      	beq.n	8002646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	2b02      	cmp	r3, #2
 8002644:	d130      	bne.n	80026a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	2203      	movs	r2, #3
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 0201 	and.w	r2, r3, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d017      	beq.n	80026e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d123      	bne.n	8002738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	08da      	lsrs	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3208      	adds	r2, #8
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a2 	beq.w	80028be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b57      	ldr	r3, [pc, #348]	; (80028dc <HAL_GPIO_Init+0x2e8>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a56      	ldr	r2, [pc, #344]	; (80028dc <HAL_GPIO_Init+0x2e8>)
 8002784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b54      	ldr	r3, [pc, #336]	; (80028dc <HAL_GPIO_Init+0x2e8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002796:	4a52      	ldr	r2, [pc, #328]	; (80028e0 <HAL_GPIO_Init+0x2ec>)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_GPIO_Init+0x2f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x202>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a48      	ldr	r2, [pc, #288]	; (80028e8 <HAL_GPIO_Init+0x2f4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x1fe>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a47      	ldr	r2, [pc, #284]	; (80028ec <HAL_GPIO_Init+0x2f8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a46      	ldr	r2, [pc, #280]	; (80028f0 <HAL_GPIO_Init+0x2fc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x1f6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a45      	ldr	r2, [pc, #276]	; (80028f4 <HAL_GPIO_Init+0x300>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x1f2>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002808:	4935      	ldr	r1, [pc, #212]	; (80028e0 <HAL_GPIO_Init+0x2ec>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_GPIO_Init+0x304>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <HAL_GPIO_Init+0x304>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_GPIO_Init+0x304>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a24      	ldr	r2, [pc, #144]	; (80028f8 <HAL_GPIO_Init+0x304>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_GPIO_Init+0x304>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288e:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <HAL_GPIO_Init+0x304>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_GPIO_Init+0x304>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_GPIO_Init+0x304>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f aea2 	bls.w	8002610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fbec 	bl	800112c <HAL_GPIO_EXTI_Callback>
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013c00 	.word	0x40013c00

08002960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e12b      	b.n	8002bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fc8e 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	; 0x24
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c4:	f000 fd40 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 80029c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a81      	ldr	r2, [pc, #516]	; (8002bd4 <HAL_I2C_Init+0x274>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d807      	bhi.n	80029e4 <HAL_I2C_Init+0x84>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a80      	ldr	r2, [pc, #512]	; (8002bd8 <HAL_I2C_Init+0x278>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	bf94      	ite	ls
 80029dc:	2301      	movls	r3, #1
 80029de:	2300      	movhi	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e006      	b.n	80029f2 <HAL_I2C_Init+0x92>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <HAL_I2C_Init+0x27c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0e7      	b.n	8002bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a78      	ldr	r2, [pc, #480]	; (8002be0 <HAL_I2C_Init+0x280>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9b      	lsrs	r3, r3, #18
 8002a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	; (8002bd4 <HAL_I2C_Init+0x274>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d802      	bhi.n	8002a34 <HAL_I2C_Init+0xd4>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3301      	adds	r3, #1
 8002a32:	e009      	b.n	8002a48 <HAL_I2C_Init+0xe8>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	4a69      	ldr	r2, [pc, #420]	; (8002be4 <HAL_I2C_Init+0x284>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	3301      	adds	r3, #1
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	495c      	ldr	r1, [pc, #368]	; (8002bd4 <HAL_I2C_Init+0x274>)
 8002a64:	428b      	cmp	r3, r1
 8002a66:	d819      	bhi.n	8002a9c <HAL_I2C_Init+0x13c>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e59      	subs	r1, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_I2C_Init+0x138>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e59      	subs	r1, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a96:	e051      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e04f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_I2C_Init+0x168>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e012      	b.n	8002aee <HAL_I2C_Init+0x18e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x196>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e022      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_I2C_Init+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e58      	subs	r0, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	6809      	ldr	r1, [r1, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6911      	ldr	r1, [r2, #16]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	000186a0 	.word	0x000186a0
 8002bd8:	001e847f 	.word	0x001e847f
 8002bdc:	003d08ff 	.word	0x003d08ff
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e267      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d075      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d00c      	beq.n	8002c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c12:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2a:	d10b      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05b      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x108>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d157      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e242      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x74>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x98>
 8002c66:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6f      	ldr	r2, [pc, #444]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6c      	ldr	r2, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xb0>
 8002c80:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a68      	ldr	r2, [pc, #416]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a65      	ldr	r2, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fdb8 	bl	8001814 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fdb4 	bl	8001814 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e207      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xc0>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fda4 	bl	8001814 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fda0 	bl	8001814 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1f3      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xe8>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d063      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1c7      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCC_OscConfig+0x244>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fd59 	bl	8001814 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fe fd55 	bl	8001814 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1a8      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4925      	ldr	r1, [pc, #148]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <HAL_RCC_OscConfig+0x244>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fd38 	bl	8001814 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fe fd34 	bl	8001814 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e187      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d036      	beq.n	8002e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_RCC_OscConfig+0x248>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe fd18 	bl	8001814 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe fd14 	bl	8001814 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e167      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x200>
 8002e06:	e01b      	b.n	8002e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_OscConfig+0x248>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fd01 	bl	8001814 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e00e      	b.n	8002e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe fcfd 	bl	8001814 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d907      	bls.n	8002e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e150      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470000 	.word	0x42470000
 8002e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ea      	bne.n	8002e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8097 	beq.w	8002f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b81      	ldr	r3, [pc, #516]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b7d      	ldr	r3, [pc, #500]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a7c      	ldr	r2, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b7a      	ldr	r3, [pc, #488]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b77      	ldr	r3, [pc, #476]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b74      	ldr	r3, [pc, #464]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a73      	ldr	r2, [pc, #460]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fcbd 	bl	8001814 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe fcb9 	bl	8001814 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e10c      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_OscConfig+0x474>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2ea>
 8002ec4:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a63      	ldr	r2, [pc, #396]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x324>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x30c>
 8002eda:	4b5f      	ldr	r3, [pc, #380]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a5e      	ldr	r2, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a5b      	ldr	r2, [pc, #364]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0x324>
 8002ef4:	4b58      	ldr	r3, [pc, #352]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a57      	ldr	r2, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	4b55      	ldr	r3, [pc, #340]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	4a54      	ldr	r2, [pc, #336]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe fc7e 	bl	8001814 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fc7a 	bl	8001814 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0cb      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0ee      	beq.n	8002f1c <HAL_RCC_OscConfig+0x334>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f40:	f7fe fc68 	bl	8001814 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe fc64 	bl	8001814 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0b5      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ee      	bne.n	8002f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a38      	ldr	r2, [pc, #224]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a1 	beq.w	80030c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f86:	4b34      	ldr	r3, [pc, #208]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d05c      	beq.n	800304c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d141      	bne.n	800301e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fc38 	bl	8001814 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fc34 	bl	8001814 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e087      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x478>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fc0d 	bl	8001814 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fc09 	bl	8001814 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e05c      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x416>
 800301c:	e054      	b.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x478>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fbf6 	bl	8001814 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fbf2 	bl	8001814 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e045      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x470>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x444>
 800304a:	e03d      	b.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e038      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
 8003060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x4ec>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d028      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d121      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d11a      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	4293      	cmp	r3, r2
 800309e:	d111      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0cc      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d90c      	bls.n	8003114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a58      	ldr	r2, [pc, #352]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d044      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d119      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d003      	beq.n	8003196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003192:	2b03      	cmp	r3, #3
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e067      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4934      	ldr	r1, [pc, #208]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c8:	f7fe fb24 	bl	8001814 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe fb20 	bl	8001814 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e04f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d20c      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f821 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fa84 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023c00 	.word	0x40023c00
 8003294:	40023800 	.word	0x40023800
 8003298:	080097d4 	.word	0x080097d4
 800329c:	20000008 	.word	0x20000008
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b090      	sub	sp, #64	; 0x40
 80032aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	637b      	str	r3, [r7, #52]	; 0x34
 80032b0:	2300      	movs	r3, #0
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b4:	2300      	movs	r3, #0
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCC_GetSysClockFreq+0x180>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d00d      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x40>
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	f200 80a1 	bhi.w	8003410 <HAL_RCC_GetSysClockFreq+0x16c>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x34>
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d003      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x3a>
 80032d6:	e09b      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d8:	4b53      	ldr	r3, [pc, #332]	; (8003428 <HAL_RCC_GetSysClockFreq+0x184>)
 80032da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032dc:	e09b      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032de:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_GetSysClockFreq+0x188>)
 80032e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032e2:	e098      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e4:	4b4f      	ldr	r3, [pc, #316]	; (8003424 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ee:	4b4d      	ldr	r3, [pc, #308]	; (8003424 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d028      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fa:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	2200      	movs	r2, #0
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	627a      	str	r2, [r7, #36]	; 0x24
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800330c:	2100      	movs	r1, #0
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_GetSysClockFreq+0x188>)
 8003310:	fb03 f201 	mul.w	r2, r3, r1
 8003314:	2300      	movs	r3, #0
 8003316:	fb00 f303 	mul.w	r3, r0, r3
 800331a:	4413      	add	r3, r2
 800331c:	4a43      	ldr	r2, [pc, #268]	; (800342c <HAL_RCC_GetSysClockFreq+0x188>)
 800331e:	fba0 1202 	umull	r1, r2, r0, r2
 8003322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003324:	460a      	mov	r2, r1
 8003326:	62ba      	str	r2, [r7, #40]	; 0x28
 8003328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332a:	4413      	add	r3, r2
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	2200      	movs	r2, #0
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	61fa      	str	r2, [r7, #28]
 8003336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800333a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800333e:	f7fc ff9f 	bl	8000280 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4613      	mov	r3, r2
 8003348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800334a:	e053      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <HAL_RCC_GetSysClockFreq+0x180>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	2200      	movs	r2, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	617a      	str	r2, [r7, #20]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800335e:	f04f 0b00 	mov.w	fp, #0
 8003362:	4652      	mov	r2, sl
 8003364:	465b      	mov	r3, fp
 8003366:	f04f 0000 	mov.w	r0, #0
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	0159      	lsls	r1, r3, #5
 8003370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003374:	0150      	lsls	r0, r2, #5
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	ebb2 080a 	subs.w	r8, r2, sl
 800337e:	eb63 090b 	sbc.w	r9, r3, fp
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800338e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003392:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003396:	ebb2 0408 	subs.w	r4, r2, r8
 800339a:	eb63 0509 	sbc.w	r5, r3, r9
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	00eb      	lsls	r3, r5, #3
 80033a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ac:	00e2      	lsls	r2, r4, #3
 80033ae:	4614      	mov	r4, r2
 80033b0:	461d      	mov	r5, r3
 80033b2:	eb14 030a 	adds.w	r3, r4, sl
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	eb45 030b 	adc.w	r3, r5, fp
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ca:	4629      	mov	r1, r5
 80033cc:	028b      	lsls	r3, r1, #10
 80033ce:	4621      	mov	r1, r4
 80033d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d4:	4621      	mov	r1, r4
 80033d6:	028a      	lsls	r2, r1, #10
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033de:	2200      	movs	r2, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	60fa      	str	r2, [r7, #12]
 80033e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e8:	f7fc ff4a 	bl	8000280 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4613      	mov	r3, r2
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	3301      	adds	r3, #1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800340e:	e002      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetSysClockFreq+0x184>)
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003418:	4618      	mov	r0, r3
 800341a:	3740      	adds	r7, #64	; 0x40
 800341c:	46bd      	mov	sp, r7
 800341e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	00f42400 	.word	0x00f42400
 800342c:	017d7840 	.word	0x017d7840

08003430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCC_GetHCLKFreq+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000008 	.word	0x20000008

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800344c:	f7ff fff0 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0a9b      	lsrs	r3, r3, #10
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK1Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	080097e4 	.word	0x080097e4

08003470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003474:	f7ff ffdc 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0b5b      	lsrs	r3, r3, #13
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	080097e4 	.word	0x080097e4

08003498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07b      	b.n	80035a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d009      	beq.n	80034d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
 80034c2:	e005      	b.n	80034d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd ff24 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	ea42 0103 	orr.w	r1, r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f003 0104 	and.w	r1, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f003 0210 	and.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b088      	sub	sp, #32
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_SPI_Transmit+0x22>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e126      	b.n	800381a <HAL_SPI_Transmit+0x270>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d4:	f7fe f91e 	bl	8001814 <HAL_GetTick>
 80035d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ee:	e10b      	b.n	8003808 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_SPI_Transmit+0x52>
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003600:	e102      	b.n	8003808 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2203      	movs	r2, #3
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	d10f      	bne.n	800366a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d007      	beq.n	8003688 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003690:	d14b      	bne.n	800372a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Transmit+0xf6>
 800369a:	8afb      	ldrh	r3, [r7, #22]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d13e      	bne.n	800371e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036c4:	e02b      	b.n	800371e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d112      	bne.n	80036fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	881a      	ldrh	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	1c9a      	adds	r2, r3, #2
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036f8:	e011      	b.n	800371e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036fa:	f7fe f88b 	bl	8001814 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d803      	bhi.n	8003712 <HAL_SPI_Transmit+0x168>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d102      	bne.n	8003718 <HAL_SPI_Transmit+0x16e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800371c:	e074      	b.n	8003808 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ce      	bne.n	80036c6 <HAL_SPI_Transmit+0x11c>
 8003728:	e04c      	b.n	80037c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Transmit+0x18e>
 8003732:	8afb      	ldrh	r3, [r7, #22]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d140      	bne.n	80037ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800375e:	e02c      	b.n	80037ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d113      	bne.n	8003796 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	86da      	strh	r2, [r3, #54]	; 0x36
 8003794:	e011      	b.n	80037ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003796:	f7fe f83d 	bl	8001814 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d803      	bhi.n	80037ae <HAL_SPI_Transmit+0x204>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d102      	bne.n	80037b4 <HAL_SPI_Transmit+0x20a>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037b8:	e026      	b.n	8003808 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1cd      	bne.n	8003760 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	6839      	ldr	r1, [r7, #0]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f8b3 	bl	8003934 <SPI_EndRxTxTransaction>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e000      	b.n	8003808 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003806:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003818:	7ffb      	ldrb	r3, [r7, #31]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003834:	f7fd ffee 	bl	8001814 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	4413      	add	r3, r2
 8003842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003844:	f7fd ffe6 	bl	8001814 <HAL_GetTick>
 8003848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	015b      	lsls	r3, r3, #5
 8003850:	0d1b      	lsrs	r3, r3, #20
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800385a:	e054      	b.n	8003906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d050      	beq.n	8003906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003864:	f7fd ffd6 	bl	8001814 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	429a      	cmp	r2, r3
 8003872:	d902      	bls.n	800387a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d13d      	bne.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003892:	d111      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389c:	d004      	beq.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a6:	d107      	bne.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c0:	d10f      	bne.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e017      	b.n	8003926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3b01      	subs	r3, #1
 8003904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	429a      	cmp	r2, r3
 8003922:	d19b      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000008 	.word	0x20000008

08003934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <SPI_EndRxTxTransaction+0x7c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <SPI_EndRxTxTransaction+0x80>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	0d5b      	lsrs	r3, r3, #21
 800394c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d112      	bne.n	8003986 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff ff5a 	bl	8003824 <SPI_WaitFlagStateUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e00f      	b.n	80039a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3b01      	subs	r3, #1
 8003990:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d0f2      	beq.n	8003986 <SPI_EndRxTxTransaction+0x52>
 80039a0:	e000      	b.n	80039a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80039a2:	bf00      	nop
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000008 	.word	0x20000008
 80039b4:	165e9f81 	.word	0x165e9f81

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fcf2 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fa2e 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d122      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d11b      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f06f 0202 	mvn.w	r2, #2
 8003a82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f9bf 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003a9e:	e005      	b.n	8003aac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9b1 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9c2 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d122      	bne.n	8003b06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d11b      	bne.n	8003b06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0204 	mvn.w	r2, #4
 8003ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f995 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003af2:	e005      	b.n	8003b00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f987 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f998 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d122      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d11b      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f06f 0208 	mvn.w	r2, #8
 8003b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f96b 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003b46:	e005      	b.n	8003b54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f95d 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f96e 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d122      	bne.n	8003bae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d11b      	bne.n	8003bae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0210 	mvn.w	r2, #16
 8003b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2208      	movs	r2, #8
 8003b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f941 	bl	8003e1c <HAL_TIM_IC_CaptureCallback>
 8003b9a:	e005      	b.n	8003ba8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f933 	bl	8003e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f944 	bl	8003e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10e      	bne.n	8003bda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f06f 0201 	mvn.w	r2, #1
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f90d 	bl	8003df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d10e      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d107      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fabb 	bl	800417c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f909 	bl	8003e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d10e      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d107      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0220 	mvn.w	r2, #32
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fa85 	bl	8004168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_ConfigClockSource+0x1c>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0b4      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x186>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ca0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d03e      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xd4>
 8003cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc0:	f200 8087 	bhi.w	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	f000 8086 	beq.w	8003dd8 <HAL_TIM_ConfigClockSource+0x172>
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d87f      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd2:	2b70      	cmp	r3, #112	; 0x70
 8003cd4:	d01a      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0xa6>
 8003cd6:	2b70      	cmp	r3, #112	; 0x70
 8003cd8:	d87b      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003cda:	2b60      	cmp	r3, #96	; 0x60
 8003cdc:	d050      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0x11a>
 8003cde:	2b60      	cmp	r3, #96	; 0x60
 8003ce0:	d877      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce2:	2b50      	cmp	r3, #80	; 0x50
 8003ce4:	d03c      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0xfa>
 8003ce6:	2b50      	cmp	r3, #80	; 0x50
 8003ce8:	d873      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d058      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x13a>
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d86f      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf2:	2b30      	cmp	r3, #48	; 0x30
 8003cf4:	d064      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf6:	2b30      	cmp	r3, #48	; 0x30
 8003cf8:	d86b      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d060      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d867      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d05c      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d05a      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8003d0a:	e062      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6899      	ldr	r1, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f000 f996 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	609a      	str	r2, [r3, #8]
      break;
 8003d38:	e04f      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f000 f97f 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5c:	609a      	str	r2, [r3, #8]
      break;
 8003d5e:	e03c      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f000 f8f3 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2150      	movs	r1, #80	; 0x50
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f94c 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d7e:	e02c      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f000 f912 	bl	8003fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2160      	movs	r1, #96	; 0x60
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f93c 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d9e:	e01c      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	461a      	mov	r2, r3
 8003dae:	f000 f8d3 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2140      	movs	r1, #64	; 0x40
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f92c 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003dbe:	e00c      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 f923 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e003      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd6:	e000      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00f      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d017      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <TIM_Base_SetConfig+0xf4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <TIM_Base_SetConfig+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <TIM_Base_SetConfig+0xfc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 030a 	bic.w	r3, r3, #10
 8003f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	031b      	lsls	r3, r3, #12
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	f043 0307 	orr.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	431a      	orrs	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e050      	b.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d013      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10c      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4313      	orrs	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40010000 	.word	0x40010000
 8004158:	40000400 	.word	0x40000400
 800415c:	40000800 	.word	0x40000800
 8004160:	40000c00 	.word	0x40000c00
 8004164:	40014000 	.word	0x40014000

08004168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e03f      	b.n	8004222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd f92e 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	; 0x24
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fba5 	bl	8004924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b08a      	sub	sp, #40	; 0x28
 800422e:	af02      	add	r7, sp, #8
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	4613      	mov	r3, r2
 8004238:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b20      	cmp	r3, #32
 8004248:	d17c      	bne.n	8004344 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_UART_Transmit+0x2c>
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e075      	b.n	8004346 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UART_Transmit+0x3e>
 8004264:	2302      	movs	r3, #2
 8004266:	e06e      	b.n	8004346 <HAL_UART_Transmit+0x11c>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2221      	movs	r2, #33	; 0x21
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800427e:	f7fd fac9 	bl	8001814 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	88fa      	ldrh	r2, [r7, #6]
 800428e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004298:	d108      	bne.n	80042ac <HAL_UART_Transmit+0x82>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e003      	b.n	80042b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042bc:	e02a      	b.n	8004314 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f992 	bl	80045f2 <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e036      	b.n	8004346 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	3302      	adds	r3, #2
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	e007      	b.n	8004306 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	3301      	adds	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1cf      	bne.n	80042be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2140      	movs	r1, #64	; 0x40
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f962 	bl	80045f2 <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e006      	b.n	8004346 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b20      	cmp	r3, #32
 8004366:	d11d      	bne.n	80043a4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Receive_DMA+0x26>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e016      	b.n	80043a6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_UART_Receive_DMA+0x38>
 8004382:	2302      	movs	r3, #2
 8004384:	e00f      	b.n	80043a6 <HAL_UART_Receive_DMA+0x58>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	461a      	mov	r2, r3
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f998 	bl	80046d0 <UART_Start_Receive_DMA>
 80043a0:	4603      	mov	r3, r0
 80043a2:	e000      	b.n	80043a6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b09c      	sub	sp, #112	; 0x70
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d172      	bne.n	8004504 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800441e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004420:	2200      	movs	r2, #0
 8004422:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800443a:	66bb      	str	r3, [r7, #104]	; 0x68
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004444:	65ba      	str	r2, [r7, #88]	; 0x58
 8004446:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800444a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3314      	adds	r3, #20
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	667b      	str	r3, [r7, #100]	; 0x64
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004478:	647a      	str	r2, [r7, #68]	; 0x44
 800447a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800447e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	623b      	str	r3, [r7, #32]
   return(result);
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a2:	663b      	str	r3, [r7, #96]	; 0x60
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ac:	633a      	str	r2, [r7, #48]	; 0x30
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d119      	bne.n	8004504 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044f0:	61fa      	str	r2, [r7, #28]
 80044f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	617b      	str	r3, [r7, #20]
   return(result);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004510:	4619      	mov	r1, r3
 8004512:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004514:	f7ff ff69 	bl	80043ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004518:	e002      	b.n	8004520 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800451a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800451c:	f7ff ff47 	bl	80043ae <HAL_UART_RxCpltCallback>
}
 8004520:	bf00      	nop
 8004522:	3770      	adds	r7, #112	; 0x70
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	2b01      	cmp	r3, #1
 800453c:	d108      	bne.n	8004550 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	b29b      	uxth	r3, r3
 8004546:	4619      	mov	r1, r3
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff ff4e 	bl	80043ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800454e:	e002      	b.n	8004556 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ff36 	bl	80043c2 <HAL_UART_RxHalfCpltCallback>
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b21      	cmp	r3, #33	; 0x21
 8004590:	d108      	bne.n	80045a4 <UART_DMAError+0x46>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f000 f934 	bl	800480c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b22      	cmp	r3, #34	; 0x22
 80045c4:	d108      	bne.n	80045d8 <UART_DMAError+0x7a>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f000 f942 	bl	800485c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0210 	orr.w	r2, r3, #16
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045e4:	68b8      	ldr	r0, [r7, #8]
 80045e6:	f7ff fef6 	bl	80043d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b090      	sub	sp, #64	; 0x40
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	4613      	mov	r3, r2
 8004600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004602:	e050      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d04c      	beq.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800460c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x30>
 8004612:	f7fd f8ff 	bl	8001814 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461e:	429a      	cmp	r2, r3
 8004620:	d241      	bcs.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004642:	637a      	str	r2, [r7, #52]	; 0x34
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	63bb      	str	r3, [r7, #56]	; 0x38
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004676:	623a      	str	r2, [r7, #32]
 8004678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	69f9      	ldr	r1, [r7, #28]
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	61bb      	str	r3, [r7, #24]
   return(result);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e00f      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d09f      	beq.n	8004604 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3740      	adds	r7, #64	; 0x40
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b098      	sub	sp, #96	; 0x60
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2222      	movs	r2, #34	; 0x22
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	4a40      	ldr	r2, [pc, #256]	; (8004800 <UART_Start_Receive_DMA+0x130>)
 80046fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	4a3f      	ldr	r2, [pc, #252]	; (8004804 <UART_Start_Receive_DMA+0x134>)
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	4a3e      	ldr	r2, [pc, #248]	; (8004808 <UART_Start_Receive_DMA+0x138>)
 800470e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	2200      	movs	r2, #0
 8004716:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004718:	f107 0308 	add.w	r3, r7, #8
 800471c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	f7fd fc9e 	bl	8002070 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d019      	beq.n	800478e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800476a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	65bb      	str	r3, [r7, #88]	; 0x58
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800477a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	657b      	str	r3, [r7, #84]	; 0x54
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e5      	bne.n	800478e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	617b      	str	r3, [r7, #20]
   return(result);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d8:	653b      	str	r3, [r7, #80]	; 0x50
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047e2:	627a      	str	r2, [r7, #36]	; 0x24
 80047e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6a39      	ldr	r1, [r7, #32]
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e5      	bne.n	80047c2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3760      	adds	r7, #96	; 0x60
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08004403 	.word	0x08004403
 8004804:	08004529 	.word	0x08004529
 8004808:	0800455f 	.word	0x0800455f

0800480c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60bb      	str	r3, [r7, #8]
   return(result);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	61ba      	str	r2, [r7, #24]
 8004836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6979      	ldr	r1, [r7, #20]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	613b      	str	r3, [r7, #16]
   return(result);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004850:	bf00      	nop
 8004852:	3724      	adds	r7, #36	; 0x24
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b095      	sub	sp, #84	; 0x54
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800487a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004884:	643a      	str	r2, [r7, #64]	; 0x40
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800488a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3314      	adds	r3, #20
 80048b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d119      	bne.n	8004908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	647b      	str	r3, [r7, #68]	; 0x44
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f4:	61ba      	str	r2, [r7, #24]
 80048f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6979      	ldr	r1, [r7, #20]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	613b      	str	r3, [r7, #16]
   return(result);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004916:	bf00      	nop
 8004918:	3754      	adds	r7, #84	; 0x54
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b0c0      	sub	sp, #256	; 0x100
 800492a:	af00      	add	r7, sp, #0
 800492c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	ea40 0301 	orr.w	r3, r0, r1
 800494c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800497c:	f021 010c 	bic.w	r1, r1, #12
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800498a:	430b      	orrs	r3, r1
 800498c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	6999      	ldr	r1, [r3, #24]
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	ea40 0301 	orr.w	r3, r0, r1
 80049aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b8f      	ldr	r3, [pc, #572]	; (8004bf0 <UART_SetConfig+0x2cc>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d005      	beq.n	80049c4 <UART_SetConfig+0xa0>
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b8d      	ldr	r3, [pc, #564]	; (8004bf4 <UART_SetConfig+0x2d0>)
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d104      	bne.n	80049ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7fe fd54 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
 80049c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049cc:	e003      	b.n	80049d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ce:	f7fe fd3b 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 80049d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e0:	f040 810c 	bne.w	8004bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049f6:	4622      	mov	r2, r4
 80049f8:	462b      	mov	r3, r5
 80049fa:	1891      	adds	r1, r2, r2
 80049fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80049fe:	415b      	adcs	r3, r3
 8004a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a06:	4621      	mov	r1, r4
 8004a08:	eb12 0801 	adds.w	r8, r2, r1
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb43 0901 	adc.w	r9, r3, r1
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a26:	4690      	mov	r8, r2
 8004a28:	4699      	mov	r9, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	eb18 0303 	adds.w	r3, r8, r3
 8004a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a34:	462b      	mov	r3, r5
 8004a36:	eb49 0303 	adc.w	r3, r9, r3
 8004a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a52:	460b      	mov	r3, r1
 8004a54:	18db      	adds	r3, r3, r3
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
 8004a58:	4613      	mov	r3, r2
 8004a5a:	eb42 0303 	adc.w	r3, r2, r3
 8004a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a68:	f7fb fc0a 	bl	8000280 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004a72:	fba3 2302 	umull	r2, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	011c      	lsls	r4, r3, #4
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a94:	415b      	adcs	r3, r3
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004abc:	4692      	mov	sl, r2
 8004abe:	469b      	mov	fp, r3
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	18db      	adds	r3, r3, r3
 8004aec:	643b      	str	r3, [r7, #64]	; 0x40
 8004aee:	4613      	mov	r3, r2
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	647b      	str	r3, [r7, #68]	; 0x44
 8004af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004afe:	f7fb fbbf 	bl	8000280 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2264      	movs	r2, #100	; 0x64
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	1acb      	subs	r3, r1, r3
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b1e:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004b20:	fba3 2302 	umull	r2, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b2c:	441c      	add	r4, r3
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6339      	str	r1, [r7, #48]	; 0x30
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	18db      	adds	r3, r3, r3
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004baa:	4613      	mov	r3, r2
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bba:	f7fb fb61 	bl	8000280 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2164      	movs	r1, #100	; 0x64
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	3332      	adds	r3, #50	; 0x32
 8004bd6:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 0207 	and.w	r2, r3, #7
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4422      	add	r2, r4
 8004bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bec:	e105      	b.n	8004dfa <UART_SetConfig+0x4d6>
 8004bee:	bf00      	nop
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	40011400 	.word	0x40011400
 8004bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c0e:	4642      	mov	r2, r8
 8004c10:	464b      	mov	r3, r9
 8004c12:	1891      	adds	r1, r2, r2
 8004c14:	6239      	str	r1, [r7, #32]
 8004c16:	415b      	adcs	r3, r3
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1e:	4641      	mov	r1, r8
 8004c20:	1854      	adds	r4, r2, r1
 8004c22:	4649      	mov	r1, r9
 8004c24:	eb43 0501 	adc.w	r5, r3, r1
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	00eb      	lsls	r3, r5, #3
 8004c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c44:	464b      	mov	r3, r9
 8004c46:	eb45 0303 	adc.w	r3, r5, r3
 8004c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	008b      	lsls	r3, r1, #2
 8004c6e:	4621      	mov	r1, r4
 8004c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c74:	4621      	mov	r1, r4
 8004c76:	008a      	lsls	r2, r1, #2
 8004c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c7c:	f7fb fb00 	bl	8000280 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4b60      	ldr	r3, [pc, #384]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004c86:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	011c      	lsls	r4, r3, #4
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	61b9      	str	r1, [r7, #24]
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6139      	str	r1, [r7, #16]
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d08:	4649      	mov	r1, r9
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d12:	4641      	mov	r1, r8
 8004d14:	008a      	lsls	r2, r1, #2
 8004d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d1a:	f7fb fab1 	bl	8000280 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d42:	441c      	add	r4, r3
 8004d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d48:	2200      	movs	r2, #0
 8004d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d4c:	677a      	str	r2, [r7, #116]	; 0x74
 8004d4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d52:	4642      	mov	r2, r8
 8004d54:	464b      	mov	r3, r9
 8004d56:	1891      	adds	r1, r2, r2
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	415b      	adcs	r3, r3
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d62:	4641      	mov	r1, r8
 8004d64:	1851      	adds	r1, r2, r1
 8004d66:	6039      	str	r1, [r7, #0]
 8004d68:	4649      	mov	r1, r9
 8004d6a:	414b      	adcs	r3, r1
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	00cb      	lsls	r3, r1, #3
 8004d7e:	4651      	mov	r1, sl
 8004d80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d84:	4651      	mov	r1, sl
 8004d86:	00ca      	lsls	r2, r1, #3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4642      	mov	r2, r8
 8004d90:	189b      	adds	r3, r3, r2
 8004d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d94:	464b      	mov	r3, r9
 8004d96:	460a      	mov	r2, r1
 8004d98:	eb42 0303 	adc.w	r3, r2, r3
 8004d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	663b      	str	r3, [r7, #96]	; 0x60
 8004da8:	667a      	str	r2, [r7, #100]	; 0x64
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004db6:	4649      	mov	r1, r9
 8004db8:	008b      	lsls	r3, r1, #2
 8004dba:	4641      	mov	r1, r8
 8004dbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	008a      	lsls	r2, r1, #2
 8004dc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dc8:	f7fb fa5a 	bl	8000280 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2164      	movs	r1, #100	; 0x64
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	3332      	adds	r3, #50	; 0x32
 8004de4:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4422      	add	r2, r4
 8004df8:	609a      	str	r2, [r3, #8]
}
 8004dfa:	bf00      	nop
 8004dfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e00:	46bd      	mov	sp, r7
 8004e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e06:	bf00      	nop
 8004e08:	51eb851f 	.word	0x51eb851f

08004e0c <__NVIC_SetPriority>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db0a      	blt.n	8004e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	490c      	ldr	r1, [pc, #48]	; (8004e58 <__NVIC_SetPriority+0x4c>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e34:	e00a      	b.n	8004e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4908      	ldr	r1, [pc, #32]	; (8004e5c <__NVIC_SetPriority+0x50>)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	3b04      	subs	r3, #4
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	440b      	add	r3, r1
 8004e4a:	761a      	strb	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000e100 	.word	0xe000e100
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e64:	2100      	movs	r1, #0
 8004e66:	f06f 0004 	mvn.w	r0, #4
 8004e6a:	f7ff ffcf 	bl	8004e0c <__NVIC_SetPriority>
#endif
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e7a:	f3ef 8305 	mrs	r3, IPSR
 8004e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e86:	f06f 0305 	mvn.w	r3, #5
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	e00c      	b.n	8004ea8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <osKernelInitialize+0x44>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <osKernelInitialize+0x44>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	e002      	b.n	8004ea8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ea8:	687b      	ldr	r3, [r7, #4]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	200003c8 	.word	0x200003c8

08004ebc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec2:	f3ef 8305 	mrs	r3, IPSR
 8004ec6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ec8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ece:	f06f 0305 	mvn.w	r3, #5
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	e010      	b.n	8004ef8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <osKernelStart+0x48>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d109      	bne.n	8004ef2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ede:	f7ff ffbf 	bl	8004e60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <osKernelStart+0x48>)
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ee8:	f001 fb9e 	bl	8006628 <vTaskStartScheduler>
      stat = osOK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	e002      	b.n	8004ef8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ef8:	687b      	ldr	r3, [r7, #4]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200003c8 	.word	0x200003c8

08004f08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08e      	sub	sp, #56	; 0x38
 8004f0c:	af04      	add	r7, sp, #16
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f18:	f3ef 8305 	mrs	r3, IPSR
 8004f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d17e      	bne.n	8005022 <osThreadNew+0x11a>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d07b      	beq.n	8005022 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f2a:	2380      	movs	r3, #128	; 0x80
 8004f2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f2e:	2318      	movs	r3, #24
 8004f30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d045      	beq.n	8004fce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <osThreadNew+0x48>
        name = attr->name;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <osThreadNew+0x6e>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b38      	cmp	r3, #56	; 0x38
 8004f68:	d805      	bhi.n	8004f76 <osThreadNew+0x6e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <osThreadNew+0x72>
        return (NULL);
 8004f76:	2300      	movs	r3, #0
 8004f78:	e054      	b.n	8005024 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <osThreadNew+0xa8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2bbb      	cmp	r3, #187	; 0xbb
 8004f98:	d90a      	bls.n	8004fb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <osThreadNew+0xa8>
        mem = 1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e010      	b.n	8004fd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10c      	bne.n	8004fd2 <osThreadNew+0xca>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <osThreadNew+0xca>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <osThreadNew+0xca>
          mem = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e001      	b.n	8004fd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d110      	bne.n	8004ffa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fe0:	9202      	str	r2, [sp, #8]
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	6a3a      	ldr	r2, [r7, #32]
 8004fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f001 f92e 	bl	8006250 <xTaskCreateStatic>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e013      	b.n	8005022 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	b29a      	uxth	r2, r3
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f001 f979 	bl	800630a <xTaskCreate>
 8005018:	4603      	mov	r3, r0
 800501a:	2b01      	cmp	r3, #1
 800501c:	d001      	beq.n	8005022 <osThreadNew+0x11a>
            hTask = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005022:	693b      	ldr	r3, [r7, #16]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3728      	adds	r7, #40	; 0x28
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005034:	f3ef 8305 	mrs	r3, IPSR
 8005038:	60bb      	str	r3, [r7, #8]
  return(result);
 800503a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <osDelay+0x1c>
    stat = osErrorISR;
 8005040:	f06f 0305 	mvn.w	r3, #5
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e007      	b.n	8005058 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 fab4 	bl	80065c0 <vTaskDelay>
    }
  }

  return (stat);
 8005058:	68fb      	ldr	r3, [r7, #12]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005062:	b580      	push	{r7, lr}
 8005064:	b088      	sub	sp, #32
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506e:	f3ef 8305 	mrs	r3, IPSR
 8005072:	60bb      	str	r3, [r7, #8]
  return(result);
 8005074:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005076:	2b00      	cmp	r3, #0
 8005078:	d174      	bne.n	8005164 <osMutexNew+0x102>
    if (attr != NULL) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e001      	b.n	800508c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <osMutexNew+0x3a>
      rmtx = 1U;
 8005096:	2301      	movs	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e001      	b.n	80050a0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d15c      	bne.n	8005164 <osMutexNew+0x102>
      mem = -1;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
 80050ae:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d015      	beq.n	80050e2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <osMutexNew+0x6a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b4f      	cmp	r3, #79	; 0x4f
 80050c4:	d902      	bls.n	80050cc <osMutexNew+0x6a>
          mem = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e00c      	b.n	80050e6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d108      	bne.n	80050e6 <osMutexNew+0x84>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <osMutexNew+0x84>
            mem = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	e001      	b.n	80050e6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d112      	bne.n	8005112 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4619      	mov	r1, r3
 80050f8:	2004      	movs	r0, #4
 80050fa:	f000 fb18 	bl	800572e <xQueueCreateMutexStatic>
 80050fe:	61f8      	str	r0, [r7, #28]
 8005100:	e016      	b.n	8005130 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	4619      	mov	r1, r3
 8005108:	2001      	movs	r0, #1
 800510a:	f000 fb10 	bl	800572e <xQueueCreateMutexStatic>
 800510e:	61f8      	str	r0, [r7, #28]
 8005110:	e00e      	b.n	8005130 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800511e:	2004      	movs	r0, #4
 8005120:	f000 faed 	bl	80056fe <xQueueCreateMutex>
 8005124:	61f8      	str	r0, [r7, #28]
 8005126:	e003      	b.n	8005130 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005128:	2001      	movs	r0, #1
 800512a:	f000 fae8 	bl	80056fe <xQueueCreateMutex>
 800512e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00c      	beq.n	8005150 <osMutexNew+0xee>
        if (attr != NULL) {
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <osMutexNew+0xe2>
          name = attr->name;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e001      	b.n	8005148 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	69f8      	ldr	r0, [r7, #28]
 800514c:	f001 f822 	bl	8006194 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <osMutexNew+0x102>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800518c:	f3ef 8305 	mrs	r3, IPSR
 8005190:	60bb      	str	r3, [r7, #8]
  return(result);
 8005192:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005198:	f06f 0305 	mvn.w	r3, #5
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e02c      	b.n	80051fa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80051a6:	f06f 0303 	mvn.w	r3, #3
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e025      	b.n	80051fa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d011      	beq.n	80051d8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f000 fb08 	bl	80057cc <xQueueTakeMutexRecursive>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d01b      	beq.n	80051fa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80051c8:	f06f 0301 	mvn.w	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e014      	b.n	80051fa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80051d0:	f06f 0302 	mvn.w	r3, #2
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e010      	b.n	80051fa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6938      	ldr	r0, [r7, #16]
 80051dc:	f000 fda6 	bl	8005d2c <xQueueSemaphoreTake>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d009      	beq.n	80051fa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80051ec:	f06f 0301 	mvn.w	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e002      	b.n	80051fa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80051f4:	f06f 0302 	mvn.w	r3, #2
 80051f8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80051fa:	697b      	ldr	r3, [r7, #20]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005220:	f3ef 8305 	mrs	r3, IPSR
 8005224:	60bb      	str	r3, [r7, #8]
  return(result);
 8005226:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <osMutexRelease+0x30>
    stat = osErrorISR;
 800522c:	f06f 0305 	mvn.w	r3, #5
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e01f      	b.n	8005274 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800523a:	f06f 0303 	mvn.w	r3, #3
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e018      	b.n	8005274 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005248:	6938      	ldr	r0, [r7, #16]
 800524a:	f000 fa8b 	bl	8005764 <xQueueGiveMutexRecursive>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d00f      	beq.n	8005274 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005254:	f06f 0302 	mvn.w	r3, #2
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e00b      	b.n	8005274 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800525c:	2300      	movs	r3, #0
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	6938      	ldr	r0, [r7, #16]
 8005264:	f000 fae8 	bl	8005838 <xQueueGenericSend>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d002      	beq.n	8005274 <osMutexRelease+0x70>
        stat = osErrorResource;
 800526e:	f06f 0302 	mvn.w	r3, #2
 8005272:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005274:	697b      	ldr	r3, [r7, #20]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a07      	ldr	r2, [pc, #28]	; (80052ac <vApplicationGetIdleTaskMemory+0x2c>)
 8005290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4a06      	ldr	r2, [pc, #24]	; (80052b0 <vApplicationGetIdleTaskMemory+0x30>)
 8005296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	601a      	str	r2, [r3, #0]
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	200003cc 	.word	0x200003cc
 80052b0:	20000488 	.word	0x20000488

080052b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a07      	ldr	r2, [pc, #28]	; (80052e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80052c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <vApplicationGetTimerTaskMemory+0x30>)
 80052ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20000688 	.word	0x20000688
 80052e4:	20000744 	.word	0x20000744

080052e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f103 0208 	add.w	r2, r3, #8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005300:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f103 0208 	add.w	r2, r3, #8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f103 0208 	add.w	r2, r3, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d103      	bne.n	80053aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e00c      	b.n	80053c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3308      	adds	r3, #8
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e002      	b.n	80053b8 <vListInsert+0x2e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d2f6      	bcs.n	80053b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6892      	ldr	r2, [r2, #8]
 8005412:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6852      	ldr	r2, [r2, #4]
 800541c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d103      	bne.n	8005430 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	1e5a      	subs	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800547a:	f002 fb9b 	bl	8007bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	3b01      	subs	r3, #1
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d114      	bne.n	80054fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01a      	beq.n	800550e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fb3d 	bl	8006b5c <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <xQueueGenericReset+0xcc>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	e009      	b.n	800550e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3310      	adds	r3, #16
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fef2 	bl	80052e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff feed 	bl	80052e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800550e:	f002 fb81 	bl	8007c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <xQueueGenericCreateStatic+0x52>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <xQueueGenericCreateStatic+0x56>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueGenericCreateStatic+0x58>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	623b      	str	r3, [r7, #32]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <xQueueGenericCreateStatic+0x7e>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <xQueueGenericCreateStatic+0x82>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueGenericCreateStatic+0x84>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61fb      	str	r3, [r7, #28]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055be:	2350      	movs	r3, #80	; 0x50
 80055c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b50      	cmp	r3, #80	; 0x50
 80055c6:	d00a      	beq.n	80055de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	61bb      	str	r3, [r7, #24]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f83f 	bl	8005684 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005608:	4618      	mov	r0, r3
 800560a:	3730      	adds	r7, #48	; 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	613b      	str	r3, [r7, #16]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	3350      	adds	r3, #80	; 0x50
 8005648:	4618      	mov	r0, r3
 800564a:	f002 fbd5 	bl	8007df8 <pvPortMalloc>
 800564e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d011      	beq.n	800567a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	3350      	adds	r3, #80	; 0x50
 800565e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005668:	79fa      	ldrb	r2, [r7, #7]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f805 	bl	8005684 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800567a:	69bb      	ldr	r3, [r7, #24]
	}
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e002      	b.n	80056a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056b2:	2101      	movs	r1, #1
 80056b4:	69b8      	ldr	r0, [r7, #24]
 80056b6:	f7ff fecb 	bl	8005450 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80056ea:	2300      	movs	r3, #0
 80056ec:	2200      	movs	r2, #0
 80056ee:	2100      	movs	r1, #0
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f8a1 	bl	8005838 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b086      	sub	sp, #24
 8005702:	af00      	add	r7, sp, #0
 8005704:	4603      	mov	r3, r0
 8005706:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	461a      	mov	r2, r3
 8005714:	6939      	ldr	r1, [r7, #16]
 8005716:	6978      	ldr	r0, [r7, #20]
 8005718:	f7ff ff7a 	bl	8005610 <xQueueGenericCreate>
 800571c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff ffd3 	bl	80056ca <prvInitialiseMutex>

		return xNewQueue;
 8005724:	68fb      	ldr	r3, [r7, #12]
	}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800572e:	b580      	push	{r7, lr}
 8005730:	b088      	sub	sp, #32
 8005732:	af02      	add	r7, sp, #8
 8005734:	4603      	mov	r3, r0
 8005736:	6039      	str	r1, [r7, #0]
 8005738:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800573a:	2301      	movs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	2300      	movs	r3, #0
 8005740:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2200      	movs	r2, #0
 800574a:	6939      	ldr	r1, [r7, #16]
 800574c:	6978      	ldr	r0, [r7, #20]
 800574e:	f7ff fee7 	bl	8005520 <xQueueGenericCreateStatic>
 8005752:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ffb8 	bl	80056ca <prvInitialiseMutex>

		return xNewQueue;
 800575a:	68fb      	ldr	r3, [r7, #12]
	}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	60fb      	str	r3, [r7, #12]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	689c      	ldr	r4, [r3, #8]
 8005790:	f001 fba6 	bl	8006ee0 <xTaskGetCurrentTaskHandle>
 8005794:	4603      	mov	r3, r0
 8005796:	429c      	cmp	r4, r3
 8005798:	d111      	bne.n	80057be <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	1e5a      	subs	r2, r3, #1
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80057ac:	2300      	movs	r3, #0
 80057ae:	2200      	movs	r2, #0
 80057b0:	2100      	movs	r1, #0
 80057b2:	6938      	ldr	r0, [r7, #16]
 80057b4:	f000 f840 	bl	8005838 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e001      	b.n	80057c2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80057c2:	697b      	ldr	r3, [r7, #20]
	}
 80057c4:	4618      	mov	r0, r3
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}

080057cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60fb      	str	r3, [r7, #12]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	689c      	ldr	r4, [r3, #8]
 80057fa:	f001 fb71 	bl	8006ee0 <xTaskGetCurrentTaskHandle>
 80057fe:	4603      	mov	r3, r0
 8005800:	429c      	cmp	r4, r3
 8005802:	d107      	bne.n	8005814 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800580e:	2301      	movs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e00c      	b.n	800582e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6938      	ldr	r0, [r7, #16]
 8005818:	f000 fa88 	bl	8005d2c <xQueueSemaphoreTake>
 800581c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800582e:	697b      	ldr	r3, [r7, #20]
	}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	bd90      	pop	{r4, r7, pc}

08005838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005846:	2300      	movs	r3, #0
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueGenericSend+0x32>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <xQueueGenericSend+0x40>
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <xQueueGenericSend+0x44>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <xQueueGenericSend+0x46>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <xQueueGenericSend+0x60>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d103      	bne.n	80058a6 <xQueueGenericSend+0x6e>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <xQueueGenericSend+0x72>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <xQueueGenericSend+0x74>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	623b      	str	r3, [r7, #32]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c6:	f001 fb1b 	bl	8006f00 <xTaskGetSchedulerState>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <xQueueGenericSend+0x9e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <xQueueGenericSend+0xa2>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericSend+0xa4>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61fb      	str	r3, [r7, #28]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058f6:	f002 f95d 	bl	8007bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <xQueueGenericSend+0xd4>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d129      	bne.n	8005960 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005912:	f000 fb2f 	bl	8005f74 <prvCopyDataToQueue>
 8005916:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	3324      	adds	r3, #36	; 0x24
 8005924:	4618      	mov	r0, r3
 8005926:	f001 f919 	bl	8006b5c <xTaskRemoveFromEventList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d013      	beq.n	8005958 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005930:	4b3f      	ldr	r3, [pc, #252]	; (8005a30 <xQueueGenericSend+0x1f8>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	e00a      	b.n	8005958 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005948:	4b39      	ldr	r3, [pc, #228]	; (8005a30 <xQueueGenericSend+0x1f8>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005958:	f002 f95c 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 800595c:	2301      	movs	r3, #1
 800595e:	e063      	b.n	8005a28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005966:	f002 f955 	bl	8007c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800596a:	2300      	movs	r3, #0
 800596c:	e05c      	b.n	8005a28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005974:	f107 0314 	add.w	r3, r7, #20
 8005978:	4618      	mov	r0, r3
 800597a:	f001 f953 	bl	8006c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800597e:	2301      	movs	r3, #1
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005982:	f002 f947 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005986:	f000 febf 	bl	8006708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800598a:	f002 f913 	bl	8007bb4 <vPortEnterCritical>
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005994:	b25b      	sxtb	r3, r3
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d103      	bne.n	80059a4 <xQueueGenericSend+0x16c>
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059aa:	b25b      	sxtb	r3, r3
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d103      	bne.n	80059ba <xQueueGenericSend+0x182>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ba:	f002 f92b 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059be:	1d3a      	adds	r2, r7, #4
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 f942 	bl	8006c50 <xTaskCheckForTimeOut>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d124      	bne.n	8005a1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d4:	f000 fbc6 	bl	8006164 <prvIsQueueFull>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d018      	beq.n	8005a10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	3310      	adds	r3, #16
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 f868 	bl	8006abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ee:	f000 fb51 	bl	8006094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059f2:	f000 fe97 	bl	8006724 <xTaskResumeAll>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f47f af7c 	bne.w	80058f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <xQueueGenericSend+0x1f8>)
 8005a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	e772      	b.n	80058f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a12:	f000 fb3f 	bl	8006094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a16:	f000 fe85 	bl	8006724 <xTaskResumeAll>
 8005a1a:	e76c      	b.n	80058f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1e:	f000 fb39 	bl	8006094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a22:	f000 fe7f 	bl	8006724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3738      	adds	r7, #56	; 0x38
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b090      	sub	sp, #64	; 0x40
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d103      	bne.n	8005a70 <xQueueGenericSendFromISR+0x3c>
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <xQueueGenericSendFromISR+0x40>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <xQueueGenericSendFromISR+0x42>
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a8c:	bf00      	nop
 8005a8e:	e7fe      	b.n	8005a8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d103      	bne.n	8005a9e <xQueueGenericSendFromISR+0x6a>
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <xQueueGenericSendFromISR+0x6e>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueGenericSendFromISR+0x70>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	623b      	str	r3, [r7, #32]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005abe:	f002 f95b 	bl	8007d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ada:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <xQueueGenericSendFromISR+0xbc>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d12f      	bne.n	8005b50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b06:	f000 fa35 	bl	8005f74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d112      	bne.n	8005b3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d016      	beq.n	8005b4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	3324      	adds	r3, #36	; 0x24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 f81b 	bl	8006b5c <xTaskRemoveFromEventList>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00e      	beq.n	8005b4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e007      	b.n	8005b4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b3e:	3301      	adds	r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	b25a      	sxtb	r2, r3
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b4e:	e001      	b.n	8005b54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3740      	adds	r7, #64	; 0x40
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <xQueueReceive+0x30>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	623b      	str	r3, [r7, #32]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <xQueueReceive+0x3e>
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <xQueueReceive+0x42>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <xQueueReceive+0x44>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xQueueReceive+0x5e>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	61fb      	str	r3, [r7, #28]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bca:	f001 f999 	bl	8006f00 <xTaskGetSchedulerState>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <xQueueReceive+0x6e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <xQueueReceive+0x72>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <xQueueReceive+0x74>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xQueueReceive+0x8e>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	61bb      	str	r3, [r7, #24]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bfa:	f001 ffdb 	bl	8007bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01f      	beq.n	8005c4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0e:	f000 fa1b 	bl	8006048 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	1e5a      	subs	r2, r3, #1
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00f      	beq.n	8005c42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	3310      	adds	r3, #16
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 ff98 	bl	8006b5c <xTaskRemoveFromEventList>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c32:	4b3d      	ldr	r3, [pc, #244]	; (8005d28 <xQueueReceive+0x1bc>)
 8005c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c42:	f001 ffe7 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e069      	b.n	8005d1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c50:	f001 ffe0 	bl	8007c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e062      	b.n	8005d1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c5e:	f107 0310 	add.w	r3, r7, #16
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 ffde 	bl	8006c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c6c:	f001 ffd2 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c70:	f000 fd4a 	bl	8006708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c74:	f001 ff9e 	bl	8007bb4 <vPortEnterCritical>
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d103      	bne.n	8005c8e <xQueueReceive+0x122>
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c94:	b25b      	sxtb	r3, r3
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d103      	bne.n	8005ca4 <xQueueReceive+0x138>
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca4:	f001 ffb6 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ca8:	1d3a      	adds	r2, r7, #4
 8005caa:	f107 0310 	add.w	r3, r7, #16
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 ffcd 	bl	8006c50 <xTaskCheckForTimeOut>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d123      	bne.n	8005d04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbe:	f000 fa3b 	bl	8006138 <prvIsQueueEmpty>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d017      	beq.n	8005cf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	3324      	adds	r3, #36	; 0x24
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fef3 	bl	8006abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd8:	f000 f9dc 	bl	8006094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cdc:	f000 fd22 	bl	8006724 <xTaskResumeAll>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d189      	bne.n	8005bfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <xQueueReceive+0x1bc>)
 8005ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	e780      	b.n	8005bfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfa:	f000 f9cb 	bl	8006094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cfe:	f000 fd11 	bl	8006724 <xTaskResumeAll>
 8005d02:	e77a      	b.n	8005bfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d06:	f000 f9c5 	bl	8006094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d0a:	f000 fd0b 	bl	8006724 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d10:	f000 fa12 	bl	8006138 <prvIsQueueEmpty>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f43f af6f 	beq.w	8005bfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3730      	adds	r7, #48	; 0x30
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	623b      	str	r3, [r7, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	61fb      	str	r3, [r7, #28]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d7c:	f001 f8c0 	bl	8006f00 <xTaskGetSchedulerState>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <xQueueSemaphoreTake+0x60>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <xQueueSemaphoreTake+0x64>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <xQueueSemaphoreTake+0x66>
 8005d90:	2300      	movs	r3, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	61bb      	str	r3, [r7, #24]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dac:	f001 ff02 	bl	8007bb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d024      	beq.n	8005e06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005dcc:	f001 fa0e 	bl	80071ec <pvTaskIncrementMutexHeldCount>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00f      	beq.n	8005dfe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	3310      	adds	r3, #16
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 feba 	bl	8006b5c <xTaskRemoveFromEventList>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dee:	4b54      	ldr	r3, [pc, #336]	; (8005f40 <xQueueSemaphoreTake+0x214>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dfe:	f001 ff09 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e097      	b.n	8005f36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d111      	bne.n	8005e30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	617b      	str	r3, [r7, #20]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e28:	f001 fef4 	bl	8007c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e082      	b.n	8005f36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e36:	f107 030c 	add.w	r3, r7, #12
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fef2 	bl	8006c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e44:	f001 fee6 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e48:	f000 fc5e 	bl	8006708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e4c:	f001 feb2 	bl	8007bb4 <vPortEnterCritical>
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d103      	bne.n	8005e66 <xQueueSemaphoreTake+0x13a>
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d103      	bne.n	8005e7c <xQueueSemaphoreTake+0x150>
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e7c:	f001 feca 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e80:	463a      	mov	r2, r7
 8005e82:	f107 030c 	add.w	r3, r7, #12
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fee1 	bl	8006c50 <xTaskCheckForTimeOut>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d132      	bne.n	8005efa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e96:	f000 f94f 	bl	8006138 <prvIsQueueEmpty>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d026      	beq.n	8005eee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d109      	bne.n	8005ebc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005ea8:	f001 fe84 	bl	8007bb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 f843 	bl	8006f3c <xTaskPriorityInherit>
 8005eb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005eb8:	f001 feac 	bl	8007c14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	3324      	adds	r3, #36	; 0x24
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fdf9 	bl	8006abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ecc:	f000 f8e2 	bl	8006094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ed0:	f000 fc28 	bl	8006724 <xTaskResumeAll>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f47f af68 	bne.w	8005dac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005edc:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <xQueueSemaphoreTake+0x214>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	e75e      	b.n	8005dac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ef0:	f000 f8d0 	bl	8006094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ef4:	f000 fc16 	bl	8006724 <xTaskResumeAll>
 8005ef8:	e758      	b.n	8005dac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005efa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005efc:	f000 f8ca 	bl	8006094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f00:	f000 fc10 	bl	8006724 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f06:	f000 f917 	bl	8006138 <prvIsQueueEmpty>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f43f af4d 	beq.w	8005dac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00d      	beq.n	8005f34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005f18:	f001 fe4c 	bl	8007bb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f1e:	f000 f811 	bl	8005f44 <prvGetDisinheritPriorityAfterTimeout>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 f8dc 	bl	80070e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f30:	f001 fe70 	bl	8007c14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3738      	adds	r7, #56	; 0x38
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e001      	b.n	8005f66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f66:	68fb      	ldr	r3, [r7, #12]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d14d      	bne.n	8006036 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 f834 	bl	800700c <xTaskPriorityDisinherit>
 8005fa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	e043      	b.n	8006036 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d119      	bne.n	8005fe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6858      	ldr	r0, [r3, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	f002 fa27 	bl	8008412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d32b      	bcc.n	8006036 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	605a      	str	r2, [r3, #4]
 8005fe6:	e026      	b.n	8006036 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68d8      	ldr	r0, [r3, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	f002 fa0d 	bl	8008412 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	425b      	negs	r3, r3
 8006002:	441a      	add	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d207      	bcs.n	8006024 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	425b      	negs	r3, r3
 800601e:	441a      	add	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d105      	bne.n	8006036 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3b01      	subs	r3, #1
 8006034:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800603e:	697b      	ldr	r3, [r7, #20]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	441a      	add	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	d303      	bcc.n	800607c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68d9      	ldr	r1, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	461a      	mov	r2, r3
 8006086:	6838      	ldr	r0, [r7, #0]
 8006088:	f002 f9c3 	bl	8008412 <memcpy>
	}
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800609c:	f001 fd8a 	bl	8007bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060a8:	e011      	b.n	80060ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d012      	beq.n	80060d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3324      	adds	r3, #36	; 0x24
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fd50 	bl	8006b5c <xTaskRemoveFromEventList>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060c2:	f000 fe27 	bl	8006d14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dce9      	bgt.n	80060aa <prvUnlockQueue+0x16>
 80060d6:	e000      	b.n	80060da <prvUnlockQueue+0x46>
					break;
 80060d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	22ff      	movs	r2, #255	; 0xff
 80060de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060e2:	f001 fd97 	bl	8007c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060e6:	f001 fd65 	bl	8007bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060f2:	e011      	b.n	8006118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d012      	beq.n	8006122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3310      	adds	r3, #16
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fd2b 	bl	8006b5c <xTaskRemoveFromEventList>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800610c:	f000 fe02 	bl	8006d14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	3b01      	subs	r3, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800611c:	2b00      	cmp	r3, #0
 800611e:	dce9      	bgt.n	80060f4 <prvUnlockQueue+0x60>
 8006120:	e000      	b.n	8006124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800612c:	f001 fd72 	bl	8007c14 <vPortExitCritical>
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006140:	f001 fd38 	bl	8007bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800614c:	2301      	movs	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e001      	b.n	8006156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006156:	f001 fd5d 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 800615a:	68fb      	ldr	r3, [r7, #12]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800616c:	f001 fd22 	bl	8007bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	429a      	cmp	r2, r3
 800617a:	d102      	bne.n	8006182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e001      	b.n	8006186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006186:	f001 fd45 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 800618a:	68fb      	ldr	r3, [r7, #12]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	e014      	b.n	80061ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061a4:	4a0f      	ldr	r2, [pc, #60]	; (80061e4 <vQueueAddToRegistry+0x50>)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10b      	bne.n	80061c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061b0:	490c      	ldr	r1, [pc, #48]	; (80061e4 <vQueueAddToRegistry+0x50>)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061ba:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <vQueueAddToRegistry+0x50>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	4413      	add	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061c6:	e006      	b.n	80061d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b07      	cmp	r3, #7
 80061d2:	d9e7      	bls.n	80061a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000b44 	.word	0x20000b44

080061e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061f8:	f001 fcdc 	bl	8007bb4 <vPortEnterCritical>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006202:	b25b      	sxtb	r3, r3
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d103      	bne.n	8006212 <vQueueWaitForMessageRestricted+0x2a>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006218:	b25b      	sxtb	r3, r3
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d103      	bne.n	8006228 <vQueueWaitForMessageRestricted+0x40>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006228:	f001 fcf4 	bl	8007c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fc61 	bl	8006b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f7ff ff26 	bl	8006094 <prvUnlockQueue>
	}
 8006248:	bf00      	nop
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	; 0x38
 8006254:	af04      	add	r7, sp, #16
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <xTaskCreateStatic+0x46>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	61fb      	str	r3, [r7, #28]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006296:	23bc      	movs	r3, #188	; 0xbc
 8006298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2bbc      	cmp	r3, #188	; 0xbc
 800629e:	d00a      	beq.n	80062b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	61bb      	str	r3, [r7, #24]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01e      	beq.n	80062fc <xTaskCreateStatic+0xac>
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01b      	beq.n	80062fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062d6:	2300      	movs	r3, #0
 80062d8:	9303      	str	r3, [sp, #12]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	9302      	str	r3, [sp, #8]
 80062de:	f107 0314 	add.w	r3, r7, #20
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f850 	bl	8006394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f6:	f000 f8f3 	bl	80064e0 <prvAddNewTaskToReadyList>
 80062fa:	e001      	b.n	8006300 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006300:	697b      	ldr	r3, [r7, #20]
	}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	; 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800630a:	b580      	push	{r7, lr}
 800630c:	b08c      	sub	sp, #48	; 0x30
 800630e:	af04      	add	r7, sp, #16
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fd6a 	bl	8007df8 <pvPortMalloc>
 8006324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800632c:	20bc      	movs	r0, #188	; 0xbc
 800632e:	f001 fd63 	bl	8007df8 <pvPortMalloc>
 8006332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	631a      	str	r2, [r3, #48]	; 0x30
 8006340:	e005      	b.n	800634e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f001 fe24 	bl	8007f90 <vPortFree>
 8006348:	e001      	b.n	800634e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	2300      	movs	r3, #0
 8006360:	9303      	str	r3, [sp, #12]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	9302      	str	r3, [sp, #8]
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f80e 	bl	8006394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006378:	69f8      	ldr	r0, [r7, #28]
 800637a:	f000 f8b1 	bl	80064e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800637e:	2301      	movs	r3, #1
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e002      	b.n	800638a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006384:	f04f 33ff 	mov.w	r3, #4294967295
 8006388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800638a:	69bb      	ldr	r3, [r7, #24]
	}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	461a      	mov	r2, r3
 80063ac:	21a5      	movs	r1, #165	; 0xa5
 80063ae:	f002 f83e 	bl	800842e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063bc:	3b01      	subs	r3, #1
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	617b      	str	r3, [r7, #20]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01f      	beq.n	8006432 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e012      	b.n	800641e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	7819      	ldrb	r1, [r3, #0]
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	3334      	adds	r3, #52	; 0x34
 8006408:	460a      	mov	r2, r1
 800640a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d006      	beq.n	8006426 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b0f      	cmp	r3, #15
 8006422:	d9e9      	bls.n	80063f8 <prvInitialiseNewTask+0x64>
 8006424:	e000      	b.n	8006428 <prvInitialiseNewTask+0x94>
			{
				break;
 8006426:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006430:	e003      	b.n	800643a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	2b37      	cmp	r3, #55	; 0x37
 800643e:	d901      	bls.n	8006444 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006440:	2337      	movs	r3, #55	; 0x37
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006448:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800644e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe ff64 	bl	8005328 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe ff5f 	bl	8005328 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	2200      	movs	r2, #0
 800648c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	3354      	adds	r3, #84	; 0x54
 8006494:	2260      	movs	r2, #96	; 0x60
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f001 ffc8 	bl	800842e <memset>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	4a0c      	ldr	r2, [pc, #48]	; (80064d4 <prvInitialiseNewTask+0x140>)
 80064a2:	659a      	str	r2, [r3, #88]	; 0x58
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	4a0c      	ldr	r2, [pc, #48]	; (80064d8 <prvInitialiseNewTask+0x144>)
 80064a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	4a0b      	ldr	r2, [pc, #44]	; (80064dc <prvInitialiseNewTask+0x148>)
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	69b8      	ldr	r0, [r7, #24]
 80064b6:	f001 fa4f 	bl	8007958 <pxPortInitialiseStack>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064cc:	bf00      	nop
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	08009814 	.word	0x08009814
 80064d8:	08009834 	.word	0x08009834
 80064dc:	080097f4 	.word	0x080097f4

080064e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064e8:	f001 fb64 	bl	8007bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064ec:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <prvAddNewTaskToReadyList+0xc4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <prvAddNewTaskToReadyList+0xc4>)
 80064f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064f6:	4b2c      	ldr	r3, [pc, #176]	; (80065a8 <prvAddNewTaskToReadyList+0xc8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064fe:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <prvAddNewTaskToReadyList+0xc8>)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006504:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <prvAddNewTaskToReadyList+0xc4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d110      	bne.n	800652e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800650c:	f000 fc26 	bl	8006d5c <prvInitialiseTaskLists>
 8006510:	e00d      	b.n	800652e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006512:	4b26      	ldr	r3, [pc, #152]	; (80065ac <prvAddNewTaskToReadyList+0xcc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800651a:	4b23      	ldr	r3, [pc, #140]	; (80065a8 <prvAddNewTaskToReadyList+0xc8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d802      	bhi.n	800652e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006528:	4a1f      	ldr	r2, [pc, #124]	; (80065a8 <prvAddNewTaskToReadyList+0xc8>)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800652e:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <prvAddNewTaskToReadyList+0xd0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <prvAddNewTaskToReadyList+0xd0>)
 8006536:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <prvAddNewTaskToReadyList+0xd0>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <prvAddNewTaskToReadyList+0xd4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d903      	bls.n	8006554 <prvAddNewTaskToReadyList+0x74>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <prvAddNewTaskToReadyList+0xd4>)
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <prvAddNewTaskToReadyList+0xd8>)
 8006562:	441a      	add	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f7fe fee9 	bl	8005342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006570:	f001 fb50 	bl	8007c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006574:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <prvAddNewTaskToReadyList+0xcc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00e      	beq.n	800659a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvAddNewTaskToReadyList+0xc8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	429a      	cmp	r2, r3
 8006588:	d207      	bcs.n	800659a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <prvAddNewTaskToReadyList+0xdc>)
 800658c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20001058 	.word	0x20001058
 80065a8:	20000b84 	.word	0x20000b84
 80065ac:	20001064 	.word	0x20001064
 80065b0:	20001074 	.word	0x20001074
 80065b4:	20001060 	.word	0x20001060
 80065b8:	20000b88 	.word	0x20000b88
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d017      	beq.n	8006602 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <vTaskDelay+0x60>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <vTaskDelay+0x30>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	60bb      	str	r3, [r7, #8]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065f0:	f000 f88a 	bl	8006708 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065f4:	2100      	movs	r1, #0
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fe0c 	bl	8007214 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065fc:	f000 f892 	bl	8006724 <xTaskResumeAll>
 8006600:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <vTaskDelay+0x64>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20001080 	.word	0x20001080
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006636:	463a      	mov	r2, r7
 8006638:	1d39      	adds	r1, r7, #4
 800663a:	f107 0308 	add.w	r3, r7, #8
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe fe1e 	bl	8005280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	9202      	str	r2, [sp, #8]
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	2300      	movs	r3, #0
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	460a      	mov	r2, r1
 8006656:	4924      	ldr	r1, [pc, #144]	; (80066e8 <vTaskStartScheduler+0xc0>)
 8006658:	4824      	ldr	r0, [pc, #144]	; (80066ec <vTaskStartScheduler+0xc4>)
 800665a:	f7ff fdf9 	bl	8006250 <xTaskCreateStatic>
 800665e:	4603      	mov	r3, r0
 8006660:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <vTaskStartScheduler+0xc8>)
 8006662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006664:	4b22      	ldr	r3, [pc, #136]	; (80066f0 <vTaskStartScheduler+0xc8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800666c:	2301      	movs	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e001      	b.n	8006676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d102      	bne.n	8006682 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800667c:	f000 fe1e 	bl	80072bc <xTimerCreateTimerTask>
 8006680:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d11b      	bne.n	80066c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	613b      	str	r3, [r7, #16]
}
 800669a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800669c:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <vTaskStartScheduler+0xcc>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3354      	adds	r3, #84	; 0x54
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <vTaskStartScheduler+0xd0>)
 80066a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <vTaskStartScheduler+0xd4>)
 80066a8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066ae:	4b14      	ldr	r3, [pc, #80]	; (8006700 <vTaskStartScheduler+0xd8>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066b4:	4b13      	ldr	r3, [pc, #76]	; (8006704 <vTaskStartScheduler+0xdc>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066ba:	f001 f9d9 	bl	8007a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066be:	e00e      	b.n	80066de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d10a      	bne.n	80066de <vTaskStartScheduler+0xb6>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	60fb      	str	r3, [r7, #12]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <vTaskStartScheduler+0xb4>
}
 80066de:	bf00      	nop
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	080096d0 	.word	0x080096d0
 80066ec:	08006d2d 	.word	0x08006d2d
 80066f0:	2000107c 	.word	0x2000107c
 80066f4:	20000b84 	.word	0x20000b84
 80066f8:	20000018 	.word	0x20000018
 80066fc:	20001078 	.word	0x20001078
 8006700:	20001064 	.word	0x20001064
 8006704:	2000105c 	.word	0x2000105c

08006708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <vTaskSuspendAll+0x18>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	4a03      	ldr	r2, [pc, #12]	; (8006720 <vTaskSuspendAll+0x18>)
 8006714:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006716:	bf00      	nop
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	20001080 	.word	0x20001080

08006724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800672e:	2300      	movs	r3, #0
 8006730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006732:	4b42      	ldr	r3, [pc, #264]	; (800683c <xTaskResumeAll+0x118>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10a      	bne.n	8006750 <xTaskResumeAll+0x2c>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	603b      	str	r3, [r7, #0]
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006750:	f001 fa30 	bl	8007bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006754:	4b39      	ldr	r3, [pc, #228]	; (800683c <xTaskResumeAll+0x118>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3b01      	subs	r3, #1
 800675a:	4a38      	ldr	r2, [pc, #224]	; (800683c <xTaskResumeAll+0x118>)
 800675c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800675e:	4b37      	ldr	r3, [pc, #220]	; (800683c <xTaskResumeAll+0x118>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d162      	bne.n	800682c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006766:	4b36      	ldr	r3, [pc, #216]	; (8006840 <xTaskResumeAll+0x11c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d05e      	beq.n	800682c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800676e:	e02f      	b.n	80067d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006770:	4b34      	ldr	r3, [pc, #208]	; (8006844 <xTaskResumeAll+0x120>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3318      	adds	r3, #24
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fe3d 	bl	80053fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3304      	adds	r3, #4
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fe38 	bl	80053fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4b2d      	ldr	r3, [pc, #180]	; (8006848 <xTaskResumeAll+0x124>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d903      	bls.n	80067a0 <xTaskResumeAll+0x7c>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <xTaskResumeAll+0x124>)
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4a27      	ldr	r2, [pc, #156]	; (800684c <xTaskResumeAll+0x128>)
 80067ae:	441a      	add	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f7fe fdc3 	bl	8005342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c0:	4b23      	ldr	r3, [pc, #140]	; (8006850 <xTaskResumeAll+0x12c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067ca:	4b22      	ldr	r3, [pc, #136]	; (8006854 <xTaskResumeAll+0x130>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067d0:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <xTaskResumeAll+0x120>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1cb      	bne.n	8006770 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067de:	f000 fb5f 	bl	8006ea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <xTaskResumeAll+0x134>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d010      	beq.n	8006810 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067ee:	f000 f847 	bl	8006880 <xTaskIncrementTick>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067f8:	4b16      	ldr	r3, [pc, #88]	; (8006854 <xTaskResumeAll+0x130>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3b01      	subs	r3, #1
 8006802:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f1      	bne.n	80067ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800680a:	4b13      	ldr	r3, [pc, #76]	; (8006858 <xTaskResumeAll+0x134>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006810:	4b10      	ldr	r3, [pc, #64]	; (8006854 <xTaskResumeAll+0x130>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006818:	2301      	movs	r3, #1
 800681a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800681c:	4b0f      	ldr	r3, [pc, #60]	; (800685c <xTaskResumeAll+0x138>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800682c:	f001 f9f2 	bl	8007c14 <vPortExitCritical>

	return xAlreadyYielded;
 8006830:	68bb      	ldr	r3, [r7, #8]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20001080 	.word	0x20001080
 8006840:	20001058 	.word	0x20001058
 8006844:	20001018 	.word	0x20001018
 8006848:	20001060 	.word	0x20001060
 800684c:	20000b88 	.word	0x20000b88
 8006850:	20000b84 	.word	0x20000b84
 8006854:	2000106c 	.word	0x2000106c
 8006858:	20001068 	.word	0x20001068
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <xTaskGetTickCount+0x1c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800686c:	687b      	ldr	r3, [r7, #4]
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	2000105c 	.word	0x2000105c

08006880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800688a:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <xTaskIncrementTick+0x148>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 808f 	bne.w	80069b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006894:	4b4d      	ldr	r3, [pc, #308]	; (80069cc <xTaskIncrementTick+0x14c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800689c:	4a4b      	ldr	r2, [pc, #300]	; (80069cc <xTaskIncrementTick+0x14c>)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d120      	bne.n	80068ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068a8:	4b49      	ldr	r3, [pc, #292]	; (80069d0 <xTaskIncrementTick+0x150>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	603b      	str	r3, [r7, #0]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <xTaskIncrementTick+0x46>
 80068c8:	4b41      	ldr	r3, [pc, #260]	; (80069d0 <xTaskIncrementTick+0x150>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	4b41      	ldr	r3, [pc, #260]	; (80069d4 <xTaskIncrementTick+0x154>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3f      	ldr	r2, [pc, #252]	; (80069d0 <xTaskIncrementTick+0x150>)
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	4a3f      	ldr	r2, [pc, #252]	; (80069d4 <xTaskIncrementTick+0x154>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	4b3e      	ldr	r3, [pc, #248]	; (80069d8 <xTaskIncrementTick+0x158>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	4a3d      	ldr	r2, [pc, #244]	; (80069d8 <xTaskIncrementTick+0x158>)
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	f000 fadb 	bl	8006ea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068ea:	4b3c      	ldr	r3, [pc, #240]	; (80069dc <xTaskIncrementTick+0x15c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d349      	bcc.n	8006988 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f4:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <xTaskIncrementTick+0x150>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d104      	bne.n	8006908 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068fe:	4b37      	ldr	r3, [pc, #220]	; (80069dc <xTaskIncrementTick+0x15c>)
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	601a      	str	r2, [r3, #0]
					break;
 8006906:	e03f      	b.n	8006988 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006908:	4b31      	ldr	r3, [pc, #196]	; (80069d0 <xTaskIncrementTick+0x150>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d203      	bcs.n	8006928 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006920:	4a2e      	ldr	r2, [pc, #184]	; (80069dc <xTaskIncrementTick+0x15c>)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006926:	e02f      	b.n	8006988 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	3304      	adds	r3, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fd65 	bl	80053fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3318      	adds	r3, #24
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fd5c 	bl	80053fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <xTaskIncrementTick+0x160>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d903      	bls.n	8006958 <xTaskIncrementTick+0xd8>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <xTaskIncrementTick+0x160>)
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <xTaskIncrementTick+0x164>)
 8006966:	441a      	add	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7fe fce7 	bl	8005342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <xTaskIncrementTick+0x168>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	429a      	cmp	r2, r3
 8006980:	d3b8      	bcc.n	80068f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006982:	2301      	movs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006986:	e7b5      	b.n	80068f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006988:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <xTaskIncrementTick+0x168>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698e:	4915      	ldr	r1, [pc, #84]	; (80069e4 <xTaskIncrementTick+0x164>)
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d901      	bls.n	80069a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80069a0:	2301      	movs	r3, #1
 80069a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069a4:	4b11      	ldr	r3, [pc, #68]	; (80069ec <xTaskIncrementTick+0x16c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e004      	b.n	80069bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <xTaskIncrementTick+0x170>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	4a0d      	ldr	r2, [pc, #52]	; (80069f0 <xTaskIncrementTick+0x170>)
 80069ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069bc:	697b      	ldr	r3, [r7, #20]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20001080 	.word	0x20001080
 80069cc:	2000105c 	.word	0x2000105c
 80069d0:	20001010 	.word	0x20001010
 80069d4:	20001014 	.word	0x20001014
 80069d8:	20001070 	.word	0x20001070
 80069dc:	20001078 	.word	0x20001078
 80069e0:	20001060 	.word	0x20001060
 80069e4:	20000b88 	.word	0x20000b88
 80069e8:	20000b84 	.word	0x20000b84
 80069ec:	2000106c 	.word	0x2000106c
 80069f0:	20001068 	.word	0x20001068

080069f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069fa:	4b2a      	ldr	r3, [pc, #168]	; (8006aa4 <vTaskSwitchContext+0xb0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a02:	4b29      	ldr	r3, [pc, #164]	; (8006aa8 <vTaskSwitchContext+0xb4>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a08:	e046      	b.n	8006a98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006a0a:	4b27      	ldr	r3, [pc, #156]	; (8006aa8 <vTaskSwitchContext+0xb4>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a10:	4b26      	ldr	r3, [pc, #152]	; (8006aac <vTaskSwitchContext+0xb8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	e010      	b.n	8006a3a <vTaskSwitchContext+0x46>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <vTaskSwitchContext+0x3e>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	491d      	ldr	r1, [pc, #116]	; (8006ab0 <vTaskSwitchContext+0xbc>)
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0e4      	beq.n	8006a18 <vTaskSwitchContext+0x24>
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <vTaskSwitchContext+0xbc>)
 8006a5a:	4413      	add	r3, r2
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d104      	bne.n	8006a7e <vTaskSwitchContext+0x8a>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	4a0b      	ldr	r2, [pc, #44]	; (8006ab4 <vTaskSwitchContext+0xc0>)
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <vTaskSwitchContext+0xb8>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <vTaskSwitchContext+0xc0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3354      	adds	r3, #84	; 0x54
 8006a94:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <vTaskSwitchContext+0xc4>)
 8006a96:	6013      	str	r3, [r2, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	20001080 	.word	0x20001080
 8006aa8:	2000106c 	.word	0x2000106c
 8006aac:	20001060 	.word	0x20001060
 8006ab0:	20000b88 	.word	0x20000b88
 8006ab4:	20000b84 	.word	0x20000b84
 8006ab8:	20000018 	.word	0x20000018

08006abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <vTaskPlaceOnEventList+0x44>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fe fc4d 	bl	800538a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006af0:	2101      	movs	r1, #1
 8006af2:	6838      	ldr	r0, [r7, #0]
 8006af4:	f000 fb8e 	bl	8007214 <prvAddCurrentTaskToDelayedList>
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000b84 	.word	0x20000b84

08006b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	617b      	str	r3, [r7, #20]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3318      	adds	r3, #24
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7fe fc04 	bl	8005342 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b40:	f04f 33ff 	mov.w	r3, #4294967295
 8006b44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	68b8      	ldr	r0, [r7, #8]
 8006b4a:	f000 fb63 	bl	8007214 <prvAddCurrentTaskToDelayedList>
	}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000b84 	.word	0x20000b84

08006b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	60fb      	str	r3, [r7, #12]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	3318      	adds	r3, #24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fc35 	bl	80053fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b92:	4b1e      	ldr	r3, [pc, #120]	; (8006c0c <xTaskRemoveFromEventList+0xb0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11d      	bne.n	8006bd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fc2c 	bl	80053fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4b19      	ldr	r3, [pc, #100]	; (8006c10 <xTaskRemoveFromEventList+0xb4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d903      	bls.n	8006bb8 <xTaskRemoveFromEventList+0x5c>
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <xTaskRemoveFromEventList+0xb4>)
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <xTaskRemoveFromEventList+0xb8>)
 8006bc6:	441a      	add	r2, r3
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f7fe fbb7 	bl	8005342 <vListInsertEnd>
 8006bd4:	e005      	b.n	8006be2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3318      	adds	r3, #24
 8006bda:	4619      	mov	r1, r3
 8006bdc:	480e      	ldr	r0, [pc, #56]	; (8006c18 <xTaskRemoveFromEventList+0xbc>)
 8006bde:	f7fe fbb0 	bl	8005342 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be6:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <xTaskRemoveFromEventList+0xc0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d905      	bls.n	8006bfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <xTaskRemoveFromEventList+0xc4>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e001      	b.n	8006c00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c00:	697b      	ldr	r3, [r7, #20]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20001080 	.word	0x20001080
 8006c10:	20001060 	.word	0x20001060
 8006c14:	20000b88 	.word	0x20000b88
 8006c18:	20001018 	.word	0x20001018
 8006c1c:	20000b84 	.word	0x20000b84
 8006c20:	2000106c 	.word	0x2000106c

08006c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <vTaskInternalSetTimeOutState+0x24>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <vTaskInternalSetTimeOutState+0x28>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	605a      	str	r2, [r3, #4]
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	20001070 	.word	0x20001070
 8006c4c:	2000105c 	.word	0x2000105c

08006c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	613b      	str	r3, [r7, #16]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c92:	f000 ff8f 	bl	8007bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <xTaskCheckForTimeOut+0xbc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	d102      	bne.n	8006cb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	e023      	b.n	8006cfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <xTaskCheckForTimeOut+0xc0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d007      	beq.n	8006cd2 <xTaskCheckForTimeOut+0x82>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d302      	bcc.n	8006cd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e015      	b.n	8006cfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d20b      	bcs.n	8006cf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1ad2      	subs	r2, r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff ff9b 	bl	8006c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	e004      	b.n	8006cfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cfe:	f000 ff89 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 8006d02:	69fb      	ldr	r3, [r7, #28]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	2000105c 	.word	0x2000105c
 8006d10:	20001070 	.word	0x20001070

08006d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <vTaskMissedYield+0x14>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	2000106c 	.word	0x2000106c

08006d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d34:	f000 f852 	bl	8006ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <prvIdleTask+0x28>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d9f9      	bls.n	8006d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <prvIdleTask+0x2c>)
 8006d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d50:	e7f0      	b.n	8006d34 <prvIdleTask+0x8>
 8006d52:	bf00      	nop
 8006d54:	20000b88 	.word	0x20000b88
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
 8006d66:	e00c      	b.n	8006d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <prvInitialiseTaskLists+0x60>)
 8006d74:	4413      	add	r3, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fab6 	bl	80052e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b37      	cmp	r3, #55	; 0x37
 8006d86:	d9ef      	bls.n	8006d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d88:	480d      	ldr	r0, [pc, #52]	; (8006dc0 <prvInitialiseTaskLists+0x64>)
 8006d8a:	f7fe faad 	bl	80052e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d8e:	480d      	ldr	r0, [pc, #52]	; (8006dc4 <prvInitialiseTaskLists+0x68>)
 8006d90:	f7fe faaa 	bl	80052e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d94:	480c      	ldr	r0, [pc, #48]	; (8006dc8 <prvInitialiseTaskLists+0x6c>)
 8006d96:	f7fe faa7 	bl	80052e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d9a:	480c      	ldr	r0, [pc, #48]	; (8006dcc <prvInitialiseTaskLists+0x70>)
 8006d9c:	f7fe faa4 	bl	80052e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006da0:	480b      	ldr	r0, [pc, #44]	; (8006dd0 <prvInitialiseTaskLists+0x74>)
 8006da2:	f7fe faa1 	bl	80052e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <prvInitialiseTaskLists+0x78>)
 8006da8:	4a05      	ldr	r2, [pc, #20]	; (8006dc0 <prvInitialiseTaskLists+0x64>)
 8006daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <prvInitialiseTaskLists+0x7c>)
 8006dae:	4a05      	ldr	r2, [pc, #20]	; (8006dc4 <prvInitialiseTaskLists+0x68>)
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000b88 	.word	0x20000b88
 8006dc0:	20000fe8 	.word	0x20000fe8
 8006dc4:	20000ffc 	.word	0x20000ffc
 8006dc8:	20001018 	.word	0x20001018
 8006dcc:	2000102c 	.word	0x2000102c
 8006dd0:	20001044 	.word	0x20001044
 8006dd4:	20001010 	.word	0x20001010
 8006dd8:	20001014 	.word	0x20001014

08006ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006de2:	e019      	b.n	8006e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006de4:	f000 fee6 	bl	8007bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <prvCheckTasksWaitingTermination+0x50>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fb01 	bl	80053fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <prvCheckTasksWaitingTermination+0x54>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	4a0b      	ldr	r2, [pc, #44]	; (8006e30 <prvCheckTasksWaitingTermination+0x54>)
 8006e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <prvCheckTasksWaitingTermination+0x58>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <prvCheckTasksWaitingTermination+0x58>)
 8006e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e0e:	f000 ff01 	bl	8007c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f810 	bl	8006e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <prvCheckTasksWaitingTermination+0x58>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e1      	bne.n	8006de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2000102c 	.word	0x2000102c
 8006e30:	20001058 	.word	0x20001058
 8006e34:	20001040 	.word	0x20001040

08006e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3354      	adds	r3, #84	; 0x54
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 fbb5 	bl	80085b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d108      	bne.n	8006e66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 f899 	bl	8007f90 <vPortFree>
				vPortFree( pxTCB );
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 f896 	bl	8007f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e64:	e018      	b.n	8006e98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d103      	bne.n	8006e78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 f88d 	bl	8007f90 <vPortFree>
	}
 8006e76:	e00f      	b.n	8006e98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d00a      	beq.n	8006e98 <prvDeleteTCB+0x60>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60fb      	str	r3, [r7, #12]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <prvDeleteTCB+0x5e>
	}
 8006e98:	bf00      	nop
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <prvResetNextTaskUnblockTime+0x38>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <prvResetNextTaskUnblockTime+0x3c>)
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006eb8:	e008      	b.n	8006ecc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eba:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <prvResetNextTaskUnblockTime+0x38>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a04      	ldr	r2, [pc, #16]	; (8006edc <prvResetNextTaskUnblockTime+0x3c>)
 8006eca:	6013      	str	r3, [r2, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	20001010 	.word	0x20001010
 8006edc:	20001078 	.word	0x20001078

08006ee0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <xTaskGetCurrentTaskHandle+0x1c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006eec:	687b      	ldr	r3, [r7, #4]
	}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000b84 	.word	0x20000b84

08006f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f06:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <xTaskGetSchedulerState+0x34>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	e008      	b.n	8006f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f14:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <xTaskGetSchedulerState+0x38>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	607b      	str	r3, [r7, #4]
 8006f20:	e001      	b.n	8006f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f26:	687b      	ldr	r3, [r7, #4]
	}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	20001064 	.word	0x20001064
 8006f38:	20001080 	.word	0x20001080

08006f3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d051      	beq.n	8006ff6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f56:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <xTaskPriorityInherit+0xc4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d241      	bcs.n	8006fe4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	db06      	blt.n	8006f76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f68:	4b25      	ldr	r3, [pc, #148]	; (8007000 <xTaskPriorityInherit+0xc4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6959      	ldr	r1, [r3, #20]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <xTaskPriorityInherit+0xc8>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	4299      	cmp	r1, r3
 8006f8c:	d122      	bne.n	8006fd4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	3304      	adds	r3, #4
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fa32 	bl	80053fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f98:	4b19      	ldr	r3, [pc, #100]	; (8007000 <xTaskPriorityInherit+0xc4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa6:	4b18      	ldr	r3, [pc, #96]	; (8007008 <xTaskPriorityInherit+0xcc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d903      	bls.n	8006fb6 <xTaskPriorityInherit+0x7a>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <xTaskPriorityInherit+0xcc>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4a10      	ldr	r2, [pc, #64]	; (8007004 <xTaskPriorityInherit+0xc8>)
 8006fc4:	441a      	add	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fe f9b8 	bl	8005342 <vListInsertEnd>
 8006fd2:	e004      	b.n	8006fde <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <xTaskPriorityInherit+0xc4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e008      	b.n	8006ff6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <xTaskPriorityInherit+0xc4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d201      	bcs.n	8006ff6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
	}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000b84 	.word	0x20000b84
 8007004:	20000b88 	.word	0x20000b88
 8007008:	20001060 	.word	0x20001060

0800700c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d056      	beq.n	80070d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007022:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <xTaskPriorityDisinherit+0xd0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	429a      	cmp	r2, r3
 800702a:	d00a      	beq.n	8007042 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60fb      	str	r3, [r7, #12]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	60bb      	str	r3, [r7, #8]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	1e5a      	subs	r2, r3, #1
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007072:	429a      	cmp	r2, r3
 8007074:	d02c      	beq.n	80070d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	2b00      	cmp	r3, #0
 800707c:	d128      	bne.n	80070d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3304      	adds	r3, #4
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe f9ba 	bl	80053fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <xTaskPriorityDisinherit+0xd4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d903      	bls.n	80070b0 <xTaskPriorityDisinherit+0xa4>
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4a0c      	ldr	r2, [pc, #48]	; (80070e0 <xTaskPriorityDisinherit+0xd4>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <xTaskPriorityDisinherit+0xd8>)
 80070be:	441a      	add	r2, r3
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe f93b 	bl	8005342 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070d0:	697b      	ldr	r3, [r7, #20]
	}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000b84 	.word	0x20000b84
 80070e0:	20001060 	.word	0x20001060
 80070e4:	20000b88 	.word	0x20000b88

080070e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070f6:	2301      	movs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d06a      	beq.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	60fb      	str	r3, [r7, #12]
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d902      	bls.n	800712e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	61fb      	str	r3, [r7, #28]
 800712c:	e002      	b.n	8007134 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007132:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	429a      	cmp	r2, r3
 800713c:	d04b      	beq.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	429a      	cmp	r2, r3
 8007146:	d146      	bne.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	429a      	cmp	r2, r3
 8007150:	d10a      	bne.n	8007168 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60bb      	str	r3, [r7, #8]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	db04      	blt.n	8007186 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	6959      	ldr	r1, [r3, #20]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4a13      	ldr	r2, [pc, #76]	; (80071e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007196:	4413      	add	r3, r2
 8007198:	4299      	cmp	r1, r3
 800719a:	d11c      	bne.n	80071d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	3304      	adds	r3, #4
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe f92b 	bl	80053fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d903      	bls.n	80071ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	4a0c      	ldr	r2, [pc, #48]	; (80071e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4a07      	ldr	r2, [pc, #28]	; (80071e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80071c8:	441a      	add	r2, r3
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f7fe f8b6 	bl	8005342 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071d6:	bf00      	nop
 80071d8:	3720      	adds	r7, #32
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000b84 	.word	0x20000b84
 80071e4:	20000b88 	.word	0x20000b88
 80071e8:	20001060 	.word	0x20001060

080071ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <pvTaskIncrementMutexHeldCount+0x24>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <pvTaskIncrementMutexHeldCount+0x24>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071fe:	3201      	adds	r2, #1
 8007200:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007202:	4b03      	ldr	r3, [pc, #12]	; (8007210 <pvTaskIncrementMutexHeldCount+0x24>)
 8007204:	681b      	ldr	r3, [r3, #0]
	}
 8007206:	4618      	mov	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20000b84 	.word	0x20000b84

08007214 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800721e:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007224:	4b20      	ldr	r3, [pc, #128]	; (80072a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3304      	adds	r3, #4
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe f8e6 	bl	80053fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007236:	d10a      	bne.n	800724e <prvAddCurrentTaskToDelayedList+0x3a>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800723e:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4819      	ldr	r0, [pc, #100]	; (80072ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007248:	f7fe f87b 	bl	8005342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800724c:	e026      	b.n	800729c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4413      	add	r3, r2
 8007254:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007256:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	429a      	cmp	r2, r3
 8007264:	d209      	bcs.n	800727a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fe f889 	bl	800538a <vListInsert>
}
 8007278:	e010      	b.n	800729c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3304      	adds	r3, #4
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f7fe f87f 	bl	800538a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	429a      	cmp	r2, r3
 8007294:	d202      	bcs.n	800729c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007296:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6013      	str	r3, [r2, #0]
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	2000105c 	.word	0x2000105c
 80072a8:	20000b84 	.word	0x20000b84
 80072ac:	20001044 	.word	0x20001044
 80072b0:	20001014 	.word	0x20001014
 80072b4:	20001010 	.word	0x20001010
 80072b8:	20001078 	.word	0x20001078

080072bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072c6:	f000 fb07 	bl	80078d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072ca:	4b1c      	ldr	r3, [pc, #112]	; (800733c <xTimerCreateTimerTask+0x80>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d021      	beq.n	8007316 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072da:	1d3a      	adds	r2, r7, #4
 80072dc:	f107 0108 	add.w	r1, r7, #8
 80072e0:	f107 030c 	add.w	r3, r7, #12
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd ffe5 	bl	80052b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	9202      	str	r2, [sp, #8]
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	2302      	movs	r3, #2
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2300      	movs	r3, #0
 80072fa:	460a      	mov	r2, r1
 80072fc:	4910      	ldr	r1, [pc, #64]	; (8007340 <xTimerCreateTimerTask+0x84>)
 80072fe:	4811      	ldr	r0, [pc, #68]	; (8007344 <xTimerCreateTimerTask+0x88>)
 8007300:	f7fe ffa6 	bl	8006250 <xTaskCreateStatic>
 8007304:	4603      	mov	r3, r0
 8007306:	4a10      	ldr	r2, [pc, #64]	; (8007348 <xTimerCreateTimerTask+0x8c>)
 8007308:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <xTimerCreateTimerTask+0x8c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007312:	2301      	movs	r3, #1
 8007314:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	613b      	str	r3, [r7, #16]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007332:	697b      	ldr	r3, [r7, #20]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	200010b4 	.word	0x200010b4
 8007340:	080096d8 	.word	0x080096d8
 8007344:	08007481 	.word	0x08007481
 8007348:	200010b8 	.word	0x200010b8

0800734c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800735a:	2300      	movs	r3, #0
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	623b      	str	r3, [r7, #32]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800737a:	4b1a      	ldr	r3, [pc, #104]	; (80073e4 <xTimerGenericCommand+0x98>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d02a      	beq.n	80073d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b05      	cmp	r3, #5
 8007392:	dc18      	bgt.n	80073c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007394:	f7ff fdb4 	bl	8006f00 <xTaskGetSchedulerState>
 8007398:	4603      	mov	r3, r0
 800739a:	2b02      	cmp	r3, #2
 800739c:	d109      	bne.n	80073b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800739e:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <xTimerGenericCommand+0x98>)
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	f107 0110 	add.w	r1, r7, #16
 80073a6:	2300      	movs	r3, #0
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	f7fe fa45 	bl	8005838 <xQueueGenericSend>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24
 80073b0:	e012      	b.n	80073d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <xTimerGenericCommand+0x98>)
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f107 0110 	add.w	r1, r7, #16
 80073ba:	2300      	movs	r3, #0
 80073bc:	2200      	movs	r2, #0
 80073be:	f7fe fa3b 	bl	8005838 <xQueueGenericSend>
 80073c2:	6278      	str	r0, [r7, #36]	; 0x24
 80073c4:	e008      	b.n	80073d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073c6:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <xTimerGenericCommand+0x98>)
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	f107 0110 	add.w	r1, r7, #16
 80073ce:	2300      	movs	r3, #0
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	f7fe fb2f 	bl	8005a34 <xQueueGenericSendFromISR>
 80073d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3728      	adds	r7, #40	; 0x28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200010b4 	.word	0x200010b4

080073e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f2:	4b22      	ldr	r3, [pc, #136]	; (800747c <prvProcessExpiredTimer+0x94>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	3304      	adds	r3, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f7fd fffb 	bl	80053fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d022      	beq.n	800745a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	18d1      	adds	r1, r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	6978      	ldr	r0, [r7, #20]
 8007422:	f000 f8d1 	bl	80075c8 <prvInsertTimerInActiveList>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01f      	beq.n	800746c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800742c:	2300      	movs	r3, #0
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	2100      	movs	r1, #0
 8007436:	6978      	ldr	r0, [r7, #20]
 8007438:	f7ff ff88 	bl	800734c <xTimerGenericCommand>
 800743c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d113      	bne.n	800746c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	60fb      	str	r3, [r7, #12]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	b2da      	uxtb	r2, r3
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	6978      	ldr	r0, [r7, #20]
 8007472:	4798      	blx	r3
}
 8007474:	bf00      	nop
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	200010ac 	.word	0x200010ac

08007480 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007488:	f107 0308 	add.w	r3, r7, #8
 800748c:	4618      	mov	r0, r3
 800748e:	f000 f857 	bl	8007540 <prvGetNextExpireTime>
 8007492:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f803 	bl	80074a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800749e:	f000 f8d5 	bl	800764c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074a2:	e7f1      	b.n	8007488 <prvTimerTask+0x8>

080074a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074ae:	f7ff f92b 	bl	8006708 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b2:	f107 0308 	add.w	r3, r7, #8
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f866 	bl	8007588 <prvSampleTimeNow>
 80074bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d130      	bne.n	8007526 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <prvProcessTimerOrBlockTask+0x3c>
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d806      	bhi.n	80074e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074d2:	f7ff f927 	bl	8006724 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ff85 	bl	80073e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074de:	e024      	b.n	800752a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d008      	beq.n	80074f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074e6:	4b13      	ldr	r3, [pc, #76]	; (8007534 <prvProcessTimerOrBlockTask+0x90>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <prvProcessTimerOrBlockTask+0x50>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <prvProcessTimerOrBlockTask+0x52>
 80074f4:	2300      	movs	r3, #0
 80074f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074f8:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <prvProcessTimerOrBlockTask+0x94>)
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	f7fe fe6f 	bl	80061e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800750a:	f7ff f90b 	bl	8006724 <xTaskResumeAll>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007514:	4b09      	ldr	r3, [pc, #36]	; (800753c <prvProcessTimerOrBlockTask+0x98>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
}
 8007524:	e001      	b.n	800752a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007526:	f7ff f8fd 	bl	8006724 <xTaskResumeAll>
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200010b0 	.word	0x200010b0
 8007538:	200010b4 	.word	0x200010b4
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007548:	4b0e      	ldr	r3, [pc, #56]	; (8007584 <prvGetNextExpireTime+0x44>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <prvGetNextExpireTime+0x16>
 8007552:	2201      	movs	r2, #1
 8007554:	e000      	b.n	8007558 <prvGetNextExpireTime+0x18>
 8007556:	2200      	movs	r2, #0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007564:	4b07      	ldr	r3, [pc, #28]	; (8007584 <prvGetNextExpireTime+0x44>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	e001      	b.n	8007574 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007574:	68fb      	ldr	r3, [r7, #12]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	200010ac 	.word	0x200010ac

08007588 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007590:	f7ff f966 	bl	8006860 <xTaskGetTickCount>
 8007594:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <prvSampleTimeNow+0x3c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	429a      	cmp	r2, r3
 800759e:	d205      	bcs.n	80075ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075a0:	f000 f936 	bl	8007810 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e002      	b.n	80075b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075b2:	4a04      	ldr	r2, [pc, #16]	; (80075c4 <prvSampleTimeNow+0x3c>)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075b8:	68fb      	ldr	r3, [r7, #12]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200010bc 	.word	0x200010bc

080075c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d812      	bhi.n	8007614 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	1ad2      	subs	r2, r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d302      	bcc.n	8007602 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075fc:	2301      	movs	r3, #1
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	e01b      	b.n	800763a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <prvInsertTimerInActiveList+0x7c>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7fd febc 	bl	800538a <vListInsert>
 8007612:	e012      	b.n	800763a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d206      	bcs.n	800762a <prvInsertTimerInActiveList+0x62>
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d302      	bcc.n	800762a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007624:	2301      	movs	r3, #1
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e007      	b.n	800763a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800762a:	4b07      	ldr	r3, [pc, #28]	; (8007648 <prvInsertTimerInActiveList+0x80>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3304      	adds	r3, #4
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f7fd fea8 	bl	800538a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800763a:	697b      	ldr	r3, [r7, #20]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	200010b0 	.word	0x200010b0
 8007648:	200010ac 	.word	0x200010ac

0800764c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007652:	e0ca      	b.n	80077ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	da18      	bge.n	800768c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800765a:	1d3b      	adds	r3, r7, #4
 800765c:	3304      	adds	r3, #4
 800765e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	61fb      	str	r3, [r7, #28]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007682:	6850      	ldr	r0, [r2, #4]
 8007684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007686:	6892      	ldr	r2, [r2, #8]
 8007688:	4611      	mov	r1, r2
 800768a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f2c0 80aa 	blt.w	80077e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	3304      	adds	r3, #4
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fd fea9 	bl	80053fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076aa:	463b      	mov	r3, r7
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff ff6b 	bl	8007588 <prvSampleTimeNow>
 80076b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b09      	cmp	r3, #9
 80076b8:	f200 8097 	bhi.w	80077ea <prvProcessReceivedCommands+0x19e>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <prvProcessReceivedCommands+0x78>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	080076ed 	.word	0x080076ed
 80076d0:	08007761 	.word	0x08007761
 80076d4:	08007775 	.word	0x08007775
 80076d8:	080077bf 	.word	0x080077bf
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076ed 	.word	0x080076ed
 80076e4:	08007761 	.word	0x08007761
 80076e8:	08007775 	.word	0x08007775
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	18d1      	adds	r1, r2, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800770c:	f7ff ff5c 	bl	80075c8 <prvInsertTimerInActiveList>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d069      	beq.n	80077ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800771c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d05e      	beq.n	80077ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	441a      	add	r2, r3
 8007734:	2300      	movs	r3, #0
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	2300      	movs	r3, #0
 800773a:	2100      	movs	r1, #0
 800773c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773e:	f7ff fe05 	bl	800734c <xTimerGenericCommand>
 8007742:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d14f      	bne.n	80077ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	61bb      	str	r3, [r7, #24]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	b2da      	uxtb	r2, r3
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007772:	e03a      	b.n	80077ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800777a:	f043 0301 	orr.w	r3, r3, #1
 800777e:	b2da      	uxtb	r2, r3
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	617b      	str	r3, [r7, #20]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	18d1      	adds	r1, r2, r3
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b8:	f7ff ff06 	bl	80075c8 <prvInsertTimerInActiveList>
					break;
 80077bc:	e015      	b.n	80077ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80077cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ce:	f000 fbdf 	bl	8007f90 <vPortFree>
 80077d2:	e00a      	b.n	80077ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077e6:	e000      	b.n	80077ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077ea:	4b08      	ldr	r3, [pc, #32]	; (800780c <prvProcessReceivedCommands+0x1c0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	1d39      	adds	r1, r7, #4
 80077f0:	2200      	movs	r2, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe f9ba 	bl	8005b6c <xQueueReceive>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f47f af2a 	bne.w	8007654 <prvProcessReceivedCommands+0x8>
	}
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3730      	adds	r7, #48	; 0x30
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200010b4 	.word	0x200010b4

08007810 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007816:	e048      	b.n	80078aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007818:	4b2d      	ldr	r3, [pc, #180]	; (80078d0 <prvSwitchTimerLists+0xc0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007822:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <prvSwitchTimerLists+0xc0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7fd fde3 	bl	80053fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d02e      	beq.n	80078aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4413      	add	r3, r2
 8007854:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	429a      	cmp	r2, r3
 800785c:	d90e      	bls.n	800787c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800786a:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <prvSwitchTimerLists+0xc0>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3304      	adds	r3, #4
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f7fd fd88 	bl	800538a <vListInsert>
 800787a:	e016      	b.n	80078aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800787c:	2300      	movs	r3, #0
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	2300      	movs	r3, #0
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	2100      	movs	r1, #0
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff fd60 	bl	800734c <xTimerGenericCommand>
 800788c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	603b      	str	r3, [r7, #0]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <prvSwitchTimerLists+0xc0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1b1      	bne.n	8007818 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <prvSwitchTimerLists+0xc0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <prvSwitchTimerLists+0xc4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a04      	ldr	r2, [pc, #16]	; (80078d0 <prvSwitchTimerLists+0xc0>)
 80078c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078c2:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <prvSwitchTimerLists+0xc4>)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	6013      	str	r3, [r2, #0]
}
 80078c8:	bf00      	nop
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	200010ac 	.word	0x200010ac
 80078d4:	200010b0 	.word	0x200010b0

080078d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078de:	f000 f969 	bl	8007bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <prvCheckForValidListAndQueue+0x60>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d120      	bne.n	800792c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078ea:	4814      	ldr	r0, [pc, #80]	; (800793c <prvCheckForValidListAndQueue+0x64>)
 80078ec:	f7fd fcfc 	bl	80052e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078f0:	4813      	ldr	r0, [pc, #76]	; (8007940 <prvCheckForValidListAndQueue+0x68>)
 80078f2:	f7fd fcf9 	bl	80052e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <prvCheckForValidListAndQueue+0x6c>)
 80078f8:	4a10      	ldr	r2, [pc, #64]	; (800793c <prvCheckForValidListAndQueue+0x64>)
 80078fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078fc:	4b12      	ldr	r3, [pc, #72]	; (8007948 <prvCheckForValidListAndQueue+0x70>)
 80078fe:	4a10      	ldr	r2, [pc, #64]	; (8007940 <prvCheckForValidListAndQueue+0x68>)
 8007900:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007902:	2300      	movs	r3, #0
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	4b11      	ldr	r3, [pc, #68]	; (800794c <prvCheckForValidListAndQueue+0x74>)
 8007908:	4a11      	ldr	r2, [pc, #68]	; (8007950 <prvCheckForValidListAndQueue+0x78>)
 800790a:	2110      	movs	r1, #16
 800790c:	200a      	movs	r0, #10
 800790e:	f7fd fe07 	bl	8005520 <xQueueGenericCreateStatic>
 8007912:	4603      	mov	r3, r0
 8007914:	4a08      	ldr	r2, [pc, #32]	; (8007938 <prvCheckForValidListAndQueue+0x60>)
 8007916:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007918:	4b07      	ldr	r3, [pc, #28]	; (8007938 <prvCheckForValidListAndQueue+0x60>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <prvCheckForValidListAndQueue+0x60>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	490b      	ldr	r1, [pc, #44]	; (8007954 <prvCheckForValidListAndQueue+0x7c>)
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fc34 	bl	8006194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800792c:	f000 f972 	bl	8007c14 <vPortExitCritical>
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	200010b4 	.word	0x200010b4
 800793c:	20001084 	.word	0x20001084
 8007940:	20001098 	.word	0x20001098
 8007944:	200010ac 	.word	0x200010ac
 8007948:	200010b0 	.word	0x200010b0
 800794c:	20001160 	.word	0x20001160
 8007950:	200010c0 	.word	0x200010c0
 8007954:	080096e0 	.word	0x080096e0

08007958 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3b04      	subs	r3, #4
 8007968:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3b04      	subs	r3, #4
 8007976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0201 	bic.w	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3b04      	subs	r3, #4
 8007986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007988:	4a0c      	ldr	r2, [pc, #48]	; (80079bc <pxPortInitialiseStack+0x64>)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b14      	subs	r3, #20
 8007992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3b04      	subs	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f06f 0202 	mvn.w	r2, #2
 80079a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3b20      	subs	r3, #32
 80079ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ae:	68fb      	ldr	r3, [r7, #12]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	080079c1 	.word	0x080079c1

080079c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <prvTaskExitError+0x54>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d00a      	beq.n	80079ea <prvTaskExitError+0x2a>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	60fb      	str	r3, [r7, #12]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <prvTaskExitError+0x28>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60bb      	str	r3, [r7, #8]
}
 80079fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079fe:	bf00      	nop
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0fc      	beq.n	8007a00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	20000014 	.word	0x20000014
	...

08007a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <pxCurrentTCBConst2>)
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	6808      	ldr	r0, [r1, #0]
 8007a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2a:	f380 8809 	msr	PSP, r0
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8811 	msr	BASEPRI, r0
 8007a3a:	4770      	bx	lr
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst2>:
 8007a40:	20000b84 	.word	0x20000b84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a48:	4808      	ldr	r0, [pc, #32]	; (8007a6c <prvPortStartFirstTask+0x24>)
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	6800      	ldr	r0, [r0, #0]
 8007a4e:	f380 8808 	msr	MSP, r0
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f380 8814 	msr	CONTROL, r0
 8007a5a:	b662      	cpsie	i
 8007a5c:	b661      	cpsie	f
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	df00      	svc	0
 8007a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a6a:	bf00      	nop
 8007a6c:	e000ed08 	.word	0xe000ed08

08007a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a76:	4b46      	ldr	r3, [pc, #280]	; (8007b90 <xPortStartScheduler+0x120>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a46      	ldr	r2, [pc, #280]	; (8007b94 <xPortStartScheduler+0x124>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d10a      	bne.n	8007a96 <xPortStartScheduler+0x26>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	613b      	str	r3, [r7, #16]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a96:	4b3e      	ldr	r3, [pc, #248]	; (8007b90 <xPortStartScheduler+0x120>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a3f      	ldr	r2, [pc, #252]	; (8007b98 <xPortStartScheduler+0x128>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d10a      	bne.n	8007ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60fb      	str	r3, [r7, #12]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ab6:	4b39      	ldr	r3, [pc, #228]	; (8007b9c <xPortStartScheduler+0x12c>)
 8007ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <xPortStartScheduler+0x130>)
 8007adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ade:	4b31      	ldr	r3, [pc, #196]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ae4:	e009      	b.n	8007afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ae6:	4b2f      	ldr	r3, [pc, #188]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4a2d      	ldr	r2, [pc, #180]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b02:	2b80      	cmp	r3, #128	; 0x80
 8007b04:	d0ef      	beq.n	8007ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b06:	4b27      	ldr	r3, [pc, #156]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f1c3 0307 	rsb	r3, r3, #7
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d00a      	beq.n	8007b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60bb      	str	r3, [r7, #8]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b28:	4b1e      	ldr	r3, [pc, #120]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b46:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b52:	4b15      	ldr	r3, [pc, #84]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a14      	ldr	r2, [pc, #80]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b5e:	f000 f8dd 	bl	8007d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b62:	4b12      	ldr	r3, [pc, #72]	; (8007bac <xPortStartScheduler+0x13c>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b68:	f000 f8fc 	bl	8007d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b6c:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <xPortStartScheduler+0x140>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0f      	ldr	r2, [pc, #60]	; (8007bb0 <xPortStartScheduler+0x140>)
 8007b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b78:	f7ff ff66 	bl	8007a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b7c:	f7fe ff3a 	bl	80069f4 <vTaskSwitchContext>
	prvTaskExitError();
 8007b80:	f7ff ff1e 	bl	80079c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	e000ed00 	.word	0xe000ed00
 8007b94:	410fc271 	.word	0x410fc271
 8007b98:	410fc270 	.word	0x410fc270
 8007b9c:	e000e400 	.word	0xe000e400
 8007ba0:	200011b0 	.word	0x200011b0
 8007ba4:	200011b4 	.word	0x200011b4
 8007ba8:	e000ed20 	.word	0xe000ed20
 8007bac:	20000014 	.word	0x20000014
 8007bb0:	e000ef34 	.word	0xe000ef34

08007bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	607b      	str	r3, [r7, #4]
}
 8007bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <vPortEnterCritical+0x58>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a0d      	ldr	r2, [pc, #52]	; (8007c0c <vPortEnterCritical+0x58>)
 8007bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <vPortEnterCritical+0x58>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d10f      	bne.n	8007c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <vPortEnterCritical+0x5c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	603b      	str	r3, [r7, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vPortEnterCritical+0x4a>
	}
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	20000014 	.word	0x20000014
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c1a:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <vPortExitCritical+0x50>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <vPortExitCritical+0x24>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	607b      	str	r3, [r7, #4]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <vPortExitCritical+0x50>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	4a09      	ldr	r2, [pc, #36]	; (8007c64 <vPortExitCritical+0x50>)
 8007c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c42:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <vPortExitCritical+0x50>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <vPortExitCritical+0x42>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	f383 8811 	msr	BASEPRI, r3
}
 8007c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000014 	.word	0x20000014
	...

08007c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c70:	f3ef 8009 	mrs	r0, PSP
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <pxCurrentTCBConst>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f01e 0f10 	tst.w	lr, #16
 8007c80:	bf08      	it	eq
 8007c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	6010      	str	r0, [r2, #0]
 8007c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c94:	f380 8811 	msr	BASEPRI, r0
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f7fe fea8 	bl	80069f4 <vTaskSwitchContext>
 8007ca4:	f04f 0000 	mov.w	r0, #0
 8007ca8:	f380 8811 	msr	BASEPRI, r0
 8007cac:	bc09      	pop	{r0, r3}
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	6808      	ldr	r0, [r1, #0]
 8007cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	f01e 0f10 	tst.w	lr, #16
 8007cba:	bf08      	it	eq
 8007cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cc0:	f380 8809 	msr	PSP, r0
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	f3af 8000 	nop.w

08007cd0 <pxCurrentTCBConst>:
 8007cd0:	20000b84 	.word	0x20000b84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop

08007cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
}
 8007cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cf2:	f7fe fdc5 	bl	8006880 <xTaskIncrementTick>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cfc:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <xPortSysTickHandler+0x40>)
 8007cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f383 8811 	msr	BASEPRI, r3
}
 8007d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d20:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <vPortSetupTimerInterrupt+0x34>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <vPortSetupTimerInterrupt+0x38>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <vPortSetupTimerInterrupt+0x3c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <vPortSetupTimerInterrupt+0x40>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	4a09      	ldr	r2, [pc, #36]	; (8007d60 <vPortSetupTimerInterrupt+0x44>)
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <vPortSetupTimerInterrupt+0x34>)
 8007d40:	2207      	movs	r2, #7
 8007d42:	601a      	str	r2, [r3, #0]
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	e000e010 	.word	0xe000e010
 8007d54:	e000e018 	.word	0xe000e018
 8007d58:	20000008 	.word	0x20000008
 8007d5c:	10624dd3 	.word	0x10624dd3
 8007d60:	e000e014 	.word	0xe000e014

08007d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d74 <vPortEnableVFP+0x10>
 8007d68:	6801      	ldr	r1, [r0, #0]
 8007d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d6e:	6001      	str	r1, [r0, #0]
 8007d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d72:	bf00      	nop
 8007d74:	e000ed88 	.word	0xe000ed88

08007d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d7e:	f3ef 8305 	mrs	r3, IPSR
 8007d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d914      	bls.n	8007db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d8a:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <vPortValidateInterruptPriority+0x70>)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <vPortValidateInterruptPriority+0x74>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	7afa      	ldrb	r2, [r7, #11]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d20a      	bcs.n	8007db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007db4:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <vPortValidateInterruptPriority+0x78>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dbc:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <vPortValidateInterruptPriority+0x7c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d90a      	bls.n	8007dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	603b      	str	r3, [r7, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <vPortValidateInterruptPriority+0x60>
	}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	e000e3f0 	.word	0xe000e3f0
 8007dec:	200011b0 	.word	0x200011b0
 8007df0:	e000ed0c 	.word	0xe000ed0c
 8007df4:	200011b4 	.word	0x200011b4

08007df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	; 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e04:	f7fe fc80 	bl	8006708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e08:	4b5b      	ldr	r3, [pc, #364]	; (8007f78 <pvPortMalloc+0x180>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e10:	f000 f920 	bl	8008054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e14:	4b59      	ldr	r3, [pc, #356]	; (8007f7c <pvPortMalloc+0x184>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 8093 	bne.w	8007f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01d      	beq.n	8007e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e28:	2208      	movs	r2, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d014      	beq.n	8007e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f023 0307 	bic.w	r3, r3, #7
 8007e40:	3308      	adds	r3, #8
 8007e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <pvPortMalloc+0x6c>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	617b      	str	r3, [r7, #20]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d06e      	beq.n	8007f48 <pvPortMalloc+0x150>
 8007e6a:	4b45      	ldr	r3, [pc, #276]	; (8007f80 <pvPortMalloc+0x188>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d869      	bhi.n	8007f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e74:	4b43      	ldr	r3, [pc, #268]	; (8007f84 <pvPortMalloc+0x18c>)
 8007e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e78:	4b42      	ldr	r3, [pc, #264]	; (8007f84 <pvPortMalloc+0x18c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e7e:	e004      	b.n	8007e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d903      	bls.n	8007e9c <pvPortMalloc+0xa4>
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1f1      	bne.n	8007e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e9c:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <pvPortMalloc+0x180>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d050      	beq.n	8007f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2208      	movs	r2, #8
 8007eac:	4413      	add	r3, r2
 8007eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d91f      	bls.n	8007f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	613b      	str	r3, [r7, #16]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	1ad2      	subs	r2, r2, r3
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f02:	69b8      	ldr	r0, [r7, #24]
 8007f04:	f000 f908 	bl	8008118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f08:	4b1d      	ldr	r3, [pc, #116]	; (8007f80 <pvPortMalloc+0x188>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	4a1b      	ldr	r2, [pc, #108]	; (8007f80 <pvPortMalloc+0x188>)
 8007f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f16:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <pvPortMalloc+0x188>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <pvPortMalloc+0x190>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d203      	bcs.n	8007f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f22:	4b17      	ldr	r3, [pc, #92]	; (8007f80 <pvPortMalloc+0x188>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a18      	ldr	r2, [pc, #96]	; (8007f88 <pvPortMalloc+0x190>)
 8007f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <pvPortMalloc+0x184>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <pvPortMalloc+0x194>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <pvPortMalloc+0x194>)
 8007f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f48:	f7fe fbec 	bl	8006724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <pvPortMalloc+0x174>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60fb      	str	r3, [r7, #12]
}
 8007f68:	bf00      	nop
 8007f6a:	e7fe      	b.n	8007f6a <pvPortMalloc+0x172>
	return pvReturn;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	200051c0 	.word	0x200051c0
 8007f7c:	200051d4 	.word	0x200051d4
 8007f80:	200051c4 	.word	0x200051c4
 8007f84:	200051b8 	.word	0x200051b8
 8007f88:	200051c8 	.word	0x200051c8
 8007f8c:	200051cc 	.word	0x200051cc

08007f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d04d      	beq.n	800803e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fa2:	2308      	movs	r3, #8
 8007fa4:	425b      	negs	r3, r3
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4413      	add	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	4b24      	ldr	r3, [pc, #144]	; (8008048 <vPortFree+0xb8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <vPortFree+0x44>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60fb      	str	r3, [r7, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <vPortFree+0x62>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60bb      	str	r3, [r7, #8]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <vPortFree+0xb8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01e      	beq.n	800803e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11a      	bne.n	800803e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	4b0e      	ldr	r3, [pc, #56]	; (8008048 <vPortFree+0xb8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	43db      	mvns	r3, r3
 8008012:	401a      	ands	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008018:	f7fe fb76 	bl	8006708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <vPortFree+0xbc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4413      	add	r3, r2
 8008026:	4a09      	ldr	r2, [pc, #36]	; (800804c <vPortFree+0xbc>)
 8008028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f000 f874 	bl	8008118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <vPortFree+0xc0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	4a06      	ldr	r2, [pc, #24]	; (8008050 <vPortFree+0xc0>)
 8008038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800803a:	f7fe fb73 	bl	8006724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800803e:	bf00      	nop
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	200051d4 	.word	0x200051d4
 800804c:	200051c4 	.word	0x200051c4
 8008050:	200051d0 	.word	0x200051d0

08008054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800805a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800805e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008060:	4b27      	ldr	r3, [pc, #156]	; (8008100 <prvHeapInit+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3307      	adds	r3, #7
 8008072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <prvHeapInit+0xac>)
 8008084:	4413      	add	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800808c:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <prvHeapInit+0xb0>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <prvHeapInit+0xb0>)
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4413      	add	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080a0:	2208      	movs	r2, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a15      	ldr	r2, [pc, #84]	; (8008108 <prvHeapInit+0xb4>)
 80080b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080b6:	4b14      	ldr	r3, [pc, #80]	; (8008108 <prvHeapInit+0xb4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <prvHeapInit+0xb4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvHeapInit+0xb4>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <prvHeapInit+0xb8>)
 80080e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <prvHeapInit+0xbc>)
 80080ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <prvHeapInit+0xc0>)
 80080ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	200011b8 	.word	0x200011b8
 8008104:	200051b8 	.word	0x200051b8
 8008108:	200051c0 	.word	0x200051c0
 800810c:	200051c8 	.word	0x200051c8
 8008110:	200051c4 	.word	0x200051c4
 8008114:	200051d4 	.word	0x200051d4

08008118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008120:	4b28      	ldr	r3, [pc, #160]	; (80081c4 <prvInsertBlockIntoFreeList+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e002      	b.n	800812c <prvInsertBlockIntoFreeList+0x14>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d8f7      	bhi.n	8008126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d108      	bne.n	800815a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	441a      	add	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d118      	bne.n	80081a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d00d      	beq.n	8008196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008196:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e003      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d002      	beq.n	80081b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	200051b8 	.word	0x200051b8
 80081c8:	200051c0 	.word	0x200051c0

080081cc <__errno>:
 80081cc:	4b01      	ldr	r3, [pc, #4]	; (80081d4 <__errno+0x8>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000018 	.word	0x20000018

080081d8 <std>:
 80081d8:	2300      	movs	r3, #0
 80081da:	b510      	push	{r4, lr}
 80081dc:	4604      	mov	r4, r0
 80081de:	e9c0 3300 	strd	r3, r3, [r0]
 80081e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081e6:	6083      	str	r3, [r0, #8]
 80081e8:	8181      	strh	r1, [r0, #12]
 80081ea:	6643      	str	r3, [r0, #100]	; 0x64
 80081ec:	81c2      	strh	r2, [r0, #14]
 80081ee:	6183      	str	r3, [r0, #24]
 80081f0:	4619      	mov	r1, r3
 80081f2:	2208      	movs	r2, #8
 80081f4:	305c      	adds	r0, #92	; 0x5c
 80081f6:	f000 f91a 	bl	800842e <memset>
 80081fa:	4b05      	ldr	r3, [pc, #20]	; (8008210 <std+0x38>)
 80081fc:	6263      	str	r3, [r4, #36]	; 0x24
 80081fe:	4b05      	ldr	r3, [pc, #20]	; (8008214 <std+0x3c>)
 8008200:	62a3      	str	r3, [r4, #40]	; 0x28
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <std+0x40>)
 8008204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <std+0x44>)
 8008208:	6224      	str	r4, [r4, #32]
 800820a:	6323      	str	r3, [r4, #48]	; 0x30
 800820c:	bd10      	pop	{r4, pc}
 800820e:	bf00      	nop
 8008210:	080086f5 	.word	0x080086f5
 8008214:	08008717 	.word	0x08008717
 8008218:	0800874f 	.word	0x0800874f
 800821c:	08008773 	.word	0x08008773

08008220 <_cleanup_r>:
 8008220:	4901      	ldr	r1, [pc, #4]	; (8008228 <_cleanup_r+0x8>)
 8008222:	f000 b8af 	b.w	8008384 <_fwalk_reent>
 8008226:	bf00      	nop
 8008228:	080088e5 	.word	0x080088e5

0800822c <__sfmoreglue>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	2268      	movs	r2, #104	; 0x68
 8008230:	1e4d      	subs	r5, r1, #1
 8008232:	4355      	muls	r5, r2
 8008234:	460e      	mov	r6, r1
 8008236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800823a:	f000 f921 	bl	8008480 <_malloc_r>
 800823e:	4604      	mov	r4, r0
 8008240:	b140      	cbz	r0, 8008254 <__sfmoreglue+0x28>
 8008242:	2100      	movs	r1, #0
 8008244:	e9c0 1600 	strd	r1, r6, [r0]
 8008248:	300c      	adds	r0, #12
 800824a:	60a0      	str	r0, [r4, #8]
 800824c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008250:	f000 f8ed 	bl	800842e <memset>
 8008254:	4620      	mov	r0, r4
 8008256:	bd70      	pop	{r4, r5, r6, pc}

08008258 <__sfp_lock_acquire>:
 8008258:	4801      	ldr	r0, [pc, #4]	; (8008260 <__sfp_lock_acquire+0x8>)
 800825a:	f000 b8d8 	b.w	800840e <__retarget_lock_acquire_recursive>
 800825e:	bf00      	nop
 8008260:	200051d9 	.word	0x200051d9

08008264 <__sfp_lock_release>:
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__sfp_lock_release+0x8>)
 8008266:	f000 b8d3 	b.w	8008410 <__retarget_lock_release_recursive>
 800826a:	bf00      	nop
 800826c:	200051d9 	.word	0x200051d9

08008270 <__sinit_lock_acquire>:
 8008270:	4801      	ldr	r0, [pc, #4]	; (8008278 <__sinit_lock_acquire+0x8>)
 8008272:	f000 b8cc 	b.w	800840e <__retarget_lock_acquire_recursive>
 8008276:	bf00      	nop
 8008278:	200051da 	.word	0x200051da

0800827c <__sinit_lock_release>:
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <__sinit_lock_release+0x8>)
 800827e:	f000 b8c7 	b.w	8008410 <__retarget_lock_release_recursive>
 8008282:	bf00      	nop
 8008284:	200051da 	.word	0x200051da

08008288 <__sinit>:
 8008288:	b510      	push	{r4, lr}
 800828a:	4604      	mov	r4, r0
 800828c:	f7ff fff0 	bl	8008270 <__sinit_lock_acquire>
 8008290:	69a3      	ldr	r3, [r4, #24]
 8008292:	b11b      	cbz	r3, 800829c <__sinit+0x14>
 8008294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008298:	f7ff bff0 	b.w	800827c <__sinit_lock_release>
 800829c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082a0:	6523      	str	r3, [r4, #80]	; 0x50
 80082a2:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <__sinit+0x68>)
 80082a4:	4a13      	ldr	r2, [pc, #76]	; (80082f4 <__sinit+0x6c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	bf04      	itt	eq
 80082ae:	2301      	moveq	r3, #1
 80082b0:	61a3      	streq	r3, [r4, #24]
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f820 	bl	80082f8 <__sfp>
 80082b8:	6060      	str	r0, [r4, #4]
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 f81c 	bl	80082f8 <__sfp>
 80082c0:	60a0      	str	r0, [r4, #8]
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 f818 	bl	80082f8 <__sfp>
 80082c8:	2200      	movs	r2, #0
 80082ca:	60e0      	str	r0, [r4, #12]
 80082cc:	2104      	movs	r1, #4
 80082ce:	6860      	ldr	r0, [r4, #4]
 80082d0:	f7ff ff82 	bl	80081d8 <std>
 80082d4:	68a0      	ldr	r0, [r4, #8]
 80082d6:	2201      	movs	r2, #1
 80082d8:	2109      	movs	r1, #9
 80082da:	f7ff ff7d 	bl	80081d8 <std>
 80082de:	68e0      	ldr	r0, [r4, #12]
 80082e0:	2202      	movs	r2, #2
 80082e2:	2112      	movs	r1, #18
 80082e4:	f7ff ff78 	bl	80081d8 <std>
 80082e8:	2301      	movs	r3, #1
 80082ea:	61a3      	str	r3, [r4, #24]
 80082ec:	e7d2      	b.n	8008294 <__sinit+0xc>
 80082ee:	bf00      	nop
 80082f0:	08009854 	.word	0x08009854
 80082f4:	08008221 	.word	0x08008221

080082f8 <__sfp>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	4607      	mov	r7, r0
 80082fc:	f7ff ffac 	bl	8008258 <__sfp_lock_acquire>
 8008300:	4b1e      	ldr	r3, [pc, #120]	; (800837c <__sfp+0x84>)
 8008302:	681e      	ldr	r6, [r3, #0]
 8008304:	69b3      	ldr	r3, [r6, #24]
 8008306:	b913      	cbnz	r3, 800830e <__sfp+0x16>
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ffbd 	bl	8008288 <__sinit>
 800830e:	3648      	adds	r6, #72	; 0x48
 8008310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008314:	3b01      	subs	r3, #1
 8008316:	d503      	bpl.n	8008320 <__sfp+0x28>
 8008318:	6833      	ldr	r3, [r6, #0]
 800831a:	b30b      	cbz	r3, 8008360 <__sfp+0x68>
 800831c:	6836      	ldr	r6, [r6, #0]
 800831e:	e7f7      	b.n	8008310 <__sfp+0x18>
 8008320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008324:	b9d5      	cbnz	r5, 800835c <__sfp+0x64>
 8008326:	4b16      	ldr	r3, [pc, #88]	; (8008380 <__sfp+0x88>)
 8008328:	60e3      	str	r3, [r4, #12]
 800832a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800832e:	6665      	str	r5, [r4, #100]	; 0x64
 8008330:	f000 f86c 	bl	800840c <__retarget_lock_init_recursive>
 8008334:	f7ff ff96 	bl	8008264 <__sfp_lock_release>
 8008338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800833c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008340:	6025      	str	r5, [r4, #0]
 8008342:	61a5      	str	r5, [r4, #24]
 8008344:	2208      	movs	r2, #8
 8008346:	4629      	mov	r1, r5
 8008348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800834c:	f000 f86f 	bl	800842e <memset>
 8008350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008358:	4620      	mov	r0, r4
 800835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835c:	3468      	adds	r4, #104	; 0x68
 800835e:	e7d9      	b.n	8008314 <__sfp+0x1c>
 8008360:	2104      	movs	r1, #4
 8008362:	4638      	mov	r0, r7
 8008364:	f7ff ff62 	bl	800822c <__sfmoreglue>
 8008368:	4604      	mov	r4, r0
 800836a:	6030      	str	r0, [r6, #0]
 800836c:	2800      	cmp	r0, #0
 800836e:	d1d5      	bne.n	800831c <__sfp+0x24>
 8008370:	f7ff ff78 	bl	8008264 <__sfp_lock_release>
 8008374:	230c      	movs	r3, #12
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	e7ee      	b.n	8008358 <__sfp+0x60>
 800837a:	bf00      	nop
 800837c:	08009854 	.word	0x08009854
 8008380:	ffff0001 	.word	0xffff0001

08008384 <_fwalk_reent>:
 8008384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008388:	4606      	mov	r6, r0
 800838a:	4688      	mov	r8, r1
 800838c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008390:	2700      	movs	r7, #0
 8008392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008396:	f1b9 0901 	subs.w	r9, r9, #1
 800839a:	d505      	bpl.n	80083a8 <_fwalk_reent+0x24>
 800839c:	6824      	ldr	r4, [r4, #0]
 800839e:	2c00      	cmp	r4, #0
 80083a0:	d1f7      	bne.n	8008392 <_fwalk_reent+0xe>
 80083a2:	4638      	mov	r0, r7
 80083a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a8:	89ab      	ldrh	r3, [r5, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d907      	bls.n	80083be <_fwalk_reent+0x3a>
 80083ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083b2:	3301      	adds	r3, #1
 80083b4:	d003      	beq.n	80083be <_fwalk_reent+0x3a>
 80083b6:	4629      	mov	r1, r5
 80083b8:	4630      	mov	r0, r6
 80083ba:	47c0      	blx	r8
 80083bc:	4307      	orrs	r7, r0
 80083be:	3568      	adds	r5, #104	; 0x68
 80083c0:	e7e9      	b.n	8008396 <_fwalk_reent+0x12>
	...

080083c4 <__libc_init_array>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4d0d      	ldr	r5, [pc, #52]	; (80083fc <__libc_init_array+0x38>)
 80083c8:	4c0d      	ldr	r4, [pc, #52]	; (8008400 <__libc_init_array+0x3c>)
 80083ca:	1b64      	subs	r4, r4, r5
 80083cc:	10a4      	asrs	r4, r4, #2
 80083ce:	2600      	movs	r6, #0
 80083d0:	42a6      	cmp	r6, r4
 80083d2:	d109      	bne.n	80083e8 <__libc_init_array+0x24>
 80083d4:	4d0b      	ldr	r5, [pc, #44]	; (8008404 <__libc_init_array+0x40>)
 80083d6:	4c0c      	ldr	r4, [pc, #48]	; (8008408 <__libc_init_array+0x44>)
 80083d8:	f001 f920 	bl	800961c <_init>
 80083dc:	1b64      	subs	r4, r4, r5
 80083de:	10a4      	asrs	r4, r4, #2
 80083e0:	2600      	movs	r6, #0
 80083e2:	42a6      	cmp	r6, r4
 80083e4:	d105      	bne.n	80083f2 <__libc_init_array+0x2e>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ec:	4798      	blx	r3
 80083ee:	3601      	adds	r6, #1
 80083f0:	e7ee      	b.n	80083d0 <__libc_init_array+0xc>
 80083f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f6:	4798      	blx	r3
 80083f8:	3601      	adds	r6, #1
 80083fa:	e7f2      	b.n	80083e2 <__libc_init_array+0x1e>
 80083fc:	08009894 	.word	0x08009894
 8008400:	08009894 	.word	0x08009894
 8008404:	08009894 	.word	0x08009894
 8008408:	08009898 	.word	0x08009898

0800840c <__retarget_lock_init_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_acquire_recursive>:
 800840e:	4770      	bx	lr

08008410 <__retarget_lock_release_recursive>:
 8008410:	4770      	bx	lr

08008412 <memcpy>:
 8008412:	440a      	add	r2, r1
 8008414:	4291      	cmp	r1, r2
 8008416:	f100 33ff 	add.w	r3, r0, #4294967295
 800841a:	d100      	bne.n	800841e <memcpy+0xc>
 800841c:	4770      	bx	lr
 800841e:	b510      	push	{r4, lr}
 8008420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008428:	4291      	cmp	r1, r2
 800842a:	d1f9      	bne.n	8008420 <memcpy+0xe>
 800842c:	bd10      	pop	{r4, pc}

0800842e <memset>:
 800842e:	4402      	add	r2, r0
 8008430:	4603      	mov	r3, r0
 8008432:	4293      	cmp	r3, r2
 8008434:	d100      	bne.n	8008438 <memset+0xa>
 8008436:	4770      	bx	lr
 8008438:	f803 1b01 	strb.w	r1, [r3], #1
 800843c:	e7f9      	b.n	8008432 <memset+0x4>
	...

08008440 <sbrk_aligned>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4e0e      	ldr	r6, [pc, #56]	; (800847c <sbrk_aligned+0x3c>)
 8008444:	460c      	mov	r4, r1
 8008446:	6831      	ldr	r1, [r6, #0]
 8008448:	4605      	mov	r5, r0
 800844a:	b911      	cbnz	r1, 8008452 <sbrk_aligned+0x12>
 800844c:	f000 f90e 	bl	800866c <_sbrk_r>
 8008450:	6030      	str	r0, [r6, #0]
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 f909 	bl	800866c <_sbrk_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d00a      	beq.n	8008474 <sbrk_aligned+0x34>
 800845e:	1cc4      	adds	r4, r0, #3
 8008460:	f024 0403 	bic.w	r4, r4, #3
 8008464:	42a0      	cmp	r0, r4
 8008466:	d007      	beq.n	8008478 <sbrk_aligned+0x38>
 8008468:	1a21      	subs	r1, r4, r0
 800846a:	4628      	mov	r0, r5
 800846c:	f000 f8fe 	bl	800866c <_sbrk_r>
 8008470:	3001      	adds	r0, #1
 8008472:	d101      	bne.n	8008478 <sbrk_aligned+0x38>
 8008474:	f04f 34ff 	mov.w	r4, #4294967295
 8008478:	4620      	mov	r0, r4
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	200051e0 	.word	0x200051e0

08008480 <_malloc_r>:
 8008480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008484:	1ccd      	adds	r5, r1, #3
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	2d00      	cmp	r5, #0
 8008494:	4607      	mov	r7, r0
 8008496:	db01      	blt.n	800849c <_malloc_r+0x1c>
 8008498:	42a9      	cmp	r1, r5
 800849a:	d905      	bls.n	80084a8 <_malloc_r+0x28>
 800849c:	230c      	movs	r3, #12
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	2600      	movs	r6, #0
 80084a2:	4630      	mov	r0, r6
 80084a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a8:	4e2e      	ldr	r6, [pc, #184]	; (8008564 <_malloc_r+0xe4>)
 80084aa:	f000 fa69 	bl	8008980 <__malloc_lock>
 80084ae:	6833      	ldr	r3, [r6, #0]
 80084b0:	461c      	mov	r4, r3
 80084b2:	bb34      	cbnz	r4, 8008502 <_malloc_r+0x82>
 80084b4:	4629      	mov	r1, r5
 80084b6:	4638      	mov	r0, r7
 80084b8:	f7ff ffc2 	bl	8008440 <sbrk_aligned>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	4604      	mov	r4, r0
 80084c0:	d14d      	bne.n	800855e <_malloc_r+0xde>
 80084c2:	6834      	ldr	r4, [r6, #0]
 80084c4:	4626      	mov	r6, r4
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d140      	bne.n	800854c <_malloc_r+0xcc>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	4631      	mov	r1, r6
 80084ce:	4638      	mov	r0, r7
 80084d0:	eb04 0803 	add.w	r8, r4, r3
 80084d4:	f000 f8ca 	bl	800866c <_sbrk_r>
 80084d8:	4580      	cmp	r8, r0
 80084da:	d13a      	bne.n	8008552 <_malloc_r+0xd2>
 80084dc:	6821      	ldr	r1, [r4, #0]
 80084de:	3503      	adds	r5, #3
 80084e0:	1a6d      	subs	r5, r5, r1
 80084e2:	f025 0503 	bic.w	r5, r5, #3
 80084e6:	3508      	adds	r5, #8
 80084e8:	2d0c      	cmp	r5, #12
 80084ea:	bf38      	it	cc
 80084ec:	250c      	movcc	r5, #12
 80084ee:	4629      	mov	r1, r5
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff ffa5 	bl	8008440 <sbrk_aligned>
 80084f6:	3001      	adds	r0, #1
 80084f8:	d02b      	beq.n	8008552 <_malloc_r+0xd2>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	442b      	add	r3, r5
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	e00e      	b.n	8008520 <_malloc_r+0xa0>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	1b52      	subs	r2, r2, r5
 8008506:	d41e      	bmi.n	8008546 <_malloc_r+0xc6>
 8008508:	2a0b      	cmp	r2, #11
 800850a:	d916      	bls.n	800853a <_malloc_r+0xba>
 800850c:	1961      	adds	r1, r4, r5
 800850e:	42a3      	cmp	r3, r4
 8008510:	6025      	str	r5, [r4, #0]
 8008512:	bf18      	it	ne
 8008514:	6059      	strne	r1, [r3, #4]
 8008516:	6863      	ldr	r3, [r4, #4]
 8008518:	bf08      	it	eq
 800851a:	6031      	streq	r1, [r6, #0]
 800851c:	5162      	str	r2, [r4, r5]
 800851e:	604b      	str	r3, [r1, #4]
 8008520:	4638      	mov	r0, r7
 8008522:	f104 060b 	add.w	r6, r4, #11
 8008526:	f000 fa31 	bl	800898c <__malloc_unlock>
 800852a:	f026 0607 	bic.w	r6, r6, #7
 800852e:	1d23      	adds	r3, r4, #4
 8008530:	1af2      	subs	r2, r6, r3
 8008532:	d0b6      	beq.n	80084a2 <_malloc_r+0x22>
 8008534:	1b9b      	subs	r3, r3, r6
 8008536:	50a3      	str	r3, [r4, r2]
 8008538:	e7b3      	b.n	80084a2 <_malloc_r+0x22>
 800853a:	6862      	ldr	r2, [r4, #4]
 800853c:	42a3      	cmp	r3, r4
 800853e:	bf0c      	ite	eq
 8008540:	6032      	streq	r2, [r6, #0]
 8008542:	605a      	strne	r2, [r3, #4]
 8008544:	e7ec      	b.n	8008520 <_malloc_r+0xa0>
 8008546:	4623      	mov	r3, r4
 8008548:	6864      	ldr	r4, [r4, #4]
 800854a:	e7b2      	b.n	80084b2 <_malloc_r+0x32>
 800854c:	4634      	mov	r4, r6
 800854e:	6876      	ldr	r6, [r6, #4]
 8008550:	e7b9      	b.n	80084c6 <_malloc_r+0x46>
 8008552:	230c      	movs	r3, #12
 8008554:	603b      	str	r3, [r7, #0]
 8008556:	4638      	mov	r0, r7
 8008558:	f000 fa18 	bl	800898c <__malloc_unlock>
 800855c:	e7a1      	b.n	80084a2 <_malloc_r+0x22>
 800855e:	6025      	str	r5, [r4, #0]
 8008560:	e7de      	b.n	8008520 <_malloc_r+0xa0>
 8008562:	bf00      	nop
 8008564:	200051dc 	.word	0x200051dc

08008568 <iprintf>:
 8008568:	b40f      	push	{r0, r1, r2, r3}
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <iprintf+0x2c>)
 800856c:	b513      	push	{r0, r1, r4, lr}
 800856e:	681c      	ldr	r4, [r3, #0]
 8008570:	b124      	cbz	r4, 800857c <iprintf+0x14>
 8008572:	69a3      	ldr	r3, [r4, #24]
 8008574:	b913      	cbnz	r3, 800857c <iprintf+0x14>
 8008576:	4620      	mov	r0, r4
 8008578:	f7ff fe86 	bl	8008288 <__sinit>
 800857c:	ab05      	add	r3, sp, #20
 800857e:	9a04      	ldr	r2, [sp, #16]
 8008580:	68a1      	ldr	r1, [r4, #8]
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fbd9 	bl	8008d3c <_vfiprintf_r>
 800858a:	b002      	add	sp, #8
 800858c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008590:	b004      	add	sp, #16
 8008592:	4770      	bx	lr
 8008594:	20000018 	.word	0x20000018

08008598 <cleanup_glue>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	460c      	mov	r4, r1
 800859c:	6809      	ldr	r1, [r1, #0]
 800859e:	4605      	mov	r5, r0
 80085a0:	b109      	cbz	r1, 80085a6 <cleanup_glue+0xe>
 80085a2:	f7ff fff9 	bl	8008598 <cleanup_glue>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ae:	f000 b9f3 	b.w	8008998 <_free_r>
	...

080085b4 <_reclaim_reent>:
 80085b4:	4b2c      	ldr	r3, [pc, #176]	; (8008668 <_reclaim_reent+0xb4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4283      	cmp	r3, r0
 80085ba:	b570      	push	{r4, r5, r6, lr}
 80085bc:	4604      	mov	r4, r0
 80085be:	d051      	beq.n	8008664 <_reclaim_reent+0xb0>
 80085c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80085c2:	b143      	cbz	r3, 80085d6 <_reclaim_reent+0x22>
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d14a      	bne.n	8008660 <_reclaim_reent+0xac>
 80085ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085cc:	6819      	ldr	r1, [r3, #0]
 80085ce:	b111      	cbz	r1, 80085d6 <_reclaim_reent+0x22>
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 f9e1 	bl	8008998 <_free_r>
 80085d6:	6961      	ldr	r1, [r4, #20]
 80085d8:	b111      	cbz	r1, 80085e0 <_reclaim_reent+0x2c>
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 f9dc 	bl	8008998 <_free_r>
 80085e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085e2:	b111      	cbz	r1, 80085ea <_reclaim_reent+0x36>
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 f9d7 	bl	8008998 <_free_r>
 80085ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085ec:	b111      	cbz	r1, 80085f4 <_reclaim_reent+0x40>
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 f9d2 	bl	8008998 <_free_r>
 80085f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80085f6:	b111      	cbz	r1, 80085fe <_reclaim_reent+0x4a>
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 f9cd 	bl	8008998 <_free_r>
 80085fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008600:	b111      	cbz	r1, 8008608 <_reclaim_reent+0x54>
 8008602:	4620      	mov	r0, r4
 8008604:	f000 f9c8 	bl	8008998 <_free_r>
 8008608:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800860a:	b111      	cbz	r1, 8008612 <_reclaim_reent+0x5e>
 800860c:	4620      	mov	r0, r4
 800860e:	f000 f9c3 	bl	8008998 <_free_r>
 8008612:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008614:	b111      	cbz	r1, 800861c <_reclaim_reent+0x68>
 8008616:	4620      	mov	r0, r4
 8008618:	f000 f9be 	bl	8008998 <_free_r>
 800861c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800861e:	b111      	cbz	r1, 8008626 <_reclaim_reent+0x72>
 8008620:	4620      	mov	r0, r4
 8008622:	f000 f9b9 	bl	8008998 <_free_r>
 8008626:	69a3      	ldr	r3, [r4, #24]
 8008628:	b1e3      	cbz	r3, 8008664 <_reclaim_reent+0xb0>
 800862a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800862c:	4620      	mov	r0, r4
 800862e:	4798      	blx	r3
 8008630:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008632:	b1b9      	cbz	r1, 8008664 <_reclaim_reent+0xb0>
 8008634:	4620      	mov	r0, r4
 8008636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800863a:	f7ff bfad 	b.w	8008598 <cleanup_glue>
 800863e:	5949      	ldr	r1, [r1, r5]
 8008640:	b941      	cbnz	r1, 8008654 <_reclaim_reent+0xa0>
 8008642:	3504      	adds	r5, #4
 8008644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008646:	2d80      	cmp	r5, #128	; 0x80
 8008648:	68d9      	ldr	r1, [r3, #12]
 800864a:	d1f8      	bne.n	800863e <_reclaim_reent+0x8a>
 800864c:	4620      	mov	r0, r4
 800864e:	f000 f9a3 	bl	8008998 <_free_r>
 8008652:	e7ba      	b.n	80085ca <_reclaim_reent+0x16>
 8008654:	680e      	ldr	r6, [r1, #0]
 8008656:	4620      	mov	r0, r4
 8008658:	f000 f99e 	bl	8008998 <_free_r>
 800865c:	4631      	mov	r1, r6
 800865e:	e7ef      	b.n	8008640 <_reclaim_reent+0x8c>
 8008660:	2500      	movs	r5, #0
 8008662:	e7ef      	b.n	8008644 <_reclaim_reent+0x90>
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	bf00      	nop
 8008668:	20000018 	.word	0x20000018

0800866c <_sbrk_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d06      	ldr	r5, [pc, #24]	; (8008688 <_sbrk_r+0x1c>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7f8 fff4 	bl	8001664 <_sbrk>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_sbrk_r+0x1a>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_sbrk_r+0x1a>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	200051e4 	.word	0x200051e4

0800868c <sniprintf>:
 800868c:	b40c      	push	{r2, r3}
 800868e:	b530      	push	{r4, r5, lr}
 8008690:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <sniprintf+0x64>)
 8008692:	1e0c      	subs	r4, r1, #0
 8008694:	681d      	ldr	r5, [r3, #0]
 8008696:	b09d      	sub	sp, #116	; 0x74
 8008698:	da08      	bge.n	80086ac <sniprintf+0x20>
 800869a:	238b      	movs	r3, #139	; 0x8b
 800869c:	602b      	str	r3, [r5, #0]
 800869e:	f04f 30ff 	mov.w	r0, #4294967295
 80086a2:	b01d      	add	sp, #116	; 0x74
 80086a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a8:	b002      	add	sp, #8
 80086aa:	4770      	bx	lr
 80086ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80086b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086b4:	bf14      	ite	ne
 80086b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086ba:	4623      	moveq	r3, r4
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086c4:	9002      	str	r0, [sp, #8]
 80086c6:	9006      	str	r0, [sp, #24]
 80086c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086ce:	ab21      	add	r3, sp, #132	; 0x84
 80086d0:	a902      	add	r1, sp, #8
 80086d2:	4628      	mov	r0, r5
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	f000 fa07 	bl	8008ae8 <_svfiprintf_r>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	bfbc      	itt	lt
 80086de:	238b      	movlt	r3, #139	; 0x8b
 80086e0:	602b      	strlt	r3, [r5, #0]
 80086e2:	2c00      	cmp	r4, #0
 80086e4:	d0dd      	beq.n	80086a2 <sniprintf+0x16>
 80086e6:	9b02      	ldr	r3, [sp, #8]
 80086e8:	2200      	movs	r2, #0
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	e7d9      	b.n	80086a2 <sniprintf+0x16>
 80086ee:	bf00      	nop
 80086f0:	20000018 	.word	0x20000018

080086f4 <__sread>:
 80086f4:	b510      	push	{r4, lr}
 80086f6:	460c      	mov	r4, r1
 80086f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fc:	f000 fde2 	bl	80092c4 <_read_r>
 8008700:	2800      	cmp	r0, #0
 8008702:	bfab      	itete	ge
 8008704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008706:	89a3      	ldrhlt	r3, [r4, #12]
 8008708:	181b      	addge	r3, r3, r0
 800870a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800870e:	bfac      	ite	ge
 8008710:	6563      	strge	r3, [r4, #84]	; 0x54
 8008712:	81a3      	strhlt	r3, [r4, #12]
 8008714:	bd10      	pop	{r4, pc}

08008716 <__swrite>:
 8008716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	461f      	mov	r7, r3
 800871c:	898b      	ldrh	r3, [r1, #12]
 800871e:	05db      	lsls	r3, r3, #23
 8008720:	4605      	mov	r5, r0
 8008722:	460c      	mov	r4, r1
 8008724:	4616      	mov	r6, r2
 8008726:	d505      	bpl.n	8008734 <__swrite+0x1e>
 8008728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872c:	2302      	movs	r3, #2
 800872e:	2200      	movs	r2, #0
 8008730:	f000 f914 	bl	800895c <_lseek_r>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800873a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	4632      	mov	r2, r6
 8008742:	463b      	mov	r3, r7
 8008744:	4628      	mov	r0, r5
 8008746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800874a:	f000 b823 	b.w	8008794 <_write_r>

0800874e <__sseek>:
 800874e:	b510      	push	{r4, lr}
 8008750:	460c      	mov	r4, r1
 8008752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008756:	f000 f901 	bl	800895c <_lseek_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	bf15      	itete	ne
 8008760:	6560      	strne	r0, [r4, #84]	; 0x54
 8008762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800876a:	81a3      	strheq	r3, [r4, #12]
 800876c:	bf18      	it	ne
 800876e:	81a3      	strhne	r3, [r4, #12]
 8008770:	bd10      	pop	{r4, pc}

08008772 <__sclose>:
 8008772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008776:	f000 b81f 	b.w	80087b8 <_close_r>

0800877a <strnlen>:
 800877a:	b510      	push	{r4, lr}
 800877c:	4602      	mov	r2, r0
 800877e:	4401      	add	r1, r0
 8008780:	428a      	cmp	r2, r1
 8008782:	4613      	mov	r3, r2
 8008784:	d003      	beq.n	800878e <strnlen+0x14>
 8008786:	781c      	ldrb	r4, [r3, #0]
 8008788:	3201      	adds	r2, #1
 800878a:	2c00      	cmp	r4, #0
 800878c:	d1f8      	bne.n	8008780 <strnlen+0x6>
 800878e:	1a18      	subs	r0, r3, r0
 8008790:	bd10      	pop	{r4, pc}
	...

08008794 <_write_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d07      	ldr	r5, [pc, #28]	; (80087b4 <_write_r+0x20>)
 8008798:	4604      	mov	r4, r0
 800879a:	4608      	mov	r0, r1
 800879c:	4611      	mov	r1, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	602a      	str	r2, [r5, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f7f8 ff0d 	bl	80015c2 <_write>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_write_r+0x1e>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_write_r+0x1e>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	200051e4 	.word	0x200051e4

080087b8 <_close_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d06      	ldr	r5, [pc, #24]	; (80087d4 <_close_r+0x1c>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7f8 ff19 	bl	80015fa <_close>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_close_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_close_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	200051e4 	.word	0x200051e4

080087d8 <__sflush_r>:
 80087d8:	898a      	ldrh	r2, [r1, #12]
 80087da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087de:	4605      	mov	r5, r0
 80087e0:	0710      	lsls	r0, r2, #28
 80087e2:	460c      	mov	r4, r1
 80087e4:	d458      	bmi.n	8008898 <__sflush_r+0xc0>
 80087e6:	684b      	ldr	r3, [r1, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dc05      	bgt.n	80087f8 <__sflush_r+0x20>
 80087ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dc02      	bgt.n	80087f8 <__sflush_r+0x20>
 80087f2:	2000      	movs	r0, #0
 80087f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	d0f9      	beq.n	80087f2 <__sflush_r+0x1a>
 80087fe:	2300      	movs	r3, #0
 8008800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008804:	682f      	ldr	r7, [r5, #0]
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	d032      	beq.n	8008870 <__sflush_r+0x98>
 800880a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	075a      	lsls	r2, r3, #29
 8008810:	d505      	bpl.n	800881e <__sflush_r+0x46>
 8008812:	6863      	ldr	r3, [r4, #4]
 8008814:	1ac0      	subs	r0, r0, r3
 8008816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008818:	b10b      	cbz	r3, 800881e <__sflush_r+0x46>
 800881a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800881c:	1ac0      	subs	r0, r0, r3
 800881e:	2300      	movs	r3, #0
 8008820:	4602      	mov	r2, r0
 8008822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008824:	6a21      	ldr	r1, [r4, #32]
 8008826:	4628      	mov	r0, r5
 8008828:	47b0      	blx	r6
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	d106      	bne.n	800883e <__sflush_r+0x66>
 8008830:	6829      	ldr	r1, [r5, #0]
 8008832:	291d      	cmp	r1, #29
 8008834:	d82c      	bhi.n	8008890 <__sflush_r+0xb8>
 8008836:	4a2a      	ldr	r2, [pc, #168]	; (80088e0 <__sflush_r+0x108>)
 8008838:	40ca      	lsrs	r2, r1
 800883a:	07d6      	lsls	r6, r2, #31
 800883c:	d528      	bpl.n	8008890 <__sflush_r+0xb8>
 800883e:	2200      	movs	r2, #0
 8008840:	6062      	str	r2, [r4, #4]
 8008842:	04d9      	lsls	r1, r3, #19
 8008844:	6922      	ldr	r2, [r4, #16]
 8008846:	6022      	str	r2, [r4, #0]
 8008848:	d504      	bpl.n	8008854 <__sflush_r+0x7c>
 800884a:	1c42      	adds	r2, r0, #1
 800884c:	d101      	bne.n	8008852 <__sflush_r+0x7a>
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	b903      	cbnz	r3, 8008854 <__sflush_r+0x7c>
 8008852:	6560      	str	r0, [r4, #84]	; 0x54
 8008854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008856:	602f      	str	r7, [r5, #0]
 8008858:	2900      	cmp	r1, #0
 800885a:	d0ca      	beq.n	80087f2 <__sflush_r+0x1a>
 800885c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008860:	4299      	cmp	r1, r3
 8008862:	d002      	beq.n	800886a <__sflush_r+0x92>
 8008864:	4628      	mov	r0, r5
 8008866:	f000 f897 	bl	8008998 <_free_r>
 800886a:	2000      	movs	r0, #0
 800886c:	6360      	str	r0, [r4, #52]	; 0x34
 800886e:	e7c1      	b.n	80087f4 <__sflush_r+0x1c>
 8008870:	6a21      	ldr	r1, [r4, #32]
 8008872:	2301      	movs	r3, #1
 8008874:	4628      	mov	r0, r5
 8008876:	47b0      	blx	r6
 8008878:	1c41      	adds	r1, r0, #1
 800887a:	d1c7      	bne.n	800880c <__sflush_r+0x34>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0c4      	beq.n	800880c <__sflush_r+0x34>
 8008882:	2b1d      	cmp	r3, #29
 8008884:	d001      	beq.n	800888a <__sflush_r+0xb2>
 8008886:	2b16      	cmp	r3, #22
 8008888:	d101      	bne.n	800888e <__sflush_r+0xb6>
 800888a:	602f      	str	r7, [r5, #0]
 800888c:	e7b1      	b.n	80087f2 <__sflush_r+0x1a>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	e7ad      	b.n	80087f4 <__sflush_r+0x1c>
 8008898:	690f      	ldr	r7, [r1, #16]
 800889a:	2f00      	cmp	r7, #0
 800889c:	d0a9      	beq.n	80087f2 <__sflush_r+0x1a>
 800889e:	0793      	lsls	r3, r2, #30
 80088a0:	680e      	ldr	r6, [r1, #0]
 80088a2:	bf08      	it	eq
 80088a4:	694b      	ldreq	r3, [r1, #20]
 80088a6:	600f      	str	r7, [r1, #0]
 80088a8:	bf18      	it	ne
 80088aa:	2300      	movne	r3, #0
 80088ac:	eba6 0807 	sub.w	r8, r6, r7
 80088b0:	608b      	str	r3, [r1, #8]
 80088b2:	f1b8 0f00 	cmp.w	r8, #0
 80088b6:	dd9c      	ble.n	80087f2 <__sflush_r+0x1a>
 80088b8:	6a21      	ldr	r1, [r4, #32]
 80088ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088bc:	4643      	mov	r3, r8
 80088be:	463a      	mov	r2, r7
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b0      	blx	r6
 80088c4:	2800      	cmp	r0, #0
 80088c6:	dc06      	bgt.n	80088d6 <__sflush_r+0xfe>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	e78e      	b.n	80087f4 <__sflush_r+0x1c>
 80088d6:	4407      	add	r7, r0
 80088d8:	eba8 0800 	sub.w	r8, r8, r0
 80088dc:	e7e9      	b.n	80088b2 <__sflush_r+0xda>
 80088de:	bf00      	nop
 80088e0:	20400001 	.word	0x20400001

080088e4 <_fflush_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	690b      	ldr	r3, [r1, #16]
 80088e8:	4605      	mov	r5, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	b913      	cbnz	r3, 80088f4 <_fflush_r+0x10>
 80088ee:	2500      	movs	r5, #0
 80088f0:	4628      	mov	r0, r5
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	b118      	cbz	r0, 80088fe <_fflush_r+0x1a>
 80088f6:	6983      	ldr	r3, [r0, #24]
 80088f8:	b90b      	cbnz	r3, 80088fe <_fflush_r+0x1a>
 80088fa:	f7ff fcc5 	bl	8008288 <__sinit>
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <_fflush_r+0x6c>)
 8008900:	429c      	cmp	r4, r3
 8008902:	d11b      	bne.n	800893c <_fflush_r+0x58>
 8008904:	686c      	ldr	r4, [r5, #4]
 8008906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ef      	beq.n	80088ee <_fflush_r+0xa>
 800890e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008910:	07d0      	lsls	r0, r2, #31
 8008912:	d404      	bmi.n	800891e <_fflush_r+0x3a>
 8008914:	0599      	lsls	r1, r3, #22
 8008916:	d402      	bmi.n	800891e <_fflush_r+0x3a>
 8008918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891a:	f7ff fd78 	bl	800840e <__retarget_lock_acquire_recursive>
 800891e:	4628      	mov	r0, r5
 8008920:	4621      	mov	r1, r4
 8008922:	f7ff ff59 	bl	80087d8 <__sflush_r>
 8008926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008928:	07da      	lsls	r2, r3, #31
 800892a:	4605      	mov	r5, r0
 800892c:	d4e0      	bmi.n	80088f0 <_fflush_r+0xc>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	059b      	lsls	r3, r3, #22
 8008932:	d4dd      	bmi.n	80088f0 <_fflush_r+0xc>
 8008934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008936:	f7ff fd6b 	bl	8008410 <__retarget_lock_release_recursive>
 800893a:	e7d9      	b.n	80088f0 <_fflush_r+0xc>
 800893c:	4b05      	ldr	r3, [pc, #20]	; (8008954 <_fflush_r+0x70>)
 800893e:	429c      	cmp	r4, r3
 8008940:	d101      	bne.n	8008946 <_fflush_r+0x62>
 8008942:	68ac      	ldr	r4, [r5, #8]
 8008944:	e7df      	b.n	8008906 <_fflush_r+0x22>
 8008946:	4b04      	ldr	r3, [pc, #16]	; (8008958 <_fflush_r+0x74>)
 8008948:	429c      	cmp	r4, r3
 800894a:	bf08      	it	eq
 800894c:	68ec      	ldreq	r4, [r5, #12]
 800894e:	e7da      	b.n	8008906 <_fflush_r+0x22>
 8008950:	08009814 	.word	0x08009814
 8008954:	08009834 	.word	0x08009834
 8008958:	080097f4 	.word	0x080097f4

0800895c <_lseek_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	; (800897c <_lseek_r+0x20>)
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	2200      	movs	r2, #0
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f8 fe6c 	bl	8001648 <_lseek>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_lseek_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_lseek_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	200051e4 	.word	0x200051e4

08008980 <__malloc_lock>:
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <__malloc_lock+0x8>)
 8008982:	f7ff bd44 	b.w	800840e <__retarget_lock_acquire_recursive>
 8008986:	bf00      	nop
 8008988:	200051d8 	.word	0x200051d8

0800898c <__malloc_unlock>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__malloc_unlock+0x8>)
 800898e:	f7ff bd3f 	b.w	8008410 <__retarget_lock_release_recursive>
 8008992:	bf00      	nop
 8008994:	200051d8 	.word	0x200051d8

08008998 <_free_r>:
 8008998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899a:	2900      	cmp	r1, #0
 800899c:	d044      	beq.n	8008a28 <_free_r+0x90>
 800899e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a2:	9001      	str	r0, [sp, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f1a1 0404 	sub.w	r4, r1, #4
 80089aa:	bfb8      	it	lt
 80089ac:	18e4      	addlt	r4, r4, r3
 80089ae:	f7ff ffe7 	bl	8008980 <__malloc_lock>
 80089b2:	4a1e      	ldr	r2, [pc, #120]	; (8008a2c <_free_r+0x94>)
 80089b4:	9801      	ldr	r0, [sp, #4]
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	b933      	cbnz	r3, 80089c8 <_free_r+0x30>
 80089ba:	6063      	str	r3, [r4, #4]
 80089bc:	6014      	str	r4, [r2, #0]
 80089be:	b003      	add	sp, #12
 80089c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089c4:	f7ff bfe2 	b.w	800898c <__malloc_unlock>
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d908      	bls.n	80089de <_free_r+0x46>
 80089cc:	6825      	ldr	r5, [r4, #0]
 80089ce:	1961      	adds	r1, r4, r5
 80089d0:	428b      	cmp	r3, r1
 80089d2:	bf01      	itttt	eq
 80089d4:	6819      	ldreq	r1, [r3, #0]
 80089d6:	685b      	ldreq	r3, [r3, #4]
 80089d8:	1949      	addeq	r1, r1, r5
 80089da:	6021      	streq	r1, [r4, #0]
 80089dc:	e7ed      	b.n	80089ba <_free_r+0x22>
 80089de:	461a      	mov	r2, r3
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	b10b      	cbz	r3, 80089e8 <_free_r+0x50>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d9fa      	bls.n	80089de <_free_r+0x46>
 80089e8:	6811      	ldr	r1, [r2, #0]
 80089ea:	1855      	adds	r5, r2, r1
 80089ec:	42a5      	cmp	r5, r4
 80089ee:	d10b      	bne.n	8008a08 <_free_r+0x70>
 80089f0:	6824      	ldr	r4, [r4, #0]
 80089f2:	4421      	add	r1, r4
 80089f4:	1854      	adds	r4, r2, r1
 80089f6:	42a3      	cmp	r3, r4
 80089f8:	6011      	str	r1, [r2, #0]
 80089fa:	d1e0      	bne.n	80089be <_free_r+0x26>
 80089fc:	681c      	ldr	r4, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	6053      	str	r3, [r2, #4]
 8008a02:	4421      	add	r1, r4
 8008a04:	6011      	str	r1, [r2, #0]
 8008a06:	e7da      	b.n	80089be <_free_r+0x26>
 8008a08:	d902      	bls.n	8008a10 <_free_r+0x78>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6003      	str	r3, [r0, #0]
 8008a0e:	e7d6      	b.n	80089be <_free_r+0x26>
 8008a10:	6825      	ldr	r5, [r4, #0]
 8008a12:	1961      	adds	r1, r4, r5
 8008a14:	428b      	cmp	r3, r1
 8008a16:	bf04      	itt	eq
 8008a18:	6819      	ldreq	r1, [r3, #0]
 8008a1a:	685b      	ldreq	r3, [r3, #4]
 8008a1c:	6063      	str	r3, [r4, #4]
 8008a1e:	bf04      	itt	eq
 8008a20:	1949      	addeq	r1, r1, r5
 8008a22:	6021      	streq	r1, [r4, #0]
 8008a24:	6054      	str	r4, [r2, #4]
 8008a26:	e7ca      	b.n	80089be <_free_r+0x26>
 8008a28:	b003      	add	sp, #12
 8008a2a:	bd30      	pop	{r4, r5, pc}
 8008a2c:	200051dc 	.word	0x200051dc

08008a30 <__ssputs_r>:
 8008a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	688e      	ldr	r6, [r1, #8]
 8008a36:	429e      	cmp	r6, r3
 8008a38:	4682      	mov	sl, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	4690      	mov	r8, r2
 8008a3e:	461f      	mov	r7, r3
 8008a40:	d838      	bhi.n	8008ab4 <__ssputs_r+0x84>
 8008a42:	898a      	ldrh	r2, [r1, #12]
 8008a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a48:	d032      	beq.n	8008ab0 <__ssputs_r+0x80>
 8008a4a:	6825      	ldr	r5, [r4, #0]
 8008a4c:	6909      	ldr	r1, [r1, #16]
 8008a4e:	eba5 0901 	sub.w	r9, r5, r1
 8008a52:	6965      	ldr	r5, [r4, #20]
 8008a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	444b      	add	r3, r9
 8008a60:	106d      	asrs	r5, r5, #1
 8008a62:	429d      	cmp	r5, r3
 8008a64:	bf38      	it	cc
 8008a66:	461d      	movcc	r5, r3
 8008a68:	0553      	lsls	r3, r2, #21
 8008a6a:	d531      	bpl.n	8008ad0 <__ssputs_r+0xa0>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7ff fd07 	bl	8008480 <_malloc_r>
 8008a72:	4606      	mov	r6, r0
 8008a74:	b950      	cbnz	r0, 8008a8c <__ssputs_r+0x5c>
 8008a76:	230c      	movs	r3, #12
 8008a78:	f8ca 3000 	str.w	r3, [sl]
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8c:	6921      	ldr	r1, [r4, #16]
 8008a8e:	464a      	mov	r2, r9
 8008a90:	f7ff fcbf 	bl	8008412 <memcpy>
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	6126      	str	r6, [r4, #16]
 8008aa2:	6165      	str	r5, [r4, #20]
 8008aa4:	444e      	add	r6, r9
 8008aa6:	eba5 0509 	sub.w	r5, r5, r9
 8008aaa:	6026      	str	r6, [r4, #0]
 8008aac:	60a5      	str	r5, [r4, #8]
 8008aae:	463e      	mov	r6, r7
 8008ab0:	42be      	cmp	r6, r7
 8008ab2:	d900      	bls.n	8008ab6 <__ssputs_r+0x86>
 8008ab4:	463e      	mov	r6, r7
 8008ab6:	6820      	ldr	r0, [r4, #0]
 8008ab8:	4632      	mov	r2, r6
 8008aba:	4641      	mov	r1, r8
 8008abc:	f000 fd3a 	bl	8009534 <memmove>
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	1b9b      	subs	r3, r3, r6
 8008ac4:	60a3      	str	r3, [r4, #8]
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	4433      	add	r3, r6
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	2000      	movs	r0, #0
 8008ace:	e7db      	b.n	8008a88 <__ssputs_r+0x58>
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	f000 fd49 	bl	8009568 <_realloc_r>
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d1e1      	bne.n	8008aa0 <__ssputs_r+0x70>
 8008adc:	6921      	ldr	r1, [r4, #16]
 8008ade:	4650      	mov	r0, sl
 8008ae0:	f7ff ff5a 	bl	8008998 <_free_r>
 8008ae4:	e7c7      	b.n	8008a76 <__ssputs_r+0x46>
	...

08008ae8 <_svfiprintf_r>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	4698      	mov	r8, r3
 8008aee:	898b      	ldrh	r3, [r1, #12]
 8008af0:	061b      	lsls	r3, r3, #24
 8008af2:	b09d      	sub	sp, #116	; 0x74
 8008af4:	4607      	mov	r7, r0
 8008af6:	460d      	mov	r5, r1
 8008af8:	4614      	mov	r4, r2
 8008afa:	d50e      	bpl.n	8008b1a <_svfiprintf_r+0x32>
 8008afc:	690b      	ldr	r3, [r1, #16]
 8008afe:	b963      	cbnz	r3, 8008b1a <_svfiprintf_r+0x32>
 8008b00:	2140      	movs	r1, #64	; 0x40
 8008b02:	f7ff fcbd 	bl	8008480 <_malloc_r>
 8008b06:	6028      	str	r0, [r5, #0]
 8008b08:	6128      	str	r0, [r5, #16]
 8008b0a:	b920      	cbnz	r0, 8008b16 <_svfiprintf_r+0x2e>
 8008b0c:	230c      	movs	r3, #12
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	e0d1      	b.n	8008cba <_svfiprintf_r+0x1d2>
 8008b16:	2340      	movs	r3, #64	; 0x40
 8008b18:	616b      	str	r3, [r5, #20]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1e:	2320      	movs	r3, #32
 8008b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b28:	2330      	movs	r3, #48	; 0x30
 8008b2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008cd4 <_svfiprintf_r+0x1ec>
 8008b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b32:	f04f 0901 	mov.w	r9, #1
 8008b36:	4623      	mov	r3, r4
 8008b38:	469a      	mov	sl, r3
 8008b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3e:	b10a      	cbz	r2, 8008b44 <_svfiprintf_r+0x5c>
 8008b40:	2a25      	cmp	r2, #37	; 0x25
 8008b42:	d1f9      	bne.n	8008b38 <_svfiprintf_r+0x50>
 8008b44:	ebba 0b04 	subs.w	fp, sl, r4
 8008b48:	d00b      	beq.n	8008b62 <_svfiprintf_r+0x7a>
 8008b4a:	465b      	mov	r3, fp
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7ff ff6d 	bl	8008a30 <__ssputs_r>
 8008b56:	3001      	adds	r0, #1
 8008b58:	f000 80aa 	beq.w	8008cb0 <_svfiprintf_r+0x1c8>
 8008b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5e:	445a      	add	r2, fp
 8008b60:	9209      	str	r2, [sp, #36]	; 0x24
 8008b62:	f89a 3000 	ldrb.w	r3, [sl]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 80a2 	beq.w	8008cb0 <_svfiprintf_r+0x1c8>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b76:	f10a 0a01 	add.w	sl, sl, #1
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	9307      	str	r3, [sp, #28]
 8008b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b82:	931a      	str	r3, [sp, #104]	; 0x68
 8008b84:	4654      	mov	r4, sl
 8008b86:	2205      	movs	r2, #5
 8008b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8c:	4851      	ldr	r0, [pc, #324]	; (8008cd4 <_svfiprintf_r+0x1ec>)
 8008b8e:	f7f7 fb27 	bl	80001e0 <memchr>
 8008b92:	9a04      	ldr	r2, [sp, #16]
 8008b94:	b9d8      	cbnz	r0, 8008bce <_svfiprintf_r+0xe6>
 8008b96:	06d0      	lsls	r0, r2, #27
 8008b98:	bf44      	itt	mi
 8008b9a:	2320      	movmi	r3, #32
 8008b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba0:	0711      	lsls	r1, r2, #28
 8008ba2:	bf44      	itt	mi
 8008ba4:	232b      	movmi	r3, #43	; 0x2b
 8008ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008baa:	f89a 3000 	ldrb.w	r3, [sl]
 8008bae:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb0:	d015      	beq.n	8008bde <_svfiprintf_r+0xf6>
 8008bb2:	9a07      	ldr	r2, [sp, #28]
 8008bb4:	4654      	mov	r4, sl
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f04f 0c0a 	mov.w	ip, #10
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc2:	3b30      	subs	r3, #48	; 0x30
 8008bc4:	2b09      	cmp	r3, #9
 8008bc6:	d94e      	bls.n	8008c66 <_svfiprintf_r+0x17e>
 8008bc8:	b1b0      	cbz	r0, 8008bf8 <_svfiprintf_r+0x110>
 8008bca:	9207      	str	r2, [sp, #28]
 8008bcc:	e014      	b.n	8008bf8 <_svfiprintf_r+0x110>
 8008bce:	eba0 0308 	sub.w	r3, r0, r8
 8008bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	46a2      	mov	sl, r4
 8008bdc:	e7d2      	b.n	8008b84 <_svfiprintf_r+0x9c>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	1d19      	adds	r1, r3, #4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	9103      	str	r1, [sp, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bfbb      	ittet	lt
 8008bea:	425b      	neglt	r3, r3
 8008bec:	f042 0202 	orrlt.w	r2, r2, #2
 8008bf0:	9307      	strge	r3, [sp, #28]
 8008bf2:	9307      	strlt	r3, [sp, #28]
 8008bf4:	bfb8      	it	lt
 8008bf6:	9204      	strlt	r2, [sp, #16]
 8008bf8:	7823      	ldrb	r3, [r4, #0]
 8008bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8008bfc:	d10c      	bne.n	8008c18 <_svfiprintf_r+0x130>
 8008bfe:	7863      	ldrb	r3, [r4, #1]
 8008c00:	2b2a      	cmp	r3, #42	; 0x2a
 8008c02:	d135      	bne.n	8008c70 <_svfiprintf_r+0x188>
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	1d1a      	adds	r2, r3, #4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	9203      	str	r2, [sp, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfb8      	it	lt
 8008c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c14:	3402      	adds	r4, #2
 8008c16:	9305      	str	r3, [sp, #20]
 8008c18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ce4 <_svfiprintf_r+0x1fc>
 8008c1c:	7821      	ldrb	r1, [r4, #0]
 8008c1e:	2203      	movs	r2, #3
 8008c20:	4650      	mov	r0, sl
 8008c22:	f7f7 fadd 	bl	80001e0 <memchr>
 8008c26:	b140      	cbz	r0, 8008c3a <_svfiprintf_r+0x152>
 8008c28:	2340      	movs	r3, #64	; 0x40
 8008c2a:	eba0 000a 	sub.w	r0, r0, sl
 8008c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	4303      	orrs	r3, r0
 8008c36:	3401      	adds	r4, #1
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3e:	4826      	ldr	r0, [pc, #152]	; (8008cd8 <_svfiprintf_r+0x1f0>)
 8008c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c44:	2206      	movs	r2, #6
 8008c46:	f7f7 facb 	bl	80001e0 <memchr>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d038      	beq.n	8008cc0 <_svfiprintf_r+0x1d8>
 8008c4e:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <_svfiprintf_r+0x1f4>)
 8008c50:	bb1b      	cbnz	r3, 8008c9a <_svfiprintf_r+0x1b2>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	3307      	adds	r3, #7
 8008c56:	f023 0307 	bic.w	r3, r3, #7
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c60:	4433      	add	r3, r6
 8008c62:	9309      	str	r3, [sp, #36]	; 0x24
 8008c64:	e767      	b.n	8008b36 <_svfiprintf_r+0x4e>
 8008c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	e7a5      	b.n	8008bbc <_svfiprintf_r+0xd4>
 8008c70:	2300      	movs	r3, #0
 8008c72:	3401      	adds	r4, #1
 8008c74:	9305      	str	r3, [sp, #20]
 8008c76:	4619      	mov	r1, r3
 8008c78:	f04f 0c0a 	mov.w	ip, #10
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c82:	3a30      	subs	r2, #48	; 0x30
 8008c84:	2a09      	cmp	r2, #9
 8008c86:	d903      	bls.n	8008c90 <_svfiprintf_r+0x1a8>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0c5      	beq.n	8008c18 <_svfiprintf_r+0x130>
 8008c8c:	9105      	str	r1, [sp, #20]
 8008c8e:	e7c3      	b.n	8008c18 <_svfiprintf_r+0x130>
 8008c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c94:	4604      	mov	r4, r0
 8008c96:	2301      	movs	r3, #1
 8008c98:	e7f0      	b.n	8008c7c <_svfiprintf_r+0x194>
 8008c9a:	ab03      	add	r3, sp, #12
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	462a      	mov	r2, r5
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <_svfiprintf_r+0x1f8>)
 8008ca2:	a904      	add	r1, sp, #16
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f3af 8000 	nop.w
 8008caa:	1c42      	adds	r2, r0, #1
 8008cac:	4606      	mov	r6, r0
 8008cae:	d1d6      	bne.n	8008c5e <_svfiprintf_r+0x176>
 8008cb0:	89ab      	ldrh	r3, [r5, #12]
 8008cb2:	065b      	lsls	r3, r3, #25
 8008cb4:	f53f af2c 	bmi.w	8008b10 <_svfiprintf_r+0x28>
 8008cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cba:	b01d      	add	sp, #116	; 0x74
 8008cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc0:	ab03      	add	r3, sp, #12
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	462a      	mov	r2, r5
 8008cc6:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <_svfiprintf_r+0x1f8>)
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	4638      	mov	r0, r7
 8008ccc:	f000 f9d4 	bl	8009078 <_printf_i>
 8008cd0:	e7eb      	b.n	8008caa <_svfiprintf_r+0x1c2>
 8008cd2:	bf00      	nop
 8008cd4:	08009858 	.word	0x08009858
 8008cd8:	08009862 	.word	0x08009862
 8008cdc:	00000000 	.word	0x00000000
 8008ce0:	08008a31 	.word	0x08008a31
 8008ce4:	0800985e 	.word	0x0800985e

08008ce8 <__sfputc_r>:
 8008ce8:	6893      	ldr	r3, [r2, #8]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	b410      	push	{r4}
 8008cf0:	6093      	str	r3, [r2, #8]
 8008cf2:	da08      	bge.n	8008d06 <__sfputc_r+0x1e>
 8008cf4:	6994      	ldr	r4, [r2, #24]
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	db01      	blt.n	8008cfe <__sfputc_r+0x16>
 8008cfa:	290a      	cmp	r1, #10
 8008cfc:	d103      	bne.n	8008d06 <__sfputc_r+0x1e>
 8008cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d02:	f000 baf1 	b.w	80092e8 <__swbuf_r>
 8008d06:	6813      	ldr	r3, [r2, #0]
 8008d08:	1c58      	adds	r0, r3, #1
 8008d0a:	6010      	str	r0, [r2, #0]
 8008d0c:	7019      	strb	r1, [r3, #0]
 8008d0e:	4608      	mov	r0, r1
 8008d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <__sfputs_r>:
 8008d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	18d5      	adds	r5, r2, r3
 8008d20:	42ac      	cmp	r4, r5
 8008d22:	d101      	bne.n	8008d28 <__sfputs_r+0x12>
 8008d24:	2000      	movs	r0, #0
 8008d26:	e007      	b.n	8008d38 <__sfputs_r+0x22>
 8008d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2c:	463a      	mov	r2, r7
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff ffda 	bl	8008ce8 <__sfputc_r>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d1f3      	bne.n	8008d20 <__sfputs_r+0xa>
 8008d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d3c <_vfiprintf_r>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	460d      	mov	r5, r1
 8008d42:	b09d      	sub	sp, #116	; 0x74
 8008d44:	4614      	mov	r4, r2
 8008d46:	4698      	mov	r8, r3
 8008d48:	4606      	mov	r6, r0
 8008d4a:	b118      	cbz	r0, 8008d54 <_vfiprintf_r+0x18>
 8008d4c:	6983      	ldr	r3, [r0, #24]
 8008d4e:	b90b      	cbnz	r3, 8008d54 <_vfiprintf_r+0x18>
 8008d50:	f7ff fa9a 	bl	8008288 <__sinit>
 8008d54:	4b89      	ldr	r3, [pc, #548]	; (8008f7c <_vfiprintf_r+0x240>)
 8008d56:	429d      	cmp	r5, r3
 8008d58:	d11b      	bne.n	8008d92 <_vfiprintf_r+0x56>
 8008d5a:	6875      	ldr	r5, [r6, #4]
 8008d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5e:	07d9      	lsls	r1, r3, #31
 8008d60:	d405      	bmi.n	8008d6e <_vfiprintf_r+0x32>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	059a      	lsls	r2, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_vfiprintf_r+0x32>
 8008d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d6a:	f7ff fb50 	bl	800840e <__retarget_lock_acquire_recursive>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	071b      	lsls	r3, r3, #28
 8008d72:	d501      	bpl.n	8008d78 <_vfiprintf_r+0x3c>
 8008d74:	692b      	ldr	r3, [r5, #16]
 8008d76:	b9eb      	cbnz	r3, 8008db4 <_vfiprintf_r+0x78>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 fb06 	bl	800938c <__swsetup_r>
 8008d80:	b1c0      	cbz	r0, 8008db4 <_vfiprintf_r+0x78>
 8008d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d84:	07dc      	lsls	r4, r3, #31
 8008d86:	d50e      	bpl.n	8008da6 <_vfiprintf_r+0x6a>
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	b01d      	add	sp, #116	; 0x74
 8008d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d92:	4b7b      	ldr	r3, [pc, #492]	; (8008f80 <_vfiprintf_r+0x244>)
 8008d94:	429d      	cmp	r5, r3
 8008d96:	d101      	bne.n	8008d9c <_vfiprintf_r+0x60>
 8008d98:	68b5      	ldr	r5, [r6, #8]
 8008d9a:	e7df      	b.n	8008d5c <_vfiprintf_r+0x20>
 8008d9c:	4b79      	ldr	r3, [pc, #484]	; (8008f84 <_vfiprintf_r+0x248>)
 8008d9e:	429d      	cmp	r5, r3
 8008da0:	bf08      	it	eq
 8008da2:	68f5      	ldreq	r5, [r6, #12]
 8008da4:	e7da      	b.n	8008d5c <_vfiprintf_r+0x20>
 8008da6:	89ab      	ldrh	r3, [r5, #12]
 8008da8:	0598      	lsls	r0, r3, #22
 8008daa:	d4ed      	bmi.n	8008d88 <_vfiprintf_r+0x4c>
 8008dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dae:	f7ff fb2f 	bl	8008410 <__retarget_lock_release_recursive>
 8008db2:	e7e9      	b.n	8008d88 <_vfiprintf_r+0x4c>
 8008db4:	2300      	movs	r3, #0
 8008db6:	9309      	str	r3, [sp, #36]	; 0x24
 8008db8:	2320      	movs	r3, #32
 8008dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc2:	2330      	movs	r3, #48	; 0x30
 8008dc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f88 <_vfiprintf_r+0x24c>
 8008dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dcc:	f04f 0901 	mov.w	r9, #1
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	469a      	mov	sl, r3
 8008dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd8:	b10a      	cbz	r2, 8008dde <_vfiprintf_r+0xa2>
 8008dda:	2a25      	cmp	r2, #37	; 0x25
 8008ddc:	d1f9      	bne.n	8008dd2 <_vfiprintf_r+0x96>
 8008dde:	ebba 0b04 	subs.w	fp, sl, r4
 8008de2:	d00b      	beq.n	8008dfc <_vfiprintf_r+0xc0>
 8008de4:	465b      	mov	r3, fp
 8008de6:	4622      	mov	r2, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff ff93 	bl	8008d16 <__sfputs_r>
 8008df0:	3001      	adds	r0, #1
 8008df2:	f000 80aa 	beq.w	8008f4a <_vfiprintf_r+0x20e>
 8008df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008df8:	445a      	add	r2, fp
 8008dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80a2 	beq.w	8008f4a <_vfiprintf_r+0x20e>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e10:	f10a 0a01 	add.w	sl, sl, #1
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	9307      	str	r3, [sp, #28]
 8008e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e1e:	4654      	mov	r4, sl
 8008e20:	2205      	movs	r2, #5
 8008e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e26:	4858      	ldr	r0, [pc, #352]	; (8008f88 <_vfiprintf_r+0x24c>)
 8008e28:	f7f7 f9da 	bl	80001e0 <memchr>
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	b9d8      	cbnz	r0, 8008e68 <_vfiprintf_r+0x12c>
 8008e30:	06d1      	lsls	r1, r2, #27
 8008e32:	bf44      	itt	mi
 8008e34:	2320      	movmi	r3, #32
 8008e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3a:	0713      	lsls	r3, r2, #28
 8008e3c:	bf44      	itt	mi
 8008e3e:	232b      	movmi	r3, #43	; 0x2b
 8008e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e44:	f89a 3000 	ldrb.w	r3, [sl]
 8008e48:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4a:	d015      	beq.n	8008e78 <_vfiprintf_r+0x13c>
 8008e4c:	9a07      	ldr	r2, [sp, #28]
 8008e4e:	4654      	mov	r4, sl
 8008e50:	2000      	movs	r0, #0
 8008e52:	f04f 0c0a 	mov.w	ip, #10
 8008e56:	4621      	mov	r1, r4
 8008e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5c:	3b30      	subs	r3, #48	; 0x30
 8008e5e:	2b09      	cmp	r3, #9
 8008e60:	d94e      	bls.n	8008f00 <_vfiprintf_r+0x1c4>
 8008e62:	b1b0      	cbz	r0, 8008e92 <_vfiprintf_r+0x156>
 8008e64:	9207      	str	r2, [sp, #28]
 8008e66:	e014      	b.n	8008e92 <_vfiprintf_r+0x156>
 8008e68:	eba0 0308 	sub.w	r3, r0, r8
 8008e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e70:	4313      	orrs	r3, r2
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	46a2      	mov	sl, r4
 8008e76:	e7d2      	b.n	8008e1e <_vfiprintf_r+0xe2>
 8008e78:	9b03      	ldr	r3, [sp, #12]
 8008e7a:	1d19      	adds	r1, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	9103      	str	r1, [sp, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bfbb      	ittet	lt
 8008e84:	425b      	neglt	r3, r3
 8008e86:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8a:	9307      	strge	r3, [sp, #28]
 8008e8c:	9307      	strlt	r3, [sp, #28]
 8008e8e:	bfb8      	it	lt
 8008e90:	9204      	strlt	r2, [sp, #16]
 8008e92:	7823      	ldrb	r3, [r4, #0]
 8008e94:	2b2e      	cmp	r3, #46	; 0x2e
 8008e96:	d10c      	bne.n	8008eb2 <_vfiprintf_r+0x176>
 8008e98:	7863      	ldrb	r3, [r4, #1]
 8008e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9c:	d135      	bne.n	8008f0a <_vfiprintf_r+0x1ce>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	1d1a      	adds	r2, r3, #4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	9203      	str	r2, [sp, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	bfb8      	it	lt
 8008eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eae:	3402      	adds	r4, #2
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f98 <_vfiprintf_r+0x25c>
 8008eb6:	7821      	ldrb	r1, [r4, #0]
 8008eb8:	2203      	movs	r2, #3
 8008eba:	4650      	mov	r0, sl
 8008ebc:	f7f7 f990 	bl	80001e0 <memchr>
 8008ec0:	b140      	cbz	r0, 8008ed4 <_vfiprintf_r+0x198>
 8008ec2:	2340      	movs	r3, #64	; 0x40
 8008ec4:	eba0 000a 	sub.w	r0, r0, sl
 8008ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8008ecc:	9b04      	ldr	r3, [sp, #16]
 8008ece:	4303      	orrs	r3, r0
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	482c      	ldr	r0, [pc, #176]	; (8008f8c <_vfiprintf_r+0x250>)
 8008eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ede:	2206      	movs	r2, #6
 8008ee0:	f7f7 f97e 	bl	80001e0 <memchr>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d03f      	beq.n	8008f68 <_vfiprintf_r+0x22c>
 8008ee8:	4b29      	ldr	r3, [pc, #164]	; (8008f90 <_vfiprintf_r+0x254>)
 8008eea:	bb1b      	cbnz	r3, 8008f34 <_vfiprintf_r+0x1f8>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	3307      	adds	r3, #7
 8008ef0:	f023 0307 	bic.w	r3, r3, #7
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	9303      	str	r3, [sp, #12]
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	443b      	add	r3, r7
 8008efc:	9309      	str	r3, [sp, #36]	; 0x24
 8008efe:	e767      	b.n	8008dd0 <_vfiprintf_r+0x94>
 8008f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f04:	460c      	mov	r4, r1
 8008f06:	2001      	movs	r0, #1
 8008f08:	e7a5      	b.n	8008e56 <_vfiprintf_r+0x11a>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	3401      	adds	r4, #1
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	4619      	mov	r1, r3
 8008f12:	f04f 0c0a 	mov.w	ip, #10
 8008f16:	4620      	mov	r0, r4
 8008f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1c:	3a30      	subs	r2, #48	; 0x30
 8008f1e:	2a09      	cmp	r2, #9
 8008f20:	d903      	bls.n	8008f2a <_vfiprintf_r+0x1ee>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0c5      	beq.n	8008eb2 <_vfiprintf_r+0x176>
 8008f26:	9105      	str	r1, [sp, #20]
 8008f28:	e7c3      	b.n	8008eb2 <_vfiprintf_r+0x176>
 8008f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f2e:	4604      	mov	r4, r0
 8008f30:	2301      	movs	r3, #1
 8008f32:	e7f0      	b.n	8008f16 <_vfiprintf_r+0x1da>
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4b16      	ldr	r3, [pc, #88]	; (8008f94 <_vfiprintf_r+0x258>)
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f3af 8000 	nop.w
 8008f44:	4607      	mov	r7, r0
 8008f46:	1c78      	adds	r0, r7, #1
 8008f48:	d1d6      	bne.n	8008ef8 <_vfiprintf_r+0x1bc>
 8008f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f4c:	07d9      	lsls	r1, r3, #31
 8008f4e:	d405      	bmi.n	8008f5c <_vfiprintf_r+0x220>
 8008f50:	89ab      	ldrh	r3, [r5, #12]
 8008f52:	059a      	lsls	r2, r3, #22
 8008f54:	d402      	bmi.n	8008f5c <_vfiprintf_r+0x220>
 8008f56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f58:	f7ff fa5a 	bl	8008410 <__retarget_lock_release_recursive>
 8008f5c:	89ab      	ldrh	r3, [r5, #12]
 8008f5e:	065b      	lsls	r3, r3, #25
 8008f60:	f53f af12 	bmi.w	8008d88 <_vfiprintf_r+0x4c>
 8008f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f66:	e711      	b.n	8008d8c <_vfiprintf_r+0x50>
 8008f68:	ab03      	add	r3, sp, #12
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <_vfiprintf_r+0x258>)
 8008f70:	a904      	add	r1, sp, #16
 8008f72:	4630      	mov	r0, r6
 8008f74:	f000 f880 	bl	8009078 <_printf_i>
 8008f78:	e7e4      	b.n	8008f44 <_vfiprintf_r+0x208>
 8008f7a:	bf00      	nop
 8008f7c:	08009814 	.word	0x08009814
 8008f80:	08009834 	.word	0x08009834
 8008f84:	080097f4 	.word	0x080097f4
 8008f88:	08009858 	.word	0x08009858
 8008f8c:	08009862 	.word	0x08009862
 8008f90:	00000000 	.word	0x00000000
 8008f94:	08008d17 	.word	0x08008d17
 8008f98:	0800985e 	.word	0x0800985e

08008f9c <_printf_common>:
 8008f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	4699      	mov	r9, r3
 8008fa4:	688a      	ldr	r2, [r1, #8]
 8008fa6:	690b      	ldr	r3, [r1, #16]
 8008fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fac:	4293      	cmp	r3, r2
 8008fae:	bfb8      	it	lt
 8008fb0:	4613      	movlt	r3, r2
 8008fb2:	6033      	str	r3, [r6, #0]
 8008fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fb8:	4607      	mov	r7, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	b10a      	cbz	r2, 8008fc2 <_printf_common+0x26>
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	6033      	str	r3, [r6, #0]
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	0699      	lsls	r1, r3, #26
 8008fc6:	bf42      	ittt	mi
 8008fc8:	6833      	ldrmi	r3, [r6, #0]
 8008fca:	3302      	addmi	r3, #2
 8008fcc:	6033      	strmi	r3, [r6, #0]
 8008fce:	6825      	ldr	r5, [r4, #0]
 8008fd0:	f015 0506 	ands.w	r5, r5, #6
 8008fd4:	d106      	bne.n	8008fe4 <_printf_common+0x48>
 8008fd6:	f104 0a19 	add.w	sl, r4, #25
 8008fda:	68e3      	ldr	r3, [r4, #12]
 8008fdc:	6832      	ldr	r2, [r6, #0]
 8008fde:	1a9b      	subs	r3, r3, r2
 8008fe0:	42ab      	cmp	r3, r5
 8008fe2:	dc26      	bgt.n	8009032 <_printf_common+0x96>
 8008fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fe8:	1e13      	subs	r3, r2, #0
 8008fea:	6822      	ldr	r2, [r4, #0]
 8008fec:	bf18      	it	ne
 8008fee:	2301      	movne	r3, #1
 8008ff0:	0692      	lsls	r2, r2, #26
 8008ff2:	d42b      	bmi.n	800904c <_printf_common+0xb0>
 8008ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	47c0      	blx	r8
 8008ffe:	3001      	adds	r0, #1
 8009000:	d01e      	beq.n	8009040 <_printf_common+0xa4>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	68e5      	ldr	r5, [r4, #12]
 8009006:	6832      	ldr	r2, [r6, #0]
 8009008:	f003 0306 	and.w	r3, r3, #6
 800900c:	2b04      	cmp	r3, #4
 800900e:	bf08      	it	eq
 8009010:	1aad      	subeq	r5, r5, r2
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	6922      	ldr	r2, [r4, #16]
 8009016:	bf0c      	ite	eq
 8009018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800901c:	2500      	movne	r5, #0
 800901e:	4293      	cmp	r3, r2
 8009020:	bfc4      	itt	gt
 8009022:	1a9b      	subgt	r3, r3, r2
 8009024:	18ed      	addgt	r5, r5, r3
 8009026:	2600      	movs	r6, #0
 8009028:	341a      	adds	r4, #26
 800902a:	42b5      	cmp	r5, r6
 800902c:	d11a      	bne.n	8009064 <_printf_common+0xc8>
 800902e:	2000      	movs	r0, #0
 8009030:	e008      	b.n	8009044 <_printf_common+0xa8>
 8009032:	2301      	movs	r3, #1
 8009034:	4652      	mov	r2, sl
 8009036:	4649      	mov	r1, r9
 8009038:	4638      	mov	r0, r7
 800903a:	47c0      	blx	r8
 800903c:	3001      	adds	r0, #1
 800903e:	d103      	bne.n	8009048 <_printf_common+0xac>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009048:	3501      	adds	r5, #1
 800904a:	e7c6      	b.n	8008fda <_printf_common+0x3e>
 800904c:	18e1      	adds	r1, r4, r3
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	2030      	movs	r0, #48	; 0x30
 8009052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009056:	4422      	add	r2, r4
 8009058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800905c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009060:	3302      	adds	r3, #2
 8009062:	e7c7      	b.n	8008ff4 <_printf_common+0x58>
 8009064:	2301      	movs	r3, #1
 8009066:	4622      	mov	r2, r4
 8009068:	4649      	mov	r1, r9
 800906a:	4638      	mov	r0, r7
 800906c:	47c0      	blx	r8
 800906e:	3001      	adds	r0, #1
 8009070:	d0e6      	beq.n	8009040 <_printf_common+0xa4>
 8009072:	3601      	adds	r6, #1
 8009074:	e7d9      	b.n	800902a <_printf_common+0x8e>
	...

08009078 <_printf_i>:
 8009078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	7e0f      	ldrb	r7, [r1, #24]
 800907e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009080:	2f78      	cmp	r7, #120	; 0x78
 8009082:	4691      	mov	r9, r2
 8009084:	4680      	mov	r8, r0
 8009086:	460c      	mov	r4, r1
 8009088:	469a      	mov	sl, r3
 800908a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800908e:	d807      	bhi.n	80090a0 <_printf_i+0x28>
 8009090:	2f62      	cmp	r7, #98	; 0x62
 8009092:	d80a      	bhi.n	80090aa <_printf_i+0x32>
 8009094:	2f00      	cmp	r7, #0
 8009096:	f000 80d8 	beq.w	800924a <_printf_i+0x1d2>
 800909a:	2f58      	cmp	r7, #88	; 0x58
 800909c:	f000 80a3 	beq.w	80091e6 <_printf_i+0x16e>
 80090a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090a8:	e03a      	b.n	8009120 <_printf_i+0xa8>
 80090aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ae:	2b15      	cmp	r3, #21
 80090b0:	d8f6      	bhi.n	80090a0 <_printf_i+0x28>
 80090b2:	a101      	add	r1, pc, #4	; (adr r1, 80090b8 <_printf_i+0x40>)
 80090b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090b8:	08009111 	.word	0x08009111
 80090bc:	08009125 	.word	0x08009125
 80090c0:	080090a1 	.word	0x080090a1
 80090c4:	080090a1 	.word	0x080090a1
 80090c8:	080090a1 	.word	0x080090a1
 80090cc:	080090a1 	.word	0x080090a1
 80090d0:	08009125 	.word	0x08009125
 80090d4:	080090a1 	.word	0x080090a1
 80090d8:	080090a1 	.word	0x080090a1
 80090dc:	080090a1 	.word	0x080090a1
 80090e0:	080090a1 	.word	0x080090a1
 80090e4:	08009231 	.word	0x08009231
 80090e8:	08009155 	.word	0x08009155
 80090ec:	08009213 	.word	0x08009213
 80090f0:	080090a1 	.word	0x080090a1
 80090f4:	080090a1 	.word	0x080090a1
 80090f8:	08009253 	.word	0x08009253
 80090fc:	080090a1 	.word	0x080090a1
 8009100:	08009155 	.word	0x08009155
 8009104:	080090a1 	.word	0x080090a1
 8009108:	080090a1 	.word	0x080090a1
 800910c:	0800921b 	.word	0x0800921b
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	1d1a      	adds	r2, r3, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	602a      	str	r2, [r5, #0]
 8009118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800911c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009120:	2301      	movs	r3, #1
 8009122:	e0a3      	b.n	800926c <_printf_i+0x1f4>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	6829      	ldr	r1, [r5, #0]
 8009128:	0606      	lsls	r6, r0, #24
 800912a:	f101 0304 	add.w	r3, r1, #4
 800912e:	d50a      	bpl.n	8009146 <_printf_i+0xce>
 8009130:	680e      	ldr	r6, [r1, #0]
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	2e00      	cmp	r6, #0
 8009136:	da03      	bge.n	8009140 <_printf_i+0xc8>
 8009138:	232d      	movs	r3, #45	; 0x2d
 800913a:	4276      	negs	r6, r6
 800913c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009140:	485e      	ldr	r0, [pc, #376]	; (80092bc <_printf_i+0x244>)
 8009142:	230a      	movs	r3, #10
 8009144:	e019      	b.n	800917a <_printf_i+0x102>
 8009146:	680e      	ldr	r6, [r1, #0]
 8009148:	602b      	str	r3, [r5, #0]
 800914a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800914e:	bf18      	it	ne
 8009150:	b236      	sxthne	r6, r6
 8009152:	e7ef      	b.n	8009134 <_printf_i+0xbc>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	6820      	ldr	r0, [r4, #0]
 8009158:	1d19      	adds	r1, r3, #4
 800915a:	6029      	str	r1, [r5, #0]
 800915c:	0601      	lsls	r1, r0, #24
 800915e:	d501      	bpl.n	8009164 <_printf_i+0xec>
 8009160:	681e      	ldr	r6, [r3, #0]
 8009162:	e002      	b.n	800916a <_printf_i+0xf2>
 8009164:	0646      	lsls	r6, r0, #25
 8009166:	d5fb      	bpl.n	8009160 <_printf_i+0xe8>
 8009168:	881e      	ldrh	r6, [r3, #0]
 800916a:	4854      	ldr	r0, [pc, #336]	; (80092bc <_printf_i+0x244>)
 800916c:	2f6f      	cmp	r7, #111	; 0x6f
 800916e:	bf0c      	ite	eq
 8009170:	2308      	moveq	r3, #8
 8009172:	230a      	movne	r3, #10
 8009174:	2100      	movs	r1, #0
 8009176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800917a:	6865      	ldr	r5, [r4, #4]
 800917c:	60a5      	str	r5, [r4, #8]
 800917e:	2d00      	cmp	r5, #0
 8009180:	bfa2      	ittt	ge
 8009182:	6821      	ldrge	r1, [r4, #0]
 8009184:	f021 0104 	bicge.w	r1, r1, #4
 8009188:	6021      	strge	r1, [r4, #0]
 800918a:	b90e      	cbnz	r6, 8009190 <_printf_i+0x118>
 800918c:	2d00      	cmp	r5, #0
 800918e:	d04d      	beq.n	800922c <_printf_i+0x1b4>
 8009190:	4615      	mov	r5, r2
 8009192:	fbb6 f1f3 	udiv	r1, r6, r3
 8009196:	fb03 6711 	mls	r7, r3, r1, r6
 800919a:	5dc7      	ldrb	r7, [r0, r7]
 800919c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091a0:	4637      	mov	r7, r6
 80091a2:	42bb      	cmp	r3, r7
 80091a4:	460e      	mov	r6, r1
 80091a6:	d9f4      	bls.n	8009192 <_printf_i+0x11a>
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d10b      	bne.n	80091c4 <_printf_i+0x14c>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	07de      	lsls	r6, r3, #31
 80091b0:	d508      	bpl.n	80091c4 <_printf_i+0x14c>
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	6861      	ldr	r1, [r4, #4]
 80091b6:	4299      	cmp	r1, r3
 80091b8:	bfde      	ittt	le
 80091ba:	2330      	movle	r3, #48	; 0x30
 80091bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091c4:	1b52      	subs	r2, r2, r5
 80091c6:	6122      	str	r2, [r4, #16]
 80091c8:	f8cd a000 	str.w	sl, [sp]
 80091cc:	464b      	mov	r3, r9
 80091ce:	aa03      	add	r2, sp, #12
 80091d0:	4621      	mov	r1, r4
 80091d2:	4640      	mov	r0, r8
 80091d4:	f7ff fee2 	bl	8008f9c <_printf_common>
 80091d8:	3001      	adds	r0, #1
 80091da:	d14c      	bne.n	8009276 <_printf_i+0x1fe>
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	b004      	add	sp, #16
 80091e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e6:	4835      	ldr	r0, [pc, #212]	; (80092bc <_printf_i+0x244>)
 80091e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091ec:	6829      	ldr	r1, [r5, #0]
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80091f4:	6029      	str	r1, [r5, #0]
 80091f6:	061d      	lsls	r5, r3, #24
 80091f8:	d514      	bpl.n	8009224 <_printf_i+0x1ac>
 80091fa:	07df      	lsls	r7, r3, #31
 80091fc:	bf44      	itt	mi
 80091fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009202:	6023      	strmi	r3, [r4, #0]
 8009204:	b91e      	cbnz	r6, 800920e <_printf_i+0x196>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	f023 0320 	bic.w	r3, r3, #32
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	2310      	movs	r3, #16
 8009210:	e7b0      	b.n	8009174 <_printf_i+0xfc>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	f043 0320 	orr.w	r3, r3, #32
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	2378      	movs	r3, #120	; 0x78
 800921c:	4828      	ldr	r0, [pc, #160]	; (80092c0 <_printf_i+0x248>)
 800921e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009222:	e7e3      	b.n	80091ec <_printf_i+0x174>
 8009224:	0659      	lsls	r1, r3, #25
 8009226:	bf48      	it	mi
 8009228:	b2b6      	uxthmi	r6, r6
 800922a:	e7e6      	b.n	80091fa <_printf_i+0x182>
 800922c:	4615      	mov	r5, r2
 800922e:	e7bb      	b.n	80091a8 <_printf_i+0x130>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	6826      	ldr	r6, [r4, #0]
 8009234:	6961      	ldr	r1, [r4, #20]
 8009236:	1d18      	adds	r0, r3, #4
 8009238:	6028      	str	r0, [r5, #0]
 800923a:	0635      	lsls	r5, r6, #24
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	d501      	bpl.n	8009244 <_printf_i+0x1cc>
 8009240:	6019      	str	r1, [r3, #0]
 8009242:	e002      	b.n	800924a <_printf_i+0x1d2>
 8009244:	0670      	lsls	r0, r6, #25
 8009246:	d5fb      	bpl.n	8009240 <_printf_i+0x1c8>
 8009248:	8019      	strh	r1, [r3, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	4615      	mov	r5, r2
 8009250:	e7ba      	b.n	80091c8 <_printf_i+0x150>
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	1d1a      	adds	r2, r3, #4
 8009256:	602a      	str	r2, [r5, #0]
 8009258:	681d      	ldr	r5, [r3, #0]
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	2100      	movs	r1, #0
 800925e:	4628      	mov	r0, r5
 8009260:	f7f6 ffbe 	bl	80001e0 <memchr>
 8009264:	b108      	cbz	r0, 800926a <_printf_i+0x1f2>
 8009266:	1b40      	subs	r0, r0, r5
 8009268:	6060      	str	r0, [r4, #4]
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	2300      	movs	r3, #0
 8009270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009274:	e7a8      	b.n	80091c8 <_printf_i+0x150>
 8009276:	6923      	ldr	r3, [r4, #16]
 8009278:	462a      	mov	r2, r5
 800927a:	4649      	mov	r1, r9
 800927c:	4640      	mov	r0, r8
 800927e:	47d0      	blx	sl
 8009280:	3001      	adds	r0, #1
 8009282:	d0ab      	beq.n	80091dc <_printf_i+0x164>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	079b      	lsls	r3, r3, #30
 8009288:	d413      	bmi.n	80092b2 <_printf_i+0x23a>
 800928a:	68e0      	ldr	r0, [r4, #12]
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	4298      	cmp	r0, r3
 8009290:	bfb8      	it	lt
 8009292:	4618      	movlt	r0, r3
 8009294:	e7a4      	b.n	80091e0 <_printf_i+0x168>
 8009296:	2301      	movs	r3, #1
 8009298:	4632      	mov	r2, r6
 800929a:	4649      	mov	r1, r9
 800929c:	4640      	mov	r0, r8
 800929e:	47d0      	blx	sl
 80092a0:	3001      	adds	r0, #1
 80092a2:	d09b      	beq.n	80091dc <_printf_i+0x164>
 80092a4:	3501      	adds	r5, #1
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	9903      	ldr	r1, [sp, #12]
 80092aa:	1a5b      	subs	r3, r3, r1
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	dcf2      	bgt.n	8009296 <_printf_i+0x21e>
 80092b0:	e7eb      	b.n	800928a <_printf_i+0x212>
 80092b2:	2500      	movs	r5, #0
 80092b4:	f104 0619 	add.w	r6, r4, #25
 80092b8:	e7f5      	b.n	80092a6 <_printf_i+0x22e>
 80092ba:	bf00      	nop
 80092bc:	08009869 	.word	0x08009869
 80092c0:	0800987a 	.word	0x0800987a

080092c4 <_read_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d07      	ldr	r5, [pc, #28]	; (80092e4 <_read_r+0x20>)
 80092c8:	4604      	mov	r4, r0
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	602a      	str	r2, [r5, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f7f8 f958 	bl	8001588 <_read>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_read_r+0x1e>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_read_r+0x1e>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200051e4 	.word	0x200051e4

080092e8 <__swbuf_r>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	460e      	mov	r6, r1
 80092ec:	4614      	mov	r4, r2
 80092ee:	4605      	mov	r5, r0
 80092f0:	b118      	cbz	r0, 80092fa <__swbuf_r+0x12>
 80092f2:	6983      	ldr	r3, [r0, #24]
 80092f4:	b90b      	cbnz	r3, 80092fa <__swbuf_r+0x12>
 80092f6:	f7fe ffc7 	bl	8008288 <__sinit>
 80092fa:	4b21      	ldr	r3, [pc, #132]	; (8009380 <__swbuf_r+0x98>)
 80092fc:	429c      	cmp	r4, r3
 80092fe:	d12b      	bne.n	8009358 <__swbuf_r+0x70>
 8009300:	686c      	ldr	r4, [r5, #4]
 8009302:	69a3      	ldr	r3, [r4, #24]
 8009304:	60a3      	str	r3, [r4, #8]
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	071a      	lsls	r2, r3, #28
 800930a:	d52f      	bpl.n	800936c <__swbuf_r+0x84>
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	b36b      	cbz	r3, 800936c <__swbuf_r+0x84>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	6820      	ldr	r0, [r4, #0]
 8009314:	1ac0      	subs	r0, r0, r3
 8009316:	6963      	ldr	r3, [r4, #20]
 8009318:	b2f6      	uxtb	r6, r6
 800931a:	4283      	cmp	r3, r0
 800931c:	4637      	mov	r7, r6
 800931e:	dc04      	bgt.n	800932a <__swbuf_r+0x42>
 8009320:	4621      	mov	r1, r4
 8009322:	4628      	mov	r0, r5
 8009324:	f7ff fade 	bl	80088e4 <_fflush_r>
 8009328:	bb30      	cbnz	r0, 8009378 <__swbuf_r+0x90>
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	3b01      	subs	r3, #1
 800932e:	60a3      	str	r3, [r4, #8]
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	6022      	str	r2, [r4, #0]
 8009336:	701e      	strb	r6, [r3, #0]
 8009338:	6963      	ldr	r3, [r4, #20]
 800933a:	3001      	adds	r0, #1
 800933c:	4283      	cmp	r3, r0
 800933e:	d004      	beq.n	800934a <__swbuf_r+0x62>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	07db      	lsls	r3, r3, #31
 8009344:	d506      	bpl.n	8009354 <__swbuf_r+0x6c>
 8009346:	2e0a      	cmp	r6, #10
 8009348:	d104      	bne.n	8009354 <__swbuf_r+0x6c>
 800934a:	4621      	mov	r1, r4
 800934c:	4628      	mov	r0, r5
 800934e:	f7ff fac9 	bl	80088e4 <_fflush_r>
 8009352:	b988      	cbnz	r0, 8009378 <__swbuf_r+0x90>
 8009354:	4638      	mov	r0, r7
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <__swbuf_r+0x9c>)
 800935a:	429c      	cmp	r4, r3
 800935c:	d101      	bne.n	8009362 <__swbuf_r+0x7a>
 800935e:	68ac      	ldr	r4, [r5, #8]
 8009360:	e7cf      	b.n	8009302 <__swbuf_r+0x1a>
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <__swbuf_r+0xa0>)
 8009364:	429c      	cmp	r4, r3
 8009366:	bf08      	it	eq
 8009368:	68ec      	ldreq	r4, [r5, #12]
 800936a:	e7ca      	b.n	8009302 <__swbuf_r+0x1a>
 800936c:	4621      	mov	r1, r4
 800936e:	4628      	mov	r0, r5
 8009370:	f000 f80c 	bl	800938c <__swsetup_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	d0cb      	beq.n	8009310 <__swbuf_r+0x28>
 8009378:	f04f 37ff 	mov.w	r7, #4294967295
 800937c:	e7ea      	b.n	8009354 <__swbuf_r+0x6c>
 800937e:	bf00      	nop
 8009380:	08009814 	.word	0x08009814
 8009384:	08009834 	.word	0x08009834
 8009388:	080097f4 	.word	0x080097f4

0800938c <__swsetup_r>:
 800938c:	4b32      	ldr	r3, [pc, #200]	; (8009458 <__swsetup_r+0xcc>)
 800938e:	b570      	push	{r4, r5, r6, lr}
 8009390:	681d      	ldr	r5, [r3, #0]
 8009392:	4606      	mov	r6, r0
 8009394:	460c      	mov	r4, r1
 8009396:	b125      	cbz	r5, 80093a2 <__swsetup_r+0x16>
 8009398:	69ab      	ldr	r3, [r5, #24]
 800939a:	b913      	cbnz	r3, 80093a2 <__swsetup_r+0x16>
 800939c:	4628      	mov	r0, r5
 800939e:	f7fe ff73 	bl	8008288 <__sinit>
 80093a2:	4b2e      	ldr	r3, [pc, #184]	; (800945c <__swsetup_r+0xd0>)
 80093a4:	429c      	cmp	r4, r3
 80093a6:	d10f      	bne.n	80093c8 <__swsetup_r+0x3c>
 80093a8:	686c      	ldr	r4, [r5, #4]
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b0:	0719      	lsls	r1, r3, #28
 80093b2:	d42c      	bmi.n	800940e <__swsetup_r+0x82>
 80093b4:	06dd      	lsls	r5, r3, #27
 80093b6:	d411      	bmi.n	80093dc <__swsetup_r+0x50>
 80093b8:	2309      	movs	r3, #9
 80093ba:	6033      	str	r3, [r6, #0]
 80093bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	f04f 30ff 	mov.w	r0, #4294967295
 80093c6:	e03e      	b.n	8009446 <__swsetup_r+0xba>
 80093c8:	4b25      	ldr	r3, [pc, #148]	; (8009460 <__swsetup_r+0xd4>)
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d101      	bne.n	80093d2 <__swsetup_r+0x46>
 80093ce:	68ac      	ldr	r4, [r5, #8]
 80093d0:	e7eb      	b.n	80093aa <__swsetup_r+0x1e>
 80093d2:	4b24      	ldr	r3, [pc, #144]	; (8009464 <__swsetup_r+0xd8>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	bf08      	it	eq
 80093d8:	68ec      	ldreq	r4, [r5, #12]
 80093da:	e7e6      	b.n	80093aa <__swsetup_r+0x1e>
 80093dc:	0758      	lsls	r0, r3, #29
 80093de:	d512      	bpl.n	8009406 <__swsetup_r+0x7a>
 80093e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e2:	b141      	cbz	r1, 80093f6 <__swsetup_r+0x6a>
 80093e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093e8:	4299      	cmp	r1, r3
 80093ea:	d002      	beq.n	80093f2 <__swsetup_r+0x66>
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff fad3 	bl	8008998 <_free_r>
 80093f2:	2300      	movs	r3, #0
 80093f4:	6363      	str	r3, [r4, #52]	; 0x34
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	2300      	movs	r3, #0
 8009400:	6063      	str	r3, [r4, #4]
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f043 0308 	orr.w	r3, r3, #8
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	b94b      	cbnz	r3, 8009426 <__swsetup_r+0x9a>
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800941c:	d003      	beq.n	8009426 <__swsetup_r+0x9a>
 800941e:	4621      	mov	r1, r4
 8009420:	4630      	mov	r0, r6
 8009422:	f000 f847 	bl	80094b4 <__smakebuf_r>
 8009426:	89a0      	ldrh	r0, [r4, #12]
 8009428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800942c:	f010 0301 	ands.w	r3, r0, #1
 8009430:	d00a      	beq.n	8009448 <__swsetup_r+0xbc>
 8009432:	2300      	movs	r3, #0
 8009434:	60a3      	str	r3, [r4, #8]
 8009436:	6963      	ldr	r3, [r4, #20]
 8009438:	425b      	negs	r3, r3
 800943a:	61a3      	str	r3, [r4, #24]
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	b943      	cbnz	r3, 8009452 <__swsetup_r+0xc6>
 8009440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009444:	d1ba      	bne.n	80093bc <__swsetup_r+0x30>
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	0781      	lsls	r1, r0, #30
 800944a:	bf58      	it	pl
 800944c:	6963      	ldrpl	r3, [r4, #20]
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	e7f4      	b.n	800943c <__swsetup_r+0xb0>
 8009452:	2000      	movs	r0, #0
 8009454:	e7f7      	b.n	8009446 <__swsetup_r+0xba>
 8009456:	bf00      	nop
 8009458:	20000018 	.word	0x20000018
 800945c:	08009814 	.word	0x08009814
 8009460:	08009834 	.word	0x08009834
 8009464:	080097f4 	.word	0x080097f4

08009468 <__swhatbuf_r>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	460e      	mov	r6, r1
 800946c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009470:	2900      	cmp	r1, #0
 8009472:	b096      	sub	sp, #88	; 0x58
 8009474:	4614      	mov	r4, r2
 8009476:	461d      	mov	r5, r3
 8009478:	da08      	bge.n	800948c <__swhatbuf_r+0x24>
 800947a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	061a      	lsls	r2, r3, #24
 8009484:	d410      	bmi.n	80094a8 <__swhatbuf_r+0x40>
 8009486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800948a:	e00e      	b.n	80094aa <__swhatbuf_r+0x42>
 800948c:	466a      	mov	r2, sp
 800948e:	f000 f89b 	bl	80095c8 <_fstat_r>
 8009492:	2800      	cmp	r0, #0
 8009494:	dbf1      	blt.n	800947a <__swhatbuf_r+0x12>
 8009496:	9a01      	ldr	r2, [sp, #4]
 8009498:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800949c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094a0:	425a      	negs	r2, r3
 80094a2:	415a      	adcs	r2, r3
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	e7ee      	b.n	8009486 <__swhatbuf_r+0x1e>
 80094a8:	2340      	movs	r3, #64	; 0x40
 80094aa:	2000      	movs	r0, #0
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	b016      	add	sp, #88	; 0x58
 80094b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080094b4 <__smakebuf_r>:
 80094b4:	898b      	ldrh	r3, [r1, #12]
 80094b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094b8:	079d      	lsls	r5, r3, #30
 80094ba:	4606      	mov	r6, r0
 80094bc:	460c      	mov	r4, r1
 80094be:	d507      	bpl.n	80094d0 <__smakebuf_r+0x1c>
 80094c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	2301      	movs	r3, #1
 80094ca:	6163      	str	r3, [r4, #20]
 80094cc:	b002      	add	sp, #8
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	ab01      	add	r3, sp, #4
 80094d2:	466a      	mov	r2, sp
 80094d4:	f7ff ffc8 	bl	8009468 <__swhatbuf_r>
 80094d8:	9900      	ldr	r1, [sp, #0]
 80094da:	4605      	mov	r5, r0
 80094dc:	4630      	mov	r0, r6
 80094de:	f7fe ffcf 	bl	8008480 <_malloc_r>
 80094e2:	b948      	cbnz	r0, 80094f8 <__smakebuf_r+0x44>
 80094e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e8:	059a      	lsls	r2, r3, #22
 80094ea:	d4ef      	bmi.n	80094cc <__smakebuf_r+0x18>
 80094ec:	f023 0303 	bic.w	r3, r3, #3
 80094f0:	f043 0302 	orr.w	r3, r3, #2
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	e7e3      	b.n	80094c0 <__smakebuf_r+0xc>
 80094f8:	4b0d      	ldr	r3, [pc, #52]	; (8009530 <__smakebuf_r+0x7c>)
 80094fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	9b00      	ldr	r3, [sp, #0]
 8009508:	6163      	str	r3, [r4, #20]
 800950a:	9b01      	ldr	r3, [sp, #4]
 800950c:	6120      	str	r0, [r4, #16]
 800950e:	b15b      	cbz	r3, 8009528 <__smakebuf_r+0x74>
 8009510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009514:	4630      	mov	r0, r6
 8009516:	f000 f869 	bl	80095ec <_isatty_r>
 800951a:	b128      	cbz	r0, 8009528 <__smakebuf_r+0x74>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	f043 0301 	orr.w	r3, r3, #1
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	89a0      	ldrh	r0, [r4, #12]
 800952a:	4305      	orrs	r5, r0
 800952c:	81a5      	strh	r5, [r4, #12]
 800952e:	e7cd      	b.n	80094cc <__smakebuf_r+0x18>
 8009530:	08008221 	.word	0x08008221

08009534 <memmove>:
 8009534:	4288      	cmp	r0, r1
 8009536:	b510      	push	{r4, lr}
 8009538:	eb01 0402 	add.w	r4, r1, r2
 800953c:	d902      	bls.n	8009544 <memmove+0x10>
 800953e:	4284      	cmp	r4, r0
 8009540:	4623      	mov	r3, r4
 8009542:	d807      	bhi.n	8009554 <memmove+0x20>
 8009544:	1e43      	subs	r3, r0, #1
 8009546:	42a1      	cmp	r1, r4
 8009548:	d008      	beq.n	800955c <memmove+0x28>
 800954a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800954e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009552:	e7f8      	b.n	8009546 <memmove+0x12>
 8009554:	4402      	add	r2, r0
 8009556:	4601      	mov	r1, r0
 8009558:	428a      	cmp	r2, r1
 800955a:	d100      	bne.n	800955e <memmove+0x2a>
 800955c:	bd10      	pop	{r4, pc}
 800955e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009566:	e7f7      	b.n	8009558 <memmove+0x24>

08009568 <_realloc_r>:
 8009568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956c:	4680      	mov	r8, r0
 800956e:	4614      	mov	r4, r2
 8009570:	460e      	mov	r6, r1
 8009572:	b921      	cbnz	r1, 800957e <_realloc_r+0x16>
 8009574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009578:	4611      	mov	r1, r2
 800957a:	f7fe bf81 	b.w	8008480 <_malloc_r>
 800957e:	b92a      	cbnz	r2, 800958c <_realloc_r+0x24>
 8009580:	f7ff fa0a 	bl	8008998 <_free_r>
 8009584:	4625      	mov	r5, r4
 8009586:	4628      	mov	r0, r5
 8009588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800958c:	f000 f83e 	bl	800960c <_malloc_usable_size_r>
 8009590:	4284      	cmp	r4, r0
 8009592:	4607      	mov	r7, r0
 8009594:	d802      	bhi.n	800959c <_realloc_r+0x34>
 8009596:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800959a:	d812      	bhi.n	80095c2 <_realloc_r+0x5a>
 800959c:	4621      	mov	r1, r4
 800959e:	4640      	mov	r0, r8
 80095a0:	f7fe ff6e 	bl	8008480 <_malloc_r>
 80095a4:	4605      	mov	r5, r0
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0ed      	beq.n	8009586 <_realloc_r+0x1e>
 80095aa:	42bc      	cmp	r4, r7
 80095ac:	4622      	mov	r2, r4
 80095ae:	4631      	mov	r1, r6
 80095b0:	bf28      	it	cs
 80095b2:	463a      	movcs	r2, r7
 80095b4:	f7fe ff2d 	bl	8008412 <memcpy>
 80095b8:	4631      	mov	r1, r6
 80095ba:	4640      	mov	r0, r8
 80095bc:	f7ff f9ec 	bl	8008998 <_free_r>
 80095c0:	e7e1      	b.n	8009586 <_realloc_r+0x1e>
 80095c2:	4635      	mov	r5, r6
 80095c4:	e7df      	b.n	8009586 <_realloc_r+0x1e>
	...

080095c8 <_fstat_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d07      	ldr	r5, [pc, #28]	; (80095e8 <_fstat_r+0x20>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	f7f8 f81c 	bl	8001612 <_fstat>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <_fstat_r+0x1c>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_fstat_r+0x1c>
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	200051e4 	.word	0x200051e4

080095ec <_isatty_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	; (8009608 <_isatty_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7f8 f81b 	bl	8001632 <_isatty>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_isatty_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_isatty_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	200051e4 	.word	0x200051e4

0800960c <_malloc_usable_size_r>:
 800960c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009610:	1f18      	subs	r0, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfbc      	itt	lt
 8009616:	580b      	ldrlt	r3, [r1, r0]
 8009618:	18c0      	addlt	r0, r0, r3
 800961a:	4770      	bx	lr

0800961c <_init>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr

08009628 <_fini>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr
