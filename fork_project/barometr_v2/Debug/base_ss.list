
base_ss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008868  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba4  08008ba4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bac  08008bac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000507c  20000074  08008c28  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050f0  08008c28  000250f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdba  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340d  00000000  00000000  0003be5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018389  00000000  00000000  00041ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6bf  00000000  00000000  0005a229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009afb3  00000000  00000000  000758e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011089b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066bc  00000000  00000000  001108ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089f0 	.word	0x080089f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080089f0 	.word	0x080089f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9bf 	b.w	8000620 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <baro_init>:
static int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
static int32_t t_fine;
static _Bool inited = false;
static uint8_t data[25];

baro_stat_t baro_init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Check barometer on I2C bus
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_ID, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <baro_init+0x1d0>)
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	22d0      	movs	r2, #208	; 0xd0
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	486e      	ldr	r0, [pc, #440]	; (80007f8 <baro_init+0x1d4>)
 8000640:	f001 fe50 	bl	80022e4 <HAL_I2C_Mem_Read>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <baro_init+0x38>
		if (status == HAL_TIMEOUT)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d101      	bne.n	8000658 <baro_init+0x34>
			return BARO_ERR_TIMEOUT;
 8000654:	2302      	movs	r3, #2
 8000656:	e0c9      	b.n	80007ec <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000658:	2301      	movs	r3, #1
 800065a:	e0c7      	b.n	80007ec <baro_init+0x1c8>
	}

	if (data[0] != BARO_ID_VALUE) {
 800065c:	4b65      	ldr	r3, [pc, #404]	; (80007f4 <baro_init+0x1d0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b58      	cmp	r3, #88	; 0x58
 8000662:	d001      	beq.n	8000668 <baro_init+0x44>
		return BARO_ERR_GENERAL;
 8000664:	2303      	movs	r3, #3
 8000666:	e0c1      	b.n	80007ec <baro_init+0x1c8>
	}

	// Config barometer
	// T and P oversampling - 16, Normal mode
	// SPI 3 wire Off, Filter 2x, Standby duration - 62.5 ms
	data[0] = BARO_MODE_NORMAL | BARO_OSRS_T_1 | BARO_OSRS_P_1;
 8000668:	4b62      	ldr	r3, [pc, #392]	; (80007f4 <baro_init+0x1d0>)
 800066a:	2227      	movs	r2, #39	; 0x27
 800066c:	701a      	strb	r2, [r3, #0]
	data[1] = BARO_SPI3W_OFF | BARO_FILTER_OFF | BARO_T_SB_0_5;
 800066e:	4b61      	ldr	r3, [pc, #388]	; (80007f4 <baro_init+0x1d0>)
 8000670:	2200      	movs	r2, #0
 8000672:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Mem_Write(&hi2c1, BARO_I2C_ADDR, BARO_REG_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, data, 2, 1000);
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	2302      	movs	r3, #2
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	4b5d      	ldr	r3, [pc, #372]	; (80007f4 <baro_init+0x1d0>)
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	22f4      	movs	r2, #244	; 0xf4
 8000686:	21ec      	movs	r1, #236	; 0xec
 8000688:	485b      	ldr	r0, [pc, #364]	; (80007f8 <baro_init+0x1d4>)
 800068a:	f001 fd31 	bl	80020f0 <HAL_I2C_Mem_Write>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <baro_init+0x82>
		if (status == HAL_TIMEOUT)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d101      	bne.n	80006a2 <baro_init+0x7e>
			return BARO_ERR_TIMEOUT;
 800069e:	2302      	movs	r3, #2
 80006a0:	e0a4      	b.n	80007ec <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e0a2      	b.n	80007ec <baro_init+0x1c8>
	}

	// Readout compensation values
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_CALIB00, I2C_MEMADD_SIZE_8BIT, data, 25, 1000);
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	2319      	movs	r3, #25
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <baro_init+0x1d0>)
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2301      	movs	r3, #1
 80006b6:	2288      	movs	r2, #136	; 0x88
 80006b8:	21ec      	movs	r1, #236	; 0xec
 80006ba:	484f      	ldr	r0, [pc, #316]	; (80007f8 <baro_init+0x1d4>)
 80006bc:	f001 fe12 	bl	80022e4 <HAL_I2C_Mem_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <baro_init+0xb4>
		if (status == HAL_TIMEOUT)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d101      	bne.n	80006d4 <baro_init+0xb0>
			return BARO_ERR_TIMEOUT;
 80006d0:	2302      	movs	r3, #2
 80006d2:	e08b      	b.n	80007ec <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e089      	b.n	80007ec <baro_init+0x1c8>
	}
	dig_T1 = (uint16_t)data [1] << 8 | (uint16_t)data [0];
 80006d8:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <baro_init+0x1d0>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <baro_init+0x1d0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b43      	ldr	r3, [pc, #268]	; (80007fc <baro_init+0x1d8>)
 80006ee:	801a      	strh	r2, [r3, #0]
	dig_T2 =  (int16_t)data [3] << 8 |  (int16_t)data [2];
 80006f0:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <baro_init+0x1d0>)
 80006f2:	78db      	ldrb	r3, [r3, #3]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <baro_init+0x1d0>)
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b21a      	sxth	r2, r3
 8000702:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <baro_init+0x1dc>)
 8000704:	801a      	strh	r2, [r3, #0]
	dig_T3 =  (int16_t)data [5] << 8 |  (int16_t)data [4];
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <baro_init+0x1d0>)
 8000708:	795b      	ldrb	r3, [r3, #5]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <baro_init+0x1d0>)
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b21a      	sxth	r2, r3
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <baro_init+0x1e0>)
 800071a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)data [7] << 8 | (uint16_t)data [6];
 800071c:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <baro_init+0x1d0>)
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <baro_init+0x1d0>)
 8000726:	799b      	ldrb	r3, [r3, #6]
 8000728:	b21b      	sxth	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	b21b      	sxth	r3, r3
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <baro_init+0x1e4>)
 8000732:	801a      	strh	r2, [r3, #0]
	dig_P2 =  (int16_t)data [9] << 8 |  (int16_t)data [8];
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <baro_init+0x1d0>)
 8000736:	7a5b      	ldrb	r3, [r3, #9]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <baro_init+0x1d0>)
 800073e:	7a1b      	ldrb	r3, [r3, #8]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21a      	sxth	r2, r3
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <baro_init+0x1e8>)
 8000748:	801a      	strh	r2, [r3, #0]
	dig_P3 =  (int16_t)data[11] << 8 |  (int16_t)data[10];
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <baro_init+0x1d0>)
 800074c:	7adb      	ldrb	r3, [r3, #11]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <baro_init+0x1d0>)
 8000754:	7a9b      	ldrb	r3, [r3, #10]
 8000756:	b21b      	sxth	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b21a      	sxth	r2, r3
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <baro_init+0x1ec>)
 800075e:	801a      	strh	r2, [r3, #0]
	dig_P4 =  (int16_t)data[13] << 8 |  (int16_t)data[12];
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <baro_init+0x1d0>)
 8000762:	7b5b      	ldrb	r3, [r3, #13]
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	b21a      	sxth	r2, r3
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <baro_init+0x1d0>)
 800076a:	7b1b      	ldrb	r3, [r3, #12]
 800076c:	b21b      	sxth	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b21a      	sxth	r2, r3
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <baro_init+0x1f0>)
 8000774:	801a      	strh	r2, [r3, #0]
	dig_P5 =  (int16_t)data[15] << 8 |  (int16_t)data[14];
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <baro_init+0x1d0>)
 8000778:	7bdb      	ldrb	r3, [r3, #15]
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	b21a      	sxth	r2, r3
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <baro_init+0x1d0>)
 8000780:	7b9b      	ldrb	r3, [r3, #14]
 8000782:	b21b      	sxth	r3, r3
 8000784:	4313      	orrs	r3, r2
 8000786:	b21a      	sxth	r2, r3
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <baro_init+0x1f4>)
 800078a:	801a      	strh	r2, [r3, #0]
	dig_P6 =  (int16_t)data[17] << 8 |  (int16_t)data[16];
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <baro_init+0x1d0>)
 800078e:	7c5b      	ldrb	r3, [r3, #17]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <baro_init+0x1d0>)
 8000796:	7c1b      	ldrb	r3, [r3, #16]
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21a      	sxth	r2, r3
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <baro_init+0x1f8>)
 80007a0:	801a      	strh	r2, [r3, #0]
	dig_P7 =  (int16_t)data[19] << 8 |  (int16_t)data[18];
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <baro_init+0x1d0>)
 80007a4:	7cdb      	ldrb	r3, [r3, #19]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b21a      	sxth	r2, r3
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <baro_init+0x1d0>)
 80007ac:	7c9b      	ldrb	r3, [r3, #18]
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <baro_init+0x1fc>)
 80007b6:	801a      	strh	r2, [r3, #0]
	dig_P8 =  (int16_t)data[21] << 8 |  (int16_t)data[20];
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <baro_init+0x1d0>)
 80007ba:	7d5b      	ldrb	r3, [r3, #21]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	b21a      	sxth	r2, r3
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <baro_init+0x1d0>)
 80007c2:	7d1b      	ldrb	r3, [r3, #20]
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b21a      	sxth	r2, r3
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <baro_init+0x200>)
 80007cc:	801a      	strh	r2, [r3, #0]
	dig_P9 =  (int16_t)data[23] << 8 |  (int16_t)data[22];
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <baro_init+0x1d0>)
 80007d0:	7ddb      	ldrb	r3, [r3, #23]
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <baro_init+0x1d0>)
 80007d8:	7d9b      	ldrb	r3, [r3, #22]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b21a      	sxth	r2, r3
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <baro_init+0x204>)
 80007e2:	801a      	strh	r2, [r3, #0]

	inited = true;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <baro_init+0x208>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]

	return BARO_OK;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000b0 	.word	0x200000b0
 80007f8:	200000cc 	.word	0x200000cc
 80007fc:	20000090 	.word	0x20000090
 8000800:	20000094 	.word	0x20000094
 8000804:	20000096 	.word	0x20000096
 8000808:	20000092 	.word	0x20000092
 800080c:	20000098 	.word	0x20000098
 8000810:	2000009a 	.word	0x2000009a
 8000814:	2000009c 	.word	0x2000009c
 8000818:	2000009e 	.word	0x2000009e
 800081c:	200000a0 	.word	0x200000a0
 8000820:	200000a2 	.word	0x200000a2
 8000824:	200000a4 	.word	0x200000a4
 8000828:	200000a6 	.word	0x200000a6
 800082c:	200000ac 	.word	0x200000ac

08000830 <baro_read_temp>:

int32_t baro_read_temp(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af04      	add	r7, sp, #16
	int32_t var1, var2, temp;

	if (!inited)
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <baro_read_temp+0xc4>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	f083 0301 	eor.w	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <baro_read_temp+0x1a>
		return INT32_MAX;
 8000844:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000848:	e050      	b.n	80008ec <baro_read_temp+0xbc>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	2303      	movs	r3, #3
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <baro_read_temp+0xc8>)
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	22fa      	movs	r2, #250	; 0xfa
 800085c:	21ec      	movs	r1, #236	; 0xec
 800085e:	4827      	ldr	r0, [pc, #156]	; (80008fc <baro_read_temp+0xcc>)
 8000860:	f001 fd40 	bl	80022e4 <HAL_I2C_Mem_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <baro_read_temp+0x44>
		return INT32_MAX;
 800086e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000872:	e03b      	b.n	80008ec <baro_read_temp+0xbc>
	}
	int32_t adc_T = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <baro_read_temp+0xc8>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	031a      	lsls	r2, r3, #12
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <baro_read_temp+0xc8>)
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4313      	orrs	r3, r2
 8000882:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <baro_read_temp+0xc8>)
 8000884:	7892      	ldrb	r2, [r2, #2]
 8000886:	0912      	lsrs	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	4313      	orrs	r3, r2
 800088c:	613b      	str	r3, [r7, #16]

	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	10da      	asrs	r2, r3, #3
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <baro_read_temp+0xd0>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	1ad3      	subs	r3, r2, r3
		   ((int32_t)dig_T2)) >> 11;
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <baro_read_temp+0xd4>)
 800089c:	f9b2 2000 	ldrsh.w	r2, [r2]
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 80008a0:	fb02 f303 	mul.w	r3, r2, r3
 80008a4:	12db      	asrs	r3, r3, #11
 80008a6:	60fb      	str	r3, [r7, #12]

	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	111b      	asrs	r3, r3, #4
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <baro_read_temp+0xd0>)
 80008ae:	8812      	ldrh	r2, [r2, #0]
 80008b0:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	1112      	asrs	r2, r2, #4
 80008b6:	4912      	ldr	r1, [pc, #72]	; (8000900 <baro_read_temp+0xd0>)
 80008b8:	8809      	ldrh	r1, [r1, #0]
 80008ba:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008c0:	131b      	asrs	r3, r3, #12
		      ((int32_t)dig_T3)) >> 14;
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <baro_read_temp+0xd8>)
 80008c4:	f9b2 2000 	ldrsh.w	r2, [r2]
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008c8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008cc:	139b      	asrs	r3, r3, #14
 80008ce:	60bb      	str	r3, [r7, #8]

	t_fine = var1 + var2;
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a0d      	ldr	r2, [pc, #52]	; (800090c <baro_read_temp+0xdc>)
 80008d8:	6013      	str	r3, [r2, #0]

	temp = (t_fine * 5 + 128) >> 8;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <baro_read_temp+0xdc>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	3380      	adds	r3, #128	; 0x80
 80008e6:	121b      	asrs	r3, r3, #8
 80008e8:	607b      	str	r3, [r7, #4]

	return temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	200000b0 	.word	0x200000b0
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	20000090 	.word	0x20000090
 8000904:	20000094 	.word	0x20000094
 8000908:	20000096 	.word	0x20000096
 800090c:	200000a8 	.word	0x200000a8

08000910 <baro_read_press>:

uint32_t baro_read_press(void) {
 8000910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000914:	b0d0      	sub	sp, #320	; 0x140
 8000916:	af04      	add	r7, sp, #16
	int64_t var1, var2, p;

	if (!inited)
 8000918:	4bc6      	ldr	r3, [pc, #792]	; (8000c34 <baro_read_press+0x324>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	f083 0301 	eor.w	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d002      	beq.n	800092c <baro_read_press+0x1c>
		return INT32_MAX;
 8000926:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800092a:	e2f6      	b.n	8000f1a <baro_read_press+0x60a>

	if (baro_read_temp() == INT32_MAX)
 800092c:	f7ff ff80 	bl	8000830 <baro_read_temp>
 8000930:	4602      	mov	r2, r0
 8000932:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000936:	429a      	cmp	r2, r3
 8000938:	d102      	bne.n	8000940 <baro_read_press+0x30>
		return UINT32_MAX;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e2ec      	b.n	8000f1a <baro_read_press+0x60a>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 8000940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	2303      	movs	r3, #3
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	4bbb      	ldr	r3, [pc, #748]	; (8000c38 <baro_read_press+0x328>)
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	22f7      	movs	r2, #247	; 0xf7
 8000952:	21ec      	movs	r1, #236	; 0xec
 8000954:	48b9      	ldr	r0, [pc, #740]	; (8000c3c <baro_read_press+0x32c>)
 8000956:	f001 fcc5 	bl	80022e4 <HAL_I2C_Mem_Read>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (status != HAL_OK) {
 8000960:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <baro_read_press+0x5e>
		return INT32_MAX;
 8000968:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800096c:	e2d5      	b.n	8000f1a <baro_read_press+0x60a>
	}
	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800096e:	4bb2      	ldr	r3, [pc, #712]	; (8000c38 <baro_read_press+0x328>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	031a      	lsls	r2, r3, #12
 8000974:	4bb0      	ldr	r3, [pc, #704]	; (8000c38 <baro_read_press+0x328>)
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	431a      	orrs	r2, r3
 800097c:	4bae      	ldr	r3, [pc, #696]	; (8000c38 <baro_read_press+0x328>)
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	091b      	lsrs	r3, r3, #4
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	var1 = ((int64_t)t_fine) - 128000;
 800098a:	4bad      	ldr	r3, [pc, #692]	; (8000c40 <baro_read_press+0x330>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	17da      	asrs	r2, r3, #31
 8000990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000994:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000998:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800099c:	460b      	mov	r3, r1
 800099e:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80009a2:	653b      	str	r3, [r7, #80]	; 0x50
 80009a4:	4613      	mov	r3, r2
 80009a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80009aa:	657b      	str	r3, [r7, #84]	; 0x54
 80009ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80009b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009b4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009bc:	fb03 f102 	mul.w	r1, r3, r2
 80009c0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009c8:	fb02 f303 	mul.w	r3, r2, r3
 80009cc:	18ca      	adds	r2, r1, r3
 80009ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009d2:	fba3 4503 	umull	r4, r5, r3, r3
 80009d6:	1953      	adds	r3, r2, r5
 80009d8:	461d      	mov	r5, r3
 80009da:	4b9a      	ldr	r3, [pc, #616]	; (8000c44 <baro_read_press+0x334>)
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	17da      	asrs	r2, r3, #31
 80009e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80009e8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80009ec:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80009f0:	4603      	mov	r3, r0
 80009f2:	fb03 f205 	mul.w	r2, r3, r5
 80009f6:	460b      	mov	r3, r1
 80009f8:	fb04 f303 	mul.w	r3, r4, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	4602      	mov	r2, r0
 8000a00:	fba4 8902 	umull	r8, r9, r4, r2
 8000a04:	444b      	add	r3, r9
 8000a06:	4699      	mov	r9, r3
 8000a08:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000a0c:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 8000a10:	4b8d      	ldr	r3, [pc, #564]	; (8000c48 <baro_read_press+0x338>)
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	17da      	asrs	r2, r3, #31
 8000a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a1e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000a22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a26:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000a2a:	462a      	mov	r2, r5
 8000a2c:	fb02 f203 	mul.w	r2, r2, r3
 8000a30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a34:	4621      	mov	r1, r4
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	441a      	add	r2, r3
 8000a3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a40:	4621      	mov	r1, r4
 8000a42:	fba3 ab01 	umull	sl, fp, r3, r1
 8000a46:	eb02 030b 	add.w	r3, r2, fp
 8000a4a:	469b      	mov	fp, r3
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	f04f 0100 	mov.w	r1, #0
 8000a54:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000a58:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000a5c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000a60:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a64:	1814      	adds	r4, r2, r0
 8000a66:	64bc      	str	r4, [r7, #72]	; 0x48
 8000a68:	414b      	adcs	r3, r1
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a6c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000a70:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8000a74:	4b75      	ldr	r3, [pc, #468]	; (8000c4c <baro_read_press+0x33c>)
 8000a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	17da      	asrs	r2, r3, #31
 8000a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000a82:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	f04f 0100 	mov.w	r1, #0
 8000a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000a92:	00d9      	lsls	r1, r3, #3
 8000a94:	2000      	movs	r0, #0
 8000a96:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a9a:	1814      	adds	r4, r2, r0
 8000a9c:	643c      	str	r4, [r7, #64]	; 0x40
 8000a9e:	414b      	adcs	r3, r1
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000aa6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000aaa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ab2:	fb03 f102 	mul.w	r1, r3, r2
 8000ab6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000aba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000abe:	fb02 f303 	mul.w	r3, r2, r3
 8000ac2:	18ca      	adds	r2, r1, r3
 8000ac4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ac8:	fba3 1303 	umull	r1, r3, r3, r3
 8000acc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ada:	18d3      	adds	r3, r2, r3
 8000adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ae0:	4b5b      	ldr	r3, [pc, #364]	; (8000c50 <baro_read_press+0x340>)
 8000ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	17da      	asrs	r2, r3, #31
 8000aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000aee:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000af2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8000af6:	462b      	mov	r3, r5
 8000af8:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8000afc:	4642      	mov	r2, r8
 8000afe:	fb02 f203 	mul.w	r2, r2, r3
 8000b02:	464b      	mov	r3, r9
 8000b04:	4621      	mov	r1, r4
 8000b06:	fb01 f303 	mul.w	r3, r1, r3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4622      	mov	r2, r4
 8000b0e:	4641      	mov	r1, r8
 8000b10:	fba2 1201 	umull	r1, r2, r2, r1
 8000b14:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8000b18:	460a      	mov	r2, r1
 8000b1a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8000b1e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000b22:	4413      	add	r3, r2
 8000b24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	f04f 0100 	mov.w	r1, #0
 8000b30:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000b34:	4623      	mov	r3, r4
 8000b36:	0a18      	lsrs	r0, r3, #8
 8000b38:	462b      	mov	r3, r5
 8000b3a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b3e:	462b      	mov	r3, r5
 8000b40:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)dig_P2) << 12);
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <baro_read_press+0x344>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	17da      	asrs	r2, r3, #31
 8000b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b58:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	fb02 f203 	mul.w	r2, r2, r3
 8000b62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b66:	4644      	mov	r4, r8
 8000b68:	fb04 f303 	mul.w	r3, r4, r3
 8000b6c:	441a      	add	r2, r3
 8000b6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b72:	4644      	mov	r4, r8
 8000b74:	fba3 4304 	umull	r4, r3, r3, r4
 8000b78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b7c:	4623      	mov	r3, r4
 8000b7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b86:	18d3      	adds	r3, r2, r3
 8000b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8000b98:	464c      	mov	r4, r9
 8000b9a:	0323      	lsls	r3, r4, #12
 8000b9c:	4644      	mov	r4, r8
 8000b9e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000ba2:	4644      	mov	r4, r8
 8000ba4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000ba6:	1884      	adds	r4, r0, r2
 8000ba8:	63bc      	str	r4, [r7, #56]	; 0x38
 8000baa:	eb41 0303 	adc.w	r3, r1, r3
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bb0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000bb4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 8000bb8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000bbc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000bc0:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8000bc4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <baro_read_press+0x348>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000bd4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000bd8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8000bdc:	462b      	mov	r3, r5
 8000bde:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000be2:	4642      	mov	r2, r8
 8000be4:	fb02 f203 	mul.w	r2, r2, r3
 8000be8:	464b      	mov	r3, r9
 8000bea:	4621      	mov	r1, r4
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4622      	mov	r2, r4
 8000bf4:	4641      	mov	r1, r8
 8000bf6:	fba2 1201 	umull	r1, r2, r2, r1
 8000bfa:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000bfe:	460a      	mov	r2, r1
 8000c00:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000c04:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c08:	4413      	add	r3, r2
 8000c0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	104a      	asrs	r2, r1, #1
 8000c1e:	4629      	mov	r1, r5
 8000c20:	17cb      	asrs	r3, r1, #31
 8000c22:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0) {
 8000c26:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	d116      	bne.n	8000c5c <baro_read_press+0x34c>
		return 0; // avoid exception caused by division by zero
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e173      	b.n	8000f1a <baro_read_press+0x60a>
 8000c32:	bf00      	nop
 8000c34:	200000ac 	.word	0x200000ac
 8000c38:	200000b0 	.word	0x200000b0
 8000c3c:	200000cc 	.word	0x200000cc
 8000c40:	200000a8 	.word	0x200000a8
 8000c44:	200000a0 	.word	0x200000a0
 8000c48:	2000009e 	.word	0x2000009e
 8000c4c:	2000009c 	.word	0x2000009c
 8000c50:	2000009a 	.word	0x2000009a
 8000c54:	20000098 	.word	0x20000098
 8000c58:	20000092 	.word	0x20000092
	}
	p = 1048576 - adc_P;
 8000c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c60:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000c64:	17da      	asrs	r2, r3, #31
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
 8000c68:	637a      	str	r2, [r7, #52]	; 0x34
 8000c6a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000c6e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8000c72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c76:	105b      	asrs	r3, r3, #1
 8000c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c80:	07db      	lsls	r3, r3, #31
 8000c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c86:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000c8e:	4621      	mov	r1, r4
 8000c90:	1a89      	subs	r1, r1, r2
 8000c92:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000c96:	4629      	mov	r1, r5
 8000c98:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000ca0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	462b      	mov	r3, r5
 8000ca8:	1891      	adds	r1, r2, r2
 8000caa:	62b9      	str	r1, [r7, #40]	; 0x28
 8000cac:	415b      	adcs	r3, r3
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	1851      	adds	r1, r2, r1
 8000cb8:	6239      	str	r1, [r7, #32]
 8000cba:	4629      	mov	r1, r5
 8000cbc:	414b      	adcs	r3, r1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000ccc:	4649      	mov	r1, r9
 8000cce:	018b      	lsls	r3, r1, #6
 8000cd0:	4641      	mov	r1, r8
 8000cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000cd6:	4641      	mov	r1, r8
 8000cd8:	018a      	lsls	r2, r1, #6
 8000cda:	4641      	mov	r1, r8
 8000cdc:	1889      	adds	r1, r1, r2
 8000cde:	61b9      	str	r1, [r7, #24]
 8000ce0:	4649      	mov	r1, r9
 8000ce2:	eb43 0101 	adc.w	r1, r3, r1
 8000ce6:	61f9      	str	r1, [r7, #28]
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	008b      	lsls	r3, r1, #2
 8000cf8:	4641      	mov	r1, r8
 8000cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000cfe:	4641      	mov	r1, r8
 8000d00:	008a      	lsls	r2, r1, #2
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	4622      	mov	r2, r4
 8000d0a:	189b      	adds	r3, r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	462a      	mov	r2, r5
 8000d12:	eb42 0303 	adc.w	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d24:	4649      	mov	r1, r9
 8000d26:	008b      	lsls	r3, r1, #2
 8000d28:	4641      	mov	r1, r8
 8000d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d2e:	4641      	mov	r1, r8
 8000d30:	008a      	lsls	r2, r1, #2
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	4603      	mov	r3, r0
 8000d38:	4622      	mov	r2, r4
 8000d3a:	189b      	adds	r3, r3, r2
 8000d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d40:	462b      	mov	r3, r5
 8000d42:	460a      	mov	r2, r1
 8000d44:	eb42 0303 	adc.w	r3, r2, r3
 8000d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d4c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d50:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000d54:	f7ff fa94 	bl	8000280 <__aeabi_ldivmod>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000d60:	4b71      	ldr	r3, [pc, #452]	; (8000f28 <baro_read_press+0x618>)
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	17da      	asrs	r2, r3, #31
 8000d6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d6c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d6e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	f04f 0100 	mov.w	r1, #0
 8000d7a:	0b50      	lsrs	r0, r2, #13
 8000d7c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d80:	1359      	asrs	r1, r3, #13
 8000d82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000d86:	462b      	mov	r3, r5
 8000d88:	fb00 f203 	mul.w	r2, r0, r3
 8000d8c:	4623      	mov	r3, r4
 8000d8e:	fb03 f301 	mul.w	r3, r3, r1
 8000d92:	4413      	add	r3, r2
 8000d94:	4622      	mov	r2, r4
 8000d96:	fba2 1200 	umull	r1, r2, r2, r0
 8000d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000d9e:	460a      	mov	r2, r1
 8000da0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000da4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000da8:	4413      	add	r3, r2
 8000daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	f04f 0100 	mov.w	r1, #0
 8000dba:	0b50      	lsrs	r0, r2, #13
 8000dbc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dc0:	1359      	asrs	r1, r3, #13
 8000dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000dc6:	462b      	mov	r3, r5
 8000dc8:	fb00 f203 	mul.w	r2, r0, r3
 8000dcc:	4623      	mov	r3, r4
 8000dce:	fb03 f301 	mul.w	r3, r3, r1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dda:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000dde:	460a      	mov	r2, r1
 8000de0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000de4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000de8:	4413      	add	r3, r2
 8000dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000dfa:	4621      	mov	r1, r4
 8000dfc:	0e4a      	lsrs	r2, r1, #25
 8000dfe:	4629      	mov	r1, r5
 8000e00:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e04:	4629      	mov	r1, r5
 8000e06:	164b      	asrs	r3, r1, #25
 8000e08:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e0c:	4b47      	ldr	r3, [pc, #284]	; (8000f2c <baro_read_press+0x61c>)
 8000e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	17da      	asrs	r2, r3, #31
 8000e16:	673b      	str	r3, [r7, #112]	; 0x70
 8000e18:	677a      	str	r2, [r7, #116]	; 0x74
 8000e1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e1e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000e22:	462a      	mov	r2, r5
 8000e24:	fb02 f203 	mul.w	r2, r2, r3
 8000e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	fb01 f303 	mul.w	r3, r1, r3
 8000e32:	441a      	add	r2, r3
 8000e34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e38:	4621      	mov	r1, r4
 8000e3a:	fba3 1301 	umull	r1, r3, r3, r1
 8000e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e42:	460b      	mov	r3, r1
 8000e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e4c:	18d3      	adds	r3, r2, r3
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000e5e:	4621      	mov	r1, r4
 8000e60:	0cca      	lsrs	r2, r1, #19
 8000e62:	4629      	mov	r1, r5
 8000e64:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e68:	4629      	mov	r1, r5
 8000e6a:	14cb      	asrs	r3, r1, #19
 8000e6c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8000e70:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000e74:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e78:	1884      	adds	r4, r0, r2
 8000e7a:	66bc      	str	r4, [r7, #104]	; 0x68
 8000e7c:	eb41 0303 	adc.w	r3, r1, r3
 8000e80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e82:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000e86:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	1889      	adds	r1, r1, r2
 8000e8e:	6639      	str	r1, [r7, #96]	; 0x60
 8000e90:	4629      	mov	r1, r5
 8000e92:	eb43 0101 	adc.w	r1, r3, r1
 8000e96:	6679      	str	r1, [r7, #100]	; 0x64
 8000e98:	f04f 0000 	mov.w	r0, #0
 8000e9c:	f04f 0100 	mov.w	r1, #0
 8000ea0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	0a18      	lsrs	r0, r3, #8
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000eae:	462b      	mov	r3, r5
 8000eb0:	1219      	asrs	r1, r3, #8
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <baro_read_press+0x620>)
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	17da      	asrs	r2, r3, #31
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8000ecc:	464c      	mov	r4, r9
 8000ece:	0123      	lsls	r3, r4, #4
 8000ed0:	4644      	mov	r4, r8
 8000ed2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ed6:	4644      	mov	r4, r8
 8000ed8:	0122      	lsls	r2, r4, #4
 8000eda:	1884      	adds	r4, r0, r2
 8000edc:	60bc      	str	r4, [r7, #8]
 8000ede:	eb41 0303 	adc.w	r3, r1, r3
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ee8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return p / 256;
 8000eec:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da07      	bge.n	8000f04 <baro_read_press+0x5f4>
 8000ef4:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	f143 0300 	adc.w	r3, r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f04:	f04f 0000 	mov.w	r0, #0
 8000f08:	f04f 0100 	mov.w	r1, #0
 8000f0c:	0a10      	lsrs	r0, r2, #8
 8000f0e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f12:	1219      	asrs	r1, r3, #8
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4613      	mov	r3, r2

}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f20:	46bd      	mov	sp, r7
 8000f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f26:	bf00      	nop
 8000f28:	200000a6 	.word	0x200000a6
 8000f2c:	200000a4 	.word	0x200000a4
 8000f30:	200000a2 	.word	0x200000a2

08000f34 <create_new_elem>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char text[100];

struct list* create_new_elem()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	struct list* new_elem = (struct list*)malloc(sizeof(struct list));
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f007 f84a 	bl	8007fd4 <malloc>
 8000f40:	4603      	mov	r3, r0
 8000f42:	607b      	str	r3, [r7, #4]
	begin->next = new_elem;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <create_new_elem+0x38>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	605a      	str	r2, [r3, #4]
	new_elem->prev = begin;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <create_new_elem+0x38>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
	new_elem->next = NULL;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
	begin = new_elem;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <create_new_elem+0x38>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
	return begin;
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <create_new_elem+0x38>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000025c 	.word	0x2000025c

08000f70 <delete_elem>:

struct list* delete_elem()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
	struct list* new_end = end->next;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <delete_elem+0x30>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	607b      	str	r3, [r7, #4]
	new_end->prev = NULL;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
	free(end);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <delete_elem+0x30>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 f82b 	bl	8007fe4 <free>
	end = new_end;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <delete_elem+0x30>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
	return end;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <delete_elem+0x30>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000260 	.word	0x20000260

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fc24 	bl	80017f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f840 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f000 f94e 	bl	8001250 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fb4:	f000 f8d4 	bl	8001160 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fb8:	f000 f920 	bl	80011fc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fbc:	f000 f8a2 	bl	8001104 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc0:	f003 fb42 	bl	8004648 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex */
  mutexHandle = osMutexNew(&mutex_attributes);
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <main+0x64>)
 8000fc6:	f003 fc1b 	bl	8004800 <osMutexNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <main+0x68>)
 8000fce:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of MEANING_SEM */
  MEANING_SEMHandle = osSemaphoreNew(5, 5, &MEANING_SEM_attributes);
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <main+0x6c>)
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	2005      	movs	r0, #5
 8000fd6:	f003 fd21 	bl	8004a1c <osSemaphoreNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <main+0x70>)
 8000fde:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_take_raw_s */
  task_take_raw_sHandle = osThreadNew(start_task_take_raw_s, NULL, &task_take_raw_s_attributes);
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <main+0x74>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <main+0x78>)
 8000fe6:	f003 fb79 	bl	80046dc <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <main+0x7c>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of task_showing */
  task_showingHandle = osThreadNew(start_task_showing, NULL, &task_showing_attributes);
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <main+0x80>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <main+0x84>)
 8000ff6:	f003 fb71 	bl	80046dc <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <main+0x88>)
 8000ffe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001000:	f003 fb46 	bl	8004690 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0x60>
 8001006:	bf00      	nop
 8001008:	08008ad8 	.word	0x08008ad8
 800100c:	200001b4 	.word	0x200001b4
 8001010:	08008ae8 	.word	0x08008ae8
 8001014:	20000208 	.word	0x20000208
 8001018:	08008a90 	.word	0x08008a90
 800101c:	0800136d 	.word	0x0800136d
 8001020:	200001ac 	.word	0x200001ac
 8001024:	08008ab4 	.word	0x08008ab4
 8001028:	08001419 	.word	0x08001419
 800102c:	200001b0 	.word	0x200001b0

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 ffe6 	bl	8008010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <SystemClock_Config+0xd0>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a4:	2308      	movs	r3, #8
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010a8:	2354      	movs	r3, #84	; 0x54
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fe95 	bl	8002de8 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c4:	f000 fa06 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 f8f7 	bl	80032d8 <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f0:	f000 f9f0 	bl	80014d4 <Error_Handler>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	; 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2C1_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_I2C1_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_I2C1_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_I2C1_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_I2C1_Init+0x50>)
 8001122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2C1_Init+0x50>)
 8001142:	f000 fe91 	bl	8001e68 <HAL_I2C_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f9c2 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000cc 	.word	0x200000cc
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a6:	f002 fa77 	bl	8003698 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011b0:	f000 f990 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c2:	f002 fbc0 	bl	8003946 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011cc:	f000 f982 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011de:	f002 fdbb 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f000 f974 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000120 	.word	0x20000120
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART1_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART1_UART_Init+0x4c>)
 8001234:	f002 fe12 	bl	8003e5c <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 f949 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000168 	.word	0x20000168
 800124c:	40011000 	.word	0x40011000

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <MX_GPIO_Init+0xe4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a31      	ldr	r2, [pc, #196]	; (8001334 <MX_GPIO_Init+0xe4>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <MX_GPIO_Init+0xe4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_GPIO_Init+0xe4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a2a      	ldr	r2, [pc, #168]	; (8001334 <MX_GPIO_Init+0xe4>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MX_GPIO_Init+0xe4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <MX_GPIO_Init+0xe4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <MX_GPIO_Init+0xe4>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_GPIO_Init+0xe4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_GPIO_Init+0xe4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <MX_GPIO_Init+0xe4>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_GPIO_Init+0xe4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	4816      	ldr	r0, [pc, #88]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012de:	f000 fd91 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	480f      	ldr	r0, [pc, #60]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012fc:	f000 fbfe 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001300:	2340      	movs	r3, #64	; 0x40
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001304:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <MX_GPIO_Init+0xec>)
 8001316:	f000 fbf1 	bl	8001afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	2017      	movs	r0, #23
 8001320:	f000 fbb5 	bl	8001a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001324:	2017      	movs	r0, #23
 8001326:	f000 fbce 	bl	8001ac6 <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  //osSemaphoreRelease(semButtonPressedHandle);
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <start_task_take_raw_s>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_task_take_raw_s */
void start_task_take_raw_s(void *argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(baro_init() != BARO_OK)
 8001374:	f7ff f956 	bl	8000624 <baro_init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d011      	beq.n	80013a2 <start_task_take_raw_s+0x36>
	{
		snprintf(text,countof(text),"Error initialization barometr\n");
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <start_task_take_raw_s+0x98>)
 8001380:	2164      	movs	r1, #100	; 0x64
 8001382:	4821      	ldr	r0, [pc, #132]	; (8001408 <start_task_take_raw_s+0x9c>)
 8001384:	f006 ffa6 	bl	80082d4 <sniprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)text, strnlen(text,countof(text)),1000);
 8001388:	2164      	movs	r1, #100	; 0x64
 800138a:	481f      	ldr	r0, [pc, #124]	; (8001408 <start_task_take_raw_s+0x9c>)
 800138c:	f006 ffd6 	bl	800833c <strnlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	491b      	ldr	r1, [pc, #108]	; (8001408 <start_task_take_raw_s+0x9c>)
 800139a:	481c      	ldr	r0, [pc, #112]	; (800140c <start_task_take_raw_s+0xa0>)
 800139c:	f002 fdab 	bl	8003ef6 <HAL_UART_Transmit>
		while(1){}
 80013a0:	e7fe      	b.n	80013a0 <start_task_take_raw_s+0x34>
	}
   /* Infinite loop */
   for(;;)
   {
	   osMutexAcquire(mutexHandle,osWaitForever);
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <start_task_take_raw_s+0xa4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f04f 31ff 	mov.w	r1, #4294967295
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 faae 	bl	800490c <osMutexAcquire>
	   uint32_t size = osSemaphoreGetCount(MEANING_SEMHandle);
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <start_task_take_raw_s+0xa8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fc51 	bl	8004c5c <osSemaphoreGetCount>
 80013ba:	60f8      	str	r0, [r7, #12]
	   if(size == 0)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <start_task_take_raw_s+0x62>
	   {
		   osMutexRelease(mutexHandle);
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <start_task_take_raw_s+0xa4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 faeb 	bl	80049a2 <osMutexRelease>
		   //osDelay(pdMS_TO_TICKS(150));
		   continue;
 80013cc:	e019      	b.n	8001402 <start_task_take_raw_s+0x96>
	   }
	   osSemaphoreAcquire(MEANING_SEMHandle,osWaitForever);
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <start_task_take_raw_s+0xa8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f04f 31ff 	mov.w	r1, #4294967295
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fbaa 	bl	8004b30 <osSemaphoreAcquire>
	   struct list* lst = create_new_elem();
 80013dc:	f7ff fdaa 	bl	8000f34 <create_new_elem>
 80013e0:	60b8      	str	r0, [r7, #8]
	   lst->temp = baro_read_temp();
 80013e2:	f7ff fa25 	bl	8000830 <baro_read_temp>
 80013e6:	4602      	mov	r2, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	609a      	str	r2, [r3, #8]
	   lst->pres = baro_read_press();
 80013ec:	f7ff fa90 	bl	8000910 <baro_read_press>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60da      	str	r2, [r3, #12]
	   osMutexRelease(mutexHandle);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <start_task_take_raw_s+0xa4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 fad0 	bl	80049a2 <osMutexRelease>
   {
 8001402:	e7ce      	b.n	80013a2 <start_task_take_raw_s+0x36>
 8001404:	08008a3c 	.word	0x08008a3c
 8001408:	20000264 	.word	0x20000264
 800140c:	20000168 	.word	0x20000168
 8001410:	200001b4 	.word	0x200001b4
 8001414:	20000208 	.word	0x20000208

08001418 <start_task_showing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_task_showing */
void start_task_showing(void *argument)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_task_showing */
  /* Infinite loop */
  for(;;)
  {
	 osMutexAcquire(mutexHandle,osWaitForever);
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <start_task_showing+0xa4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fa6f 	bl	800490c <osMutexAcquire>
	 if(osSemaphoreRelease(MEANING_SEMHandle) != osErrorResource)
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <start_task_showing+0xa8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fbce 	bl	8004bd4 <osSemaphoreRelease>
 8001438:	4603      	mov	r3, r0
 800143a:	f113 0f03 	cmn.w	r3, #3
 800143e:	d036      	beq.n	80014ae <start_task_showing+0x96>
	 	 {
		 	 snprintf(text,countof(text),"/*%ld.%02ld,%ld.%02ld*/\n",end->temp/100,end->temp%100,end->pres/100,end->pres%100);
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <start_task_showing+0xac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <start_task_showing+0xb0>)
 8001448:	fb82 1203 	smull	r1, r2, r2, r3
 800144c:	1152      	asrs	r2, r2, #5
 800144e:	17db      	asrs	r3, r3, #31
 8001450:	1ad5      	subs	r5, r2, r3
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <start_task_showing+0xac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <start_task_showing+0xb0>)
 800145a:	fb83 1302 	smull	r1, r3, r3, r2
 800145e:	1159      	asrs	r1, r3, #5
 8001460:	17d3      	asrs	r3, r2, #31
 8001462:	1acb      	subs	r3, r1, r3
 8001464:	2164      	movs	r1, #100	; 0x64
 8001466:	fb01 f303 	mul.w	r3, r1, r3
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <start_task_showing+0xac>)
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	68d2      	ldr	r2, [r2, #12]
 8001472:	4915      	ldr	r1, [pc, #84]	; (80014c8 <start_task_showing+0xb0>)
 8001474:	fb81 0102 	smull	r0, r1, r1, r2
 8001478:	1149      	asrs	r1, r1, #5
 800147a:	17d2      	asrs	r2, r2, #31
 800147c:	1a88      	subs	r0, r1, r2
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <start_task_showing+0xac>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	68d1      	ldr	r1, [r2, #12]
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <start_task_showing+0xb0>)
 8001486:	fb82 4201 	smull	r4, r2, r2, r1
 800148a:	1154      	asrs	r4, r2, #5
 800148c:	17ca      	asrs	r2, r1, #31
 800148e:	1aa2      	subs	r2, r4, r2
 8001490:	2464      	movs	r4, #100	; 0x64
 8001492:	fb04 f202 	mul.w	r2, r4, r2
 8001496:	1a8a      	subs	r2, r1, r2
 8001498:	9202      	str	r2, [sp, #8]
 800149a:	9001      	str	r0, [sp, #4]
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	462b      	mov	r3, r5
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <start_task_showing+0xb4>)
 80014a2:	2164      	movs	r1, #100	; 0x64
 80014a4:	480a      	ldr	r0, [pc, #40]	; (80014d0 <start_task_showing+0xb8>)
 80014a6:	f006 ff15 	bl	80082d4 <sniprintf>
		 	 delete_elem();
 80014aa:	f7ff fd61 	bl	8000f70 <delete_elem>
	 	 }
		 else
		 {
			 //osDelay(pdMS_TO_TICKS(150));
		 }
	 osMutexRelease(mutexHandle);
 80014ae:	4b03      	ldr	r3, [pc, #12]	; (80014bc <start_task_showing+0xa4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fa75 	bl	80049a2 <osMutexRelease>
	 osMutexAcquire(mutexHandle,osWaitForever);
 80014b8:	e7b2      	b.n	8001420 <start_task_showing+0x8>
 80014ba:	bf00      	nop
 80014bc:	200001b4 	.word	0x200001b4
 80014c0:	20000208 	.word	0x20000208
 80014c4:	20000260 	.word	0x20000260
 80014c8:	51eb851f 	.word	0x51eb851f
 80014cc:	08008a5c 	.word	0x08008a5c
 80014d0:	20000264 	.word	0x20000264

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_MspInit+0x54>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_MspInit+0x54>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_MspInit+0x54>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_MspInit+0x54>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_MspInit+0x54>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_MspInit+0x54>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	210f      	movs	r1, #15
 8001522:	f06f 0001 	mvn.w	r0, #1
 8001526:	f000 fab2 	bl	8001a8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_I2C_MspInit+0x84>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d12c      	bne.n	80015b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001588:	2304      	movs	r3, #4
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <HAL_I2C_MspInit+0x8c>)
 8001594:	f000 fab2 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 80015a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3728      	adds	r7, #40	; 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400

080015c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_TIM_Base_MspInit+0x48>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d115      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_TIM_Base_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_TIM_Base_MspInit+0x4c>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_TIM_Base_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2105      	movs	r1, #5
 80015fa:	201d      	movs	r0, #29
 80015fc:	f000 fa47 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001600:	201d      	movs	r0, #29
 8001602:	f000 fa60 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40000400 	.word	0x40000400
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_UART_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_UART_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001672:	23c0      	movs	r3, #192	; 0xc0
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001682:	2307      	movs	r3, #7
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_UART_MspInit+0x8c>)
 800168e:	f000 fa35 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40011000 	.word	0x40011000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f8de 	bl	8001898 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016dc:	f005 faea 	bl	8006cb4 <xTaskGetSchedulerState>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016e6:	f006 f9cf 	bl	8007a88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80016f2:	2040      	movs	r0, #64	; 0x40
 80016f4:	f000 fba0 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM3_IRQHandler+0x10>)
 8001702:	f002 f818 	bl	8003736 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000120 	.word	0x20000120

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f006 fc1c 	bl	8007f7c <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20010000 	.word	0x20010000
 8001770:	00000400 	.word	0x00000400
 8001774:	200002c8 	.word	0x200002c8
 8001778:	200050f0 	.word	0x200050f0

0800177c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a6:	490e      	ldr	r1, [pc, #56]	; (80017e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017bc:	4c0b      	ldr	r4, [pc, #44]	; (80017ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ca:	f7ff ffd7 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f006 fbdb 	bl	8007f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff fbe7 	bl	8000fa4 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017e4:	08008bb4 	.word	0x08008bb4
  ldr r2, =_sbss
 80017e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017ec:	200050f0 	.word	0x200050f0

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_Init+0x40>)
 80017fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_Init+0x40>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x40>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f92b 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fe5a 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f943 	bl	8001ae2 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f90b 	bl	8001a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000000 	.word	0x20000000
 8001890:	20000008 	.word	0x20000008
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008
 80018bc:	200002cc 	.word	0x200002cc

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200002cc 	.word	0x200002cc

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff8e 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff29 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff3e 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff8e 	bl	80019cc <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5d 	bl	8001978 <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff31 	bl	800193c <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffa2 	bl	8001a34 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e159      	b.n	8001dcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 8148 	bne.w	8001dc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d005      	beq.n	8001b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d130      	bne.n	8001bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 0201 	and.w	r2, r3, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d017      	beq.n	8001bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d123      	bne.n	8001c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a2 	beq.w	8001dc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b57      	ldr	r3, [pc, #348]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9e:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x202>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x2f4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x1fe>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a47      	ldr	r2, [pc, #284]	; (8001df4 <HAL_GPIO_Init+0x2f8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x1fa>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <HAL_GPIO_Init+0x2fc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x1f6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x1f2>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cee:	2307      	movs	r3, #7
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_GPIO_Init+0x304>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f aea2 	bls.w	8001b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40013c00 	.word	0x40013c00

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	619a      	str	r2, [r3, #24]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fa72 	bl	8001340 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e12b      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fb52 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f001 fbbc 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a81      	ldr	r2, [pc, #516]	; (80020dc <HAL_I2C_Init+0x274>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d807      	bhi.n	8001eec <HAL_I2C_Init+0x84>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a80      	ldr	r2, [pc, #512]	; (80020e0 <HAL_I2C_Init+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e006      	b.n	8001efa <HAL_I2C_Init+0x92>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a7d      	ldr	r2, [pc, #500]	; (80020e4 <HAL_I2C_Init+0x27c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0e7      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a78      	ldr	r2, [pc, #480]	; (80020e8 <HAL_I2C_Init+0x280>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_I2C_Init+0x274>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d802      	bhi.n	8001f3c <HAL_I2C_Init+0xd4>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	e009      	b.n	8001f50 <HAL_I2C_Init+0xe8>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	4a69      	ldr	r2, [pc, #420]	; (80020ec <HAL_I2C_Init+0x284>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	3301      	adds	r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	495c      	ldr	r1, [pc, #368]	; (80020dc <HAL_I2C_Init+0x274>)
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d819      	bhi.n	8001fa4 <HAL_I2C_Init+0x13c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f84:	400b      	ands	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_I2C_Init+0x138>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e59      	subs	r1, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	e051      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e04f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <HAL_I2C_Init+0x168>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e012      	b.n	8001ff6 <HAL_I2C_Init+0x18e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e58      	subs	r0, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	0099      	lsls	r1, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x196>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e022      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10e      	bne.n	8002024 <HAL_I2C_Init+0x1bc>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e58      	subs	r0, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	fbb0 f3f3 	udiv	r3, r0, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002022:	e00f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6809      	ldr	r1, [r1, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6911      	ldr	r1, [r2, #16]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68d2      	ldr	r2, [r2, #12]
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	000186a0 	.word	0x000186a0
 80020e0:	001e847f 	.word	0x001e847f
 80020e4:	003d08ff 	.word	0x003d08ff
 80020e8:	431bde83 	.word	0x431bde83
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	817b      	strh	r3, [r7, #10]
 8002102:	460b      	mov	r3, r1
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800210a:	f7ff fbd9 	bl	80018c0 <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b20      	cmp	r3, #32
 800211a:	f040 80d9 	bne.w	80022d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2319      	movs	r3, #25
 8002124:	2201      	movs	r2, #1
 8002126:	496d      	ldr	r1, [pc, #436]	; (80022dc <HAL_I2C_Mem_Write+0x1ec>)
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fc7f 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
 8002136:	e0cc      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Mem_Write+0x56>
 8002142:	2302      	movs	r3, #2
 8002144:	e0c5      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d007      	beq.n	800216c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_I2C_Mem_Write+0x1f0>)
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ae:	88f8      	ldrh	r0, [r7, #6]
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4603      	mov	r3, r0
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fab6 	bl	8002730 <I2C_RequestMemoryWrite>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d052      	beq.n	8002270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e081      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fd00 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_I2C_Mem_Write+0x180>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1aa      	bne.n	80021ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fcec 	bl	8002c5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00d      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2b04      	cmp	r3, #4
 800228e:	d107      	bne.n	80022a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e016      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000

080022e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	460b      	mov	r3, r1
 80022f8:	813b      	strh	r3, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022fe:	f7ff fadf 	bl	80018c0 <HAL_GetTick>
 8002302:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b20      	cmp	r3, #32
 800230e:	f040 8208 	bne.w	8002722 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2319      	movs	r3, #25
 8002318:	2201      	movs	r2, #1
 800231a:	497b      	ldr	r1, [pc, #492]	; (8002508 <HAL_I2C_Mem_Read+0x224>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fb85 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
 800232a:	e1fb      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_I2C_Mem_Read+0x56>
 8002336:	2302      	movs	r3, #2
 8002338:	e1f4      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d007      	beq.n	8002360 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2222      	movs	r2, #34	; 0x22
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a5b      	ldr	r2, [pc, #364]	; (800250c <HAL_I2C_Mem_Read+0x228>)
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a2:	88f8      	ldrh	r0, [r7, #6]
 80023a4:	893a      	ldrh	r2, [r7, #8]
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4603      	mov	r3, r0
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fa52 	bl	800285c <I2C_RequestMemoryRead>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1b0      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d113      	bne.n	80023f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	623b      	str	r3, [r7, #32]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e184      	b.n	80026fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d11b      	bne.n	8002432 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e164      	b.n	80026fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	2b02      	cmp	r3, #2
 8002438:	d11b      	bne.n	8002472 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002448:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	e144      	b.n	80026fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002488:	e138      	b.n	80026fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	2b03      	cmp	r3, #3
 8002490:	f200 80f1 	bhi.w	8002676 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b01      	cmp	r3, #1
 800249a:	d123      	bne.n	80024e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fc1b 	bl	8002cdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e139      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e2:	e10b      	b.n	80026fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d14e      	bne.n	800258a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	2200      	movs	r2, #0
 80024f4:	4906      	ldr	r1, [pc, #24]	; (8002510 <HAL_I2C_Mem_Read+0x22c>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fa98 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e10e      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
 8002506:	bf00      	nop
 8002508:	00100002 	.word	0x00100002
 800250c:	ffff0000 	.word	0xffff0000
 8002510:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002588:	e0b8      	b.n	80026fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	2200      	movs	r2, #0
 8002592:	4966      	ldr	r1, [pc, #408]	; (800272c <HAL_I2C_Mem_Read+0x448>)
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa49 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0bf      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	2200      	movs	r2, #0
 80025ee:	494f      	ldr	r1, [pc, #316]	; (800272c <HAL_I2C_Mem_Read+0x448>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fa1b 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e091      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002674:	e042      	b.n	80026fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fb2e 	bl	8002cdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e04c      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d118      	bne.n	80026fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	f47f aec2 	bne.w	800248a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	00010004 	.word	0x00010004

08002730 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	817b      	strh	r3, [r7, #10]
 8002742:	460b      	mov	r3, r1
 8002744:	813b      	strh	r3, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	2200      	movs	r2, #0
 8002762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f960 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00d      	beq.n	800278e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002780:	d103      	bne.n	800278a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e05f      	b.n	800284e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800279c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	492d      	ldr	r1, [pc, #180]	; (8002858 <I2C_RequestMemoryWrite+0x128>)
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f998 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e04c      	b.n	800284e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6a39      	ldr	r1, [r7, #32]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fa02 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00d      	beq.n	80027f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d107      	bne.n	80027f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e02b      	b.n	800284e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	e021      	b.n	800284c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002808:	893b      	ldrh	r3, [r7, #8]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	b29b      	uxth	r3, r3
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f9dc 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b04      	cmp	r3, #4
 800282c:	d107      	bne.n	800283e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e005      	b.n	800284e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002842:	893b      	ldrh	r3, [r7, #8]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	00010002 	.word	0x00010002

0800285c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4603      	mov	r3, r0
 800286c:	817b      	strh	r3, [r7, #10]
 800286e:	460b      	mov	r3, r1
 8002870:	813b      	strh	r3, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002884:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2200      	movs	r2, #0
 800289e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8c2 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028bc:	d103      	bne.n	80028c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0aa      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	4952      	ldr	r1, [pc, #328]	; (8002a28 <I2C_RequestMemoryRead+0x1cc>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f8fa 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e097      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f964 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b04      	cmp	r3, #4
 800291c:	d107      	bne.n	800292e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e076      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e021      	b.n	8002988 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002944:	893b      	ldrh	r3, [r7, #8]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f93e 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b04      	cmp	r3, #4
 8002968:	d107      	bne.n	800297a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e050      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800297e:	893b      	ldrh	r3, [r7, #8]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	6a39      	ldr	r1, [r7, #32]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f923 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b04      	cmp	r3, #4
 800299e:	d107      	bne.n	80029b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e035      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f82b 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d103      	bne.n	80029f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e013      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029f8:	897b      	ldrh	r3, [r7, #10]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	6a3a      	ldr	r2, [r7, #32]
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <I2C_RequestMemoryRead+0x1cc>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f863 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	00010002 	.word	0x00010002

08002a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3c:	e025      	b.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d021      	beq.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe ff3b 	bl	80018c0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d116      	bne.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e023      	b.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10d      	bne.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	e00c      	b.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d0b6      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae8:	e051      	b.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af8:	d123      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e046      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d021      	beq.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe feb9 	bl	80018c0 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e020      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10c      	bne.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e00b      	b.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d18d      	bne.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be4:	e02d      	b.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8ce 	bl	8002d88 <I2C_IsAcknowledgeFailed>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e02d      	b.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d021      	beq.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7fe fe5f 	bl	80018c0 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d1ca      	bne.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c66:	e02d      	b.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f88d 	bl	8002d88 <I2C_IsAcknowledgeFailed>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e02d      	b.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d021      	beq.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7fe fe1e 	bl	80018c0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d1ca      	bne.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ce8:	e042      	b.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d119      	bne.n	8002d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0210 	mvn.w	r2, #16
 8002d00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e029      	b.n	8002d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2c:	f7fe fdc8 	bl	80018c0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e007      	b.n	8002d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d1b5      	bne.n	8002cea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9e:	d11b      	bne.n	8002dd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e267      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d075      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e06:	4b88      	ldr	r3, [pc, #544]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d00c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e12:	4b85      	ldr	r3, [pc, #532]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d112      	bne.n	8002e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1e:	4b82      	ldr	r3, [pc, #520]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2a:	d10b      	bne.n	8002e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d05b      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x108>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d157      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e242      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_OscConfig+0x74>
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a75      	ldr	r2, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xb0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b70      	ldr	r3, [pc, #448]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6f      	ldr	r2, [pc, #444]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6c      	ldr	r2, [pc, #432]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xb0>
 8002e80:	4b69      	ldr	r3, [pc, #420]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a68      	ldr	r2, [pc, #416]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b66      	ldr	r3, [pc, #408]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a65      	ldr	r2, [pc, #404]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fd0e 	bl	80018c0 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fd0a 	bl	80018c0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e207      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b5b      	ldr	r3, [pc, #364]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xc0>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fcfa 	bl	80018c0 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fcf6 	bl	80018c0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1f3      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xe8>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x152>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1c7      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4937      	ldr	r1, [pc, #220]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_RCC_OscConfig+0x244>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fcaf 	bl	80018c0 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fcab 	bl	80018c0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1a8      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4925      	ldr	r1, [pc, #148]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_RCC_OscConfig+0x244>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fc8e 	bl	80018c0 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fc8a 	bl	80018c0 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e187      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d036      	beq.n	8003040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_RCC_OscConfig+0x248>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fc6e 	bl	80018c0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fc6a 	bl	80018c0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e167      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x200>
 8003006:	e01b      	b.n	8003040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_OscConfig+0x248>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fe fc57 	bl	80018c0 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	e00e      	b.n	8003034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003016:	f7fe fc53 	bl	80018c0 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d907      	bls.n	8003034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e150      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
 8003028:	40023800 	.word	0x40023800
 800302c:	42470000 	.word	0x42470000
 8003030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003034:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ea      	bne.n	8003016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8097 	beq.w	800317c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003052:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10f      	bne.n	800307e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	4b7d      	ldr	r3, [pc, #500]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a7c      	ldr	r2, [pc, #496]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b7a      	ldr	r3, [pc, #488]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	4b77      	ldr	r3, [pc, #476]	; (800325c <HAL_RCC_OscConfig+0x474>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d118      	bne.n	80030bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308a:	4b74      	ldr	r3, [pc, #464]	; (800325c <HAL_RCC_OscConfig+0x474>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a73      	ldr	r2, [pc, #460]	; (800325c <HAL_RCC_OscConfig+0x474>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003096:	f7fe fc13 	bl	80018c0 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309e:	f7fe fc0f 	bl	80018c0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e10c      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCC_OscConfig+0x474>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x2ea>
 80030c4:	4b64      	ldr	r3, [pc, #400]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a63      	ldr	r2, [pc, #396]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	e01c      	b.n	800310c <HAL_RCC_OscConfig+0x324>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x30c>
 80030da:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
 80030e6:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a5b      	ldr	r2, [pc, #364]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0x324>
 80030f4:	4b58      	ldr	r3, [pc, #352]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a57      	ldr	r2, [pc, #348]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	4b55      	ldr	r3, [pc, #340]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a54      	ldr	r2, [pc, #336]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 0304 	bic.w	r3, r3, #4
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d015      	beq.n	8003140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe fbd4 	bl	80018c0 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe fbd0 	bl	80018c0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0cb      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ee      	beq.n	800311c <HAL_RCC_OscConfig+0x334>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe fbbe 	bl	80018c0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003146:	e00a      	b.n	800315e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7fe fbba 	bl	80018c0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e0b5      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315e:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ee      	bne.n	8003148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	4a38      	ldr	r2, [pc, #224]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a1 	beq.w	80032c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003186:	4b34      	ldr	r3, [pc, #208]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d05c      	beq.n	800324c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d141      	bne.n	800321e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_RCC_OscConfig+0x478>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe fb8e 	bl	80018c0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fe fb8a 	bl	80018c0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e087      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	019b      	lsls	r3, r3, #6
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	085b      	lsrs	r3, r3, #1
 80031de:	3b01      	subs	r3, #1
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	491b      	ldr	r1, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_RCC_OscConfig+0x478>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fe fb63 	bl	80018c0 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fe fb5f 	bl	80018c0 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e05c      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x416>
 800321c:	e054      	b.n	80032c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_RCC_OscConfig+0x478>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe fb4c 	bl	80018c0 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe fb48 	bl	80018c0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e045      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_OscConfig+0x470>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x444>
 800324a:	e03d      	b.n	80032c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e038      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
 8003258:	40023800 	.word	0x40023800
 800325c:	40007000 	.word	0x40007000
 8003260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x4ec>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d028      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d121      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328a:	429a      	cmp	r2, r3
 800328c:	d11a      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800329a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	3b01      	subs	r3, #1
 80032ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800

080032d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0cc      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d90c      	bls.n	8003314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b65      	ldr	r3, [pc, #404]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b63      	ldr	r3, [pc, #396]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b8      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800332c:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a58      	ldr	r2, [pc, #352]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a52      	ldr	r2, [pc, #328]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800334e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	494d      	ldr	r1, [pc, #308]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d044      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b47      	ldr	r3, [pc, #284]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d119      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d003      	beq.n	8003396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003392:	2b03      	cmp	r3, #3
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e067      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4934      	ldr	r1, [pc, #208]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c8:	f7fe fa7a 	bl	80018c0 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fe fa76 	bl	80018c0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e04f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d20c      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e032      	b.n	8003486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4916      	ldr	r1, [pc, #88]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	490e      	ldr	r1, [pc, #56]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800345e:	f000 f821 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 8003462:	4602      	mov	r2, r0
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	490a      	ldr	r1, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	5ccb      	ldrb	r3, [r1, r3]
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe f9da 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023c00 	.word	0x40023c00
 8003494:	40023800 	.word	0x40023800
 8003498:	08008af8 	.word	0x08008af8
 800349c:	20000000 	.word	0x20000000
 80034a0:	20000004 	.word	0x20000004

080034a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a8:	b090      	sub	sp, #64	; 0x40
 80034aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
 80034b0:	2300      	movs	r3, #0
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034bc:	4b59      	ldr	r3, [pc, #356]	; (8003624 <HAL_RCC_GetSysClockFreq+0x180>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d00d      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x40>
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	f200 80a1 	bhi.w	8003610 <HAL_RCC_GetSysClockFreq+0x16c>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x34>
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x3a>
 80034d6:	e09b      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_RCC_GetSysClockFreq+0x184>)
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034dc:	e09b      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034de:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_RCC_GetSysClockFreq+0x188>)
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034e2:	e098      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ee:	4b4d      	ldr	r3, [pc, #308]	; (8003624 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d028      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	2200      	movs	r2, #0
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	627a      	str	r2, [r7, #36]	; 0x24
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800350c:	2100      	movs	r1, #0
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_GetSysClockFreq+0x188>)
 8003510:	fb03 f201 	mul.w	r2, r3, r1
 8003514:	2300      	movs	r3, #0
 8003516:	fb00 f303 	mul.w	r3, r0, r3
 800351a:	4413      	add	r3, r2
 800351c:	4a43      	ldr	r2, [pc, #268]	; (800362c <HAL_RCC_GetSysClockFreq+0x188>)
 800351e:	fba0 1202 	umull	r1, r2, r0, r2
 8003522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003524:	460a      	mov	r2, r1
 8003526:	62ba      	str	r2, [r7, #40]	; 0x28
 8003528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352a:	4413      	add	r3, r2
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003530:	2200      	movs	r2, #0
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	61fa      	str	r2, [r7, #28]
 8003536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800353e:	f7fc feef 	bl	8000320 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4613      	mov	r3, r2
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354a:	e053      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_RCC_GetSysClockFreq+0x180>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	2200      	movs	r2, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	617a      	str	r2, [r7, #20]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800355e:	f04f 0b00 	mov.w	fp, #0
 8003562:	4652      	mov	r2, sl
 8003564:	465b      	mov	r3, fp
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	0159      	lsls	r1, r3, #5
 8003570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003574:	0150      	lsls	r0, r2, #5
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	ebb2 080a 	subs.w	r8, r2, sl
 800357e:	eb63 090b 	sbc.w	r9, r3, fp
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800358e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003592:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003596:	ebb2 0408 	subs.w	r4, r2, r8
 800359a:	eb63 0509 	sbc.w	r5, r3, r9
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	00eb      	lsls	r3, r5, #3
 80035a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ac:	00e2      	lsls	r2, r4, #3
 80035ae:	4614      	mov	r4, r2
 80035b0:	461d      	mov	r5, r3
 80035b2:	eb14 030a 	adds.w	r3, r4, sl
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	eb45 030b 	adc.w	r3, r5, fp
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	2200      	movs	r2, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	60fa      	str	r2, [r7, #12]
 80035e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035e8:	f7fc fe9a 	bl	8000320 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800360e:	e002      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetSysClockFreq+0x184>)
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003618:	4618      	mov	r0, r3
 800361a:	3740      	adds	r7, #64	; 0x40
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	00f42400 	.word	0x00f42400
 800362c:	017d7840 	.word	0x017d7840

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_GetHCLKFreq+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000000 	.word	0x20000000

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800364c:	f7ff fff0 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	0a9b      	lsrs	r3, r3, #10
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCC_GetPCLK1Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	08008b08 	.word	0x08008b08

08003670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003674:	f7ff ffdc 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0b5b      	lsrs	r3, r3, #13
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	08008b08 	.word	0x08008b08

08003698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e041      	b.n	800372e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd ff82 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 fa24 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d122      	bne.n	8003792 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d11b      	bne.n	8003792 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0202 	mvn.w	r2, #2
 8003762:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f9b5 	bl	8003ae8 <HAL_TIM_IC_CaptureCallback>
 800377e:	e005      	b.n	800378c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f9a7 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9b8 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d122      	bne.n	80037e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d11b      	bne.n	80037e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0204 	mvn.w	r2, #4
 80037b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f98b 	bl	8003ae8 <HAL_TIM_IC_CaptureCallback>
 80037d2:	e005      	b.n	80037e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f97d 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f98e 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d122      	bne.n	800383a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11b      	bne.n	800383a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0208 	mvn.w	r2, #8
 800380a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f961 	bl	8003ae8 <HAL_TIM_IC_CaptureCallback>
 8003826:	e005      	b.n	8003834 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f953 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f964 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b10      	cmp	r3, #16
 8003846:	d122      	bne.n	800388e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b10      	cmp	r3, #16
 8003854:	d11b      	bne.n	800388e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f06f 0210 	mvn.w	r2, #16
 800385e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2208      	movs	r2, #8
 8003864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f937 	bl	8003ae8 <HAL_TIM_IC_CaptureCallback>
 800387a:	e005      	b.n	8003888 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f929 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f93a 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10e      	bne.n	80038ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f06f 0201 	mvn.w	r2, #1
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fd fd4e 	bl	8001356 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d10e      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fab1 	bl	8003e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d107      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8ff 	bl	8003b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b20      	cmp	r3, #32
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0220 	mvn.w	r2, #32
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fa7b 	bl	8003e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_TIM_ConfigClockSource+0x1c>
 800395e:	2302      	movs	r3, #2
 8003960:	e0b4      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x186>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003980:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003988:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399a:	d03e      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0xd4>
 800399c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a0:	f200 8087 	bhi.w	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	f000 8086 	beq.w	8003ab8 <HAL_TIM_ConfigClockSource+0x172>
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d87f      	bhi.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039b2:	2b70      	cmp	r3, #112	; 0x70
 80039b4:	d01a      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0xa6>
 80039b6:	2b70      	cmp	r3, #112	; 0x70
 80039b8:	d87b      	bhi.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039ba:	2b60      	cmp	r3, #96	; 0x60
 80039bc:	d050      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x11a>
 80039be:	2b60      	cmp	r3, #96	; 0x60
 80039c0:	d877      	bhi.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039c2:	2b50      	cmp	r3, #80	; 0x50
 80039c4:	d03c      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0xfa>
 80039c6:	2b50      	cmp	r3, #80	; 0x50
 80039c8:	d873      	bhi.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d058      	beq.n	8003a80 <HAL_TIM_ConfigClockSource+0x13a>
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d86f      	bhi.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039d2:	2b30      	cmp	r3, #48	; 0x30
 80039d4:	d064      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x15a>
 80039d6:	2b30      	cmp	r3, #48	; 0x30
 80039d8:	d86b      	bhi.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d060      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x15a>
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d867      	bhi.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d05c      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x15a>
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d05a      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x15a>
 80039ea:	e062      	b.n	8003ab2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f000 f98c 	bl	8003d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
      break;
 8003a18:	e04f      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f000 f975 	bl	8003d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3c:	609a      	str	r2, [r3, #8]
      break;
 8003a3e:	e03c      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f000 f8e9 	bl	8003c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2150      	movs	r1, #80	; 0x50
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f942 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003a5e:	e02c      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f000 f908 	bl	8003c82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2160      	movs	r1, #96	; 0x60
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f932 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003a7e:	e01c      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f000 f8c9 	bl	8003c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2140      	movs	r1, #64	; 0x40
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f922 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003a9e:	e00c      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 f919 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e003      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab6:	e000      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ab8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a34      	ldr	r2, [pc, #208]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00f      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d00b      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a31      	ldr	r2, [pc, #196]	; (8003c0c <TIM_Base_SetConfig+0xe8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <TIM_Base_SetConfig+0xec>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0x38>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2f      	ldr	r2, [pc, #188]	; (8003c14 <TIM_Base_SetConfig+0xf0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <TIM_Base_SetConfig+0xe8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <TIM_Base_SetConfig+0xec>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <TIM_Base_SetConfig+0xf0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <TIM_Base_SetConfig+0xf4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <TIM_Base_SetConfig+0xf8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0x8a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <TIM_Base_SetConfig+0xfc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <TIM_Base_SetConfig+0xe4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800

08003c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0201 	bic.w	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 030a 	bic.w	r3, r3, #10
 8003c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0210 	bic.w	r2, r3, #16
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	031b      	lsls	r3, r3, #12
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f043 0307 	orr.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e050      	b.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d013      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10c      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000

08003e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e03f      	b.n	8003eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fbc8 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	; 0x24
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f929 	bl	80040f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b08a      	sub	sp, #40	; 0x28
 8003efa:	af02      	add	r7, sp, #8
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d17c      	bne.n	8004010 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_Transmit+0x2c>
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e075      	b.n	8004012 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Transmit+0x3e>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e06e      	b.n	8004012 <HAL_UART_Transmit+0x11c>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f4a:	f7fd fcb9 	bl	80018c0 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d108      	bne.n	8003f78 <HAL_UART_Transmit+0x82>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e003      	b.n	8003f80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f88:	e02a      	b.n	8003fe0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f840 	bl	800401a <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e036      	b.n	8004012 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e007      	b.n	8003fd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1cf      	bne.n	8003f8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2140      	movs	r1, #64	; 0x40
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f810 	bl	800401a <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b090      	sub	sp, #64	; 0x40
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4613      	mov	r3, r2
 8004028:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402a:	e050      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d04c      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x30>
 800403a:	f7fd fc41 	bl	80018c0 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004046:	429a      	cmp	r2, r3
 8004048:	d241      	bcs.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800406a:	637a      	str	r2, [r7, #52]	; 0x34
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	613b      	str	r3, [r7, #16]
   return(result);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800409e:	623a      	str	r2, [r7, #32]
 80040a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	69f9      	ldr	r1, [r7, #28]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e5      	bne.n	800407e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e00f      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d09f      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3740      	adds	r7, #64	; 0x40
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b0c0      	sub	sp, #256	; 0x100
 80040fe:	af00      	add	r7, sp, #0
 8004100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	ea40 0301 	orr.w	r3, r0, r1
 8004120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004150:	f021 010c 	bic.w	r1, r1, #12
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800415e:	430b      	orrs	r3, r1
 8004160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	6999      	ldr	r1, [r3, #24]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	ea40 0301 	orr.w	r3, r0, r1
 800417e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b8f      	ldr	r3, [pc, #572]	; (80043c4 <UART_SetConfig+0x2cc>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <UART_SetConfig+0xa0>
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <UART_SetConfig+0x2d0>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7ff fa6a 	bl	8003670 <HAL_RCC_GetPCLK2Freq>
 800419c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041a0:	e003      	b.n	80041aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a2:	f7ff fa51 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 80041a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	f040 810c 	bne.w	80043d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	1891      	adds	r1, r2, r2
 80041d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041d2:	415b      	adcs	r3, r3
 80041d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041da:	4621      	mov	r1, r4
 80041dc:	eb12 0801 	adds.w	r8, r2, r1
 80041e0:	4629      	mov	r1, r5
 80041e2:	eb43 0901 	adc.w	r9, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb18 0303 	adds.w	r3, r8, r3
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004208:	462b      	mov	r3, r5
 800420a:	eb49 0303 	adc.w	r3, r9, r3
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800421e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004226:	460b      	mov	r3, r1
 8004228:	18db      	adds	r3, r3, r3
 800422a:	653b      	str	r3, [r7, #80]	; 0x50
 800422c:	4613      	mov	r3, r2
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	657b      	str	r3, [r7, #84]	; 0x54
 8004234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800423c:	f7fc f870 	bl	8000320 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <UART_SetConfig+0x2d4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011c      	lsls	r4, r3, #4
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800425c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	64b9      	str	r1, [r7, #72]	; 0x48
 8004268:	415b      	adcs	r3, r3
 800426a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800426c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004270:	4641      	mov	r1, r8
 8004272:	eb12 0a01 	adds.w	sl, r2, r1
 8004276:	4649      	mov	r1, r9
 8004278:	eb43 0b01 	adc.w	fp, r3, r1
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	4692      	mov	sl, r2
 8004292:	469b      	mov	fp, r3
 8004294:	4643      	mov	r3, r8
 8004296:	eb1a 0303 	adds.w	r3, sl, r3
 800429a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800429e:	464b      	mov	r3, r9
 80042a0:	eb4b 0303 	adc.w	r3, fp, r3
 80042a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042d2:	f7fc f825 	bl	8000320 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <UART_SetConfig+0x2d4>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2264      	movs	r2, #100	; 0x64
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <UART_SetConfig+0x2d4>)
 80042f4:	fba3 2302 	umull	r2, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004300:	441c      	add	r4, r3
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800430c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	63b9      	str	r1, [r7, #56]	; 0x38
 800431c:	415b      	adcs	r3, r3
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004324:	4641      	mov	r1, r8
 8004326:	1851      	adds	r1, r2, r1
 8004328:	6339      	str	r1, [r7, #48]	; 0x30
 800432a:	4649      	mov	r1, r9
 800432c:	414b      	adcs	r3, r1
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800433c:	4659      	mov	r1, fp
 800433e:	00cb      	lsls	r3, r1, #3
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004346:	4651      	mov	r1, sl
 8004348:	00ca      	lsls	r2, r1, #3
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4603      	mov	r3, r0
 8004350:	4642      	mov	r2, r8
 8004352:	189b      	adds	r3, r3, r2
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004378:	460b      	mov	r3, r1
 800437a:	18db      	adds	r3, r3, r3
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	4613      	mov	r3, r2
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800438e:	f7fb ffc7 	bl	8000320 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <UART_SetConfig+0x2d4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <UART_SetConfig+0x2d4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c0:	e105      	b.n	80045ce <UART_SetConfig+0x4d6>
 80043c2:	bf00      	nop
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043e2:	4642      	mov	r2, r8
 80043e4:	464b      	mov	r3, r9
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	6239      	str	r1, [r7, #32]
 80043ea:	415b      	adcs	r3, r3
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f2:	4641      	mov	r1, r8
 80043f4:	1854      	adds	r4, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0501 	adc.w	r5, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004418:	464b      	mov	r3, r9
 800441a:	eb45 0303 	adc.w	r3, r5, r3
 800441e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800442e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800443e:	4629      	mov	r1, r5
 8004440:	008b      	lsls	r3, r1, #2
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004448:	4621      	mov	r1, r4
 800444a:	008a      	lsls	r2, r1, #2
 800444c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004450:	f7fb ff66 	bl	8000320 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b60      	ldr	r3, [pc, #384]	; (80045dc <UART_SetConfig+0x4e4>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	011c      	lsls	r4, r3, #4
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800446c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	61b9      	str	r1, [r7, #24]
 800447c:	415b      	adcs	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6139      	str	r1, [r7, #16]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044ee:	f7fb ff17 	bl	8000320 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4b39      	ldr	r3, [pc, #228]	; (80045dc <UART_SetConfig+0x4e4>)
 80044f8:	fba3 1302 	umull	r1, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	2164      	movs	r1, #100	; 0x64
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	3332      	adds	r3, #50	; 0x32
 800450a:	4a34      	ldr	r2, [pc, #208]	; (80045dc <UART_SetConfig+0x4e4>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004516:	441c      	add	r4, r3
 8004518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451c:	2200      	movs	r2, #0
 800451e:	673b      	str	r3, [r7, #112]	; 0x70
 8004520:	677a      	str	r2, [r7, #116]	; 0x74
 8004522:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004526:	4642      	mov	r2, r8
 8004528:	464b      	mov	r3, r9
 800452a:	1891      	adds	r1, r2, r2
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	415b      	adcs	r3, r3
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004536:	4641      	mov	r1, r8
 8004538:	1851      	adds	r1, r2, r1
 800453a:	6039      	str	r1, [r7, #0]
 800453c:	4649      	mov	r1, r9
 800453e:	414b      	adcs	r3, r1
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800454e:	4659      	mov	r1, fp
 8004550:	00cb      	lsls	r3, r1, #3
 8004552:	4651      	mov	r1, sl
 8004554:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004558:	4651      	mov	r1, sl
 800455a:	00ca      	lsls	r2, r1, #3
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	4603      	mov	r3, r0
 8004562:	4642      	mov	r2, r8
 8004564:	189b      	adds	r3, r3, r2
 8004566:	66bb      	str	r3, [r7, #104]	; 0x68
 8004568:	464b      	mov	r3, r9
 800456a:	460a      	mov	r2, r1
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	663b      	str	r3, [r7, #96]	; 0x60
 800457c:	667a      	str	r2, [r7, #100]	; 0x64
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800458a:	4649      	mov	r1, r9
 800458c:	008b      	lsls	r3, r1, #2
 800458e:	4641      	mov	r1, r8
 8004590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004594:	4641      	mov	r1, r8
 8004596:	008a      	lsls	r2, r1, #2
 8004598:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800459c:	f7fb fec0 	bl	8000320 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <UART_SetConfig+0x4e4>)
 80045a6:	fba3 1302 	umull	r1, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2164      	movs	r1, #100	; 0x64
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	3332      	adds	r3, #50	; 0x32
 80045b8:	4a08      	ldr	r2, [pc, #32]	; (80045dc <UART_SetConfig+0x4e4>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4422      	add	r2, r4
 80045cc:	609a      	str	r2, [r3, #8]
}
 80045ce:	bf00      	nop
 80045d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045d4:	46bd      	mov	sp, r7
 80045d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045da:	bf00      	nop
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <__NVIC_SetPriority>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db0a      	blt.n	800460a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	490c      	ldr	r1, [pc, #48]	; (800462c <__NVIC_SetPriority+0x4c>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	440b      	add	r3, r1
 8004604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004608:	e00a      	b.n	8004620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <__NVIC_SetPriority+0x50>)
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3b04      	subs	r3, #4
 8004618:	0112      	lsls	r2, r2, #4
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	440b      	add	r3, r1
 800461e:	761a      	strb	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004638:	2100      	movs	r1, #0
 800463a:	f06f 0004 	mvn.w	r0, #4
 800463e:	f7ff ffcf 	bl	80045e0 <__NVIC_SetPriority>
#endif
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464e:	f3ef 8305 	mrs	r3, IPSR
 8004652:	603b      	str	r3, [r7, #0]
  return(result);
 8004654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800465a:	f06f 0305 	mvn.w	r3, #5
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	e00c      	b.n	800467c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <osKernelInitialize+0x44>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <osKernelInitialize+0x44>)
 800466c:	2201      	movs	r2, #1
 800466e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004670:	2300      	movs	r3, #0
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	e002      	b.n	800467c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800467c:	687b      	ldr	r3, [r7, #4]
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200002d0 	.word	0x200002d0

08004690 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004696:	f3ef 8305 	mrs	r3, IPSR
 800469a:	603b      	str	r3, [r7, #0]
  return(result);
 800469c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80046a2:	f06f 0305 	mvn.w	r3, #5
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e010      	b.n	80046cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <osKernelStart+0x48>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d109      	bne.n	80046c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046b2:	f7ff ffbf 	bl	8004634 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <osKernelStart+0x48>)
 80046b8:	2202      	movs	r2, #2
 80046ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046bc:	f001 fe8e 	bl	80063dc <vTaskStartScheduler>
      stat = osOK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	e002      	b.n	80046cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046cc:	687b      	ldr	r3, [r7, #4]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	200002d0 	.word	0x200002d0

080046dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08e      	sub	sp, #56	; 0x38
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ec:	f3ef 8305 	mrs	r3, IPSR
 80046f0:	617b      	str	r3, [r7, #20]
  return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d17e      	bne.n	80047f6 <osThreadNew+0x11a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d07b      	beq.n	80047f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004702:	2318      	movs	r3, #24
 8004704:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d045      	beq.n	80047a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <osThreadNew+0x48>
        name = attr->name;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <osThreadNew+0x6e>
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b38      	cmp	r3, #56	; 0x38
 800473c:	d805      	bhi.n	800474a <osThreadNew+0x6e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <osThreadNew+0x72>
        return (NULL);
 800474a:	2300      	movs	r3, #0
 800474c:	e054      	b.n	80047f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	089b      	lsrs	r3, r3, #2
 800475c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <osThreadNew+0xa8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2bbb      	cmp	r3, #187	; 0xbb
 800476c:	d90a      	bls.n	8004784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <osThreadNew+0xa8>
        mem = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e010      	b.n	80047a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <osThreadNew+0xca>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <osThreadNew+0xca>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <osThreadNew+0xca>
          mem = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e001      	b.n	80047a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d110      	bne.n	80047ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b4:	9202      	str	r2, [sp, #8]
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f001 fc52 	bl	800606c <xTaskCreateStatic>
 80047c8:	4603      	mov	r3, r0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e013      	b.n	80047f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f107 0310 	add.w	r3, r7, #16
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f001 fc9d 	bl	8006126 <xTaskCreate>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <osThreadNew+0x11a>
            hTask = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047f6:	693b      	ldr	r3, [r7, #16]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800480c:	f3ef 8305 	mrs	r3, IPSR
 8004810:	60bb      	str	r3, [r7, #8]
  return(result);
 8004812:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004814:	2b00      	cmp	r3, #0
 8004816:	d174      	bne.n	8004902 <osMutexNew+0x102>
    if (attr != NULL) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <osMutexNew+0x26>
      type = attr->attr_bits;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e001      	b.n	800482a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <osMutexNew+0x3a>
      rmtx = 1U;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e001      	b.n	800483e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d15c      	bne.n	8004902 <osMutexNew+0x102>
      mem = -1;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <osMutexNew+0x6a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b4f      	cmp	r3, #79	; 0x4f
 8004862:	d902      	bls.n	800486a <osMutexNew+0x6a>
          mem = 1;
 8004864:	2301      	movs	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	e00c      	b.n	8004884 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d108      	bne.n	8004884 <osMutexNew+0x84>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d104      	bne.n	8004884 <osMutexNew+0x84>
            mem = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	e001      	b.n	8004884 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d112      	bne.n	80048b0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4619      	mov	r1, r3
 8004896:	2004      	movs	r0, #4
 8004898:	f000 fc57 	bl	800514a <xQueueCreateMutexStatic>
 800489c:	61f8      	str	r0, [r7, #28]
 800489e:	e016      	b.n	80048ce <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4619      	mov	r1, r3
 80048a6:	2001      	movs	r0, #1
 80048a8:	f000 fc4f 	bl	800514a <xQueueCreateMutexStatic>
 80048ac:	61f8      	str	r0, [r7, #28]
 80048ae:	e00e      	b.n	80048ce <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80048bc:	2004      	movs	r0, #4
 80048be:	f000 fc2c 	bl	800511a <xQueueCreateMutex>
 80048c2:	61f8      	str	r0, [r7, #28]
 80048c4:	e003      	b.n	80048ce <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80048c6:	2001      	movs	r0, #1
 80048c8:	f000 fc27 	bl	800511a <xQueueCreateMutex>
 80048cc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00c      	beq.n	80048ee <osMutexNew+0xee>
        if (attr != NULL) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <osMutexNew+0xe2>
          name = attr->name;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e001      	b.n	80048e6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	69f8      	ldr	r0, [r7, #28]
 80048ea:	f001 fb37 	bl	8005f5c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d006      	beq.n	8004902 <osMutexNew+0x102>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004902:	69fb      	ldr	r3, [r7, #28]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800492a:	f3ef 8305 	mrs	r3, IPSR
 800492e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004930:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004936:	f06f 0305 	mvn.w	r3, #5
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e02c      	b.n	8004998 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004944:	f06f 0303 	mvn.w	r3, #3
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e025      	b.n	8004998 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d011      	beq.n	8004976 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	6938      	ldr	r0, [r7, #16]
 8004956:	f000 fc47 	bl	80051e8 <xQueueTakeMutexRecursive>
 800495a:	4603      	mov	r3, r0
 800495c:	2b01      	cmp	r3, #1
 800495e:	d01b      	beq.n	8004998 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004966:	f06f 0301 	mvn.w	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e014      	b.n	8004998 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800496e:	f06f 0302 	mvn.w	r3, #2
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e010      	b.n	8004998 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	6938      	ldr	r0, [r7, #16]
 800497a:	f000 ffdb 	bl	8005934 <xQueueSemaphoreTake>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d009      	beq.n	8004998 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800498a:	f06f 0301 	mvn.w	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e002      	b.n	8004998 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004992:	f06f 0302 	mvn.w	r3, #2
 8004996:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004998:	697b      	ldr	r3, [r7, #20]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b086      	sub	sp, #24
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049be:	f3ef 8305 	mrs	r3, IPSR
 80049c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80049c4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80049ca:	f06f 0305 	mvn.w	r3, #5
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e01f      	b.n	8004a12 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80049d8:	f06f 0303 	mvn.w	r3, #3
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e018      	b.n	8004a12 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f000 fbca 	bl	8005180 <xQueueGiveMutexRecursive>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d00f      	beq.n	8004a12 <osMutexRelease+0x70>
        stat = osErrorResource;
 80049f2:	f06f 0302 	mvn.w	r3, #2
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e00b      	b.n	8004a12 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80049fa:	2300      	movs	r3, #0
 80049fc:	2200      	movs	r2, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	6938      	ldr	r0, [r7, #16]
 8004a02:	f000 fc91 	bl	8005328 <xQueueGenericSend>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d002      	beq.n	8004a12 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004a0c:	f06f 0302 	mvn.w	r3, #2
 8004a10:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a12:	697b      	ldr	r3, [r7, #20]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a2c:	f3ef 8305 	mrs	r3, IPSR
 8004a30:	613b      	str	r3, [r7, #16]
  return(result);
 8004a32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d175      	bne.n	8004b24 <osSemaphoreNew+0x108>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d072      	beq.n	8004b24 <osSemaphoreNew+0x108>
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d86e      	bhi.n	8004b24 <osSemaphoreNew+0x108>
    mem = -1;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d015      	beq.n	8004a7e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d006      	beq.n	8004a68 <osSemaphoreNew+0x4c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b4f      	cmp	r3, #79	; 0x4f
 8004a60:	d902      	bls.n	8004a68 <osSemaphoreNew+0x4c>
        mem = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	e00c      	b.n	8004a82 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d108      	bne.n	8004a82 <osSemaphoreNew+0x66>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <osSemaphoreNew+0x66>
          mem = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e001      	b.n	8004a82 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d04c      	beq.n	8004b24 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d128      	bne.n	8004ae2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10a      	bne.n	8004aac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	9200      	str	r2, [sp, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	f000 fa4a 	bl	8004f3c <xQueueGenericCreateStatic>
 8004aa8:	61f8      	str	r0, [r7, #28]
 8004aaa:	e005      	b.n	8004ab8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004aac:	2203      	movs	r2, #3
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f000 fabb 	bl	800502c <xQueueGenericCreate>
 8004ab6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d022      	beq.n	8004b04 <osSemaphoreNew+0xe8>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01f      	beq.n	8004b04 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2100      	movs	r1, #0
 8004aca:	69f8      	ldr	r0, [r7, #28]
 8004acc:	f000 fc2c 	bl	8005328 <xQueueGenericSend>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d016      	beq.n	8004b04 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004ad6:	69f8      	ldr	r0, [r7, #28]
 8004ad8:	f001 f8f4 	bl	8005cc4 <vQueueDelete>
            hSemaphore = NULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	e010      	b.n	8004b04 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d108      	bne.n	8004afa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	461a      	mov	r2, r3
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fbaf 	bl	8005254 <xQueueCreateCountingSemaphoreStatic>
 8004af6:	61f8      	str	r0, [r7, #28]
 8004af8:	e004      	b.n	8004b04 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fbe0 	bl	80052c2 <xQueueCreateCountingSemaphore>
 8004b02:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00c      	beq.n	8004b24 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e001      	b.n	8004b1c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	69f8      	ldr	r0, [r7, #28]
 8004b20:	f001 fa1c 	bl	8005f5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004b24:	69fb      	ldr	r3, [r7, #28]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004b48:	f06f 0303 	mvn.w	r3, #3
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e039      	b.n	8004bc4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b50:	f3ef 8305 	mrs	r3, IPSR
 8004b54:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b56:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d022      	beq.n	8004ba2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004b62:	f06f 0303 	mvn.w	r3, #3
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e02c      	b.n	8004bc4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004b6e:	f107 0308 	add.w	r3, r7, #8
 8004b72:	461a      	mov	r2, r3
 8004b74:	2100      	movs	r1, #0
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f000 ffe8 	bl	8005b4c <xQueueReceiveFromISR>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d003      	beq.n	8004b8a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004b82:	f06f 0302 	mvn.w	r3, #2
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e01c      	b.n	8004bc4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <osSemaphoreAcquire+0x94>
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <osSemaphoreAcquire+0xa0>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	e010      	b.n	8004bc4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	6938      	ldr	r0, [r7, #16]
 8004ba6:	f000 fec5 	bl	8005934 <xQueueSemaphoreTake>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d009      	beq.n	8004bc4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004bb6:	f06f 0301 	mvn.w	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e002      	b.n	8004bc4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004bbe:	f06f 0302 	mvn.w	r3, #2
 8004bc2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004bc4:	697b      	ldr	r3, [r7, #20]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004bea:	f06f 0303 	mvn.w	r3, #3
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e02c      	b.n	8004c4c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf2:	f3ef 8305 	mrs	r3, IPSR
 8004bf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01a      	beq.n	8004c34 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004c02:	f107 0308 	add.w	r3, r7, #8
 8004c06:	4619      	mov	r1, r3
 8004c08:	6938      	ldr	r0, [r7, #16]
 8004c0a:	f000 fd26 	bl	800565a <xQueueGiveFromISR>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d003      	beq.n	8004c1c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004c14:	f06f 0302 	mvn.w	r3, #2
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e017      	b.n	8004c4c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d014      	beq.n	8004c4c <osSemaphoreRelease+0x78>
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <osSemaphoreRelease+0x84>)
 8004c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	e00b      	b.n	8004c4c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004c34:	2300      	movs	r3, #0
 8004c36:	2200      	movs	r2, #0
 8004c38:	2100      	movs	r1, #0
 8004c3a:	6938      	ldr	r0, [r7, #16]
 8004c3c:	f000 fb74 	bl	8005328 <xQueueGenericSend>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d002      	beq.n	8004c4c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004c46:	f06f 0302 	mvn.w	r3, #2
 8004c4a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004c4c:	697b      	ldr	r3, [r7, #20]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e00e      	b.n	8004c92 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c74:	f3ef 8305 	mrs	r3, IPSR
 8004c78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004c80:	6938      	ldr	r0, [r7, #16]
 8004c82:	f001 f801 	bl	8005c88 <uxQueueMessagesWaitingFromISR>
 8004c86:	6178      	str	r0, [r7, #20]
 8004c88:	e003      	b.n	8004c92 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 ffde 	bl	8005c4c <uxQueueMessagesWaiting>
 8004c90:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8004c92:	697b      	ldr	r3, [r7, #20]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a06      	ldr	r2, [pc, #24]	; (8004ccc <vApplicationGetIdleTaskMemory+0x30>)
 8004cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	601a      	str	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	200002d4 	.word	0x200002d4
 8004ccc:	20000390 	.word	0x20000390

08004cd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ce0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a06      	ldr	r2, [pc, #24]	; (8004d00 <vApplicationGetTimerTaskMemory+0x30>)
 8004ce6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cee:	601a      	str	r2, [r3, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000590 	.word	0x20000590
 8004d00:	2000064c 	.word	0x2000064c

08004d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f103 0208 	add.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f103 0208 	add.w	r2, r3, #8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 0208 	add.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d103      	bne.n	8004dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e00c      	b.n	8004de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e002      	b.n	8004dd4 <vListInsert+0x2e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d2f6      	bcs.n	8004dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6892      	ldr	r2, [r2, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6852      	ldr	r2, [r2, #4]
 8004e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d103      	bne.n	8004e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e96:	f002 fd65 	bl	8007964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	441a      	add	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	22ff      	movs	r2, #255	; 0xff
 8004eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d114      	bne.n	8004f16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3310      	adds	r3, #16
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fd09 	bl	8006910 <xTaskRemoveFromEventList>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d012      	beq.n	8004f2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <xQueueGenericReset+0xcc>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	e009      	b.n	8004f2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3310      	adds	r3, #16
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fef2 	bl	8004d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3324      	adds	r3, #36	; 0x24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff feed 	bl	8004d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f2a:	f002 fd4b 	bl	80079c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f2e:	2301      	movs	r3, #1
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08e      	sub	sp, #56	; 0x38
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <xQueueGenericCreateStatic+0x52>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <xQueueGenericCreateStatic+0x56>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <xQueueGenericCreateStatic+0x58>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	623b      	str	r3, [r7, #32]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <xQueueGenericCreateStatic+0x7e>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <xQueueGenericCreateStatic+0x82>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <xQueueGenericCreateStatic+0x84>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	61fb      	str	r3, [r7, #28]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fda:	2350      	movs	r3, #80	; 0x50
 8004fdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b50      	cmp	r3, #80	; 0x50
 8004fe2:	d00a      	beq.n	8004ffa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61bb      	str	r3, [r7, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ffa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800500e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f83f 	bl	80050a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005024:	4618      	mov	r0, r3
 8005026:	3730      	adds	r7, #48	; 0x30
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3350      	adds	r3, #80	; 0x50
 8005064:	4618      	mov	r0, r3
 8005066:	f002 fd9f 	bl	8007ba8 <pvPortMalloc>
 800506a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	3350      	adds	r3, #80	; 0x50
 800507a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005084:	79fa      	ldrb	r2, [r7, #7]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f805 	bl	80050a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005096:	69bb      	ldr	r3, [r7, #24]
	}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d103      	bne.n	80050bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e002      	b.n	80050c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050ce:	2101      	movs	r1, #1
 80050d0:	69b8      	ldr	r0, [r7, #24]
 80050d2:	f7ff fecb 	bl	8004e6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00e      	beq.n	8005112 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005106:	2300      	movs	r3, #0
 8005108:	2200      	movs	r2, #0
 800510a:	2100      	movs	r1, #0
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f90b 	bl	8005328 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	461a      	mov	r2, r3
 8005130:	6939      	ldr	r1, [r7, #16]
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f7ff ff7a 	bl	800502c <xQueueGenericCreate>
 8005138:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ffd3 	bl	80050e6 <prvInitialiseMutex>

		return xNewQueue;
 8005140:	68fb      	ldr	r3, [r7, #12]
	}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800514a:	b580      	push	{r7, lr}
 800514c:	b088      	sub	sp, #32
 800514e:	af02      	add	r7, sp, #8
 8005150:	4603      	mov	r3, r0
 8005152:	6039      	str	r1, [r7, #0]
 8005154:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005156:	2301      	movs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2200      	movs	r2, #0
 8005166:	6939      	ldr	r1, [r7, #16]
 8005168:	6978      	ldr	r0, [r7, #20]
 800516a:	f7ff fee7 	bl	8004f3c <xQueueGenericCreateStatic>
 800516e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff ffb8 	bl	80050e6 <prvInitialiseMutex>

		return xNewQueue;
 8005176:	68fb      	ldr	r3, [r7, #12]
	}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	60fb      	str	r3, [r7, #12]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	689c      	ldr	r4, [r3, #8]
 80051ac:	f001 fd72 	bl	8006c94 <xTaskGetCurrentTaskHandle>
 80051b0:	4603      	mov	r3, r0
 80051b2:	429c      	cmp	r4, r3
 80051b4:	d111      	bne.n	80051da <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80051c8:	2300      	movs	r3, #0
 80051ca:	2200      	movs	r2, #0
 80051cc:	2100      	movs	r1, #0
 80051ce:	6938      	ldr	r0, [r7, #16]
 80051d0:	f000 f8aa 	bl	8005328 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80051d4:	2301      	movs	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e001      	b.n	80051de <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80051de:	697b      	ldr	r3, [r7, #20]
	}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}

080051e8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	689c      	ldr	r4, [r3, #8]
 8005216:	f001 fd3d 	bl	8006c94 <xTaskGetCurrentTaskHandle>
 800521a:	4603      	mov	r3, r0
 800521c:	429c      	cmp	r4, r3
 800521e:	d107      	bne.n	8005230 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800522a:	2301      	movs	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e00c      	b.n	800524a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6938      	ldr	r0, [r7, #16]
 8005234:	f000 fb7e 	bl	8005934 <xQueueSemaphoreTake>
 8005238:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800524a:	697b      	ldr	r3, [r7, #20]
	}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd90      	pop	{r4, r7, pc}

08005254 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	; 0x28
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	61bb      	str	r3, [r7, #24]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	429a      	cmp	r2, r3
 8005282:	d90a      	bls.n	800529a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	617b      	str	r3, [r7, #20]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800529a:	2302      	movs	r3, #2
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2100      	movs	r1, #0
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fe49 	bl	8004f3c <xQueueGenericCreateStatic>
 80052aa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80052b8:	69fb      	ldr	r3, [r7, #28]
	}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b086      	sub	sp, #24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	613b      	str	r3, [r7, #16]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d90a      	bls.n	8005306 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005306:	2202      	movs	r2, #2
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fe8e 	bl	800502c <xQueueGenericCreate>
 8005310:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800531e:	697b      	ldr	r3, [r7, #20]
	}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08e      	sub	sp, #56	; 0x38
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <xQueueGenericSend+0x32>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <xQueueGenericSend+0x40>
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <xQueueGenericSend+0x44>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <xQueueGenericSend+0x46>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <xQueueGenericSend+0x60>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d103      	bne.n	8005396 <xQueueGenericSend+0x6e>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <xQueueGenericSend+0x72>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <xQueueGenericSend+0x74>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	623b      	str	r3, [r7, #32]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b6:	f001 fc7d 	bl	8006cb4 <xTaskGetSchedulerState>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <xQueueGenericSend+0x9e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <xQueueGenericSend+0xa2>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <xQueueGenericSend+0xa4>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61fb      	str	r3, [r7, #28]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053e6:	f002 fabd 	bl	8007964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <xQueueGenericSend+0xd4>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d129      	bne.n	8005450 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005402:	f000 fc9a 	bl	8005d3a <prvCopyDataToQueue>
 8005406:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3324      	adds	r3, #36	; 0x24
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fa7b 	bl	8006910 <xTaskRemoveFromEventList>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005420:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <xQueueGenericSend+0x1f8>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	e00a      	b.n	8005448 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b39      	ldr	r3, [pc, #228]	; (8005520 <xQueueGenericSend+0x1f8>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005448:	f002 fabc 	bl	80079c4 <vPortExitCritical>
				return pdPASS;
 800544c:	2301      	movs	r3, #1
 800544e:	e063      	b.n	8005518 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005456:	f002 fab5 	bl	80079c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800545a:	2300      	movs	r3, #0
 800545c:	e05c      	b.n	8005518 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fab5 	bl	80069d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005472:	f002 faa7 	bl	80079c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005476:	f001 f821 	bl	80064bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800547a:	f002 fa73 	bl	8007964 <vPortEnterCritical>
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d103      	bne.n	8005494 <xQueueGenericSend+0x16c>
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549a:	b25b      	sxtb	r3, r3
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSend+0x182>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054aa:	f002 fa8b 	bl	80079c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ae:	1d3a      	adds	r2, r7, #4
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 faa4 	bl	8006a04 <xTaskCheckForTimeOut>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d124      	bne.n	800550c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c4:	f000 fd31 	bl	8005f2a <prvIsQueueFull>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d018      	beq.n	8005500 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	3310      	adds	r3, #16
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 f9ca 	bl	8006870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054de:	f000 fcbc 	bl	8005e5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054e2:	f000 fff9 	bl	80064d8 <xTaskResumeAll>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f af7c 	bne.w	80053e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <xQueueGenericSend+0x1f8>)
 80054f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	e772      	b.n	80053e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005502:	f000 fcaa 	bl	8005e5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005506:	f000 ffe7 	bl	80064d8 <xTaskResumeAll>
 800550a:	e76c      	b.n	80053e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800550c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550e:	f000 fca4 	bl	8005e5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005512:	f000 ffe1 	bl	80064d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005518:	4618      	mov	r0, r3
 800551a:	3738      	adds	r7, #56	; 0x38
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b090      	sub	sp, #64	; 0x40
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <xQueueGenericSendFromISR+0x3c>
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <xQueueGenericSendFromISR+0x40>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <xQueueGenericSendFromISR+0x42>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d103      	bne.n	800558e <xQueueGenericSendFromISR+0x6a>
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <xQueueGenericSendFromISR+0x6e>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <xQueueGenericSendFromISR+0x70>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	623b      	str	r3, [r7, #32]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ae:	f002 fabb 	bl	8007b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055b2:	f3ef 8211 	mrs	r2, BASEPRI
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <xQueueGenericSendFromISR+0xbc>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d12f      	bne.n	8005640 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055f6:	f000 fba0 	bl	8005d3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d112      	bne.n	800562a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d016      	beq.n	800563a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	3324      	adds	r3, #36	; 0x24
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f97d 	bl	8006910 <xTaskRemoveFromEventList>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e007      	b.n	800563a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800562a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800562e:	3301      	adds	r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	b25a      	sxtb	r2, r3
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800563a:	2301      	movs	r3, #1
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800563e:	e001      	b.n	8005644 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005640:	2300      	movs	r3, #0
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800564e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005652:	4618      	mov	r0, r3
 8005654:	3740      	adds	r7, #64	; 0x40
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b08e      	sub	sp, #56	; 0x38
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	623b      	str	r3, [r7, #32]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	61fb      	str	r3, [r7, #28]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d103      	bne.n	80056b2 <xQueueGiveFromISR+0x58>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueGiveFromISR+0x5c>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGiveFromISR+0x5e>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61bb      	str	r3, [r7, #24]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056d2:	f002 fa29 	bl	8007b28 <vPortValidateInterruptPriority>
	__asm volatile
 80056d6:	f3ef 8211 	mrs	r2, BASEPRI
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	617a      	str	r2, [r7, #20]
 80056ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80056ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fe:	429a      	cmp	r2, r3
 8005700:	d22b      	bcs.n	800575a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005714:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d112      	bne.n	8005744 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d016      	beq.n	8005754 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f8f0 	bl	8006910 <xTaskRemoveFromEventList>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00e      	beq.n	8005754 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e007      	b.n	8005754 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005748:	3301      	adds	r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	b25a      	sxtb	r2, r3
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
 8005758:	e001      	b.n	800575e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800575a:	2300      	movs	r3, #0
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f383 8811 	msr	BASEPRI, r3
}
 8005768:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800576c:	4618      	mov	r0, r3
 800576e:	3738      	adds	r7, #56	; 0x38
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08c      	sub	sp, #48	; 0x30
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005780:	2300      	movs	r3, #0
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <xQueueReceive+0x30>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	623b      	str	r3, [r7, #32]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <xQueueReceive+0x3e>
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <xQueueReceive+0x42>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <xQueueReceive+0x44>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xQueueReceive+0x5e>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	61fb      	str	r3, [r7, #28]
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057d2:	f001 fa6f 	bl	8006cb4 <xTaskGetSchedulerState>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <xQueueReceive+0x6e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xQueueReceive+0x72>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xQueueReceive+0x74>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xQueueReceive+0x8e>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	61bb      	str	r3, [r7, #24]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005802:	f002 f8af 	bl	8007964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01f      	beq.n	8005852 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005816:	f000 fafa 	bl	8005e0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	1e5a      	subs	r2, r3, #1
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00f      	beq.n	800584a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	3310      	adds	r3, #16
 800582e:	4618      	mov	r0, r3
 8005830:	f001 f86e 	bl	8006910 <xTaskRemoveFromEventList>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800583a:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <xQueueReceive+0x1bc>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800584a:	f002 f8bb 	bl	80079c4 <vPortExitCritical>
				return pdPASS;
 800584e:	2301      	movs	r3, #1
 8005850:	e069      	b.n	8005926 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005858:	f002 f8b4 	bl	80079c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800585c:	2300      	movs	r3, #0
 800585e:	e062      	b.n	8005926 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005866:	f107 0310 	add.w	r3, r7, #16
 800586a:	4618      	mov	r0, r3
 800586c:	f001 f8b4 	bl	80069d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005874:	f002 f8a6 	bl	80079c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005878:	f000 fe20 	bl	80064bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800587c:	f002 f872 	bl	8007964 <vPortEnterCritical>
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005886:	b25b      	sxtb	r3, r3
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d103      	bne.n	8005896 <xQueueReceive+0x122>
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589c:	b25b      	sxtb	r3, r3
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d103      	bne.n	80058ac <xQueueReceive+0x138>
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ac:	f002 f88a 	bl	80079c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058b0:	1d3a      	adds	r2, r7, #4
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 f8a3 	bl	8006a04 <xTaskCheckForTimeOut>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d123      	bne.n	800590c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c6:	f000 fb1a 	bl	8005efe <prvIsQueueEmpty>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d017      	beq.n	8005900 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	3324      	adds	r3, #36	; 0x24
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4611      	mov	r1, r2
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 ffc9 	bl	8006870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e0:	f000 fabb 	bl	8005e5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058e4:	f000 fdf8 	bl	80064d8 <xTaskResumeAll>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d189      	bne.n	8005802 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <xQueueReceive+0x1bc>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	e780      	b.n	8005802 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f000 faaa 	bl	8005e5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005906:	f000 fde7 	bl	80064d8 <xTaskResumeAll>
 800590a:	e77a      	b.n	8005802 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800590c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590e:	f000 faa4 	bl	8005e5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005912:	f000 fde1 	bl	80064d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005918:	f000 faf1 	bl	8005efe <prvIsQueueEmpty>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	f43f af6f 	beq.w	8005802 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005924:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005926:	4618      	mov	r0, r3
 8005928:	3730      	adds	r7, #48	; 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	; 0x38
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005946:	2300      	movs	r3, #0
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	623b      	str	r3, [r7, #32]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61fb      	str	r3, [r7, #28]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005984:	f001 f996 	bl	8006cb4 <xTaskGetSchedulerState>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <xQueueSemaphoreTake+0x60>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <xQueueSemaphoreTake+0x64>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <xQueueSemaphoreTake+0x66>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	61bb      	str	r3, [r7, #24]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059b4:	f001 ffd6 	bl	8007964 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d024      	beq.n	8005a0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	1e5a      	subs	r2, r3, #1
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059d4:	f001 fae4 	bl	8006fa0 <pvTaskIncrementMutexHeldCount>
 80059d8:	4602      	mov	r2, r0
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00f      	beq.n	8005a06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	3310      	adds	r3, #16
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 ff90 	bl	8006910 <xTaskRemoveFromEventList>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059f6:	4b54      	ldr	r3, [pc, #336]	; (8005b48 <xQueueSemaphoreTake+0x214>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a06:	f001 ffdd 	bl	80079c4 <vPortExitCritical>
				return pdPASS;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e097      	b.n	8005b3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d111      	bne.n	8005a38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	617b      	str	r3, [r7, #20]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a30:	f001 ffc8 	bl	80079c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e082      	b.n	8005b3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 ffc8 	bl	80069d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a4c:	f001 ffba 	bl	80079c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a50:	f000 fd34 	bl	80064bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a54:	f001 ff86 	bl	8007964 <vPortEnterCritical>
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d103      	bne.n	8005a6e <xQueueSemaphoreTake+0x13a>
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d103      	bne.n	8005a84 <xQueueSemaphoreTake+0x150>
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a84:	f001 ff9e 	bl	80079c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a88:	463a      	mov	r2, r7
 8005a8a:	f107 030c 	add.w	r3, r7, #12
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 ffb7 	bl	8006a04 <xTaskCheckForTimeOut>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d132      	bne.n	8005b02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a9e:	f000 fa2e 	bl	8005efe <prvIsQueueEmpty>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d026      	beq.n	8005af6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005ab0:	f001 ff58 	bl	8007964 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f919 	bl	8006cf0 <xTaskPriorityInherit>
 8005abe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ac0:	f001 ff80 	bl	80079c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fecf 	bl	8006870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ad4:	f000 f9c1 	bl	8005e5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ad8:	f000 fcfe 	bl	80064d8 <xTaskResumeAll>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f47f af68 	bne.w	80059b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <xQueueSemaphoreTake+0x214>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	e75e      	b.n	80059b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af8:	f000 f9af 	bl	8005e5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005afc:	f000 fcec 	bl	80064d8 <xTaskResumeAll>
 8005b00:	e758      	b.n	80059b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b04:	f000 f9a9 	bl	8005e5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b08:	f000 fce6 	bl	80064d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b0e:	f000 f9f6 	bl	8005efe <prvIsQueueEmpty>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f43f af4d 	beq.w	80059b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b20:	f001 ff20 	bl	8007964 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b26:	f000 f8f0 	bl	8005d0a <prvGetDisinheritPriorityAfterTimeout>
 8005b2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 f9b2 	bl	8006e9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b38:	f001 ff44 	bl	80079c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3738      	adds	r7, #56	; 0x38
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	623b      	str	r3, [r7, #32]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <xQueueReceiveFromISR+0x3a>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <xQueueReceiveFromISR+0x3e>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueReceiveFromISR+0x40>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	61fb      	str	r3, [r7, #28]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ba6:	f001 ffbf 	bl	8007b28 <vPortValidateInterruptPriority>
	__asm volatile
 8005baa:	f3ef 8211 	mrs	r2, BASEPRI
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	61ba      	str	r2, [r7, #24]
 8005bc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d02f      	beq.n	8005c32 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005be0:	f000 f915 	bl	8005e0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	1e5a      	subs	r2, r3, #1
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d112      	bne.n	8005c1c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d016      	beq.n	8005c2c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	3310      	adds	r3, #16
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fe84 	bl	8006910 <xTaskRemoveFromEventList>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00e      	beq.n	8005c2c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e007      	b.n	8005c2c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c20:	3301      	adds	r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	b25a      	sxtb	r2, r3
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c30:	e001      	b.n	8005c36 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f383 8811 	msr	BASEPRI, r3
}
 8005c40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3738      	adds	r7, #56	; 0x38
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60bb      	str	r3, [r7, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005c70:	f001 fe78 	bl	8007964 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005c7a:	f001 fea3 	bl	80079c4 <vPortExitCritical>

	return uxReturn;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	60fb      	str	r3, [r7, #12]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005cb6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005cb8:	4618      	mov	r0, r3
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <vQueueDelete+0x28>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	60bb      	str	r3, [r7, #8]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f95f 	bl	8005fb0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f002 f81f 	bl	8007d40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e001      	b.n	8005d2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10d      	bne.n	8005d74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d14d      	bne.n	8005dfc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 f82b 	bl	8006dc0 <xTaskPriorityDisinherit>
 8005d6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
 8005d72:	e043      	b.n	8005dfc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d119      	bne.n	8005dae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6858      	ldr	r0, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	461a      	mov	r2, r3
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	f002 f935 	bl	8007ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	441a      	add	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d32b      	bcc.n	8005dfc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	e026      	b.n	8005dfc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68d8      	ldr	r0, [r3, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	461a      	mov	r2, r3
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	f002 f91b 	bl	8007ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	425b      	negs	r3, r3
 8005dc8:	441a      	add	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d207      	bcs.n	8005dea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	425b      	negs	r3, r3
 8005de4:	441a      	add	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d105      	bne.n	8005dfc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e04:	697b      	ldr	r3, [r7, #20]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d018      	beq.n	8005e52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	441a      	add	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d303      	bcc.n	8005e42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68d9      	ldr	r1, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f002 f8d1 	bl	8007ff4 <memcpy>
	}
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e62:	f001 fd7f 	bl	8007964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e6e:	e011      	b.n	8005e94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d012      	beq.n	8005e9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3324      	adds	r3, #36	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fd47 	bl	8006910 <xTaskRemoveFromEventList>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e88:	f000 fe1e 	bl	8006ac8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dce9      	bgt.n	8005e70 <prvUnlockQueue+0x16>
 8005e9c:	e000      	b.n	8005ea0 <prvUnlockQueue+0x46>
					break;
 8005e9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	22ff      	movs	r2, #255	; 0xff
 8005ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ea8:	f001 fd8c 	bl	80079c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eac:	f001 fd5a 	bl	8007964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eb8:	e011      	b.n	8005ede <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d012      	beq.n	8005ee8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3310      	adds	r3, #16
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fd22 	bl	8006910 <xTaskRemoveFromEventList>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ed2:	f000 fdf9 	bl	8006ac8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dce9      	bgt.n	8005eba <prvUnlockQueue+0x60>
 8005ee6:	e000      	b.n	8005eea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ee8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	22ff      	movs	r2, #255	; 0xff
 8005eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ef2:	f001 fd67 	bl	80079c4 <vPortExitCritical>
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f06:	f001 fd2d 	bl	8007964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f12:	2301      	movs	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e001      	b.n	8005f1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f1c:	f001 fd52 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 8005f20:	68fb      	ldr	r3, [r7, #12]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f32:	f001 fd17 	bl	8007964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d102      	bne.n	8005f48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e001      	b.n	8005f4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f4c:	f001 fd3a 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e014      	b.n	8005f96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f6c:	4a0f      	ldr	r2, [pc, #60]	; (8005fac <vQueueAddToRegistry+0x50>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f78:	490c      	ldr	r1, [pc, #48]	; (8005fac <vQueueAddToRegistry+0x50>)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <vQueueAddToRegistry+0x50>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f8e:	e006      	b.n	8005f9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b07      	cmp	r3, #7
 8005f9a:	d9e7      	bls.n	8005f6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000a4c 	.word	0x20000a4c

08005fb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e016      	b.n	8005fec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005fbe:	4a10      	ldr	r2, [pc, #64]	; (8006000 <vQueueUnregisterQueue+0x50>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d10b      	bne.n	8005fe6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005fce:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <vQueueUnregisterQueue+0x50>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <vQueueUnregisterQueue+0x50>)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4413      	add	r3, r2
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	605a      	str	r2, [r3, #4]
				break;
 8005fe4:	e006      	b.n	8005ff4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	d9e5      	bls.n	8005fbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	20000a4c 	.word	0x20000a4c

08006004 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006014:	f001 fca6 	bl	8007964 <vPortEnterCritical>
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800601e:	b25b      	sxtb	r3, r3
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d103      	bne.n	800602e <vQueueWaitForMessageRestricted+0x2a>
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006034:	b25b      	sxtb	r3, r3
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d103      	bne.n	8006044 <vQueueWaitForMessageRestricted+0x40>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006044:	f001 fcbe 	bl	80079c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3324      	adds	r3, #36	; 0x24
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fc2d 	bl	80068b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f7ff fefb 	bl	8005e5a <prvUnlockQueue>
	}
 8006064:	bf00      	nop
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08e      	sub	sp, #56	; 0x38
 8006070:	af04      	add	r7, sp, #16
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	623b      	str	r3, [r7, #32]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	61fb      	str	r3, [r7, #28]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b2:	23bc      	movs	r3, #188	; 0xbc
 80060b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2bbc      	cmp	r3, #188	; 0xbc
 80060ba:	d00a      	beq.n	80060d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	61bb      	str	r3, [r7, #24]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01e      	beq.n	8006118 <xTaskCreateStatic+0xac>
 80060da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01b      	beq.n	8006118 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f2:	2300      	movs	r3, #0
 80060f4:	9303      	str	r3, [sp, #12]
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	9302      	str	r3, [sp, #8]
 80060fa:	f107 0314 	add.w	r3, r7, #20
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f850 	bl	80061b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006112:	f000 f8f3 	bl	80062fc <prvAddNewTaskToReadyList>
 8006116:	e001      	b.n	800611c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800611c:	697b      	ldr	r3, [r7, #20]
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3728      	adds	r7, #40	; 0x28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006126:	b580      	push	{r7, lr}
 8006128:	b08c      	sub	sp, #48	; 0x30
 800612a:	af04      	add	r7, sp, #16
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fd34 	bl	8007ba8 <pvPortMalloc>
 8006140:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00e      	beq.n	8006166 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006148:	20bc      	movs	r0, #188	; 0xbc
 800614a:	f001 fd2d 	bl	8007ba8 <pvPortMalloc>
 800614e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
 800615c:	e005      	b.n	800616a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800615e:	6978      	ldr	r0, [r7, #20]
 8006160:	f001 fdee 	bl	8007d40 <vPortFree>
 8006164:	e001      	b.n	800616a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d017      	beq.n	80061a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006178:	88fa      	ldrh	r2, [r7, #6]
 800617a:	2300      	movs	r3, #0
 800617c:	9303      	str	r3, [sp, #12]
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	9302      	str	r3, [sp, #8]
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f80e 	bl	80061b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006194:	69f8      	ldr	r0, [r7, #28]
 8006196:	f000 f8b1 	bl	80062fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800619a:	2301      	movs	r3, #1
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e002      	b.n	80061a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a0:	f04f 33ff 	mov.w	r3, #4294967295
 80061a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061a6:	69bb      	ldr	r3, [r7, #24]
	}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	461a      	mov	r2, r3
 80061c8:	21a5      	movs	r1, #165	; 0xa5
 80061ca:	f001 ff21 	bl	8008010 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061d8:	3b01      	subs	r3, #1
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <prvInitialiseNewTask+0x58>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	617b      	str	r3, [r7, #20]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01f      	beq.n	800624e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e012      	b.n	800623a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	7819      	ldrb	r1, [r3, #0]
 800621c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	3334      	adds	r3, #52	; 0x34
 8006224:	460a      	mov	r2, r1
 8006226:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d006      	beq.n	8006242 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	3301      	adds	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d9e9      	bls.n	8006214 <prvInitialiseNewTask+0x64>
 8006240:	e000      	b.n	8006244 <prvInitialiseNewTask+0x94>
			{
				break;
 8006242:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800624c:	e003      	b.n	8006256 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	2b37      	cmp	r3, #55	; 0x37
 800625a:	d901      	bls.n	8006260 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800625c:	2337      	movs	r3, #55	; 0x37
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006264:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	2200      	movs	r2, #0
 8006270:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	3304      	adds	r3, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fd64 	bl	8004d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	3318      	adds	r3, #24
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fd5f 	bl	8004d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	3354      	adds	r3, #84	; 0x54
 80062b0:	2260      	movs	r2, #96	; 0x60
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 feab 	bl	8008010 <memset>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <prvInitialiseNewTask+0x140>)
 80062be:	659a      	str	r2, [r3, #88]	; 0x58
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <prvInitialiseNewTask+0x144>)
 80062c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <prvInitialiseNewTask+0x148>)
 80062ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	69b8      	ldr	r0, [r7, #24]
 80062d2:	f001 fa1b 	bl	800770c <pxPortInitialiseStack>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e8:	bf00      	nop
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	08008b30 	.word	0x08008b30
 80062f4:	08008b50 	.word	0x08008b50
 80062f8:	08008b10 	.word	0x08008b10

080062fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006304:	f001 fb2e 	bl	8007964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006308:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	4a2c      	ldr	r2, [pc, #176]	; (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 8006310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006312:	4b2c      	ldr	r3, [pc, #176]	; (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d110      	bne.n	800634a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006328:	f000 fbf2 	bl	8006b10 <prvInitialiseTaskLists>
 800632c:	e00d      	b.n	800634a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800632e:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <prvAddNewTaskToReadyList+0xcc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006336:	4b23      	ldr	r3, [pc, #140]	; (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d802      	bhi.n	800634a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006344:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800634a:	4b20      	ldr	r3, [pc, #128]	; (80063cc <prvAddNewTaskToReadyList+0xd0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <prvAddNewTaskToReadyList+0xd0>)
 8006352:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <prvAddNewTaskToReadyList+0xd0>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <prvAddNewTaskToReadyList+0xd4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d903      	bls.n	8006370 <prvAddNewTaskToReadyList+0x74>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <prvAddNewTaskToReadyList+0xd4>)
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <prvAddNewTaskToReadyList+0xd8>)
 800637e:	441a      	add	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fe fce9 	bl	8004d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800638c:	f001 fb1a 	bl	80079c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <prvAddNewTaskToReadyList+0xcc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d207      	bcs.n	80063b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <prvAddNewTaskToReadyList+0xdc>)
 80063a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000f60 	.word	0x20000f60
 80063c4:	20000a8c 	.word	0x20000a8c
 80063c8:	20000f6c 	.word	0x20000f6c
 80063cc:	20000f7c 	.word	0x20000f7c
 80063d0:	20000f68 	.word	0x20000f68
 80063d4:	20000a90 	.word	0x20000a90
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063ea:	463a      	mov	r2, r7
 80063ec:	1d39      	adds	r1, r7, #4
 80063ee:	f107 0308 	add.w	r3, r7, #8
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fc52 	bl	8004c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	9202      	str	r2, [sp, #8]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	2300      	movs	r3, #0
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	2300      	movs	r3, #0
 8006408:	460a      	mov	r2, r1
 800640a:	4924      	ldr	r1, [pc, #144]	; (800649c <vTaskStartScheduler+0xc0>)
 800640c:	4824      	ldr	r0, [pc, #144]	; (80064a0 <vTaskStartScheduler+0xc4>)
 800640e:	f7ff fe2d 	bl	800606c <xTaskCreateStatic>
 8006412:	4603      	mov	r3, r0
 8006414:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <vTaskStartScheduler+0xc8>)
 8006416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006418:	4b22      	ldr	r3, [pc, #136]	; (80064a4 <vTaskStartScheduler+0xc8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006420:	2301      	movs	r3, #1
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e001      	b.n	800642a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d102      	bne.n	8006436 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006430:	f000 fe1e 	bl	8007070 <xTimerCreateTimerTask>
 8006434:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d11b      	bne.n	8006474 <vTaskStartScheduler+0x98>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	613b      	str	r3, [r7, #16]
}
 800644e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006450:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <vTaskStartScheduler+0xcc>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3354      	adds	r3, #84	; 0x54
 8006456:	4a15      	ldr	r2, [pc, #84]	; (80064ac <vTaskStartScheduler+0xd0>)
 8006458:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800645a:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <vTaskStartScheduler+0xd4>)
 800645c:	f04f 32ff 	mov.w	r2, #4294967295
 8006460:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006462:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <vTaskStartScheduler+0xd8>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006468:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <vTaskStartScheduler+0xdc>)
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800646e:	f001 f9d7 	bl	8007820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006472:	e00e      	b.n	8006492 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d10a      	bne.n	8006492 <vTaskStartScheduler+0xb6>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	60fb      	str	r3, [r7, #12]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <vTaskStartScheduler+0xb4>
}
 8006492:	bf00      	nop
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	08008a78 	.word	0x08008a78
 80064a0:	08006ae1 	.word	0x08006ae1
 80064a4:	20000f84 	.word	0x20000f84
 80064a8:	20000a8c 	.word	0x20000a8c
 80064ac:	20000010 	.word	0x20000010
 80064b0:	20000f80 	.word	0x20000f80
 80064b4:	20000f6c 	.word	0x20000f6c
 80064b8:	20000f64 	.word	0x20000f64

080064bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064c0:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <vTaskSuspendAll+0x18>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	4a03      	ldr	r2, [pc, #12]	; (80064d4 <vTaskSuspendAll+0x18>)
 80064c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064ca:	bf00      	nop
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	20000f88 	.word	0x20000f88

080064d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064e6:	4b42      	ldr	r3, [pc, #264]	; (80065f0 <xTaskResumeAll+0x118>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <xTaskResumeAll+0x2c>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	603b      	str	r3, [r7, #0]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006504:	f001 fa2e 	bl	8007964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006508:	4b39      	ldr	r3, [pc, #228]	; (80065f0 <xTaskResumeAll+0x118>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3b01      	subs	r3, #1
 800650e:	4a38      	ldr	r2, [pc, #224]	; (80065f0 <xTaskResumeAll+0x118>)
 8006510:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006512:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <xTaskResumeAll+0x118>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d162      	bne.n	80065e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800651a:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <xTaskResumeAll+0x11c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d05e      	beq.n	80065e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006522:	e02f      	b.n	8006584 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006524:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <xTaskResumeAll+0x120>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3318      	adds	r3, #24
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe fc71 	bl	8004e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3304      	adds	r3, #4
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fc6c 	bl	8004e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <xTaskResumeAll+0x124>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d903      	bls.n	8006554 <xTaskResumeAll+0x7c>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <xTaskResumeAll+0x124>)
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4a27      	ldr	r2, [pc, #156]	; (8006600 <xTaskResumeAll+0x128>)
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f7fe fbf7 	bl	8004d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	4b23      	ldr	r3, [pc, #140]	; (8006604 <xTaskResumeAll+0x12c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	429a      	cmp	r2, r3
 800657c:	d302      	bcc.n	8006584 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800657e:	4b22      	ldr	r3, [pc, #136]	; (8006608 <xTaskResumeAll+0x130>)
 8006580:	2201      	movs	r2, #1
 8006582:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006584:	4b1c      	ldr	r3, [pc, #112]	; (80065f8 <xTaskResumeAll+0x120>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1cb      	bne.n	8006524 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006592:	f000 fb5f 	bl	8006c54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006596:	4b1d      	ldr	r3, [pc, #116]	; (800660c <xTaskResumeAll+0x134>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d010      	beq.n	80065c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065a2:	f000 f847 	bl	8006634 <xTaskIncrementTick>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80065ac:	4b16      	ldr	r3, [pc, #88]	; (8006608 <xTaskResumeAll+0x130>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f1      	bne.n	80065a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80065be:	4b13      	ldr	r3, [pc, #76]	; (800660c <xTaskResumeAll+0x134>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <xTaskResumeAll+0x130>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065d0:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <xTaskResumeAll+0x138>)
 80065d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065e0:	f001 f9f0 	bl	80079c4 <vPortExitCritical>

	return xAlreadyYielded;
 80065e4:	68bb      	ldr	r3, [r7, #8]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000f88 	.word	0x20000f88
 80065f4:	20000f60 	.word	0x20000f60
 80065f8:	20000f20 	.word	0x20000f20
 80065fc:	20000f68 	.word	0x20000f68
 8006600:	20000a90 	.word	0x20000a90
 8006604:	20000a8c 	.word	0x20000a8c
 8006608:	20000f74 	.word	0x20000f74
 800660c:	20000f70 	.word	0x20000f70
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <xTaskGetTickCount+0x1c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006620:	687b      	ldr	r3, [r7, #4]
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000f64 	.word	0x20000f64

08006634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663e:	4b4f      	ldr	r3, [pc, #316]	; (800677c <xTaskIncrementTick+0x148>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 808f 	bne.w	8006766 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006648:	4b4d      	ldr	r3, [pc, #308]	; (8006780 <xTaskIncrementTick+0x14c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006650:	4a4b      	ldr	r2, [pc, #300]	; (8006780 <xTaskIncrementTick+0x14c>)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d120      	bne.n	800669e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800665c:	4b49      	ldr	r3, [pc, #292]	; (8006784 <xTaskIncrementTick+0x150>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <xTaskIncrementTick+0x48>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	603b      	str	r3, [r7, #0]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <xTaskIncrementTick+0x46>
 800667c:	4b41      	ldr	r3, [pc, #260]	; (8006784 <xTaskIncrementTick+0x150>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	4b41      	ldr	r3, [pc, #260]	; (8006788 <xTaskIncrementTick+0x154>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a3f      	ldr	r2, [pc, #252]	; (8006784 <xTaskIncrementTick+0x150>)
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	4a3f      	ldr	r2, [pc, #252]	; (8006788 <xTaskIncrementTick+0x154>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	4b3e      	ldr	r3, [pc, #248]	; (800678c <xTaskIncrementTick+0x158>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	4a3d      	ldr	r2, [pc, #244]	; (800678c <xTaskIncrementTick+0x158>)
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	f000 fadb 	bl	8006c54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800669e:	4b3c      	ldr	r3, [pc, #240]	; (8006790 <xTaskIncrementTick+0x15c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d349      	bcc.n	800673c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a8:	4b36      	ldr	r3, [pc, #216]	; (8006784 <xTaskIncrementTick+0x150>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b2:	4b37      	ldr	r3, [pc, #220]	; (8006790 <xTaskIncrementTick+0x15c>)
 80066b4:	f04f 32ff 	mov.w	r2, #4294967295
 80066b8:	601a      	str	r2, [r3, #0]
					break;
 80066ba:	e03f      	b.n	800673c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066bc:	4b31      	ldr	r3, [pc, #196]	; (8006784 <xTaskIncrementTick+0x150>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d203      	bcs.n	80066dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066d4:	4a2e      	ldr	r2, [pc, #184]	; (8006790 <xTaskIncrementTick+0x15c>)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066da:	e02f      	b.n	800673c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	3304      	adds	r3, #4
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe fb99 	bl	8004e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	3318      	adds	r3, #24
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fb90 	bl	8004e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4b25      	ldr	r3, [pc, #148]	; (8006794 <xTaskIncrementTick+0x160>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <xTaskIncrementTick+0xd8>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	4a22      	ldr	r2, [pc, #136]	; (8006794 <xTaskIncrementTick+0x160>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <xTaskIncrementTick+0x164>)
 800671a:	441a      	add	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe fb1b 	bl	8004d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672c:	4b1b      	ldr	r3, [pc, #108]	; (800679c <xTaskIncrementTick+0x168>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	429a      	cmp	r2, r3
 8006734:	d3b8      	bcc.n	80066a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800673a:	e7b5      	b.n	80066a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800673c:	4b17      	ldr	r3, [pc, #92]	; (800679c <xTaskIncrementTick+0x168>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	4915      	ldr	r1, [pc, #84]	; (8006798 <xTaskIncrementTick+0x164>)
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d901      	bls.n	8006758 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006758:	4b11      	ldr	r3, [pc, #68]	; (80067a0 <xTaskIncrementTick+0x16c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e004      	b.n	8006770 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006766:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <xTaskIncrementTick+0x170>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	4a0d      	ldr	r2, [pc, #52]	; (80067a4 <xTaskIncrementTick+0x170>)
 800676e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006770:	697b      	ldr	r3, [r7, #20]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000f88 	.word	0x20000f88
 8006780:	20000f64 	.word	0x20000f64
 8006784:	20000f18 	.word	0x20000f18
 8006788:	20000f1c 	.word	0x20000f1c
 800678c:	20000f78 	.word	0x20000f78
 8006790:	20000f80 	.word	0x20000f80
 8006794:	20000f68 	.word	0x20000f68
 8006798:	20000a90 	.word	0x20000a90
 800679c:	20000a8c 	.word	0x20000a8c
 80067a0:	20000f74 	.word	0x20000f74
 80067a4:	20000f70 	.word	0x20000f70

080067a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <vTaskSwitchContext+0xb0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067b6:	4b29      	ldr	r3, [pc, #164]	; (800685c <vTaskSwitchContext+0xb4>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067bc:	e046      	b.n	800684c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80067be:	4b27      	ldr	r3, [pc, #156]	; (800685c <vTaskSwitchContext+0xb4>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c4:	4b26      	ldr	r3, [pc, #152]	; (8006860 <vTaskSwitchContext+0xb8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e010      	b.n	80067ee <vTaskSwitchContext+0x46>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	607b      	str	r3, [r7, #4]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <vTaskSwitchContext+0x3e>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	491d      	ldr	r1, [pc, #116]	; (8006864 <vTaskSwitchContext+0xbc>)
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0e4      	beq.n	80067cc <vTaskSwitchContext+0x24>
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4a15      	ldr	r2, [pc, #84]	; (8006864 <vTaskSwitchContext+0xbc>)
 800680e:	4413      	add	r3, r2
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	605a      	str	r2, [r3, #4]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	3308      	adds	r3, #8
 8006824:	429a      	cmp	r2, r3
 8006826:	d104      	bne.n	8006832 <vTaskSwitchContext+0x8a>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <vTaskSwitchContext+0xc0>)
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	4a08      	ldr	r2, [pc, #32]	; (8006860 <vTaskSwitchContext+0xb8>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <vTaskSwitchContext+0xc0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3354      	adds	r3, #84	; 0x54
 8006848:	4a08      	ldr	r2, [pc, #32]	; (800686c <vTaskSwitchContext+0xc4>)
 800684a:	6013      	str	r3, [r2, #0]
}
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	20000f88 	.word	0x20000f88
 800685c:	20000f74 	.word	0x20000f74
 8006860:	20000f68 	.word	0x20000f68
 8006864:	20000a90 	.word	0x20000a90
 8006868:	20000a8c 	.word	0x20000a8c
 800686c:	20000010 	.word	0x20000010

08006870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <vTaskPlaceOnEventList+0x44>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3318      	adds	r3, #24
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fe fa81 	bl	8004da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068a4:	2101      	movs	r1, #1
 80068a6:	6838      	ldr	r0, [r7, #0]
 80068a8:	f000 fb8e 	bl	8006fc8 <prvAddCurrentTaskToDelayedList>
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000a8c 	.word	0x20000a8c

080068b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	617b      	str	r3, [r7, #20]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <vTaskPlaceOnEventListRestricted+0x54>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3318      	adds	r3, #24
 80068e6:	4619      	mov	r1, r3
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7fe fa38 	bl	8004d5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	68b8      	ldr	r0, [r7, #8]
 80068fe:	f000 fb63 	bl	8006fc8 <prvAddCurrentTaskToDelayedList>
	}
 8006902:	bf00      	nop
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000a8c 	.word	0x20000a8c

08006910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60fb      	str	r3, [r7, #12]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	3318      	adds	r3, #24
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fa69 	bl	8004e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006946:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <xTaskRemoveFromEventList+0xb0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d11d      	bne.n	800698a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	3304      	adds	r3, #4
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe fa60 	bl	8004e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <xTaskRemoveFromEventList+0xb4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d903      	bls.n	800696c <xTaskRemoveFromEventList+0x5c>
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <xTaskRemoveFromEventList+0xb4>)
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4a13      	ldr	r2, [pc, #76]	; (80069c8 <xTaskRemoveFromEventList+0xb8>)
 800697a:	441a      	add	r2, r3
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7fe f9eb 	bl	8004d5e <vListInsertEnd>
 8006988:	e005      	b.n	8006996 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	3318      	adds	r3, #24
 800698e:	4619      	mov	r1, r3
 8006990:	480e      	ldr	r0, [pc, #56]	; (80069cc <xTaskRemoveFromEventList+0xbc>)
 8006992:	f7fe f9e4 	bl	8004d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <xTaskRemoveFromEventList+0xc0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d905      	bls.n	80069b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <xTaskRemoveFromEventList+0xc4>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e001      	b.n	80069b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069b4:	697b      	ldr	r3, [r7, #20]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000f88 	.word	0x20000f88
 80069c4:	20000f68 	.word	0x20000f68
 80069c8:	20000a90 	.word	0x20000a90
 80069cc:	20000f20 	.word	0x20000f20
 80069d0:	20000a8c 	.word	0x20000a8c
 80069d4:	20000f74 	.word	0x20000f74

080069d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069e0:	4b06      	ldr	r3, [pc, #24]	; (80069fc <vTaskInternalSetTimeOutState+0x24>)
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <vTaskInternalSetTimeOutState+0x28>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	605a      	str	r2, [r3, #4]
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	20000f78 	.word	0x20000f78
 8006a00:	20000f64 	.word	0x20000f64

08006a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	613b      	str	r3, [r7, #16]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a46:	f000 ff8d 	bl	8007964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <xTaskCheckForTimeOut+0xbc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d102      	bne.n	8006a6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	e023      	b.n	8006ab2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b15      	ldr	r3, [pc, #84]	; (8006ac4 <xTaskCheckForTimeOut+0xc0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d007      	beq.n	8006a86 <xTaskCheckForTimeOut+0x82>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a80:	2301      	movs	r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	e015      	b.n	8006ab2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d20b      	bcs.n	8006aa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff ff9b 	bl	80069d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	e004      	b.n	8006ab2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ab2:	f000 ff87 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20000f64 	.word	0x20000f64
 8006ac4:	20000f78 	.word	0x20000f78

08006ac8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <vTaskMissedYield+0x14>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	20000f74 	.word	0x20000f74

08006ae0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ae8:	f000 f852 	bl	8006b90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <prvIdleTask+0x28>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d9f9      	bls.n	8006ae8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <prvIdleTask+0x2c>)
 8006af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b04:	e7f0      	b.n	8006ae8 <prvIdleTask+0x8>
 8006b06:	bf00      	nop
 8006b08:	20000a90 	.word	0x20000a90
 8006b0c:	e000ed04 	.word	0xe000ed04

08006b10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	e00c      	b.n	8006b36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4a12      	ldr	r2, [pc, #72]	; (8006b70 <prvInitialiseTaskLists+0x60>)
 8006b28:	4413      	add	r3, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe f8ea 	bl	8004d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3301      	adds	r3, #1
 8006b34:	607b      	str	r3, [r7, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b37      	cmp	r3, #55	; 0x37
 8006b3a:	d9ef      	bls.n	8006b1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b3c:	480d      	ldr	r0, [pc, #52]	; (8006b74 <prvInitialiseTaskLists+0x64>)
 8006b3e:	f7fe f8e1 	bl	8004d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b42:	480d      	ldr	r0, [pc, #52]	; (8006b78 <prvInitialiseTaskLists+0x68>)
 8006b44:	f7fe f8de 	bl	8004d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b48:	480c      	ldr	r0, [pc, #48]	; (8006b7c <prvInitialiseTaskLists+0x6c>)
 8006b4a:	f7fe f8db 	bl	8004d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b4e:	480c      	ldr	r0, [pc, #48]	; (8006b80 <prvInitialiseTaskLists+0x70>)
 8006b50:	f7fe f8d8 	bl	8004d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b54:	480b      	ldr	r0, [pc, #44]	; (8006b84 <prvInitialiseTaskLists+0x74>)
 8006b56:	f7fe f8d5 	bl	8004d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <prvInitialiseTaskLists+0x78>)
 8006b5c:	4a05      	ldr	r2, [pc, #20]	; (8006b74 <prvInitialiseTaskLists+0x64>)
 8006b5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b60:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <prvInitialiseTaskLists+0x7c>)
 8006b62:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <prvInitialiseTaskLists+0x68>)
 8006b64:	601a      	str	r2, [r3, #0]
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000a90 	.word	0x20000a90
 8006b74:	20000ef0 	.word	0x20000ef0
 8006b78:	20000f04 	.word	0x20000f04
 8006b7c:	20000f20 	.word	0x20000f20
 8006b80:	20000f34 	.word	0x20000f34
 8006b84:	20000f4c 	.word	0x20000f4c
 8006b88:	20000f18 	.word	0x20000f18
 8006b8c:	20000f1c 	.word	0x20000f1c

08006b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b96:	e019      	b.n	8006bcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b98:	f000 fee4 	bl	8007964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9c:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <prvCheckTasksWaitingTermination+0x50>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fe f935 	bl	8004e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bae:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <prvCheckTasksWaitingTermination+0x54>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	4a0b      	ldr	r2, [pc, #44]	; (8006be4 <prvCheckTasksWaitingTermination+0x54>)
 8006bb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <prvCheckTasksWaitingTermination+0x58>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	4a0a      	ldr	r2, [pc, #40]	; (8006be8 <prvCheckTasksWaitingTermination+0x58>)
 8006bc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006bc2:	f000 feff 	bl	80079c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f810 	bl	8006bec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <prvCheckTasksWaitingTermination+0x58>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e1      	bne.n	8006b98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000f34 	.word	0x20000f34
 8006be4:	20000f60 	.word	0x20000f60
 8006be8:	20000f48 	.word	0x20000f48

08006bec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3354      	adds	r3, #84	; 0x54
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 faff 	bl	80081fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d108      	bne.n	8006c1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 f897 	bl	8007d40 <vPortFree>
				vPortFree( pxTCB );
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 f894 	bl	8007d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c18:	e018      	b.n	8006c4c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d103      	bne.n	8006c2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f88b 	bl	8007d40 <vPortFree>
	}
 8006c2a:	e00f      	b.n	8006c4c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d00a      	beq.n	8006c4c <prvDeleteTCB+0x60>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	60fb      	str	r3, [r7, #12]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <prvDeleteTCB+0x5e>
	}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <prvResetNextTaskUnblockTime+0x38>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <prvResetNextTaskUnblockTime+0x3c>)
 8006c66:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c6c:	e008      	b.n	8006c80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6e:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <prvResetNextTaskUnblockTime+0x38>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4a04      	ldr	r2, [pc, #16]	; (8006c90 <prvResetNextTaskUnblockTime+0x3c>)
 8006c7e:	6013      	str	r3, [r2, #0]
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	20000f18 	.word	0x20000f18
 8006c90:	20000f80 	.word	0x20000f80

08006c94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006ca0:	687b      	ldr	r3, [r7, #4]
	}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	20000a8c 	.word	0x20000a8c

08006cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <xTaskGetSchedulerState+0x34>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	e008      	b.n	8006cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <xTaskGetSchedulerState+0x38>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	e001      	b.n	8006cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cda:	687b      	ldr	r3, [r7, #4]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000f6c 	.word	0x20000f6c
 8006cec:	20000f88 	.word	0x20000f88

08006cf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d051      	beq.n	8006daa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	4b2a      	ldr	r3, [pc, #168]	; (8006db4 <xTaskPriorityInherit+0xc4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d241      	bcs.n	8006d98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	db06      	blt.n	8006d2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d1c:	4b25      	ldr	r3, [pc, #148]	; (8006db4 <xTaskPriorityInherit+0xc4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6959      	ldr	r1, [r3, #20]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4a1f      	ldr	r2, [pc, #124]	; (8006db8 <xTaskPriorityInherit+0xc8>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	d122      	bne.n	8006d88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe f866 	bl	8004e18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d4c:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <xTaskPriorityInherit+0xc4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <xTaskPriorityInherit+0xcc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d903      	bls.n	8006d6a <xTaskPriorityInherit+0x7a>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	4a15      	ldr	r2, [pc, #84]	; (8006dbc <xTaskPriorityInherit+0xcc>)
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <xTaskPriorityInherit+0xc8>)
 8006d78:	441a      	add	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f7fd ffec 	bl	8004d5e <vListInsertEnd>
 8006d86:	e004      	b.n	8006d92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <xTaskPriorityInherit+0xc4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	e008      	b.n	8006daa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <xTaskPriorityInherit+0xc4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d201      	bcs.n	8006daa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006da6:	2301      	movs	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006daa:	68fb      	ldr	r3, [r7, #12]
	}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000a8c 	.word	0x20000a8c
 8006db8:	20000a90 	.word	0x20000a90
 8006dbc:	20000f68 	.word	0x20000f68

08006dc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d056      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dd6:	4b2e      	ldr	r3, [pc, #184]	; (8006e90 <xTaskPriorityDisinherit+0xd0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d00a      	beq.n	8006df6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60fb      	str	r3, [r7, #12]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	60bb      	str	r3, [r7, #8]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	1e5a      	subs	r2, r3, #1
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d02c      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d128      	bne.n	8006e84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fd ffee 	bl	8004e18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <xTaskPriorityDisinherit+0xd4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <xTaskPriorityDisinherit+0xa4>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <xTaskPriorityDisinherit+0xd4>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <xTaskPriorityDisinherit+0xd8>)
 8006e72:	441a      	add	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fd ff6f 	bl	8004d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e84:	697b      	ldr	r3, [r7, #20]
	}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000a8c 	.word	0x20000a8c
 8006e94:	20000f68 	.word	0x20000f68
 8006e98:	20000a90 	.word	0x20000a90

08006e9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d06a      	beq.n	8006f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60fb      	str	r3, [r7, #12]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d902      	bls.n	8006ee2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	e002      	b.n	8006ee8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d04b      	beq.n	8006f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d146      	bne.n	8006f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006efc:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d10a      	bne.n	8006f1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	db04      	blt.n	8006f3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	6959      	ldr	r1, [r3, #20]
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4a13      	ldr	r2, [pc, #76]	; (8006f98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f4a:	4413      	add	r3, r2
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d11c      	bne.n	8006f8a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fd ff5f 	bl	8004e18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d903      	bls.n	8006f6e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	4a0c      	ldr	r2, [pc, #48]	; (8006f9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4a07      	ldr	r2, [pc, #28]	; (8006f98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f7c:	441a      	add	r2, r3
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f7fd feea 	bl	8004d5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f8a:	bf00      	nop
 8006f8c:	3720      	adds	r7, #32
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000a8c 	.word	0x20000a8c
 8006f98:	20000a90 	.word	0x20000a90
 8006f9c:	20000f68 	.word	0x20000f68

08006fa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fa4:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fb2:	3201      	adds	r2, #1
 8006fb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006fb6:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
	}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	20000a8c 	.word	0x20000a8c

08006fc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fd2:	4b21      	ldr	r3, [pc, #132]	; (8007058 <prvAddCurrentTaskToDelayedList+0x90>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd8:	4b20      	ldr	r3, [pc, #128]	; (800705c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fd ff1a 	bl	8004e18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d10a      	bne.n	8007002 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff2:	4b1a      	ldr	r3, [pc, #104]	; (800705c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4819      	ldr	r0, [pc, #100]	; (8007060 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ffc:	f7fd feaf 	bl	8004d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007000:	e026      	b.n	8007050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4413      	add	r3, r2
 8007008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <prvAddCurrentTaskToDelayedList+0x94>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	429a      	cmp	r2, r3
 8007018:	d209      	bcs.n	800702e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800701a:	4b12      	ldr	r3, [pc, #72]	; (8007064 <prvAddCurrentTaskToDelayedList+0x9c>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <prvAddCurrentTaskToDelayedList+0x94>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3304      	adds	r3, #4
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f7fd febd 	bl	8004da6 <vListInsert>
}
 800702c:	e010      	b.n	8007050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b0a      	ldr	r3, [pc, #40]	; (800705c <prvAddCurrentTaskToDelayedList+0x94>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3304      	adds	r3, #4
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7fd feb3 	bl	8004da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	429a      	cmp	r2, r3
 8007048:	d202      	bcs.n	8007050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800704a:	4a08      	ldr	r2, [pc, #32]	; (800706c <prvAddCurrentTaskToDelayedList+0xa4>)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6013      	str	r3, [r2, #0]
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000f64 	.word	0x20000f64
 800705c:	20000a8c 	.word	0x20000a8c
 8007060:	20000f4c 	.word	0x20000f4c
 8007064:	20000f1c 	.word	0x20000f1c
 8007068:	20000f18 	.word	0x20000f18
 800706c:	20000f80 	.word	0x20000f80

08007070 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800707a:	f000 fb07 	bl	800768c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800707e:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <xTimerCreateTimerTask+0x80>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d021      	beq.n	80070ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800708e:	1d3a      	adds	r2, r7, #4
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	f107 030c 	add.w	r3, r7, #12
 8007098:	4618      	mov	r0, r3
 800709a:	f7fd fe19 	bl	8004cd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	9202      	str	r2, [sp, #8]
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	2302      	movs	r3, #2
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	2300      	movs	r3, #0
 80070ae:	460a      	mov	r2, r1
 80070b0:	4910      	ldr	r1, [pc, #64]	; (80070f4 <xTimerCreateTimerTask+0x84>)
 80070b2:	4811      	ldr	r0, [pc, #68]	; (80070f8 <xTimerCreateTimerTask+0x88>)
 80070b4:	f7fe ffda 	bl	800606c <xTaskCreateStatic>
 80070b8:	4603      	mov	r3, r0
 80070ba:	4a10      	ldr	r2, [pc, #64]	; (80070fc <xTimerCreateTimerTask+0x8c>)
 80070bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070be:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <xTimerCreateTimerTask+0x8c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070c6:	2301      	movs	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	613b      	str	r3, [r7, #16]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070e6:	697b      	ldr	r3, [r7, #20]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000fbc 	.word	0x20000fbc
 80070f4:	08008a80 	.word	0x08008a80
 80070f8:	08007235 	.word	0x08007235
 80070fc:	20000fc0 	.word	0x20000fc0

08007100 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08a      	sub	sp, #40	; 0x28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800710e:	2300      	movs	r3, #0
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	623b      	str	r3, [r7, #32]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800712e:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <xTimerGenericCommand+0x98>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d02a      	beq.n	800718c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b05      	cmp	r3, #5
 8007146:	dc18      	bgt.n	800717a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007148:	f7ff fdb4 	bl	8006cb4 <xTaskGetSchedulerState>
 800714c:	4603      	mov	r3, r0
 800714e:	2b02      	cmp	r3, #2
 8007150:	d109      	bne.n	8007166 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <xTimerGenericCommand+0x98>)
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f107 0110 	add.w	r1, r7, #16
 800715a:	2300      	movs	r3, #0
 800715c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715e:	f7fe f8e3 	bl	8005328 <xQueueGenericSend>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24
 8007164:	e012      	b.n	800718c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <xTimerGenericCommand+0x98>)
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f107 0110 	add.w	r1, r7, #16
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	f7fe f8d9 	bl	8005328 <xQueueGenericSend>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
 8007178:	e008      	b.n	800718c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800717a:	4b07      	ldr	r3, [pc, #28]	; (8007198 <xTimerGenericCommand+0x98>)
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	f107 0110 	add.w	r1, r7, #16
 8007182:	2300      	movs	r3, #0
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	f7fe f9cd 	bl	8005524 <xQueueGenericSendFromISR>
 800718a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800718e:	4618      	mov	r0, r3
 8007190:	3728      	adds	r7, #40	; 0x28
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000fbc 	.word	0x20000fbc

0800719c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a6:	4b22      	ldr	r3, [pc, #136]	; (8007230 <prvProcessExpiredTimer+0x94>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fd fe2f 	bl	8004e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d022      	beq.n	800720e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	18d1      	adds	r1, r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	6978      	ldr	r0, [r7, #20]
 80071d6:	f000 f8d1 	bl	800737c <prvInsertTimerInActiveList>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d01f      	beq.n	8007220 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071e0:	2300      	movs	r3, #0
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	2100      	movs	r1, #0
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	f7ff ff88 	bl	8007100 <xTimerGenericCommand>
 80071f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d113      	bne.n	8007220 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60fb      	str	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	b2da      	uxtb	r2, r3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	6978      	ldr	r0, [r7, #20]
 8007226:	4798      	blx	r3
}
 8007228:	bf00      	nop
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000fb4 	.word	0x20000fb4

08007234 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	4618      	mov	r0, r3
 8007242:	f000 f857 	bl	80072f4 <prvGetNextExpireTime>
 8007246:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f803 	bl	8007258 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007252:	f000 f8d5 	bl	8007400 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007256:	e7f1      	b.n	800723c <prvTimerTask+0x8>

08007258 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007262:	f7ff f92b 	bl	80064bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007266:	f107 0308 	add.w	r3, r7, #8
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f866 	bl	800733c <prvSampleTimeNow>
 8007270:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d130      	bne.n	80072da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <prvProcessTimerOrBlockTask+0x3c>
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	429a      	cmp	r2, r3
 8007284:	d806      	bhi.n	8007294 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007286:	f7ff f927 	bl	80064d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff ff85 	bl	800719c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007292:	e024      	b.n	80072de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d008      	beq.n	80072ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <prvProcessTimerOrBlockTask+0x90>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <prvProcessTimerOrBlockTask+0x50>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <prvProcessTimerOrBlockTask+0x52>
 80072a8:	2300      	movs	r3, #0
 80072aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <prvProcessTimerOrBlockTask+0x94>)
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	4619      	mov	r1, r3
 80072ba:	f7fe fea3 	bl	8006004 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072be:	f7ff f90b 	bl	80064d8 <xTaskResumeAll>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072c8:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <prvProcessTimerOrBlockTask+0x98>)
 80072ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	f3bf 8f6f 	isb	sy
}
 80072d8:	e001      	b.n	80072de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072da:	f7ff f8fd 	bl	80064d8 <xTaskResumeAll>
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000fb8 	.word	0x20000fb8
 80072ec:	20000fbc 	.word	0x20000fbc
 80072f0:	e000ed04 	.word	0xe000ed04

080072f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072fc:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <prvGetNextExpireTime+0x44>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <prvGetNextExpireTime+0x16>
 8007306:	2201      	movs	r2, #1
 8007308:	e000      	b.n	800730c <prvGetNextExpireTime+0x18>
 800730a:	2200      	movs	r2, #0
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d105      	bne.n	8007324 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007318:	4b07      	ldr	r3, [pc, #28]	; (8007338 <prvGetNextExpireTime+0x44>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	e001      	b.n	8007328 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007328:	68fb      	ldr	r3, [r7, #12]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000fb4 	.word	0x20000fb4

0800733c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007344:	f7ff f966 	bl	8006614 <xTaskGetTickCount>
 8007348:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <prvSampleTimeNow+0x3c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	d205      	bcs.n	8007360 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007354:	f000 f936 	bl	80075c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e002      	b.n	8007366 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007366:	4a04      	ldr	r2, [pc, #16]	; (8007378 <prvSampleTimeNow+0x3c>)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800736c:	68fb      	ldr	r3, [r7, #12]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000fc4 	.word	0x20000fc4

0800737c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d812      	bhi.n	80073c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d302      	bcc.n	80073b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e01b      	b.n	80073ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073b6:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <prvInsertTimerInActiveList+0x7c>)
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3304      	adds	r3, #4
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f7fd fcf0 	bl	8004da6 <vListInsert>
 80073c6:	e012      	b.n	80073ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d206      	bcs.n	80073de <prvInsertTimerInActiveList+0x62>
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e007      	b.n	80073ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073de:	4b07      	ldr	r3, [pc, #28]	; (80073fc <prvInsertTimerInActiveList+0x80>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7fd fcdc 	bl	8004da6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073ee:	697b      	ldr	r3, [r7, #20]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000fb8 	.word	0x20000fb8
 80073fc:	20000fb4 	.word	0x20000fb4

08007400 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	; 0x38
 8007404:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007406:	e0ca      	b.n	800759e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	da18      	bge.n	8007440 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	3304      	adds	r3, #4
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	61fb      	str	r3, [r7, #28]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007436:	6850      	ldr	r0, [r2, #4]
 8007438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743a:	6892      	ldr	r2, [r2, #8]
 800743c:	4611      	mov	r1, r2
 800743e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f2c0 80aa 	blt.w	800759c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	3304      	adds	r3, #4
 8007458:	4618      	mov	r0, r3
 800745a:	f7fd fcdd 	bl	8004e18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800745e:	463b      	mov	r3, r7
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff ff6b 	bl	800733c <prvSampleTimeNow>
 8007466:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b09      	cmp	r3, #9
 800746c:	f200 8097 	bhi.w	800759e <prvProcessReceivedCommands+0x19e>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <prvProcessReceivedCommands+0x78>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074a1 	.word	0x080074a1
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a1 	.word	0x080074a1
 8007484:	08007515 	.word	0x08007515
 8007488:	08007529 	.word	0x08007529
 800748c:	08007573 	.word	0x08007573
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074a1 	.word	0x080074a1
 8007498:	08007515 	.word	0x08007515
 800749c:	08007529 	.word	0x08007529
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	18d1      	adds	r1, r2, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c0:	f7ff ff5c 	bl	800737c <prvInsertTimerInActiveList>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d069      	beq.n	800759e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d05e      	beq.n	800759e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	441a      	add	r2, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	2300      	movs	r3, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f2:	f7ff fe05 	bl	8007100 <xTimerGenericCommand>
 80074f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d14f      	bne.n	800759e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	61bb      	str	r3, [r7, #24]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	b2da      	uxtb	r2, r3
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007526:	e03a      	b.n	800759e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	b2da      	uxtb	r2, r3
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	617b      	str	r3, [r7, #20]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	18d1      	adds	r1, r2, r3
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800756c:	f7ff ff06 	bl	800737c <prvInsertTimerInActiveList>
					break;
 8007570:	e015      	b.n	800759e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007582:	f000 fbdd 	bl	8007d40 <vPortFree>
 8007586:	e00a      	b.n	800759e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800758e:	f023 0301 	bic.w	r3, r3, #1
 8007592:	b2da      	uxtb	r2, r3
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800759a:	e000      	b.n	800759e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800759c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800759e:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <prvProcessReceivedCommands+0x1c0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	1d39      	adds	r1, r7, #4
 80075a4:	2200      	movs	r2, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe f8e4 	bl	8005774 <xQueueReceive>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f47f af2a 	bne.w	8007408 <prvProcessReceivedCommands+0x8>
	}
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	3730      	adds	r7, #48	; 0x30
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000fbc 	.word	0x20000fbc

080075c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ca:	e048      	b.n	800765e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075cc:	4b2d      	ldr	r3, [pc, #180]	; (8007684 <prvSwitchTimerLists+0xc0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d6:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <prvSwitchTimerLists+0xc0>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fd fc17 	bl	8004e18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d02e      	beq.n	800765e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	429a      	cmp	r2, r3
 8007610:	d90e      	bls.n	8007630 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800761e:	4b19      	ldr	r3, [pc, #100]	; (8007684 <prvSwitchTimerLists+0xc0>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f7fd fbbc 	bl	8004da6 <vListInsert>
 800762e:	e016      	b.n	800765e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007630:	2300      	movs	r3, #0
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	2100      	movs	r1, #0
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fd60 	bl	8007100 <xTimerGenericCommand>
 8007640:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	603b      	str	r3, [r7, #0]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <prvSwitchTimerLists+0xc0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1b1      	bne.n	80075cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <prvSwitchTimerLists+0xc0>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <prvSwitchTimerLists+0xc4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a04      	ldr	r2, [pc, #16]	; (8007684 <prvSwitchTimerLists+0xc0>)
 8007674:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007676:	4a04      	ldr	r2, [pc, #16]	; (8007688 <prvSwitchTimerLists+0xc4>)
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	6013      	str	r3, [r2, #0]
}
 800767c:	bf00      	nop
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000fb4 	.word	0x20000fb4
 8007688:	20000fb8 	.word	0x20000fb8

0800768c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007692:	f000 f967 	bl	8007964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d120      	bne.n	80076e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800769e:	4814      	ldr	r0, [pc, #80]	; (80076f0 <prvCheckForValidListAndQueue+0x64>)
 80076a0:	f7fd fb30 	bl	8004d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076a4:	4813      	ldr	r0, [pc, #76]	; (80076f4 <prvCheckForValidListAndQueue+0x68>)
 80076a6:	f7fd fb2d 	bl	8004d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076aa:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <prvCheckForValidListAndQueue+0x6c>)
 80076ac:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <prvCheckForValidListAndQueue+0x64>)
 80076ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <prvCheckForValidListAndQueue+0x70>)
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <prvCheckForValidListAndQueue+0x68>)
 80076b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076b6:	2300      	movs	r3, #0
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <prvCheckForValidListAndQueue+0x74>)
 80076bc:	4a11      	ldr	r2, [pc, #68]	; (8007704 <prvCheckForValidListAndQueue+0x78>)
 80076be:	2110      	movs	r1, #16
 80076c0:	200a      	movs	r0, #10
 80076c2:	f7fd fc3b 	bl	8004f3c <xQueueGenericCreateStatic>
 80076c6:	4603      	mov	r3, r0
 80076c8:	4a08      	ldr	r2, [pc, #32]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 80076ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076cc:	4b07      	ldr	r3, [pc, #28]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <prvCheckForValidListAndQueue+0x60>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	490b      	ldr	r1, [pc, #44]	; (8007708 <prvCheckForValidListAndQueue+0x7c>)
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fe fc3e 	bl	8005f5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076e0:	f000 f970 	bl	80079c4 <vPortExitCritical>
}
 80076e4:	bf00      	nop
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000fbc 	.word	0x20000fbc
 80076f0:	20000f8c 	.word	0x20000f8c
 80076f4:	20000fa0 	.word	0x20000fa0
 80076f8:	20000fb4 	.word	0x20000fb4
 80076fc:	20000fb8 	.word	0x20000fb8
 8007700:	20001068 	.word	0x20001068
 8007704:	20000fc8 	.word	0x20000fc8
 8007708:	08008a88 	.word	0x08008a88

0800770c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3b04      	subs	r3, #4
 800771c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b04      	subs	r3, #4
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f023 0201 	bic.w	r2, r3, #1
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b04      	subs	r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800773c:	4a0c      	ldr	r2, [pc, #48]	; (8007770 <pxPortInitialiseStack+0x64>)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3b14      	subs	r3, #20
 8007746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3b04      	subs	r3, #4
 8007752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f06f 0202 	mvn.w	r2, #2
 800775a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b20      	subs	r3, #32
 8007760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	08007775 	.word	0x08007775

08007774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800777e:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <prvTaskExitError+0x54>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d00a      	beq.n	800779e <prvTaskExitError+0x2a>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	60fb      	str	r3, [r7, #12]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <prvTaskExitError+0x28>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	60bb      	str	r3, [r7, #8]
}
 80077b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077b2:	bf00      	nop
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0fc      	beq.n	80077b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	2000000c 	.word	0x2000000c
 80077cc:	00000000 	.word	0x00000000

080077d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <pxCurrentTCBConst2>)
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	6808      	ldr	r0, [r1, #0]
 80077d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077da:	f380 8809 	msr	PSP, r0
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8811 	msr	BASEPRI, r0
 80077ea:	4770      	bx	lr
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst2>:
 80077f0:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077f8:	4808      	ldr	r0, [pc, #32]	; (800781c <prvPortStartFirstTask+0x24>)
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	6800      	ldr	r0, [r0, #0]
 80077fe:	f380 8808 	msr	MSP, r0
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8814 	msr	CONTROL, r0
 800780a:	b662      	cpsie	i
 800780c:	b661      	cpsie	f
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	df00      	svc	0
 8007818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800781a:	bf00      	nop
 800781c:	e000ed08 	.word	0xe000ed08

08007820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007826:	4b46      	ldr	r3, [pc, #280]	; (8007940 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a46      	ldr	r2, [pc, #280]	; (8007944 <xPortStartScheduler+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x26>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	613b      	str	r3, [r7, #16]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007846:	4b3e      	ldr	r3, [pc, #248]	; (8007940 <xPortStartScheduler+0x120>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a3f      	ldr	r2, [pc, #252]	; (8007948 <xPortStartScheduler+0x128>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10a      	bne.n	8007866 <xPortStartScheduler+0x46>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007866:	4b39      	ldr	r3, [pc, #228]	; (800794c <xPortStartScheduler+0x12c>)
 8007868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <xPortStartScheduler+0x130>)
 800788c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800788e:	4b31      	ldr	r3, [pc, #196]	; (8007954 <xPortStartScheduler+0x134>)
 8007890:	2207      	movs	r2, #7
 8007892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007894:	e009      	b.n	80078aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007896:	4b2f      	ldr	r3, [pc, #188]	; (8007954 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	4a2d      	ldr	r2, [pc, #180]	; (8007954 <xPortStartScheduler+0x134>)
 800789e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d0ef      	beq.n	8007896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078b6:	4b27      	ldr	r3, [pc, #156]	; (8007954 <xPortStartScheduler+0x134>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f1c3 0307 	rsb	r3, r3, #7
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d00a      	beq.n	80078d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60bb      	str	r3, [r7, #8]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <xPortStartScheduler+0x134>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <xPortStartScheduler+0x134>)
 80078e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078e2:	4b1c      	ldr	r3, [pc, #112]	; (8007954 <xPortStartScheduler+0x134>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <xPortStartScheduler+0x134>)
 80078ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078f6:	4b18      	ldr	r3, [pc, #96]	; (8007958 <xPortStartScheduler+0x138>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a17      	ldr	r2, [pc, #92]	; (8007958 <xPortStartScheduler+0x138>)
 80078fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <xPortStartScheduler+0x138>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a14      	ldr	r2, [pc, #80]	; (8007958 <xPortStartScheduler+0x138>)
 8007908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800790c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800790e:	f000 f8dd 	bl	8007acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007912:	4b12      	ldr	r3, [pc, #72]	; (800795c <xPortStartScheduler+0x13c>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007918:	f000 f8fc 	bl	8007b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800791c:	4b10      	ldr	r3, [pc, #64]	; (8007960 <xPortStartScheduler+0x140>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a0f      	ldr	r2, [pc, #60]	; (8007960 <xPortStartScheduler+0x140>)
 8007922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007928:	f7ff ff66 	bl	80077f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800792c:	f7fe ff3c 	bl	80067a8 <vTaskSwitchContext>
	prvTaskExitError();
 8007930:	f7ff ff20 	bl	8007774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed00 	.word	0xe000ed00
 8007944:	410fc271 	.word	0x410fc271
 8007948:	410fc270 	.word	0x410fc270
 800794c:	e000e400 	.word	0xe000e400
 8007950:	200010b8 	.word	0x200010b8
 8007954:	200010bc 	.word	0x200010bc
 8007958:	e000ed20 	.word	0xe000ed20
 800795c:	2000000c 	.word	0x2000000c
 8007960:	e000ef34 	.word	0xe000ef34

08007964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	607b      	str	r3, [r7, #4]
}
 800797c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800797e:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <vPortEnterCritical+0x58>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a0d      	ldr	r2, [pc, #52]	; (80079bc <vPortEnterCritical+0x58>)
 8007986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <vPortEnterCritical+0x58>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10f      	bne.n	80079b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <vPortEnterCritical+0x5c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	603b      	str	r3, [r7, #0]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <vPortEnterCritical+0x4a>
	}
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	2000000c 	.word	0x2000000c
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <vPortExitCritical+0x50>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <vPortExitCritical+0x24>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	607b      	str	r3, [r7, #4]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <vPortExitCritical+0x50>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <vPortExitCritical+0x50>)
 80079f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079f2:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <vPortExitCritical+0x50>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <vPortExitCritical+0x42>
 80079fa:	2300      	movs	r3, #0
 80079fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f383 8811 	msr	BASEPRI, r3
}
 8007a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	2000000c 	.word	0x2000000c
	...

08007a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a20:	f3ef 8009 	mrs	r0, PSP
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <pxCurrentTCBConst>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f01e 0f10 	tst.w	lr, #16
 8007a30:	bf08      	it	eq
 8007a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	6010      	str	r0, [r2, #0]
 8007a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a44:	f380 8811 	msr	BASEPRI, r0
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f7fe feaa 	bl	80067a8 <vTaskSwitchContext>
 8007a54:	f04f 0000 	mov.w	r0, #0
 8007a58:	f380 8811 	msr	BASEPRI, r0
 8007a5c:	bc09      	pop	{r0, r3}
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	6808      	ldr	r0, [r1, #0]
 8007a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a66:	f01e 0f10 	tst.w	lr, #16
 8007a6a:	bf08      	it	eq
 8007a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a70:	f380 8809 	msr	PSP, r0
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst>:
 8007a80:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
}
 8007aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007aa2:	f7fe fdc7 	bl	8006634 <xTaskIncrementTick>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aac:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <xPortSysTickHandler+0x40>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <vPortSetupTimerInterrupt+0x34>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <vPortSetupTimerInterrupt+0x38>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <vPortSetupTimerInterrupt+0x3c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <vPortSetupTimerInterrupt+0x40>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <vPortSetupTimerInterrupt+0x44>)
 8007aea:	3b01      	subs	r3, #1
 8007aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aee:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <vPortSetupTimerInterrupt+0x34>)
 8007af0:	2207      	movs	r2, #7
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	e000e010 	.word	0xe000e010
 8007b04:	e000e018 	.word	0xe000e018
 8007b08:	20000000 	.word	0x20000000
 8007b0c:	10624dd3 	.word	0x10624dd3
 8007b10:	e000e014 	.word	0xe000e014

08007b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b24 <vPortEnableVFP+0x10>
 8007b18:	6801      	ldr	r1, [r0, #0]
 8007b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b1e:	6001      	str	r1, [r0, #0]
 8007b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b22:	bf00      	nop
 8007b24:	e000ed88 	.word	0xe000ed88

08007b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b2e:	f3ef 8305 	mrs	r3, IPSR
 8007b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b0f      	cmp	r3, #15
 8007b38:	d914      	bls.n	8007b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b3a:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <vPortValidateInterruptPriority+0x70>)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b44:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <vPortValidateInterruptPriority+0x74>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	7afa      	ldrb	r2, [r7, #11]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d20a      	bcs.n	8007b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b64:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <vPortValidateInterruptPriority+0x78>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <vPortValidateInterruptPriority+0x7c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d90a      	bls.n	8007b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	603b      	str	r3, [r7, #0]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <vPortValidateInterruptPriority+0x60>
	}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	e000e3f0 	.word	0xe000e3f0
 8007b9c:	200010b8 	.word	0x200010b8
 8007ba0:	e000ed0c 	.word	0xe000ed0c
 8007ba4:	200010bc 	.word	0x200010bc

08007ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bb4:	f7fe fc82 	bl	80064bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bb8:	4b5b      	ldr	r3, [pc, #364]	; (8007d28 <pvPortMalloc+0x180>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bc0:	f000 f920 	bl	8007e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bc4:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <pvPortMalloc+0x184>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 8093 	bne.w	8007cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01d      	beq.n	8007c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bd8:	2208      	movs	r2, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4413      	add	r3, r2
 8007bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d014      	beq.n	8007c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f023 0307 	bic.w	r3, r3, #7
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <pvPortMalloc+0x6c>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	617b      	str	r3, [r7, #20]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d06e      	beq.n	8007cf8 <pvPortMalloc+0x150>
 8007c1a:	4b45      	ldr	r3, [pc, #276]	; (8007d30 <pvPortMalloc+0x188>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d869      	bhi.n	8007cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c24:	4b43      	ldr	r3, [pc, #268]	; (8007d34 <pvPortMalloc+0x18c>)
 8007c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c28:	4b42      	ldr	r3, [pc, #264]	; (8007d34 <pvPortMalloc+0x18c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c2e:	e004      	b.n	8007c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d903      	bls.n	8007c4c <pvPortMalloc+0xa4>
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f1      	bne.n	8007c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c4c:	4b36      	ldr	r3, [pc, #216]	; (8007d28 <pvPortMalloc+0x180>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d050      	beq.n	8007cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	2308      	movs	r3, #8
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d91f      	bls.n	8007cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	613b      	str	r3, [r7, #16]
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cb2:	69b8      	ldr	r0, [r7, #24]
 8007cb4:	f000 f908 	bl	8007ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cb8:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <pvPortMalloc+0x188>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <pvPortMalloc+0x188>)
 8007cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <pvPortMalloc+0x188>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <pvPortMalloc+0x190>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d203      	bcs.n	8007cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <pvPortMalloc+0x188>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <pvPortMalloc+0x190>)
 8007cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <pvPortMalloc+0x184>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <pvPortMalloc+0x194>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	4a11      	ldr	r2, [pc, #68]	; (8007d3c <pvPortMalloc+0x194>)
 8007cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cf8:	f7fe fbee 	bl	80064d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <pvPortMalloc+0x174>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60fb      	str	r3, [r7, #12]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <pvPortMalloc+0x172>
	return pvReturn;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	200050c8 	.word	0x200050c8
 8007d2c:	200050dc 	.word	0x200050dc
 8007d30:	200050cc 	.word	0x200050cc
 8007d34:	200050c0 	.word	0x200050c0
 8007d38:	200050d0 	.word	0x200050d0
 8007d3c:	200050d4 	.word	0x200050d4

08007d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d04d      	beq.n	8007dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d52:	2308      	movs	r3, #8
 8007d54:	425b      	negs	r3, r3
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <vPortFree+0xb8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <vPortFree+0x44>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	60fb      	str	r3, [r7, #12]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <vPortFree+0x62>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60bb      	str	r3, [r7, #8]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <vPortFree+0xb8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01e      	beq.n	8007dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11a      	bne.n	8007dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <vPortFree+0xb8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dc8:	f7fe fb78 	bl	80064bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <vPortFree+0xbc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <vPortFree+0xbc>)
 8007dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f000 f874 	bl	8007ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <vPortFree+0xc0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a06      	ldr	r2, [pc, #24]	; (8007e00 <vPortFree+0xc0>)
 8007de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dea:	f7fe fb75 	bl	80064d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	200050dc 	.word	0x200050dc
 8007dfc:	200050cc 	.word	0x200050cc
 8007e00:	200050d8 	.word	0x200050d8

08007e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e10:	4b27      	ldr	r3, [pc, #156]	; (8007eb0 <prvHeapInit+0xac>)
 8007e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00c      	beq.n	8007e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3307      	adds	r3, #7
 8007e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <prvHeapInit+0xac>)
 8007e34:	4413      	add	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <prvHeapInit+0xb0>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e42:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <prvHeapInit+0xb0>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e50:	2208      	movs	r2, #8
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4a15      	ldr	r2, [pc, #84]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e84:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <prvHeapInit+0xb4>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <prvHeapInit+0xb8>)
 8007e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <prvHeapInit+0xbc>)
 8007e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <prvHeapInit+0xc0>)
 8007e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ea2:	601a      	str	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	200010c0 	.word	0x200010c0
 8007eb4:	200050c0 	.word	0x200050c0
 8007eb8:	200050c8 	.word	0x200050c8
 8007ebc:	200050d0 	.word	0x200050d0
 8007ec0:	200050cc 	.word	0x200050cc
 8007ec4:	200050dc 	.word	0x200050dc

08007ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ed0:	4b28      	ldr	r3, [pc, #160]	; (8007f74 <prvInsertBlockIntoFreeList+0xac>)
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	e002      	b.n	8007edc <prvInsertBlockIntoFreeList+0x14>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d8f7      	bhi.n	8007ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d108      	bne.n	8007f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	441a      	add	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	441a      	add	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d118      	bne.n	8007f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <prvInsertBlockIntoFreeList+0xb0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d00d      	beq.n	8007f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	441a      	add	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e008      	b.n	8007f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <prvInsertBlockIntoFreeList+0xb0>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	e003      	b.n	8007f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d002      	beq.n	8007f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	200050c0 	.word	0x200050c0
 8007f78:	200050c8 	.word	0x200050c8

08007f7c <__errno>:
 8007f7c:	4b01      	ldr	r3, [pc, #4]	; (8007f84 <__errno+0x8>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000010 	.word	0x20000010

08007f88 <__libc_init_array>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	4d0d      	ldr	r5, [pc, #52]	; (8007fc0 <__libc_init_array+0x38>)
 8007f8c:	4c0d      	ldr	r4, [pc, #52]	; (8007fc4 <__libc_init_array+0x3c>)
 8007f8e:	1b64      	subs	r4, r4, r5
 8007f90:	10a4      	asrs	r4, r4, #2
 8007f92:	2600      	movs	r6, #0
 8007f94:	42a6      	cmp	r6, r4
 8007f96:	d109      	bne.n	8007fac <__libc_init_array+0x24>
 8007f98:	4d0b      	ldr	r5, [pc, #44]	; (8007fc8 <__libc_init_array+0x40>)
 8007f9a:	4c0c      	ldr	r4, [pc, #48]	; (8007fcc <__libc_init_array+0x44>)
 8007f9c:	f000 fd28 	bl	80089f0 <_init>
 8007fa0:	1b64      	subs	r4, r4, r5
 8007fa2:	10a4      	asrs	r4, r4, #2
 8007fa4:	2600      	movs	r6, #0
 8007fa6:	42a6      	cmp	r6, r4
 8007fa8:	d105      	bne.n	8007fb6 <__libc_init_array+0x2e>
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb0:	4798      	blx	r3
 8007fb2:	3601      	adds	r6, #1
 8007fb4:	e7ee      	b.n	8007f94 <__libc_init_array+0xc>
 8007fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fba:	4798      	blx	r3
 8007fbc:	3601      	adds	r6, #1
 8007fbe:	e7f2      	b.n	8007fa6 <__libc_init_array+0x1e>
 8007fc0:	08008bac 	.word	0x08008bac
 8007fc4:	08008bac 	.word	0x08008bac
 8007fc8:	08008bac 	.word	0x08008bac
 8007fcc:	08008bb0 	.word	0x08008bb0

08007fd0 <__retarget_lock_acquire_recursive>:
 8007fd0:	4770      	bx	lr

08007fd2 <__retarget_lock_release_recursive>:
 8007fd2:	4770      	bx	lr

08007fd4 <malloc>:
 8007fd4:	4b02      	ldr	r3, [pc, #8]	; (8007fe0 <malloc+0xc>)
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	f000 b88d 	b.w	80080f8 <_malloc_r>
 8007fde:	bf00      	nop
 8007fe0:	20000010 	.word	0x20000010

08007fe4 <free>:
 8007fe4:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <free+0xc>)
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f000 b819 	b.w	8008020 <_free_r>
 8007fee:	bf00      	nop
 8007ff0:	20000010 	.word	0x20000010

08007ff4 <memcpy>:
 8007ff4:	440a      	add	r2, r1
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ffc:	d100      	bne.n	8008000 <memcpy+0xc>
 8007ffe:	4770      	bx	lr
 8008000:	b510      	push	{r4, lr}
 8008002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800a:	4291      	cmp	r1, r2
 800800c:	d1f9      	bne.n	8008002 <memcpy+0xe>
 800800e:	bd10      	pop	{r4, pc}

08008010 <memset>:
 8008010:	4402      	add	r2, r0
 8008012:	4603      	mov	r3, r0
 8008014:	4293      	cmp	r3, r2
 8008016:	d100      	bne.n	800801a <memset+0xa>
 8008018:	4770      	bx	lr
 800801a:	f803 1b01 	strb.w	r1, [r3], #1
 800801e:	e7f9      	b.n	8008014 <memset+0x4>

08008020 <_free_r>:
 8008020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008022:	2900      	cmp	r1, #0
 8008024:	d044      	beq.n	80080b0 <_free_r+0x90>
 8008026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800802a:	9001      	str	r0, [sp, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f1a1 0404 	sub.w	r4, r1, #4
 8008032:	bfb8      	it	lt
 8008034:	18e4      	addlt	r4, r4, r3
 8008036:	f000 f98d 	bl	8008354 <__malloc_lock>
 800803a:	4a1e      	ldr	r2, [pc, #120]	; (80080b4 <_free_r+0x94>)
 800803c:	9801      	ldr	r0, [sp, #4]
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	b933      	cbnz	r3, 8008050 <_free_r+0x30>
 8008042:	6063      	str	r3, [r4, #4]
 8008044:	6014      	str	r4, [r2, #0]
 8008046:	b003      	add	sp, #12
 8008048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800804c:	f000 b988 	b.w	8008360 <__malloc_unlock>
 8008050:	42a3      	cmp	r3, r4
 8008052:	d908      	bls.n	8008066 <_free_r+0x46>
 8008054:	6825      	ldr	r5, [r4, #0]
 8008056:	1961      	adds	r1, r4, r5
 8008058:	428b      	cmp	r3, r1
 800805a:	bf01      	itttt	eq
 800805c:	6819      	ldreq	r1, [r3, #0]
 800805e:	685b      	ldreq	r3, [r3, #4]
 8008060:	1949      	addeq	r1, r1, r5
 8008062:	6021      	streq	r1, [r4, #0]
 8008064:	e7ed      	b.n	8008042 <_free_r+0x22>
 8008066:	461a      	mov	r2, r3
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	b10b      	cbz	r3, 8008070 <_free_r+0x50>
 800806c:	42a3      	cmp	r3, r4
 800806e:	d9fa      	bls.n	8008066 <_free_r+0x46>
 8008070:	6811      	ldr	r1, [r2, #0]
 8008072:	1855      	adds	r5, r2, r1
 8008074:	42a5      	cmp	r5, r4
 8008076:	d10b      	bne.n	8008090 <_free_r+0x70>
 8008078:	6824      	ldr	r4, [r4, #0]
 800807a:	4421      	add	r1, r4
 800807c:	1854      	adds	r4, r2, r1
 800807e:	42a3      	cmp	r3, r4
 8008080:	6011      	str	r1, [r2, #0]
 8008082:	d1e0      	bne.n	8008046 <_free_r+0x26>
 8008084:	681c      	ldr	r4, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	6053      	str	r3, [r2, #4]
 800808a:	4421      	add	r1, r4
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	e7da      	b.n	8008046 <_free_r+0x26>
 8008090:	d902      	bls.n	8008098 <_free_r+0x78>
 8008092:	230c      	movs	r3, #12
 8008094:	6003      	str	r3, [r0, #0]
 8008096:	e7d6      	b.n	8008046 <_free_r+0x26>
 8008098:	6825      	ldr	r5, [r4, #0]
 800809a:	1961      	adds	r1, r4, r5
 800809c:	428b      	cmp	r3, r1
 800809e:	bf04      	itt	eq
 80080a0:	6819      	ldreq	r1, [r3, #0]
 80080a2:	685b      	ldreq	r3, [r3, #4]
 80080a4:	6063      	str	r3, [r4, #4]
 80080a6:	bf04      	itt	eq
 80080a8:	1949      	addeq	r1, r1, r5
 80080aa:	6021      	streq	r1, [r4, #0]
 80080ac:	6054      	str	r4, [r2, #4]
 80080ae:	e7ca      	b.n	8008046 <_free_r+0x26>
 80080b0:	b003      	add	sp, #12
 80080b2:	bd30      	pop	{r4, r5, pc}
 80080b4:	200050e4 	.word	0x200050e4

080080b8 <sbrk_aligned>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	4e0e      	ldr	r6, [pc, #56]	; (80080f4 <sbrk_aligned+0x3c>)
 80080bc:	460c      	mov	r4, r1
 80080be:	6831      	ldr	r1, [r6, #0]
 80080c0:	4605      	mov	r5, r0
 80080c2:	b911      	cbnz	r1, 80080ca <sbrk_aligned+0x12>
 80080c4:	f000 f8f6 	bl	80082b4 <_sbrk_r>
 80080c8:	6030      	str	r0, [r6, #0]
 80080ca:	4621      	mov	r1, r4
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 f8f1 	bl	80082b4 <_sbrk_r>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	d00a      	beq.n	80080ec <sbrk_aligned+0x34>
 80080d6:	1cc4      	adds	r4, r0, #3
 80080d8:	f024 0403 	bic.w	r4, r4, #3
 80080dc:	42a0      	cmp	r0, r4
 80080de:	d007      	beq.n	80080f0 <sbrk_aligned+0x38>
 80080e0:	1a21      	subs	r1, r4, r0
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 f8e6 	bl	80082b4 <_sbrk_r>
 80080e8:	3001      	adds	r0, #1
 80080ea:	d101      	bne.n	80080f0 <sbrk_aligned+0x38>
 80080ec:	f04f 34ff 	mov.w	r4, #4294967295
 80080f0:	4620      	mov	r0, r4
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	200050e8 	.word	0x200050e8

080080f8 <_malloc_r>:
 80080f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fc:	1ccd      	adds	r5, r1, #3
 80080fe:	f025 0503 	bic.w	r5, r5, #3
 8008102:	3508      	adds	r5, #8
 8008104:	2d0c      	cmp	r5, #12
 8008106:	bf38      	it	cc
 8008108:	250c      	movcc	r5, #12
 800810a:	2d00      	cmp	r5, #0
 800810c:	4607      	mov	r7, r0
 800810e:	db01      	blt.n	8008114 <_malloc_r+0x1c>
 8008110:	42a9      	cmp	r1, r5
 8008112:	d905      	bls.n	8008120 <_malloc_r+0x28>
 8008114:	230c      	movs	r3, #12
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	2600      	movs	r6, #0
 800811a:	4630      	mov	r0, r6
 800811c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008120:	4e2e      	ldr	r6, [pc, #184]	; (80081dc <_malloc_r+0xe4>)
 8008122:	f000 f917 	bl	8008354 <__malloc_lock>
 8008126:	6833      	ldr	r3, [r6, #0]
 8008128:	461c      	mov	r4, r3
 800812a:	bb34      	cbnz	r4, 800817a <_malloc_r+0x82>
 800812c:	4629      	mov	r1, r5
 800812e:	4638      	mov	r0, r7
 8008130:	f7ff ffc2 	bl	80080b8 <sbrk_aligned>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	4604      	mov	r4, r0
 8008138:	d14d      	bne.n	80081d6 <_malloc_r+0xde>
 800813a:	6834      	ldr	r4, [r6, #0]
 800813c:	4626      	mov	r6, r4
 800813e:	2e00      	cmp	r6, #0
 8008140:	d140      	bne.n	80081c4 <_malloc_r+0xcc>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	4631      	mov	r1, r6
 8008146:	4638      	mov	r0, r7
 8008148:	eb04 0803 	add.w	r8, r4, r3
 800814c:	f000 f8b2 	bl	80082b4 <_sbrk_r>
 8008150:	4580      	cmp	r8, r0
 8008152:	d13a      	bne.n	80081ca <_malloc_r+0xd2>
 8008154:	6821      	ldr	r1, [r4, #0]
 8008156:	3503      	adds	r5, #3
 8008158:	1a6d      	subs	r5, r5, r1
 800815a:	f025 0503 	bic.w	r5, r5, #3
 800815e:	3508      	adds	r5, #8
 8008160:	2d0c      	cmp	r5, #12
 8008162:	bf38      	it	cc
 8008164:	250c      	movcc	r5, #12
 8008166:	4629      	mov	r1, r5
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff ffa5 	bl	80080b8 <sbrk_aligned>
 800816e:	3001      	adds	r0, #1
 8008170:	d02b      	beq.n	80081ca <_malloc_r+0xd2>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	442b      	add	r3, r5
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	e00e      	b.n	8008198 <_malloc_r+0xa0>
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	1b52      	subs	r2, r2, r5
 800817e:	d41e      	bmi.n	80081be <_malloc_r+0xc6>
 8008180:	2a0b      	cmp	r2, #11
 8008182:	d916      	bls.n	80081b2 <_malloc_r+0xba>
 8008184:	1961      	adds	r1, r4, r5
 8008186:	42a3      	cmp	r3, r4
 8008188:	6025      	str	r5, [r4, #0]
 800818a:	bf18      	it	ne
 800818c:	6059      	strne	r1, [r3, #4]
 800818e:	6863      	ldr	r3, [r4, #4]
 8008190:	bf08      	it	eq
 8008192:	6031      	streq	r1, [r6, #0]
 8008194:	5162      	str	r2, [r4, r5]
 8008196:	604b      	str	r3, [r1, #4]
 8008198:	4638      	mov	r0, r7
 800819a:	f104 060b 	add.w	r6, r4, #11
 800819e:	f000 f8df 	bl	8008360 <__malloc_unlock>
 80081a2:	f026 0607 	bic.w	r6, r6, #7
 80081a6:	1d23      	adds	r3, r4, #4
 80081a8:	1af2      	subs	r2, r6, r3
 80081aa:	d0b6      	beq.n	800811a <_malloc_r+0x22>
 80081ac:	1b9b      	subs	r3, r3, r6
 80081ae:	50a3      	str	r3, [r4, r2]
 80081b0:	e7b3      	b.n	800811a <_malloc_r+0x22>
 80081b2:	6862      	ldr	r2, [r4, #4]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	bf0c      	ite	eq
 80081b8:	6032      	streq	r2, [r6, #0]
 80081ba:	605a      	strne	r2, [r3, #4]
 80081bc:	e7ec      	b.n	8008198 <_malloc_r+0xa0>
 80081be:	4623      	mov	r3, r4
 80081c0:	6864      	ldr	r4, [r4, #4]
 80081c2:	e7b2      	b.n	800812a <_malloc_r+0x32>
 80081c4:	4634      	mov	r4, r6
 80081c6:	6876      	ldr	r6, [r6, #4]
 80081c8:	e7b9      	b.n	800813e <_malloc_r+0x46>
 80081ca:	230c      	movs	r3, #12
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	4638      	mov	r0, r7
 80081d0:	f000 f8c6 	bl	8008360 <__malloc_unlock>
 80081d4:	e7a1      	b.n	800811a <_malloc_r+0x22>
 80081d6:	6025      	str	r5, [r4, #0]
 80081d8:	e7de      	b.n	8008198 <_malloc_r+0xa0>
 80081da:	bf00      	nop
 80081dc:	200050e4 	.word	0x200050e4

080081e0 <cleanup_glue>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	460c      	mov	r4, r1
 80081e4:	6809      	ldr	r1, [r1, #0]
 80081e6:	4605      	mov	r5, r0
 80081e8:	b109      	cbz	r1, 80081ee <cleanup_glue+0xe>
 80081ea:	f7ff fff9 	bl	80081e0 <cleanup_glue>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081f6:	f7ff bf13 	b.w	8008020 <_free_r>
	...

080081fc <_reclaim_reent>:
 80081fc:	4b2c      	ldr	r3, [pc, #176]	; (80082b0 <_reclaim_reent+0xb4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4283      	cmp	r3, r0
 8008202:	b570      	push	{r4, r5, r6, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	d051      	beq.n	80082ac <_reclaim_reent+0xb0>
 8008208:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800820a:	b143      	cbz	r3, 800821e <_reclaim_reent+0x22>
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d14a      	bne.n	80082a8 <_reclaim_reent+0xac>
 8008212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008214:	6819      	ldr	r1, [r3, #0]
 8008216:	b111      	cbz	r1, 800821e <_reclaim_reent+0x22>
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff ff01 	bl	8008020 <_free_r>
 800821e:	6961      	ldr	r1, [r4, #20]
 8008220:	b111      	cbz	r1, 8008228 <_reclaim_reent+0x2c>
 8008222:	4620      	mov	r0, r4
 8008224:	f7ff fefc 	bl	8008020 <_free_r>
 8008228:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800822a:	b111      	cbz	r1, 8008232 <_reclaim_reent+0x36>
 800822c:	4620      	mov	r0, r4
 800822e:	f7ff fef7 	bl	8008020 <_free_r>
 8008232:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008234:	b111      	cbz	r1, 800823c <_reclaim_reent+0x40>
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff fef2 	bl	8008020 <_free_r>
 800823c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800823e:	b111      	cbz	r1, 8008246 <_reclaim_reent+0x4a>
 8008240:	4620      	mov	r0, r4
 8008242:	f7ff feed 	bl	8008020 <_free_r>
 8008246:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008248:	b111      	cbz	r1, 8008250 <_reclaim_reent+0x54>
 800824a:	4620      	mov	r0, r4
 800824c:	f7ff fee8 	bl	8008020 <_free_r>
 8008250:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008252:	b111      	cbz	r1, 800825a <_reclaim_reent+0x5e>
 8008254:	4620      	mov	r0, r4
 8008256:	f7ff fee3 	bl	8008020 <_free_r>
 800825a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800825c:	b111      	cbz	r1, 8008264 <_reclaim_reent+0x68>
 800825e:	4620      	mov	r0, r4
 8008260:	f7ff fede 	bl	8008020 <_free_r>
 8008264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008266:	b111      	cbz	r1, 800826e <_reclaim_reent+0x72>
 8008268:	4620      	mov	r0, r4
 800826a:	f7ff fed9 	bl	8008020 <_free_r>
 800826e:	69a3      	ldr	r3, [r4, #24]
 8008270:	b1e3      	cbz	r3, 80082ac <_reclaim_reent+0xb0>
 8008272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008274:	4620      	mov	r0, r4
 8008276:	4798      	blx	r3
 8008278:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800827a:	b1b9      	cbz	r1, 80082ac <_reclaim_reent+0xb0>
 800827c:	4620      	mov	r0, r4
 800827e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008282:	f7ff bfad 	b.w	80081e0 <cleanup_glue>
 8008286:	5949      	ldr	r1, [r1, r5]
 8008288:	b941      	cbnz	r1, 800829c <_reclaim_reent+0xa0>
 800828a:	3504      	adds	r5, #4
 800828c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800828e:	2d80      	cmp	r5, #128	; 0x80
 8008290:	68d9      	ldr	r1, [r3, #12]
 8008292:	d1f8      	bne.n	8008286 <_reclaim_reent+0x8a>
 8008294:	4620      	mov	r0, r4
 8008296:	f7ff fec3 	bl	8008020 <_free_r>
 800829a:	e7ba      	b.n	8008212 <_reclaim_reent+0x16>
 800829c:	680e      	ldr	r6, [r1, #0]
 800829e:	4620      	mov	r0, r4
 80082a0:	f7ff febe 	bl	8008020 <_free_r>
 80082a4:	4631      	mov	r1, r6
 80082a6:	e7ef      	b.n	8008288 <_reclaim_reent+0x8c>
 80082a8:	2500      	movs	r5, #0
 80082aa:	e7ef      	b.n	800828c <_reclaim_reent+0x90>
 80082ac:	bd70      	pop	{r4, r5, r6, pc}
 80082ae:	bf00      	nop
 80082b0:	20000010 	.word	0x20000010

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	; (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f9 fa26 	bl	8001710 <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	200050ec 	.word	0x200050ec

080082d4 <sniprintf>:
 80082d4:	b40c      	push	{r2, r3}
 80082d6:	b530      	push	{r4, r5, lr}
 80082d8:	4b17      	ldr	r3, [pc, #92]	; (8008338 <sniprintf+0x64>)
 80082da:	1e0c      	subs	r4, r1, #0
 80082dc:	681d      	ldr	r5, [r3, #0]
 80082de:	b09d      	sub	sp, #116	; 0x74
 80082e0:	da08      	bge.n	80082f4 <sniprintf+0x20>
 80082e2:	238b      	movs	r3, #139	; 0x8b
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ea:	b01d      	add	sp, #116	; 0x74
 80082ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082f0:	b002      	add	sp, #8
 80082f2:	4770      	bx	lr
 80082f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80082f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082fc:	bf14      	ite	ne
 80082fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008302:	4623      	moveq	r3, r4
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	9307      	str	r3, [sp, #28]
 8008308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800830c:	9002      	str	r0, [sp, #8]
 800830e:	9006      	str	r0, [sp, #24]
 8008310:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008314:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008316:	ab21      	add	r3, sp, #132	; 0x84
 8008318:	a902      	add	r1, sp, #8
 800831a:	4628      	mov	r0, r5
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	f000 f881 	bl	8008424 <_svfiprintf_r>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	bfbc      	itt	lt
 8008326:	238b      	movlt	r3, #139	; 0x8b
 8008328:	602b      	strlt	r3, [r5, #0]
 800832a:	2c00      	cmp	r4, #0
 800832c:	d0dd      	beq.n	80082ea <sniprintf+0x16>
 800832e:	9b02      	ldr	r3, [sp, #8]
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e7d9      	b.n	80082ea <sniprintf+0x16>
 8008336:	bf00      	nop
 8008338:	20000010 	.word	0x20000010

0800833c <strnlen>:
 800833c:	b510      	push	{r4, lr}
 800833e:	4602      	mov	r2, r0
 8008340:	4401      	add	r1, r0
 8008342:	428a      	cmp	r2, r1
 8008344:	4613      	mov	r3, r2
 8008346:	d003      	beq.n	8008350 <strnlen+0x14>
 8008348:	781c      	ldrb	r4, [r3, #0]
 800834a:	3201      	adds	r2, #1
 800834c:	2c00      	cmp	r4, #0
 800834e:	d1f8      	bne.n	8008342 <strnlen+0x6>
 8008350:	1a18      	subs	r0, r3, r0
 8008352:	bd10      	pop	{r4, pc}

08008354 <__malloc_lock>:
 8008354:	4801      	ldr	r0, [pc, #4]	; (800835c <__malloc_lock+0x8>)
 8008356:	f7ff be3b 	b.w	8007fd0 <__retarget_lock_acquire_recursive>
 800835a:	bf00      	nop
 800835c:	200050e0 	.word	0x200050e0

08008360 <__malloc_unlock>:
 8008360:	4801      	ldr	r0, [pc, #4]	; (8008368 <__malloc_unlock+0x8>)
 8008362:	f7ff be36 	b.w	8007fd2 <__retarget_lock_release_recursive>
 8008366:	bf00      	nop
 8008368:	200050e0 	.word	0x200050e0

0800836c <__ssputs_r>:
 800836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	688e      	ldr	r6, [r1, #8]
 8008372:	429e      	cmp	r6, r3
 8008374:	4682      	mov	sl, r0
 8008376:	460c      	mov	r4, r1
 8008378:	4690      	mov	r8, r2
 800837a:	461f      	mov	r7, r3
 800837c:	d838      	bhi.n	80083f0 <__ssputs_r+0x84>
 800837e:	898a      	ldrh	r2, [r1, #12]
 8008380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008384:	d032      	beq.n	80083ec <__ssputs_r+0x80>
 8008386:	6825      	ldr	r5, [r4, #0]
 8008388:	6909      	ldr	r1, [r1, #16]
 800838a:	eba5 0901 	sub.w	r9, r5, r1
 800838e:	6965      	ldr	r5, [r4, #20]
 8008390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008398:	3301      	adds	r3, #1
 800839a:	444b      	add	r3, r9
 800839c:	106d      	asrs	r5, r5, #1
 800839e:	429d      	cmp	r5, r3
 80083a0:	bf38      	it	cc
 80083a2:	461d      	movcc	r5, r3
 80083a4:	0553      	lsls	r3, r2, #21
 80083a6:	d531      	bpl.n	800840c <__ssputs_r+0xa0>
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7ff fea5 	bl	80080f8 <_malloc_r>
 80083ae:	4606      	mov	r6, r0
 80083b0:	b950      	cbnz	r0, 80083c8 <__ssputs_r+0x5c>
 80083b2:	230c      	movs	r3, #12
 80083b4:	f8ca 3000 	str.w	r3, [sl]
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	6921      	ldr	r1, [r4, #16]
 80083ca:	464a      	mov	r2, r9
 80083cc:	f7ff fe12 	bl	8007ff4 <memcpy>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	6126      	str	r6, [r4, #16]
 80083de:	6165      	str	r5, [r4, #20]
 80083e0:	444e      	add	r6, r9
 80083e2:	eba5 0509 	sub.w	r5, r5, r9
 80083e6:	6026      	str	r6, [r4, #0]
 80083e8:	60a5      	str	r5, [r4, #8]
 80083ea:	463e      	mov	r6, r7
 80083ec:	42be      	cmp	r6, r7
 80083ee:	d900      	bls.n	80083f2 <__ssputs_r+0x86>
 80083f0:	463e      	mov	r6, r7
 80083f2:	6820      	ldr	r0, [r4, #0]
 80083f4:	4632      	mov	r2, r6
 80083f6:	4641      	mov	r1, r8
 80083f8:	f000 faa8 	bl	800894c <memmove>
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	1b9b      	subs	r3, r3, r6
 8008400:	60a3      	str	r3, [r4, #8]
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4433      	add	r3, r6
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	2000      	movs	r0, #0
 800840a:	e7db      	b.n	80083c4 <__ssputs_r+0x58>
 800840c:	462a      	mov	r2, r5
 800840e:	f000 fab7 	bl	8008980 <_realloc_r>
 8008412:	4606      	mov	r6, r0
 8008414:	2800      	cmp	r0, #0
 8008416:	d1e1      	bne.n	80083dc <__ssputs_r+0x70>
 8008418:	6921      	ldr	r1, [r4, #16]
 800841a:	4650      	mov	r0, sl
 800841c:	f7ff fe00 	bl	8008020 <_free_r>
 8008420:	e7c7      	b.n	80083b2 <__ssputs_r+0x46>
	...

08008424 <_svfiprintf_r>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	4698      	mov	r8, r3
 800842a:	898b      	ldrh	r3, [r1, #12]
 800842c:	061b      	lsls	r3, r3, #24
 800842e:	b09d      	sub	sp, #116	; 0x74
 8008430:	4607      	mov	r7, r0
 8008432:	460d      	mov	r5, r1
 8008434:	4614      	mov	r4, r2
 8008436:	d50e      	bpl.n	8008456 <_svfiprintf_r+0x32>
 8008438:	690b      	ldr	r3, [r1, #16]
 800843a:	b963      	cbnz	r3, 8008456 <_svfiprintf_r+0x32>
 800843c:	2140      	movs	r1, #64	; 0x40
 800843e:	f7ff fe5b 	bl	80080f8 <_malloc_r>
 8008442:	6028      	str	r0, [r5, #0]
 8008444:	6128      	str	r0, [r5, #16]
 8008446:	b920      	cbnz	r0, 8008452 <_svfiprintf_r+0x2e>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e0d1      	b.n	80085f6 <_svfiprintf_r+0x1d2>
 8008452:	2340      	movs	r3, #64	; 0x40
 8008454:	616b      	str	r3, [r5, #20]
 8008456:	2300      	movs	r3, #0
 8008458:	9309      	str	r3, [sp, #36]	; 0x24
 800845a:	2320      	movs	r3, #32
 800845c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008460:	f8cd 800c 	str.w	r8, [sp, #12]
 8008464:	2330      	movs	r3, #48	; 0x30
 8008466:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008610 <_svfiprintf_r+0x1ec>
 800846a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800846e:	f04f 0901 	mov.w	r9, #1
 8008472:	4623      	mov	r3, r4
 8008474:	469a      	mov	sl, r3
 8008476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800847a:	b10a      	cbz	r2, 8008480 <_svfiprintf_r+0x5c>
 800847c:	2a25      	cmp	r2, #37	; 0x25
 800847e:	d1f9      	bne.n	8008474 <_svfiprintf_r+0x50>
 8008480:	ebba 0b04 	subs.w	fp, sl, r4
 8008484:	d00b      	beq.n	800849e <_svfiprintf_r+0x7a>
 8008486:	465b      	mov	r3, fp
 8008488:	4622      	mov	r2, r4
 800848a:	4629      	mov	r1, r5
 800848c:	4638      	mov	r0, r7
 800848e:	f7ff ff6d 	bl	800836c <__ssputs_r>
 8008492:	3001      	adds	r0, #1
 8008494:	f000 80aa 	beq.w	80085ec <_svfiprintf_r+0x1c8>
 8008498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800849a:	445a      	add	r2, fp
 800849c:	9209      	str	r2, [sp, #36]	; 0x24
 800849e:	f89a 3000 	ldrb.w	r3, [sl]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 80a2 	beq.w	80085ec <_svfiprintf_r+0x1c8>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b2:	f10a 0a01 	add.w	sl, sl, #1
 80084b6:	9304      	str	r3, [sp, #16]
 80084b8:	9307      	str	r3, [sp, #28]
 80084ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084be:	931a      	str	r3, [sp, #104]	; 0x68
 80084c0:	4654      	mov	r4, sl
 80084c2:	2205      	movs	r2, #5
 80084c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c8:	4851      	ldr	r0, [pc, #324]	; (8008610 <_svfiprintf_r+0x1ec>)
 80084ca:	f7f7 fe89 	bl	80001e0 <memchr>
 80084ce:	9a04      	ldr	r2, [sp, #16]
 80084d0:	b9d8      	cbnz	r0, 800850a <_svfiprintf_r+0xe6>
 80084d2:	06d0      	lsls	r0, r2, #27
 80084d4:	bf44      	itt	mi
 80084d6:	2320      	movmi	r3, #32
 80084d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084dc:	0711      	lsls	r1, r2, #28
 80084de:	bf44      	itt	mi
 80084e0:	232b      	movmi	r3, #43	; 0x2b
 80084e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084e6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ea:	2b2a      	cmp	r3, #42	; 0x2a
 80084ec:	d015      	beq.n	800851a <_svfiprintf_r+0xf6>
 80084ee:	9a07      	ldr	r2, [sp, #28]
 80084f0:	4654      	mov	r4, sl
 80084f2:	2000      	movs	r0, #0
 80084f4:	f04f 0c0a 	mov.w	ip, #10
 80084f8:	4621      	mov	r1, r4
 80084fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084fe:	3b30      	subs	r3, #48	; 0x30
 8008500:	2b09      	cmp	r3, #9
 8008502:	d94e      	bls.n	80085a2 <_svfiprintf_r+0x17e>
 8008504:	b1b0      	cbz	r0, 8008534 <_svfiprintf_r+0x110>
 8008506:	9207      	str	r2, [sp, #28]
 8008508:	e014      	b.n	8008534 <_svfiprintf_r+0x110>
 800850a:	eba0 0308 	sub.w	r3, r0, r8
 800850e:	fa09 f303 	lsl.w	r3, r9, r3
 8008512:	4313      	orrs	r3, r2
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	46a2      	mov	sl, r4
 8008518:	e7d2      	b.n	80084c0 <_svfiprintf_r+0x9c>
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	1d19      	adds	r1, r3, #4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	9103      	str	r1, [sp, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	bfbb      	ittet	lt
 8008526:	425b      	neglt	r3, r3
 8008528:	f042 0202 	orrlt.w	r2, r2, #2
 800852c:	9307      	strge	r3, [sp, #28]
 800852e:	9307      	strlt	r3, [sp, #28]
 8008530:	bfb8      	it	lt
 8008532:	9204      	strlt	r2, [sp, #16]
 8008534:	7823      	ldrb	r3, [r4, #0]
 8008536:	2b2e      	cmp	r3, #46	; 0x2e
 8008538:	d10c      	bne.n	8008554 <_svfiprintf_r+0x130>
 800853a:	7863      	ldrb	r3, [r4, #1]
 800853c:	2b2a      	cmp	r3, #42	; 0x2a
 800853e:	d135      	bne.n	80085ac <_svfiprintf_r+0x188>
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	1d1a      	adds	r2, r3, #4
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	9203      	str	r2, [sp, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	bfb8      	it	lt
 800854c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008550:	3402      	adds	r4, #2
 8008552:	9305      	str	r3, [sp, #20]
 8008554:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008620 <_svfiprintf_r+0x1fc>
 8008558:	7821      	ldrb	r1, [r4, #0]
 800855a:	2203      	movs	r2, #3
 800855c:	4650      	mov	r0, sl
 800855e:	f7f7 fe3f 	bl	80001e0 <memchr>
 8008562:	b140      	cbz	r0, 8008576 <_svfiprintf_r+0x152>
 8008564:	2340      	movs	r3, #64	; 0x40
 8008566:	eba0 000a 	sub.w	r0, r0, sl
 800856a:	fa03 f000 	lsl.w	r0, r3, r0
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	4303      	orrs	r3, r0
 8008572:	3401      	adds	r4, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857a:	4826      	ldr	r0, [pc, #152]	; (8008614 <_svfiprintf_r+0x1f0>)
 800857c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008580:	2206      	movs	r2, #6
 8008582:	f7f7 fe2d 	bl	80001e0 <memchr>
 8008586:	2800      	cmp	r0, #0
 8008588:	d038      	beq.n	80085fc <_svfiprintf_r+0x1d8>
 800858a:	4b23      	ldr	r3, [pc, #140]	; (8008618 <_svfiprintf_r+0x1f4>)
 800858c:	bb1b      	cbnz	r3, 80085d6 <_svfiprintf_r+0x1b2>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	3307      	adds	r3, #7
 8008592:	f023 0307 	bic.w	r3, r3, #7
 8008596:	3308      	adds	r3, #8
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859c:	4433      	add	r3, r6
 800859e:	9309      	str	r3, [sp, #36]	; 0x24
 80085a0:	e767      	b.n	8008472 <_svfiprintf_r+0x4e>
 80085a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085a6:	460c      	mov	r4, r1
 80085a8:	2001      	movs	r0, #1
 80085aa:	e7a5      	b.n	80084f8 <_svfiprintf_r+0xd4>
 80085ac:	2300      	movs	r3, #0
 80085ae:	3401      	adds	r4, #1
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	4619      	mov	r1, r3
 80085b4:	f04f 0c0a 	mov.w	ip, #10
 80085b8:	4620      	mov	r0, r4
 80085ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085be:	3a30      	subs	r2, #48	; 0x30
 80085c0:	2a09      	cmp	r2, #9
 80085c2:	d903      	bls.n	80085cc <_svfiprintf_r+0x1a8>
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0c5      	beq.n	8008554 <_svfiprintf_r+0x130>
 80085c8:	9105      	str	r1, [sp, #20]
 80085ca:	e7c3      	b.n	8008554 <_svfiprintf_r+0x130>
 80085cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085d0:	4604      	mov	r4, r0
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7f0      	b.n	80085b8 <_svfiprintf_r+0x194>
 80085d6:	ab03      	add	r3, sp, #12
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	462a      	mov	r2, r5
 80085dc:	4b0f      	ldr	r3, [pc, #60]	; (800861c <_svfiprintf_r+0x1f8>)
 80085de:	a904      	add	r1, sp, #16
 80085e0:	4638      	mov	r0, r7
 80085e2:	f3af 8000 	nop.w
 80085e6:	1c42      	adds	r2, r0, #1
 80085e8:	4606      	mov	r6, r0
 80085ea:	d1d6      	bne.n	800859a <_svfiprintf_r+0x176>
 80085ec:	89ab      	ldrh	r3, [r5, #12]
 80085ee:	065b      	lsls	r3, r3, #25
 80085f0:	f53f af2c 	bmi.w	800844c <_svfiprintf_r+0x28>
 80085f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085f6:	b01d      	add	sp, #116	; 0x74
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	ab03      	add	r3, sp, #12
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	462a      	mov	r2, r5
 8008602:	4b06      	ldr	r3, [pc, #24]	; (800861c <_svfiprintf_r+0x1f8>)
 8008604:	a904      	add	r1, sp, #16
 8008606:	4638      	mov	r0, r7
 8008608:	f000 f87a 	bl	8008700 <_printf_i>
 800860c:	e7eb      	b.n	80085e6 <_svfiprintf_r+0x1c2>
 800860e:	bf00      	nop
 8008610:	08008b70 	.word	0x08008b70
 8008614:	08008b7a 	.word	0x08008b7a
 8008618:	00000000 	.word	0x00000000
 800861c:	0800836d 	.word	0x0800836d
 8008620:	08008b76 	.word	0x08008b76

08008624 <_printf_common>:
 8008624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	4616      	mov	r6, r2
 800862a:	4699      	mov	r9, r3
 800862c:	688a      	ldr	r2, [r1, #8]
 800862e:	690b      	ldr	r3, [r1, #16]
 8008630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008634:	4293      	cmp	r3, r2
 8008636:	bfb8      	it	lt
 8008638:	4613      	movlt	r3, r2
 800863a:	6033      	str	r3, [r6, #0]
 800863c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008640:	4607      	mov	r7, r0
 8008642:	460c      	mov	r4, r1
 8008644:	b10a      	cbz	r2, 800864a <_printf_common+0x26>
 8008646:	3301      	adds	r3, #1
 8008648:	6033      	str	r3, [r6, #0]
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	0699      	lsls	r1, r3, #26
 800864e:	bf42      	ittt	mi
 8008650:	6833      	ldrmi	r3, [r6, #0]
 8008652:	3302      	addmi	r3, #2
 8008654:	6033      	strmi	r3, [r6, #0]
 8008656:	6825      	ldr	r5, [r4, #0]
 8008658:	f015 0506 	ands.w	r5, r5, #6
 800865c:	d106      	bne.n	800866c <_printf_common+0x48>
 800865e:	f104 0a19 	add.w	sl, r4, #25
 8008662:	68e3      	ldr	r3, [r4, #12]
 8008664:	6832      	ldr	r2, [r6, #0]
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	42ab      	cmp	r3, r5
 800866a:	dc26      	bgt.n	80086ba <_printf_common+0x96>
 800866c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008670:	1e13      	subs	r3, r2, #0
 8008672:	6822      	ldr	r2, [r4, #0]
 8008674:	bf18      	it	ne
 8008676:	2301      	movne	r3, #1
 8008678:	0692      	lsls	r2, r2, #26
 800867a:	d42b      	bmi.n	80086d4 <_printf_common+0xb0>
 800867c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008680:	4649      	mov	r1, r9
 8008682:	4638      	mov	r0, r7
 8008684:	47c0      	blx	r8
 8008686:	3001      	adds	r0, #1
 8008688:	d01e      	beq.n	80086c8 <_printf_common+0xa4>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	68e5      	ldr	r5, [r4, #12]
 800868e:	6832      	ldr	r2, [r6, #0]
 8008690:	f003 0306 	and.w	r3, r3, #6
 8008694:	2b04      	cmp	r3, #4
 8008696:	bf08      	it	eq
 8008698:	1aad      	subeq	r5, r5, r2
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	6922      	ldr	r2, [r4, #16]
 800869e:	bf0c      	ite	eq
 80086a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086a4:	2500      	movne	r5, #0
 80086a6:	4293      	cmp	r3, r2
 80086a8:	bfc4      	itt	gt
 80086aa:	1a9b      	subgt	r3, r3, r2
 80086ac:	18ed      	addgt	r5, r5, r3
 80086ae:	2600      	movs	r6, #0
 80086b0:	341a      	adds	r4, #26
 80086b2:	42b5      	cmp	r5, r6
 80086b4:	d11a      	bne.n	80086ec <_printf_common+0xc8>
 80086b6:	2000      	movs	r0, #0
 80086b8:	e008      	b.n	80086cc <_printf_common+0xa8>
 80086ba:	2301      	movs	r3, #1
 80086bc:	4652      	mov	r2, sl
 80086be:	4649      	mov	r1, r9
 80086c0:	4638      	mov	r0, r7
 80086c2:	47c0      	blx	r8
 80086c4:	3001      	adds	r0, #1
 80086c6:	d103      	bne.n	80086d0 <_printf_common+0xac>
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d0:	3501      	adds	r5, #1
 80086d2:	e7c6      	b.n	8008662 <_printf_common+0x3e>
 80086d4:	18e1      	adds	r1, r4, r3
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	2030      	movs	r0, #48	; 0x30
 80086da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086de:	4422      	add	r2, r4
 80086e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086e8:	3302      	adds	r3, #2
 80086ea:	e7c7      	b.n	800867c <_printf_common+0x58>
 80086ec:	2301      	movs	r3, #1
 80086ee:	4622      	mov	r2, r4
 80086f0:	4649      	mov	r1, r9
 80086f2:	4638      	mov	r0, r7
 80086f4:	47c0      	blx	r8
 80086f6:	3001      	adds	r0, #1
 80086f8:	d0e6      	beq.n	80086c8 <_printf_common+0xa4>
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7d9      	b.n	80086b2 <_printf_common+0x8e>
	...

08008700 <_printf_i>:
 8008700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	7e0f      	ldrb	r7, [r1, #24]
 8008706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008708:	2f78      	cmp	r7, #120	; 0x78
 800870a:	4691      	mov	r9, r2
 800870c:	4680      	mov	r8, r0
 800870e:	460c      	mov	r4, r1
 8008710:	469a      	mov	sl, r3
 8008712:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008716:	d807      	bhi.n	8008728 <_printf_i+0x28>
 8008718:	2f62      	cmp	r7, #98	; 0x62
 800871a:	d80a      	bhi.n	8008732 <_printf_i+0x32>
 800871c:	2f00      	cmp	r7, #0
 800871e:	f000 80d8 	beq.w	80088d2 <_printf_i+0x1d2>
 8008722:	2f58      	cmp	r7, #88	; 0x58
 8008724:	f000 80a3 	beq.w	800886e <_printf_i+0x16e>
 8008728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800872c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008730:	e03a      	b.n	80087a8 <_printf_i+0xa8>
 8008732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008736:	2b15      	cmp	r3, #21
 8008738:	d8f6      	bhi.n	8008728 <_printf_i+0x28>
 800873a:	a101      	add	r1, pc, #4	; (adr r1, 8008740 <_printf_i+0x40>)
 800873c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008740:	08008799 	.word	0x08008799
 8008744:	080087ad 	.word	0x080087ad
 8008748:	08008729 	.word	0x08008729
 800874c:	08008729 	.word	0x08008729
 8008750:	08008729 	.word	0x08008729
 8008754:	08008729 	.word	0x08008729
 8008758:	080087ad 	.word	0x080087ad
 800875c:	08008729 	.word	0x08008729
 8008760:	08008729 	.word	0x08008729
 8008764:	08008729 	.word	0x08008729
 8008768:	08008729 	.word	0x08008729
 800876c:	080088b9 	.word	0x080088b9
 8008770:	080087dd 	.word	0x080087dd
 8008774:	0800889b 	.word	0x0800889b
 8008778:	08008729 	.word	0x08008729
 800877c:	08008729 	.word	0x08008729
 8008780:	080088db 	.word	0x080088db
 8008784:	08008729 	.word	0x08008729
 8008788:	080087dd 	.word	0x080087dd
 800878c:	08008729 	.word	0x08008729
 8008790:	08008729 	.word	0x08008729
 8008794:	080088a3 	.word	0x080088a3
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	1d1a      	adds	r2, r3, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	602a      	str	r2, [r5, #0]
 80087a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0a3      	b.n	80088f4 <_printf_i+0x1f4>
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	6829      	ldr	r1, [r5, #0]
 80087b0:	0606      	lsls	r6, r0, #24
 80087b2:	f101 0304 	add.w	r3, r1, #4
 80087b6:	d50a      	bpl.n	80087ce <_printf_i+0xce>
 80087b8:	680e      	ldr	r6, [r1, #0]
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	2e00      	cmp	r6, #0
 80087be:	da03      	bge.n	80087c8 <_printf_i+0xc8>
 80087c0:	232d      	movs	r3, #45	; 0x2d
 80087c2:	4276      	negs	r6, r6
 80087c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c8:	485e      	ldr	r0, [pc, #376]	; (8008944 <_printf_i+0x244>)
 80087ca:	230a      	movs	r3, #10
 80087cc:	e019      	b.n	8008802 <_printf_i+0x102>
 80087ce:	680e      	ldr	r6, [r1, #0]
 80087d0:	602b      	str	r3, [r5, #0]
 80087d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087d6:	bf18      	it	ne
 80087d8:	b236      	sxthne	r6, r6
 80087da:	e7ef      	b.n	80087bc <_printf_i+0xbc>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	1d19      	adds	r1, r3, #4
 80087e2:	6029      	str	r1, [r5, #0]
 80087e4:	0601      	lsls	r1, r0, #24
 80087e6:	d501      	bpl.n	80087ec <_printf_i+0xec>
 80087e8:	681e      	ldr	r6, [r3, #0]
 80087ea:	e002      	b.n	80087f2 <_printf_i+0xf2>
 80087ec:	0646      	lsls	r6, r0, #25
 80087ee:	d5fb      	bpl.n	80087e8 <_printf_i+0xe8>
 80087f0:	881e      	ldrh	r6, [r3, #0]
 80087f2:	4854      	ldr	r0, [pc, #336]	; (8008944 <_printf_i+0x244>)
 80087f4:	2f6f      	cmp	r7, #111	; 0x6f
 80087f6:	bf0c      	ite	eq
 80087f8:	2308      	moveq	r3, #8
 80087fa:	230a      	movne	r3, #10
 80087fc:	2100      	movs	r1, #0
 80087fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008802:	6865      	ldr	r5, [r4, #4]
 8008804:	60a5      	str	r5, [r4, #8]
 8008806:	2d00      	cmp	r5, #0
 8008808:	bfa2      	ittt	ge
 800880a:	6821      	ldrge	r1, [r4, #0]
 800880c:	f021 0104 	bicge.w	r1, r1, #4
 8008810:	6021      	strge	r1, [r4, #0]
 8008812:	b90e      	cbnz	r6, 8008818 <_printf_i+0x118>
 8008814:	2d00      	cmp	r5, #0
 8008816:	d04d      	beq.n	80088b4 <_printf_i+0x1b4>
 8008818:	4615      	mov	r5, r2
 800881a:	fbb6 f1f3 	udiv	r1, r6, r3
 800881e:	fb03 6711 	mls	r7, r3, r1, r6
 8008822:	5dc7      	ldrb	r7, [r0, r7]
 8008824:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008828:	4637      	mov	r7, r6
 800882a:	42bb      	cmp	r3, r7
 800882c:	460e      	mov	r6, r1
 800882e:	d9f4      	bls.n	800881a <_printf_i+0x11a>
 8008830:	2b08      	cmp	r3, #8
 8008832:	d10b      	bne.n	800884c <_printf_i+0x14c>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	07de      	lsls	r6, r3, #31
 8008838:	d508      	bpl.n	800884c <_printf_i+0x14c>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	6861      	ldr	r1, [r4, #4]
 800883e:	4299      	cmp	r1, r3
 8008840:	bfde      	ittt	le
 8008842:	2330      	movle	r3, #48	; 0x30
 8008844:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008848:	f105 35ff 	addle.w	r5, r5, #4294967295
 800884c:	1b52      	subs	r2, r2, r5
 800884e:	6122      	str	r2, [r4, #16]
 8008850:	f8cd a000 	str.w	sl, [sp]
 8008854:	464b      	mov	r3, r9
 8008856:	aa03      	add	r2, sp, #12
 8008858:	4621      	mov	r1, r4
 800885a:	4640      	mov	r0, r8
 800885c:	f7ff fee2 	bl	8008624 <_printf_common>
 8008860:	3001      	adds	r0, #1
 8008862:	d14c      	bne.n	80088fe <_printf_i+0x1fe>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	b004      	add	sp, #16
 800886a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886e:	4835      	ldr	r0, [pc, #212]	; (8008944 <_printf_i+0x244>)
 8008870:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008874:	6829      	ldr	r1, [r5, #0]
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	f851 6b04 	ldr.w	r6, [r1], #4
 800887c:	6029      	str	r1, [r5, #0]
 800887e:	061d      	lsls	r5, r3, #24
 8008880:	d514      	bpl.n	80088ac <_printf_i+0x1ac>
 8008882:	07df      	lsls	r7, r3, #31
 8008884:	bf44      	itt	mi
 8008886:	f043 0320 	orrmi.w	r3, r3, #32
 800888a:	6023      	strmi	r3, [r4, #0]
 800888c:	b91e      	cbnz	r6, 8008896 <_printf_i+0x196>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	f023 0320 	bic.w	r3, r3, #32
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	2310      	movs	r3, #16
 8008898:	e7b0      	b.n	80087fc <_printf_i+0xfc>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	f043 0320 	orr.w	r3, r3, #32
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	2378      	movs	r3, #120	; 0x78
 80088a4:	4828      	ldr	r0, [pc, #160]	; (8008948 <_printf_i+0x248>)
 80088a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088aa:	e7e3      	b.n	8008874 <_printf_i+0x174>
 80088ac:	0659      	lsls	r1, r3, #25
 80088ae:	bf48      	it	mi
 80088b0:	b2b6      	uxthmi	r6, r6
 80088b2:	e7e6      	b.n	8008882 <_printf_i+0x182>
 80088b4:	4615      	mov	r5, r2
 80088b6:	e7bb      	b.n	8008830 <_printf_i+0x130>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	6826      	ldr	r6, [r4, #0]
 80088bc:	6961      	ldr	r1, [r4, #20]
 80088be:	1d18      	adds	r0, r3, #4
 80088c0:	6028      	str	r0, [r5, #0]
 80088c2:	0635      	lsls	r5, r6, #24
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	d501      	bpl.n	80088cc <_printf_i+0x1cc>
 80088c8:	6019      	str	r1, [r3, #0]
 80088ca:	e002      	b.n	80088d2 <_printf_i+0x1d2>
 80088cc:	0670      	lsls	r0, r6, #25
 80088ce:	d5fb      	bpl.n	80088c8 <_printf_i+0x1c8>
 80088d0:	8019      	strh	r1, [r3, #0]
 80088d2:	2300      	movs	r3, #0
 80088d4:	6123      	str	r3, [r4, #16]
 80088d6:	4615      	mov	r5, r2
 80088d8:	e7ba      	b.n	8008850 <_printf_i+0x150>
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	1d1a      	adds	r2, r3, #4
 80088de:	602a      	str	r2, [r5, #0]
 80088e0:	681d      	ldr	r5, [r3, #0]
 80088e2:	6862      	ldr	r2, [r4, #4]
 80088e4:	2100      	movs	r1, #0
 80088e6:	4628      	mov	r0, r5
 80088e8:	f7f7 fc7a 	bl	80001e0 <memchr>
 80088ec:	b108      	cbz	r0, 80088f2 <_printf_i+0x1f2>
 80088ee:	1b40      	subs	r0, r0, r5
 80088f0:	6060      	str	r0, [r4, #4]
 80088f2:	6863      	ldr	r3, [r4, #4]
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	2300      	movs	r3, #0
 80088f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088fc:	e7a8      	b.n	8008850 <_printf_i+0x150>
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	462a      	mov	r2, r5
 8008902:	4649      	mov	r1, r9
 8008904:	4640      	mov	r0, r8
 8008906:	47d0      	blx	sl
 8008908:	3001      	adds	r0, #1
 800890a:	d0ab      	beq.n	8008864 <_printf_i+0x164>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	079b      	lsls	r3, r3, #30
 8008910:	d413      	bmi.n	800893a <_printf_i+0x23a>
 8008912:	68e0      	ldr	r0, [r4, #12]
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	4298      	cmp	r0, r3
 8008918:	bfb8      	it	lt
 800891a:	4618      	movlt	r0, r3
 800891c:	e7a4      	b.n	8008868 <_printf_i+0x168>
 800891e:	2301      	movs	r3, #1
 8008920:	4632      	mov	r2, r6
 8008922:	4649      	mov	r1, r9
 8008924:	4640      	mov	r0, r8
 8008926:	47d0      	blx	sl
 8008928:	3001      	adds	r0, #1
 800892a:	d09b      	beq.n	8008864 <_printf_i+0x164>
 800892c:	3501      	adds	r5, #1
 800892e:	68e3      	ldr	r3, [r4, #12]
 8008930:	9903      	ldr	r1, [sp, #12]
 8008932:	1a5b      	subs	r3, r3, r1
 8008934:	42ab      	cmp	r3, r5
 8008936:	dcf2      	bgt.n	800891e <_printf_i+0x21e>
 8008938:	e7eb      	b.n	8008912 <_printf_i+0x212>
 800893a:	2500      	movs	r5, #0
 800893c:	f104 0619 	add.w	r6, r4, #25
 8008940:	e7f5      	b.n	800892e <_printf_i+0x22e>
 8008942:	bf00      	nop
 8008944:	08008b81 	.word	0x08008b81
 8008948:	08008b92 	.word	0x08008b92

0800894c <memmove>:
 800894c:	4288      	cmp	r0, r1
 800894e:	b510      	push	{r4, lr}
 8008950:	eb01 0402 	add.w	r4, r1, r2
 8008954:	d902      	bls.n	800895c <memmove+0x10>
 8008956:	4284      	cmp	r4, r0
 8008958:	4623      	mov	r3, r4
 800895a:	d807      	bhi.n	800896c <memmove+0x20>
 800895c:	1e43      	subs	r3, r0, #1
 800895e:	42a1      	cmp	r1, r4
 8008960:	d008      	beq.n	8008974 <memmove+0x28>
 8008962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800896a:	e7f8      	b.n	800895e <memmove+0x12>
 800896c:	4402      	add	r2, r0
 800896e:	4601      	mov	r1, r0
 8008970:	428a      	cmp	r2, r1
 8008972:	d100      	bne.n	8008976 <memmove+0x2a>
 8008974:	bd10      	pop	{r4, pc}
 8008976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800897a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800897e:	e7f7      	b.n	8008970 <memmove+0x24>

08008980 <_realloc_r>:
 8008980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008984:	4680      	mov	r8, r0
 8008986:	4614      	mov	r4, r2
 8008988:	460e      	mov	r6, r1
 800898a:	b921      	cbnz	r1, 8008996 <_realloc_r+0x16>
 800898c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	4611      	mov	r1, r2
 8008992:	f7ff bbb1 	b.w	80080f8 <_malloc_r>
 8008996:	b92a      	cbnz	r2, 80089a4 <_realloc_r+0x24>
 8008998:	f7ff fb42 	bl	8008020 <_free_r>
 800899c:	4625      	mov	r5, r4
 800899e:	4628      	mov	r0, r5
 80089a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a4:	f000 f81b 	bl	80089de <_malloc_usable_size_r>
 80089a8:	4284      	cmp	r4, r0
 80089aa:	4607      	mov	r7, r0
 80089ac:	d802      	bhi.n	80089b4 <_realloc_r+0x34>
 80089ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089b2:	d812      	bhi.n	80089da <_realloc_r+0x5a>
 80089b4:	4621      	mov	r1, r4
 80089b6:	4640      	mov	r0, r8
 80089b8:	f7ff fb9e 	bl	80080f8 <_malloc_r>
 80089bc:	4605      	mov	r5, r0
 80089be:	2800      	cmp	r0, #0
 80089c0:	d0ed      	beq.n	800899e <_realloc_r+0x1e>
 80089c2:	42bc      	cmp	r4, r7
 80089c4:	4622      	mov	r2, r4
 80089c6:	4631      	mov	r1, r6
 80089c8:	bf28      	it	cs
 80089ca:	463a      	movcs	r2, r7
 80089cc:	f7ff fb12 	bl	8007ff4 <memcpy>
 80089d0:	4631      	mov	r1, r6
 80089d2:	4640      	mov	r0, r8
 80089d4:	f7ff fb24 	bl	8008020 <_free_r>
 80089d8:	e7e1      	b.n	800899e <_realloc_r+0x1e>
 80089da:	4635      	mov	r5, r6
 80089dc:	e7df      	b.n	800899e <_realloc_r+0x1e>

080089de <_malloc_usable_size_r>:
 80089de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e2:	1f18      	subs	r0, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfbc      	itt	lt
 80089e8:	580b      	ldrlt	r3, [r1, r0]
 80089ea:	18c0      	addlt	r0, r0, r3
 80089ec:	4770      	bx	lr
	...

080089f0 <_init>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr

080089fc <_fini>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr
