
Ajax_Project_For_Repos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0800ed1c  0800ed1c  0001ed1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f99c  0800f99c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f99c  0800f99c  0001f99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9a4  0800f9a4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9a4  0800f9a4  0001f9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9a8  0800f9a8  0001f9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800f9ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006258  2000017c  0800fb28  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200063d4  0800fb28  000263d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000238c4  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000450f  00000000  00000000  00043a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  00047f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  00049c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d024  00000000  00000000  0004b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d56  00000000  00000000  00068754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac45e  00000000  00000000  0008b4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008968  00000000  00000000  00137958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed04 	.word	0x0800ed04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	0800ed04 	.word	0x0800ed04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_ldivmod>:
 8000290:	b97b      	cbnz	r3, 80002b2 <__aeabi_ldivmod+0x22>
 8000292:	b972      	cbnz	r2, 80002b2 <__aeabi_ldivmod+0x22>
 8000294:	2900      	cmp	r1, #0
 8000296:	bfbe      	ittt	lt
 8000298:	2000      	movlt	r0, #0
 800029a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800029e:	e006      	blt.n	80002ae <__aeabi_ldivmod+0x1e>
 80002a0:	bf08      	it	eq
 80002a2:	2800      	cmpeq	r0, #0
 80002a4:	bf1c      	itt	ne
 80002a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002aa:	f04f 30ff 	movne.w	r0, #4294967295
 80002ae:	f000 b9bf 	b.w	8000630 <__aeabi_idiv0>
 80002b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ba:	2900      	cmp	r1, #0
 80002bc:	db09      	blt.n	80002d2 <__aeabi_ldivmod+0x42>
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db1a      	blt.n	80002f8 <__aeabi_ldivmod+0x68>
 80002c2:	f000 f84d 	bl	8000360 <__udivmoddi4>
 80002c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ce:	b004      	add	sp, #16
 80002d0:	4770      	bx	lr
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db1b      	blt.n	8000314 <__aeabi_ldivmod+0x84>
 80002dc:	f000 f840 	bl	8000360 <__udivmoddi4>
 80002e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e8:	b004      	add	sp, #16
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	4252      	negs	r2, r2
 80002f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f6:	4770      	bx	lr
 80002f8:	4252      	negs	r2, r2
 80002fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fe:	f000 f82f 	bl	8000360 <__udivmoddi4>
 8000302:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030a:	b004      	add	sp, #16
 800030c:	4240      	negs	r0, r0
 800030e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000312:	4770      	bx	lr
 8000314:	4252      	negs	r2, r2
 8000316:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031a:	f000 f821 	bl	8000360 <__udivmoddi4>
 800031e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000326:	b004      	add	sp, #16
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <lcd_start_write+0x14>)
 800063e:	f004 fa5f 	bl	8004b00 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020000 	.word	0x40020000

0800064c <lcd_end_write>:

static void lcd_end_write(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <lcd_end_write+0x14>)
 8000656:	f004 fa53 	bl	8004b00 <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000

08000664 <lcd_start_command>:

static void lcd_start_command(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <lcd_start_command+0x14>)
 800066e:	f004 fa47 	bl	8004b00 <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020000 	.word	0x40020000

0800067c <lcd_start_data>:

static void lcd_start_data(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <lcd_start_data+0x14>)
 8000686:	f004 fa3b 	bl	8004b00 <HAL_GPIO_WritePin>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40020000 	.word	0x40020000

08000694 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 800069e:	f7ff ffe1 	bl	8000664 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80006a2:	1df9      	adds	r1, r7, #7
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	2201      	movs	r2, #1
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <lcd_spi_send_com+0x30>)
 80006ac:	f005 fee3 	bl	8006476 <HAL_SPI_Transmit>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d000      	beq.n	80006bc <lcd_spi_send_com+0x28>
		while (1) {}
 80006ba:	e7fe      	b.n	80006ba <lcd_spi_send_com+0x26>
	}
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000284 	.word	0x20000284

080006c8 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00f      	beq.n	80006f8 <lcd_spi_send_data+0x30>
		lcd_start_data();
 80006d8:	f7ff ffd0 	bl	800067c <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <lcd_spi_send_data+0x38>)
 80006e8:	f005 fec5 	bl	8006476 <HAL_SPI_Transmit>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d000      	beq.n	80006f8 <lcd_spi_send_data+0x30>
			while (1) {}
 80006f6:	e7fe      	b.n	80006f6 <lcd_spi_send_data+0x2e>
		}
	}
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000284 	.word	0x20000284

08000704 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	4603      	mov	r3, r0
 8000718:	80bb      	strh	r3, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	4613      	mov	r3, r2
 8000720:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <lcd_set_window+0xc4>)
 8000724:	881a      	ldrh	r2, [r3, #0]
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	4413      	add	r3, r2
 800072a:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <lcd_set_window+0xc8>)
 800072e:	881a      	ldrh	r2, [r3, #0]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	733b      	strb	r3, [r7, #12]
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	737b      	strb	r3, [r7, #13]
 8000746:	88fa      	ldrh	r2, [r7, #6]
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	4413      	add	r3, r2
 800074c:	3b01      	subs	r3, #1
 800074e:	121b      	asrs	r3, r3, #8
 8000750:	b2db      	uxtb	r3, r3
 8000752:	73bb      	strb	r3, [r7, #14]
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	887b      	ldrh	r3, [r7, #2]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b2db      	uxtb	r3, r3
 8000760:	3b01      	subs	r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	723b      	strb	r3, [r7, #8]
 8000770:	88bb      	ldrh	r3, [r7, #4]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	727b      	strb	r3, [r7, #9]
 8000776:	88ba      	ldrh	r2, [r7, #4]
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	4413      	add	r3, r2
 800077c:	3b01      	subs	r3, #1
 800077e:	121b      	asrs	r3, r3, #8
 8000780:	b2db      	uxtb	r3, r3
 8000782:	72bb      	strb	r3, [r7, #10]
 8000784:	88bb      	ldrh	r3, [r7, #4]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	883b      	ldrh	r3, [r7, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4413      	add	r3, r2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	3b01      	subs	r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 8000796:	202a      	movs	r0, #42	; 0x2a
 8000798:	f7ff ff7c 	bl	8000694 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2104      	movs	r1, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff90 	bl	80006c8 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80007a8:	202b      	movs	r0, #43	; 0x2b
 80007aa:	f7ff ff73 	bl	8000694 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2104      	movs	r1, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff87 	bl	80006c8 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 80007ba:	202c      	movs	r0, #44	; 0x2c
 80007bc:	f7ff ff6a 	bl	8000694 <lcd_spi_send_com>
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	2000019a 	.word	0x2000019a
 80007cc:	2000019c 	.word	0x2000019c

080007d0 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <lcd_init+0xd4>)
 80007d8:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4832      	ldr	r0, [pc, #200]	; (80008a8 <lcd_init+0xd8>)
 80007e0:	f004 f98e 	bl	8004b00 <HAL_GPIO_WritePin>
	osDelay(100);
 80007e4:	2064      	movs	r0, #100	; 0x64
 80007e6:	f008 f95e 	bl	8008aa6 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	482e      	ldr	r0, [pc, #184]	; (80008a8 <lcd_init+0xd8>)
 80007f0:	f004 f986 	bl	8004b00 <HAL_GPIO_WritePin>
	osDelay(100);
 80007f4:	2064      	movs	r0, #100	; 0x64
 80007f6:	f008 f956 	bl	8008aa6 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2108      	movs	r1, #8
 80007fe:	482a      	ldr	r0, [pc, #168]	; (80008a8 <lcd_init+0xd8>)
 8000800:	f004 f97e 	bl	8004b00 <HAL_GPIO_WritePin>
	osDelay(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f008 f94e 	bl	8008aa6 <osDelay>

	numCommands = *ptr++;
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	60ba      	str	r2, [r7, #8]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8000814:	e035      	b.n	8000882 <lcd_init+0xb2>
		cmd = *ptr++;
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	60ba      	str	r2, [r7, #8]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	b29b      	uxth	r3, r3
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8000834:	79bb      	ldrb	r3, [r7, #6]
 8000836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800083a:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 800083c:	f7ff fefa 	bl	8000634 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff26 	bl	8000694 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	4619      	mov	r1, r3
 800084c:	68b8      	ldr	r0, [r7, #8]
 800084e:	f7ff ff3b 	bl	80006c8 <lcd_spi_send_data>
		lcd_end_write();
 8000852:	f7ff fefb 	bl	800064c <lcd_end_write>
		ptr += numArgs;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	60bb      	str	r3, [r7, #8]

		if (ms) {
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00e      	beq.n	8000882 <lcd_init+0xb2>
			ms = *ptr++;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 800086e:	89bb      	ldrh	r3, [r7, #12]
 8000870:	2bff      	cmp	r3, #255	; 0xff
 8000872:	d102      	bne.n	800087a <lcd_init+0xaa>
				ms = 500;
 8000874:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000878:	81bb      	strh	r3, [r7, #12]
			osDelay(ms);
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	4618      	mov	r0, r3
 800087e:	f008 f912 	bl	8008aa6 <osDelay>
	while (numCommands--) {
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	1e5a      	subs	r2, r3, #1
 8000886:	73fa      	strb	r2, [r7, #15]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1c4      	bne.n	8000816 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 800088c:	f7ff fed2 	bl	8000634 <lcd_start_write>
	lcd_set_rotation(2);
 8000890:	2002      	movs	r0, #2
 8000892:	f000 f80b 	bl	80008ac <lcd_set_rotation>
	lcd_end_write();
 8000896:	f7ff fed9 	bl	800064c <lcd_end_write>

	return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	0800f114 	.word	0x0800f114
 80008a8:	40020000 	.word	0x40020000

080008ac <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <lcd_set_rotation+0xec>)
 80008c4:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <lcd_set_rotation+0xec>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d856      	bhi.n	800097c <lcd_set_rotation+0xd0>
 80008ce:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <lcd_set_rotation+0x28>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	080008e5 	.word	0x080008e5
 80008d8:	0800090b 	.word	0x0800090b
 80008dc:	08000931 	.word	0x08000931
 80008e0:	08000957 	.word	0x08000957
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80008e4:	23c0      	movs	r3, #192	; 0xc0
 80008e6:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <lcd_set_rotation+0xf0>)
 80008ea:	22a0      	movs	r2, #160	; 0xa0
 80008ec:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <lcd_set_rotation+0xf4>)
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <lcd_set_rotation+0xf8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <lcd_set_rotation+0xfc>)
 80008fc:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <lcd_set_rotation+0x100>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b29a      	uxth	r2, r3
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <lcd_set_rotation+0x104>)
 8000906:	801a      	strh	r2, [r3, #0]
		break;
 8000908:	e038      	b.n	800097c <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800090a:	23a0      	movs	r3, #160	; 0xa0
 800090c:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <lcd_set_rotation+0xf4>)
 8000910:	22a0      	movs	r2, #160	; 0xa0
 8000912:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <lcd_set_rotation+0xf0>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <lcd_set_rotation+0xf8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <lcd_set_rotation+0x104>)
 8000922:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <lcd_set_rotation+0x100>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b29a      	uxth	r2, r3
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <lcd_set_rotation+0xfc>)
 800092c:	801a      	strh	r2, [r3, #0]
		break;
 800092e:	e025      	b.n	800097c <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <lcd_set_rotation+0xf0>)
 8000936:	22a0      	movs	r2, #160	; 0xa0
 8000938:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <lcd_set_rotation+0xf4>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <lcd_set_rotation+0xf8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <lcd_set_rotation+0xfc>)
 8000948:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <lcd_set_rotation+0x100>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <lcd_set_rotation+0x104>)
 8000952:	801a      	strh	r2, [r3, #0]
		break;
 8000954:	e012      	b.n	800097c <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8000956:	2368      	movs	r3, #104	; 0x68
 8000958:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <lcd_set_rotation+0xf4>)
 800095c:	22a0      	movs	r2, #160	; 0xa0
 800095e:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <lcd_set_rotation+0xf0>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <lcd_set_rotation+0xf8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <lcd_set_rotation+0x104>)
 800096e:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <lcd_set_rotation+0x100>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <lcd_set_rotation+0xfc>)
 8000978:	801a      	strh	r2, [r3, #0]
		break;
 800097a:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f7ff fe89 	bl	8000694 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 8000982:	f107 030f 	add.w	r3, r7, #15
 8000986:	2101      	movs	r1, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe9d 	bl	80006c8 <lcd_spi_send_data>
	return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000198 	.word	0x20000198
 800099c:	200001a0 	.word	0x200001a0
 80009a0:	2000019e 	.word	0x2000019e
 80009a4:	200001a2 	.word	0x200001a2
 80009a8:	2000019a 	.word	0x2000019a
 80009ac:	200001a3 	.word	0x200001a3
 80009b0:	2000019c 	.word	0x2000019c

080009b4 <lcd_pixel>:

void lcd_pixel(int16_t x, int16_t y, uint16_t color) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 80009c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db29      	blt.n	8000a22 <lcd_pixel+0x6e>
 80009ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <lcd_pixel+0x78>)
 80009d4:	8812      	ldrh	r2, [r2, #0]
 80009d6:	4293      	cmp	r3, r2
 80009d8:	da23      	bge.n	8000a22 <lcd_pixel+0x6e>
 80009da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db1f      	blt.n	8000a22 <lcd_pixel+0x6e>
 80009e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <lcd_pixel+0x7c>)
 80009e8:	8812      	ldrh	r2, [r2, #0]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	da19      	bge.n	8000a22 <lcd_pixel+0x6e>
		lcd_start_write();
 80009ee:	f7ff fe21 	bl	8000634 <lcd_start_write>
		lcd_set_window(x, y, 1, 1);
 80009f2:	88f8      	ldrh	r0, [r7, #6]
 80009f4:	88b9      	ldrh	r1, [r7, #4]
 80009f6:	2301      	movs	r3, #1
 80009f8:	2201      	movs	r2, #1
 80009fa:	f7ff fe83 	bl	8000704 <lcd_set_window>
		lcd_start_data();
 80009fe:	f7ff fe3d 	bl	800067c <lcd_start_data>
		uint8_t c[2] = { color >> 8, color};
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	733b      	strb	r3, [r7, #12]
 8000a0c:	887b      	ldrh	r3, [r7, #2]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	737b      	strb	r3, [r7, #13]
		lcd_spi_send_data(c, 2);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2102      	movs	r1, #2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe55 	bl	80006c8 <lcd_spi_send_data>
		lcd_end_write();
 8000a1e:	f7ff fe15 	bl	800064c <lcd_end_write>
	}
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000019e 	.word	0x2000019e
 8000a30:	200001a0 	.word	0x200001a0

08000a34 <lcd_vline>:

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	4623      	mov	r3, r4
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	4603      	mov	r3, r0
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	807b      	strh	r3, [r7, #2]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8000a52:	f7ff fdef 	bl	8000634 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	88b9      	ldrh	r1, [r7, #4]
 8000a5a:	88f8      	ldrh	r0, [r7, #6]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f7ff fe51 	bl	8000704 <lcd_set_window>
	lcd_start_data();
 8000a62:	f7ff fe0b 	bl	800067c <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 8000a66:	883b      	ldrh	r3, [r7, #0]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	733b      	strb	r3, [r7, #12]
 8000a70:	883b      	ldrh	r3, [r7, #0]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe23 	bl	80006c8 <lcd_spi_send_data>
	while (h--);
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	1e5a      	subs	r2, r3, #1
 8000a86:	807a      	strh	r2, [r7, #2]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f4      	bne.n	8000a76 <lcd_vline+0x42>
	lcd_end_write();
 8000a8c:	f7ff fdde 	bl	800064c <lcd_end_write>
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}

08000a98 <lcd_fill_rect>:
	lcd_vline(x+w, y, h, color);
	lcd_hline(x, y, w, color);
	lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	80fb      	strh	r3, [r7, #6]
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80bb      	strh	r3, [r7, #4]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	807b      	strh	r3, [r7, #2]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	803b      	strh	r3, [r7, #0]
	if (x < 0) x = 0;
 8000ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	da01      	bge.n	8000ac2 <lcd_fill_rect+0x2a>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	if (y < 0) y = 0;
 8000ac2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	da01      	bge.n	8000ace <lcd_fill_rect+0x36>
 8000aca:	2300      	movs	r3, #0
 8000acc:	80bb      	strh	r3, [r7, #4]
	if (x + w > _width) w = _width - x;
 8000ace:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <lcd_fill_rect+0xc4>)
 8000ada:	8812      	ldrh	r2, [r2, #0]
 8000adc:	4293      	cmp	r3, r2
 8000ade:	dd05      	ble.n	8000aec <lcd_fill_rect+0x54>
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <lcd_fill_rect+0xc4>)
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	807b      	strh	r3, [r7, #2]
	if (y + h > _height) h = _height - y;
 8000aec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000af0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <lcd_fill_rect+0xc8>)
 8000af8:	8812      	ldrh	r2, [r2, #0]
 8000afa:	4293      	cmp	r3, r2
 8000afc:	dd05      	ble.n	8000b0a <lcd_fill_rect+0x72>
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <lcd_fill_rect+0xc8>)
 8000b00:	881a      	ldrh	r2, [r3, #0]
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8000b0a:	f7ff fd93 	bl	8000634 <lcd_start_write>
	lcd_set_window(x, y, w, h);
 8000b0e:	88f8      	ldrh	r0, [r7, #6]
 8000b10:	88b9      	ldrh	r1, [r7, #4]
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	883b      	ldrh	r3, [r7, #0]
 8000b16:	f7ff fdf5 	bl	8000704 <lcd_set_window>
	uint8_t c[2] = { color >> 8, color};
 8000b1a:	8c3b      	ldrh	r3, [r7, #32]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	723b      	strb	r3, [r7, #8]
 8000b24:	8c3b      	ldrh	r3, [r7, #32]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	727b      	strb	r3, [r7, #9]
	uint32_t cnt = w * h;
 8000b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b2e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	60fb      	str	r3, [r7, #12]
	while (cnt--)
 8000b38:	e005      	b.n	8000b46 <lcd_fill_rect+0xae>
		lcd_spi_send_data(c, 2);
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdc1 	bl	80006c8 <lcd_spi_send_data>
	while (cnt--)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	60fa      	str	r2, [r7, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1f4      	bne.n	8000b3a <lcd_fill_rect+0xa2>
	lcd_end_write();
 8000b50:	f7ff fd7c 	bl	800064c <lcd_end_write>
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	2000019e 	.word	0x2000019e
 8000b60:	200001a0 	.word	0x200001a0

08000b64 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
	lcd_fill_rect(0, 0, _width, _height, color);
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <lcd_fill+0x2c>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <lcd_fill+0x30>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	b219      	sxth	r1, r3
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	2100      	movs	r1, #0
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ff88 	bl	8000a98 <lcd_fill_rect>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000019e 	.word	0x2000019e
 8000b94:	200001a0 	.word	0x200001a0

08000b98 <lcd_set_text_color>:
		px = x;
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
}

void lcd_set_text_color(uint16_t color) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	textcolor = color;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <lcd_set_text_color+0x1c>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	8013      	strh	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <lcd_set_text_bg_color>:

void lcd_set_text_bg_color(uint16_t color) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	textbgcolor = color;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <lcd_set_text_bg_color+0x1c>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	8013      	strh	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	200001a8 	.word	0x200001a8

08000bd8 <lcd_char>:

void lcd_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4604      	mov	r4, r0
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4623      	mov	r3, r4
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	4603      	mov	r3, r0
 8000bec:	80bb      	strh	r3, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	70fb      	strb	r3, [r7, #3]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) ||
 8000bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfa:	4a87      	ldr	r2, [pc, #540]	; (8000e18 <lcd_char+0x240>)
 8000bfc:	8812      	ldrh	r2, [r2, #0]
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f280 8106 	bge.w	8000e10 <lcd_char+0x238>
		(y >= _height) ||
 8000c04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c08:	4a84      	ldr	r2, [pc, #528]	; (8000e1c <lcd_char+0x244>)
 8000c0a:	8812      	ldrh	r2, [r2, #0]
	if ((x >= _width) ||
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	f280 80ff 	bge.w	8000e10 <lcd_char+0x238>
		((x + 6 * size_x - 1) < 0) ||
 8000c12:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c16:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	440b      	add	r3, r1
		(y >= _height) ||
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f340 80f3 	ble.w	8000e10 <lcd_char+0x238>
		((y + 8 * size_y - 1) < 0))
 8000c2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4413      	add	r3, r2
		((x + 6 * size_x - 1) < 0) ||
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f340 80ea 	ble.w	8000e10 <lcd_char+0x238>
		return;

	if (c >= 176)
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	2baf      	cmp	r3, #175	; 0xaf
 8000c40:	d902      	bls.n	8000c48 <lcd_char+0x70>
		c++;
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	3301      	adds	r3, #1
 8000c46:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 0; i < 5; i++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e0aa      	b.n	8000da4 <lcd_char+0x1cc>
		uint8_t line = font[c * 5 + i];
 8000c4e:	78fa      	ldrb	r2, [r7, #3]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	441a      	add	r2, r3
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a70      	ldr	r2, [pc, #448]	; (8000e20 <lcd_char+0x248>)
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	73bb      	strb	r3, [r7, #14]
		for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	737b      	strb	r3, [r7, #13]
 8000c66:	e092      	b.n	8000d8e <lcd_char+0x1b6>
			if (line & 1) {
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d040      	beq.n	8000cf4 <lcd_char+0x11c>
				if (size_x == 1 && size_y == 1)
 8000c72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d116      	bne.n	8000ca8 <lcd_char+0xd0>
 8000c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d112      	bne.n	8000ca8 <lcd_char+0xd0>
					lcd_pixel(x + i, y + j, color);
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	b218      	sxth	r0, r3
 8000c90:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	883a      	ldrh	r2, [r7, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f7ff fe87 	bl	80009b4 <lcd_pixel>
 8000ca6:	e069      	b.n	8000d7c <lcd_char+0x1a4>
				else
					lcd_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y,
 8000ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	fb12 f303 	smulbb	r3, r2, r3
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b218      	sxth	r0, r3
 8000cc2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	fb12 f303 	smulbb	r3, r2, r3
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b219      	sxth	r1, r3
 8000cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ce6:	b21c      	sxth	r4, r3
 8000ce8:	883b      	ldrh	r3, [r7, #0]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4623      	mov	r3, r4
 8000cee:	f7ff fed3 	bl	8000a98 <lcd_fill_rect>
 8000cf2:	e043      	b.n	8000d7c <lcd_char+0x1a4>
				color);
			} else if (bg != color) {
 8000cf4:	8c3a      	ldrh	r2, [r7, #32]
 8000cf6:	883b      	ldrh	r3, [r7, #0]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <lcd_char+0x1a4>
				if (size_x == 1 && size_y == 1)
 8000cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d116      	bne.n	8000d32 <lcd_char+0x15a>
 8000d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d112      	bne.n	8000d32 <lcd_char+0x15a>
					lcd_pixel(x + i, y + j, bg);
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	b218      	sxth	r0, r3
 8000d1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	8c3a      	ldrh	r2, [r7, #32]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff fe42 	bl	80009b4 <lcd_pixel>
 8000d30:	e024      	b.n	8000d7c <lcd_char+0x1a4>
				else
					lcd_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	fb12 f303 	smulbb	r3, r2, r3
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	4413      	add	r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b218      	sxth	r0, r3
 8000d4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	fb12 f303 	smulbb	r3, r2, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	88bb      	ldrh	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b219      	sxth	r1, r3
 8000d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d70:	b21c      	sxth	r4, r3
 8000d72:	8c3b      	ldrh	r3, [r7, #32]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	4623      	mov	r3, r4
 8000d78:	f7ff fe8e 	bl	8000a98 <lcd_fill_rect>
		for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8000d7c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	737b      	strb	r3, [r7, #13]
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	73bb      	strb	r3, [r7, #14]
 8000d8e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d92:	2b07      	cmp	r3, #7
 8000d94:	f77f af68 	ble.w	8000c68 <lcd_char+0x90>
	for (int8_t i = 0; i < 5; i++) {
 8000d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	f77f af50 	ble.w	8000c4e <lcd_char+0x76>
			}
		}
	}
	if (bg != color) {
 8000dae:	8c3a      	ldrh	r2, [r7, #32]
 8000db0:	883b      	ldrh	r3, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d02d      	beq.n	8000e12 <lcd_char+0x23a>
		if (size_x == 1 && size_y == 1)
 8000db6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10c      	bne.n	8000dd8 <lcd_char+0x200>
 8000dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d108      	bne.n	8000dd8 <lcd_char+0x200>
			lcd_vline(x + 5, y, 8, bg);
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	3305      	adds	r3, #5
 8000dca:	b298      	uxth	r0, r3
 8000dcc:	88b9      	ldrh	r1, [r7, #4]
 8000dce:	8c3b      	ldrh	r3, [r7, #32]
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	f7ff fe2f 	bl	8000a34 <lcd_vline>
 8000dd6:	e01c      	b.n	8000e12 <lcd_char+0x23a>
		else
			lcd_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8000dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b218      	sxth	r0, r3
 8000dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b21c      	sxth	r4, r3
 8000e00:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e04:	8c3b      	ldrh	r3, [r7, #32]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4623      	mov	r3, r4
 8000e0a:	f7ff fe45 	bl	8000a98 <lcd_fill_rect>
 8000e0e:	e000      	b.n	8000e12 <lcd_char+0x23a>
		return;
 8000e10:	bf00      	nop
	}
}
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	2000019e 	.word	0x2000019e
 8000e1c:	200001a0 	.word	0x200001a0
 8000e20:	0800f188 	.word	0x0800f188

08000e24 <lcd_putchar>:

void lcd_putchar(char c) {
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af04      	add	r7, sp, #16
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	if (c == '\n') {
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b0a      	cmp	r3, #10
 8000e32:	d10d      	bne.n	8000e50 <lcd_putchar+0x2c>
		cursor_x = 0;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <lcd_putchar+0xc8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	801a      	strh	r2, [r3, #0]
		cursor_y += textsize_y * 8;
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <lcd_putchar+0xcc>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <lcd_putchar+0xd0>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <lcd_putchar+0xd0>)
 8000e4c:	801a      	strh	r2, [r3, #0]
			cursor_y += textsize_y * 8;
		}
		lcd_char(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
		cursor_x += textsize_x * 6;
	}
}
 8000e4e:	e048      	b.n	8000ee2 <lcd_putchar+0xbe>
	} else if (c != '\r') {
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b0d      	cmp	r3, #13
 8000e54:	d045      	beq.n	8000ee2 <lcd_putchar+0xbe>
		if (wrap && ((cursor_x + textsize_x * 6) > _width)) {
 8000e56:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <lcd_putchar+0xd4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d01b      	beq.n	8000e96 <lcd_putchar+0x72>
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <lcd_putchar+0xc8>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <lcd_putchar+0xd8>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	440b      	add	r3, r1
 8000e74:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <lcd_putchar+0xdc>)
 8000e76:	8812      	ldrh	r2, [r2, #0]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	dd0c      	ble.n	8000e96 <lcd_putchar+0x72>
			cursor_x = 0;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <lcd_putchar+0xc8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	801a      	strh	r2, [r3, #0]
			cursor_y += textsize_y * 8;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <lcd_putchar+0xcc>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <lcd_putchar+0xd0>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <lcd_putchar+0xd0>)
 8000e94:	801a      	strh	r2, [r3, #0]
		lcd_char(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <lcd_putchar+0xc8>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b218      	sxth	r0, r3
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <lcd_putchar+0xd0>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b21c      	sxth	r4, r3
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <lcd_putchar+0xe0>)
 8000ea4:	881e      	ldrh	r6, [r3, #0]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <lcd_putchar+0xe4>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <lcd_putchar+0xd8>)
 8000eac:	8812      	ldrh	r2, [r2, #0]
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	490f      	ldr	r1, [pc, #60]	; (8000ef0 <lcd_putchar+0xcc>)
 8000eb2:	8809      	ldrh	r1, [r1, #0]
 8000eb4:	b2c9      	uxtb	r1, r1
 8000eb6:	79fd      	ldrb	r5, [r7, #7]
 8000eb8:	9102      	str	r1, [sp, #8]
 8000eba:	9201      	str	r2, [sp, #4]
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	4633      	mov	r3, r6
 8000ec0:	462a      	mov	r2, r5
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	f7ff fe88 	bl	8000bd8 <lcd_char>
		cursor_x += textsize_x * 6;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <lcd_putchar+0xd8>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	0052      	lsls	r2, r2, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <lcd_putchar+0xc8>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <lcd_putchar+0xc8>)
 8000ee0:	801a      	strh	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200001a6 	.word	0x200001a6
 8000ef0:	20000002 	.word	0x20000002
 8000ef4:	200001a4 	.word	0x200001a4
 8000ef8:	20000006 	.word	0x20000006
 8000efc:	20000000 	.word	0x20000000
 8000f00:	2000019e 	.word	0x2000019e
 8000f04:	20000004 	.word	0x20000004
 8000f08:	200001a8 	.word	0x200001a8

08000f0c <lcd_print>:

void lcd_print(char *text) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	while (*text) {
 8000f14:	e006      	b.n	8000f24 <lcd_print+0x18>
		lcd_putchar(*text++);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <lcd_putchar>
	while (*text) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f4      	bne.n	8000f16 <lcd_print+0xa>
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <lcd_set_cursor>:

void lcd_set_cursor(int16_t x, int16_t y) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	80fb      	strh	r3, [r7, #6]
 8000f44:	4613      	mov	r3, r2
 8000f46:	80bb      	strh	r3, [r7, #4]
  cursor_x = x * textsize_x * 6;
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <lcd_set_cursor+0x4c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	fb12 f303 	smulbb	r3, r2, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	0052      	lsls	r2, r2, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <lcd_set_cursor+0x50>)
 8000f60:	801a      	strh	r2, [r3, #0]
  cursor_y = y * textsize_y * 8;
 8000f62:	88ba      	ldrh	r2, [r7, #4]
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <lcd_set_cursor+0x54>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	fb12 f303 	smulbb	r3, r2, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <lcd_set_cursor+0x58>)
 8000f74:	801a      	strh	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000000 	.word	0x20000000
 8000f88:	200001a6 	.word	0x200001a6
 8000f8c:	20000002 	.word	0x20000002
 8000f90:	200001a4 	.word	0x200001a4

08000f94 <lcd_set_text_size>:

void lcd_set_text_size(int16_t size_x, int16_t size_y) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	80fb      	strh	r3, [r7, #6]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	80bb      	strh	r3, [r7, #4]
  textsize_x = size_x;
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <lcd_set_text_size+0x28>)
 8000fa8:	801a      	strh	r2, [r3, #0]
  textsize_y = size_y;
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <lcd_set_text_size+0x2c>)
 8000fae:	801a      	strh	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000002 	.word	0x20000002

08000fc4 <baro_init>:
static int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
static int32_t t_fine;
static _Bool inited = false;
static uint8_t data[25];

baro_stat_t baro_init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Check barometer on I2C bus
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_ID, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <baro_init+0x1d0>)
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	22d0      	movs	r2, #208	; 0xd0
 8000fdc:	21ec      	movs	r1, #236	; 0xec
 8000fde:	486e      	ldr	r0, [pc, #440]	; (8001198 <baro_init+0x1d4>)
 8000fe0:	f003 ffe6 	bl	8004fb0 <HAL_I2C_Mem_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d006      	beq.n	8000ffc <baro_init+0x38>
		if (status == HAL_TIMEOUT)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d101      	bne.n	8000ff8 <baro_init+0x34>
			return BARO_ERR_TIMEOUT;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e0c9      	b.n	800118c <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0c7      	b.n	800118c <baro_init+0x1c8>
	}

	if (data[0] != BARO_ID_VALUE) {
 8000ffc:	4b65      	ldr	r3, [pc, #404]	; (8001194 <baro_init+0x1d0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b58      	cmp	r3, #88	; 0x58
 8001002:	d001      	beq.n	8001008 <baro_init+0x44>
		return BARO_ERR_GENERAL;
 8001004:	2303      	movs	r3, #3
 8001006:	e0c1      	b.n	800118c <baro_init+0x1c8>
	}

	// Config barometer
	// T and P oversampling - 16, Normal mode
	// SPI 3 wire Off, Filter 2x, Standby duration - 62.5 ms
	data[0] = BARO_MODE_NORMAL | BARO_OSRS_T_1 | BARO_OSRS_P_1;
 8001008:	4b62      	ldr	r3, [pc, #392]	; (8001194 <baro_init+0x1d0>)
 800100a:	2227      	movs	r2, #39	; 0x27
 800100c:	701a      	strb	r2, [r3, #0]
	data[1] = BARO_SPI3W_OFF | BARO_FILTER_OFF | BARO_T_SB_0_5;
 800100e:	4b61      	ldr	r3, [pc, #388]	; (8001194 <baro_init+0x1d0>)
 8001010:	2200      	movs	r2, #0
 8001012:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Mem_Write(&hi2c1, BARO_I2C_ADDR, BARO_REG_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, data, 2, 1000);
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2302      	movs	r3, #2
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <baro_init+0x1d0>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	22f4      	movs	r2, #244	; 0xf4
 8001026:	21ec      	movs	r1, #236	; 0xec
 8001028:	485b      	ldr	r0, [pc, #364]	; (8001198 <baro_init+0x1d4>)
 800102a:	f003 fec7 	bl	8004dbc <HAL_I2C_Mem_Write>
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <baro_init+0x82>
		if (status == HAL_TIMEOUT)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d101      	bne.n	8001042 <baro_init+0x7e>
			return BARO_ERR_TIMEOUT;
 800103e:	2302      	movs	r3, #2
 8001040:	e0a4      	b.n	800118c <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8001042:	2301      	movs	r3, #1
 8001044:	e0a2      	b.n	800118c <baro_init+0x1c8>
	}

	// Readout compensation values
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_CALIB00, I2C_MEMADD_SIZE_8BIT, data, 25, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2319      	movs	r3, #25
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4b50      	ldr	r3, [pc, #320]	; (8001194 <baro_init+0x1d0>)
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	2288      	movs	r2, #136	; 0x88
 8001058:	21ec      	movs	r1, #236	; 0xec
 800105a:	484f      	ldr	r0, [pc, #316]	; (8001198 <baro_init+0x1d4>)
 800105c:	f003 ffa8 	bl	8004fb0 <HAL_I2C_Mem_Read>
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <baro_init+0xb4>
		if (status == HAL_TIMEOUT)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d101      	bne.n	8001074 <baro_init+0xb0>
			return BARO_ERR_TIMEOUT;
 8001070:	2302      	movs	r3, #2
 8001072:	e08b      	b.n	800118c <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8001074:	2301      	movs	r3, #1
 8001076:	e089      	b.n	800118c <baro_init+0x1c8>
	}
	dig_T1 = (uint16_t)data [1] << 8 | (uint16_t)data [0];
 8001078:	4b46      	ldr	r3, [pc, #280]	; (8001194 <baro_init+0x1d0>)
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <baro_init+0x1d0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <baro_init+0x1d8>)
 800108e:	801a      	strh	r2, [r3, #0]
	dig_T2 =  (int16_t)data [3] << 8 |  (int16_t)data [2];
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <baro_init+0x1d0>)
 8001092:	78db      	ldrb	r3, [r3, #3]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <baro_init+0x1d0>)
 800109a:	789b      	ldrb	r3, [r3, #2]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <baro_init+0x1dc>)
 80010a4:	801a      	strh	r2, [r3, #0]
	dig_T3 =  (int16_t)data [5] << 8 |  (int16_t)data [4];
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <baro_init+0x1d0>)
 80010a8:	795b      	ldrb	r3, [r3, #5]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <baro_init+0x1d0>)
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <baro_init+0x1e0>)
 80010ba:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)data [7] << 8 | (uint16_t)data [6];
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <baro_init+0x1d0>)
 80010be:	79db      	ldrb	r3, [r3, #7]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <baro_init+0x1d0>)
 80010c6:	799b      	ldrb	r3, [r3, #6]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <baro_init+0x1e4>)
 80010d2:	801a      	strh	r2, [r3, #0]
	dig_P2 =  (int16_t)data [9] << 8 |  (int16_t)data [8];
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <baro_init+0x1d0>)
 80010d6:	7a5b      	ldrb	r3, [r3, #9]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <baro_init+0x1d0>)
 80010de:	7a1b      	ldrb	r3, [r3, #8]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <baro_init+0x1e8>)
 80010e8:	801a      	strh	r2, [r3, #0]
	dig_P3 =  (int16_t)data[11] << 8 |  (int16_t)data[10];
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <baro_init+0x1d0>)
 80010ec:	7adb      	ldrb	r3, [r3, #11]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <baro_init+0x1d0>)
 80010f4:	7a9b      	ldrb	r3, [r3, #10]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <baro_init+0x1ec>)
 80010fe:	801a      	strh	r2, [r3, #0]
	dig_P4 =  (int16_t)data[13] << 8 |  (int16_t)data[12];
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <baro_init+0x1d0>)
 8001102:	7b5b      	ldrb	r3, [r3, #13]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <baro_init+0x1d0>)
 800110a:	7b1b      	ldrb	r3, [r3, #12]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <baro_init+0x1f0>)
 8001114:	801a      	strh	r2, [r3, #0]
	dig_P5 =  (int16_t)data[15] << 8 |  (int16_t)data[14];
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <baro_init+0x1d0>)
 8001118:	7bdb      	ldrb	r3, [r3, #15]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <baro_init+0x1d0>)
 8001120:	7b9b      	ldrb	r3, [r3, #14]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <baro_init+0x1f4>)
 800112a:	801a      	strh	r2, [r3, #0]
	dig_P6 =  (int16_t)data[17] << 8 |  (int16_t)data[16];
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <baro_init+0x1d0>)
 800112e:	7c5b      	ldrb	r3, [r3, #17]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <baro_init+0x1d0>)
 8001136:	7c1b      	ldrb	r3, [r3, #16]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <baro_init+0x1f8>)
 8001140:	801a      	strh	r2, [r3, #0]
	dig_P7 =  (int16_t)data[19] << 8 |  (int16_t)data[18];
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <baro_init+0x1d0>)
 8001144:	7cdb      	ldrb	r3, [r3, #19]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <baro_init+0x1d0>)
 800114c:	7c9b      	ldrb	r3, [r3, #18]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <baro_init+0x1fc>)
 8001156:	801a      	strh	r2, [r3, #0]
	dig_P8 =  (int16_t)data[21] << 8 |  (int16_t)data[20];
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <baro_init+0x1d0>)
 800115a:	7d5b      	ldrb	r3, [r3, #21]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <baro_init+0x1d0>)
 8001162:	7d1b      	ldrb	r3, [r3, #20]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <baro_init+0x200>)
 800116c:	801a      	strh	r2, [r3, #0]
	dig_P9 =  (int16_t)data[23] << 8 |  (int16_t)data[22];
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <baro_init+0x1d0>)
 8001170:	7ddb      	ldrb	r3, [r3, #23]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <baro_init+0x1d0>)
 8001178:	7d9b      	ldrb	r3, [r3, #22]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <baro_init+0x204>)
 8001182:	801a      	strh	r2, [r3, #0]

	inited = true;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <baro_init+0x208>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]

	return BARO_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001cc 	.word	0x200001cc
 8001198:	20000230 	.word	0x20000230
 800119c:	200001aa 	.word	0x200001aa
 80011a0:	200001ae 	.word	0x200001ae
 80011a4:	200001b0 	.word	0x200001b0
 80011a8:	200001ac 	.word	0x200001ac
 80011ac:	200001b2 	.word	0x200001b2
 80011b0:	200001b4 	.word	0x200001b4
 80011b4:	200001b6 	.word	0x200001b6
 80011b8:	200001b8 	.word	0x200001b8
 80011bc:	200001ba 	.word	0x200001ba
 80011c0:	200001bc 	.word	0x200001bc
 80011c4:	200001be 	.word	0x200001be
 80011c8:	200001c0 	.word	0x200001c0
 80011cc:	200001c8 	.word	0x200001c8

080011d0 <baro_read_temp>:

int32_t baro_read_temp(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af04      	add	r7, sp, #16
	int32_t var1, var2, temp;

	if (!inited)
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <baro_read_temp+0xc4>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <baro_read_temp+0x1a>
		return INT32_MAX;
 80011e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80011e8:	e050      	b.n	800128c <baro_read_temp+0xbc>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2303      	movs	r3, #3
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <baro_read_temp+0xc8>)
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	22fa      	movs	r2, #250	; 0xfa
 80011fc:	21ec      	movs	r1, #236	; 0xec
 80011fe:	4827      	ldr	r0, [pc, #156]	; (800129c <baro_read_temp+0xcc>)
 8001200:	f003 fed6 	bl	8004fb0 <HAL_I2C_Mem_Read>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <baro_read_temp+0x44>
		return INT32_MAX;
 800120e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001212:	e03b      	b.n	800128c <baro_read_temp+0xbc>
	}
	int32_t adc_T = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <baro_read_temp+0xc8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	031a      	lsls	r2, r3, #12
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <baro_read_temp+0xc8>)
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4313      	orrs	r3, r2
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <baro_read_temp+0xc8>)
 8001224:	7892      	ldrb	r2, [r2, #2]
 8001226:	0912      	lsrs	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]

	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	10da      	asrs	r2, r3, #3
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <baro_read_temp+0xd0>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	1ad3      	subs	r3, r2, r3
		   ((int32_t)dig_T2)) >> 11;
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <baro_read_temp+0xd4>)
 800123c:	f9b2 2000 	ldrsh.w	r2, [r2]
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	12db      	asrs	r3, r3, #11
 8001246:	60fb      	str	r3, [r7, #12]

	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	111b      	asrs	r3, r3, #4
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <baro_read_temp+0xd0>)
 800124e:	8812      	ldrh	r2, [r2, #0]
 8001250:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	1112      	asrs	r2, r2, #4
 8001256:	4912      	ldr	r1, [pc, #72]	; (80012a0 <baro_read_temp+0xd0>)
 8001258:	8809      	ldrh	r1, [r1, #0]
 800125a:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 800125c:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8001260:	131b      	asrs	r3, r3, #12
		      ((int32_t)dig_T3)) >> 14;
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <baro_read_temp+0xd8>)
 8001264:	f9b2 2000 	ldrsh.w	r2, [r2]
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8001268:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 800126c:	139b      	asrs	r3, r3, #14
 800126e:	60bb      	str	r3, [r7, #8]

	t_fine = var1 + var2;
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4413      	add	r3, r2
 8001276:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <baro_read_temp+0xdc>)
 8001278:	6013      	str	r3, [r2, #0]

	temp = (t_fine * 5 + 128) >> 8;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <baro_read_temp+0xdc>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3380      	adds	r3, #128	; 0x80
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	607b      	str	r3, [r7, #4]

	return temp;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001c8 	.word	0x200001c8
 8001298:	200001cc 	.word	0x200001cc
 800129c:	20000230 	.word	0x20000230
 80012a0:	200001aa 	.word	0x200001aa
 80012a4:	200001ae 	.word	0x200001ae
 80012a8:	200001b0 	.word	0x200001b0
 80012ac:	200001c4 	.word	0x200001c4

080012b0 <baro_read_press>:

uint32_t baro_read_press(void) {
 80012b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012b4:	b0d0      	sub	sp, #320	; 0x140
 80012b6:	af04      	add	r7, sp, #16
	int64_t var1, var2, p;

	if (!inited)
 80012b8:	4bc6      	ldr	r3, [pc, #792]	; (80015d4 <baro_read_press+0x324>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f083 0301 	eor.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <baro_read_press+0x1c>
		return INT32_MAX;
 80012c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80012ca:	e2f6      	b.n	80018ba <baro_read_press+0x60a>

	if (baro_read_temp() == INT32_MAX)
 80012cc:	f7ff ff80 	bl	80011d0 <baro_read_temp>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d102      	bne.n	80012e0 <baro_read_press+0x30>
		return UINT32_MAX;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e2ec      	b.n	80018ba <baro_read_press+0x60a>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2303      	movs	r3, #3
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	4bbb      	ldr	r3, [pc, #748]	; (80015d8 <baro_read_press+0x328>)
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	22f7      	movs	r2, #247	; 0xf7
 80012f2:	21ec      	movs	r1, #236	; 0xec
 80012f4:	48b9      	ldr	r0, [pc, #740]	; (80015dc <baro_read_press+0x32c>)
 80012f6:	f003 fe5b 	bl	8004fb0 <HAL_I2C_Mem_Read>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (status != HAL_OK) {
 8001300:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <baro_read_press+0x5e>
		return INT32_MAX;
 8001308:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800130c:	e2d5      	b.n	80018ba <baro_read_press+0x60a>
	}
	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800130e:	4bb2      	ldr	r3, [pc, #712]	; (80015d8 <baro_read_press+0x328>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	031a      	lsls	r2, r3, #12
 8001314:	4bb0      	ldr	r3, [pc, #704]	; (80015d8 <baro_read_press+0x328>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	431a      	orrs	r2, r3
 800131c:	4bae      	ldr	r3, [pc, #696]	; (80015d8 <baro_read_press+0x328>)
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	var1 = ((int64_t)t_fine) - 128000;
 800132a:	4bad      	ldr	r3, [pc, #692]	; (80015e0 <baro_read_press+0x330>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	17da      	asrs	r2, r3, #31
 8001330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001334:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001338:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800133c:	460b      	mov	r3, r1
 800133e:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001342:	653b      	str	r3, [r7, #80]	; 0x50
 8001344:	4613      	mov	r3, r2
 8001346:	f143 33ff 	adc.w	r3, r3, #4294967295
 800134a:	657b      	str	r3, [r7, #84]	; 0x54
 800134c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001350:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001354:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001358:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800135c:	fb03 f102 	mul.w	r1, r3, r2
 8001360:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001364:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	18ca      	adds	r2, r1, r3
 800136e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001372:	fba3 4503 	umull	r4, r5, r3, r3
 8001376:	1953      	adds	r3, r2, r5
 8001378:	461d      	mov	r5, r3
 800137a:	4b9a      	ldr	r3, [pc, #616]	; (80015e4 <baro_read_press+0x334>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	b21b      	sxth	r3, r3
 8001382:	17da      	asrs	r2, r3, #31
 8001384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001388:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800138c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001390:	4603      	mov	r3, r0
 8001392:	fb03 f205 	mul.w	r2, r3, r5
 8001396:	460b      	mov	r3, r1
 8001398:	fb04 f303 	mul.w	r3, r4, r3
 800139c:	4413      	add	r3, r2
 800139e:	4602      	mov	r2, r0
 80013a0:	fba4 8902 	umull	r8, r9, r4, r2
 80013a4:	444b      	add	r3, r9
 80013a6:	4699      	mov	r9, r3
 80013a8:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80013ac:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 80013b0:	4b8d      	ldr	r3, [pc, #564]	; (80015e8 <baro_read_press+0x338>)
 80013b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	17da      	asrs	r2, r3, #31
 80013ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013be:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80013c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013c6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80013ca:	462a      	mov	r2, r5
 80013cc:	fb02 f203 	mul.w	r2, r2, r3
 80013d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013d4:	4621      	mov	r1, r4
 80013d6:	fb01 f303 	mul.w	r3, r1, r3
 80013da:	441a      	add	r2, r3
 80013dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013e0:	4621      	mov	r1, r4
 80013e2:	fba3 ab01 	umull	sl, fp, r3, r1
 80013e6:	eb02 030b 	add.w	r3, r2, fp
 80013ea:	469b      	mov	fp, r3
 80013ec:	f04f 0000 	mov.w	r0, #0
 80013f0:	f04f 0100 	mov.w	r1, #0
 80013f4:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80013f8:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80013fc:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001400:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001404:	1814      	adds	r4, r2, r0
 8001406:	64bc      	str	r4, [r7, #72]	; 0x48
 8001408:	414b      	adcs	r3, r1
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800140c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001410:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <baro_read_press+0x33c>)
 8001416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141a:	b21b      	sxth	r3, r3
 800141c:	17da      	asrs	r2, r3, #31
 800141e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001422:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001426:	f04f 0000 	mov.w	r0, #0
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001432:	00d9      	lsls	r1, r3, #3
 8001434:	2000      	movs	r0, #0
 8001436:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800143a:	1814      	adds	r4, r2, r0
 800143c:	643c      	str	r4, [r7, #64]	; 0x40
 800143e:	414b      	adcs	r3, r1
 8001440:	647b      	str	r3, [r7, #68]	; 0x44
 8001442:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001446:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 800144a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800144e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001452:	fb03 f102 	mul.w	r1, r3, r2
 8001456:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800145a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	18ca      	adds	r2, r1, r3
 8001464:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001468:	fba3 1303 	umull	r1, r3, r3, r3
 800146c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001470:	460b      	mov	r3, r1
 8001472:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800147a:	18d3      	adds	r3, r2, r3
 800147c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001480:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <baro_read_press+0x340>)
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	b21b      	sxth	r3, r3
 8001488:	17da      	asrs	r2, r3, #31
 800148a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800148e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001492:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001496:	462b      	mov	r3, r5
 8001498:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 800149c:	4642      	mov	r2, r8
 800149e:	fb02 f203 	mul.w	r2, r2, r3
 80014a2:	464b      	mov	r3, r9
 80014a4:	4621      	mov	r1, r4
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	4622      	mov	r2, r4
 80014ae:	4641      	mov	r1, r8
 80014b0:	fba2 1201 	umull	r1, r2, r2, r1
 80014b4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80014b8:	460a      	mov	r2, r1
 80014ba:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80014be:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80014c2:	4413      	add	r3, r2
 80014c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014c8:	f04f 0000 	mov.w	r0, #0
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80014d4:	4623      	mov	r3, r4
 80014d6:	0a18      	lsrs	r0, r3, #8
 80014d8:	462b      	mov	r3, r5
 80014da:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80014de:	462b      	mov	r3, r5
 80014e0:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)dig_P2) << 12);
 80014e2:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <baro_read_press+0x344>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	17da      	asrs	r2, r3, #31
 80014ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014f8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80014fc:	464a      	mov	r2, r9
 80014fe:	fb02 f203 	mul.w	r2, r2, r3
 8001502:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001506:	4644      	mov	r4, r8
 8001508:	fb04 f303 	mul.w	r3, r4, r3
 800150c:	441a      	add	r2, r3
 800150e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001512:	4644      	mov	r4, r8
 8001514:	fba3 4304 	umull	r4, r3, r3, r4
 8001518:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800151c:	4623      	mov	r3, r4
 800151e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001526:	18d3      	adds	r3, r2, r3
 8001528:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8001538:	464c      	mov	r4, r9
 800153a:	0323      	lsls	r3, r4, #12
 800153c:	4644      	mov	r4, r8
 800153e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001542:	4644      	mov	r4, r8
 8001544:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8001546:	1884      	adds	r4, r0, r2
 8001548:	63bc      	str	r4, [r7, #56]	; 0x38
 800154a:	eb41 0303 	adc.w	r3, r1, r3
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001550:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001554:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 8001558:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800155c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001560:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8001564:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <baro_read_press+0x348>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	2200      	movs	r2, #0
 8001570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001574:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001578:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800157c:	462b      	mov	r3, r5
 800157e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001582:	4642      	mov	r2, r8
 8001584:	fb02 f203 	mul.w	r2, r2, r3
 8001588:	464b      	mov	r3, r9
 800158a:	4621      	mov	r1, r4
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	4622      	mov	r2, r4
 8001594:	4641      	mov	r1, r8
 8001596:	fba2 1201 	umull	r1, r2, r2, r1
 800159a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800159e:	460a      	mov	r2, r1
 80015a0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80015a4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80015a8:	4413      	add	r3, r2
 80015aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80015ba:	4629      	mov	r1, r5
 80015bc:	104a      	asrs	r2, r1, #1
 80015be:	4629      	mov	r1, r5
 80015c0:	17cb      	asrs	r3, r1, #31
 80015c2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0) {
 80015c6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015ca:	4313      	orrs	r3, r2
 80015cc:	d116      	bne.n	80015fc <baro_read_press+0x34c>
		return 0; // avoid exception caused by division by zero
 80015ce:	2300      	movs	r3, #0
 80015d0:	e173      	b.n	80018ba <baro_read_press+0x60a>
 80015d2:	bf00      	nop
 80015d4:	200001c8 	.word	0x200001c8
 80015d8:	200001cc 	.word	0x200001cc
 80015dc:	20000230 	.word	0x20000230
 80015e0:	200001c4 	.word	0x200001c4
 80015e4:	200001ba 	.word	0x200001ba
 80015e8:	200001b8 	.word	0x200001b8
 80015ec:	200001b6 	.word	0x200001b6
 80015f0:	200001b4 	.word	0x200001b4
 80015f4:	200001b2 	.word	0x200001b2
 80015f8:	200001ac 	.word	0x200001ac
	}
	p = 1048576 - adc_P;
 80015fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001600:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001604:	17da      	asrs	r2, r3, #31
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
 8001608:	637a      	str	r2, [r7, #52]	; 0x34
 800160a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800160e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8001612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001616:	105b      	asrs	r3, r3, #1
 8001618:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800161c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001620:	07db      	lsls	r3, r3, #31
 8001622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001626:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800162a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800162e:	4621      	mov	r1, r4
 8001630:	1a89      	subs	r1, r1, r2
 8001632:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001636:	4629      	mov	r1, r5
 8001638:	eb61 0303 	sbc.w	r3, r1, r3
 800163c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001640:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001644:	4622      	mov	r2, r4
 8001646:	462b      	mov	r3, r5
 8001648:	1891      	adds	r1, r2, r2
 800164a:	62b9      	str	r1, [r7, #40]	; 0x28
 800164c:	415b      	adcs	r3, r3
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001654:	4621      	mov	r1, r4
 8001656:	1851      	adds	r1, r2, r1
 8001658:	6239      	str	r1, [r7, #32]
 800165a:	4629      	mov	r1, r5
 800165c:	414b      	adcs	r3, r1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800166c:	4649      	mov	r1, r9
 800166e:	018b      	lsls	r3, r1, #6
 8001670:	4641      	mov	r1, r8
 8001672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001676:	4641      	mov	r1, r8
 8001678:	018a      	lsls	r2, r1, #6
 800167a:	4641      	mov	r1, r8
 800167c:	1889      	adds	r1, r1, r2
 800167e:	61b9      	str	r1, [r7, #24]
 8001680:	4649      	mov	r1, r9
 8001682:	eb43 0101 	adc.w	r1, r3, r1
 8001686:	61f9      	str	r1, [r7, #28]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001694:	4649      	mov	r1, r9
 8001696:	008b      	lsls	r3, r1, #2
 8001698:	4641      	mov	r1, r8
 800169a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800169e:	4641      	mov	r1, r8
 80016a0:	008a      	lsls	r2, r1, #2
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	4622      	mov	r2, r4
 80016aa:	189b      	adds	r3, r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	460b      	mov	r3, r1
 80016b0:	462a      	mov	r2, r5
 80016b2:	eb42 0303 	adc.w	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80016c4:	4649      	mov	r1, r9
 80016c6:	008b      	lsls	r3, r1, #2
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016ce:	4641      	mov	r1, r8
 80016d0:	008a      	lsls	r2, r1, #2
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	4622      	mov	r2, r4
 80016da:	189b      	adds	r3, r3, r2
 80016dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016e0:	462b      	mov	r3, r5
 80016e2:	460a      	mov	r2, r1
 80016e4:	eb42 0303 	adc.w	r3, r2, r3
 80016e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80016f4:	f7fe fdcc 	bl	8000290 <__aeabi_ldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001700:	4b71      	ldr	r3, [pc, #452]	; (80018c8 <baro_read_press+0x618>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	b21b      	sxth	r3, r3
 8001708:	17da      	asrs	r2, r3, #31
 800170a:	67bb      	str	r3, [r7, #120]	; 0x78
 800170c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800170e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0b50      	lsrs	r0, r2, #13
 800171c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001720:	1359      	asrs	r1, r3, #13
 8001722:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001726:	462b      	mov	r3, r5
 8001728:	fb00 f203 	mul.w	r2, r0, r3
 800172c:	4623      	mov	r3, r4
 800172e:	fb03 f301 	mul.w	r3, r3, r1
 8001732:	4413      	add	r3, r2
 8001734:	4622      	mov	r2, r4
 8001736:	fba2 1200 	umull	r1, r2, r2, r0
 800173a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800173e:	460a      	mov	r2, r1
 8001740:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001744:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001748:	4413      	add	r3, r2
 800174a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800174e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	0b50      	lsrs	r0, r2, #13
 800175c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001760:	1359      	asrs	r1, r3, #13
 8001762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001766:	462b      	mov	r3, r5
 8001768:	fb00 f203 	mul.w	r2, r0, r3
 800176c:	4623      	mov	r3, r4
 800176e:	fb03 f301 	mul.w	r3, r3, r1
 8001772:	4413      	add	r3, r2
 8001774:	4622      	mov	r2, r4
 8001776:	fba2 1200 	umull	r1, r2, r2, r0
 800177a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800177e:	460a      	mov	r2, r1
 8001780:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001784:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001788:	4413      	add	r3, r2
 800178a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800179a:	4621      	mov	r1, r4
 800179c:	0e4a      	lsrs	r2, r1, #25
 800179e:	4629      	mov	r1, r5
 80017a0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017a4:	4629      	mov	r1, r5
 80017a6:	164b      	asrs	r3, r1, #25
 80017a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <baro_read_press+0x61c>)
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	17da      	asrs	r2, r3, #31
 80017b6:	673b      	str	r3, [r7, #112]	; 0x70
 80017b8:	677a      	str	r2, [r7, #116]	; 0x74
 80017ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017be:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80017c2:	462a      	mov	r2, r5
 80017c4:	fb02 f203 	mul.w	r2, r2, r3
 80017c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017cc:	4621      	mov	r1, r4
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	441a      	add	r2, r3
 80017d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017d8:	4621      	mov	r1, r4
 80017da:	fba3 1301 	umull	r1, r3, r3, r1
 80017de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017e2:	460b      	mov	r3, r1
 80017e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80017e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017ec:	18d3      	adds	r3, r2, r3
 80017ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80017fe:	4621      	mov	r1, r4
 8001800:	0cca      	lsrs	r2, r1, #19
 8001802:	4629      	mov	r1, r5
 8001804:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001808:	4629      	mov	r1, r5
 800180a:	14cb      	asrs	r3, r1, #19
 800180c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8001810:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001814:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001818:	1884      	adds	r4, r0, r2
 800181a:	66bc      	str	r4, [r7, #104]	; 0x68
 800181c:	eb41 0303 	adc.w	r3, r1, r3
 8001820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001822:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001826:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800182a:	4621      	mov	r1, r4
 800182c:	1889      	adds	r1, r1, r2
 800182e:	6639      	str	r1, [r7, #96]	; 0x60
 8001830:	4629      	mov	r1, r5
 8001832:	eb43 0101 	adc.w	r1, r3, r1
 8001836:	6679      	str	r1, [r7, #100]	; 0x64
 8001838:	f04f 0000 	mov.w	r0, #0
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001844:	4623      	mov	r3, r4
 8001846:	0a18      	lsrs	r0, r3, #8
 8001848:	462b      	mov	r3, r5
 800184a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800184e:	462b      	mov	r3, r5
 8001850:	1219      	asrs	r1, r3, #8
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <baro_read_press+0x620>)
 8001854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001858:	b21b      	sxth	r3, r3
 800185a:	17da      	asrs	r2, r3, #31
 800185c:	65bb      	str	r3, [r7, #88]	; 0x58
 800185e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800186c:	464c      	mov	r4, r9
 800186e:	0123      	lsls	r3, r4, #4
 8001870:	4644      	mov	r4, r8
 8001872:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001876:	4644      	mov	r4, r8
 8001878:	0122      	lsls	r2, r4, #4
 800187a:	1884      	adds	r4, r0, r2
 800187c:	60bc      	str	r4, [r7, #8]
 800187e:	eb41 0303 	adc.w	r3, r1, r3
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001888:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return p / 256;
 800188c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001890:	2b00      	cmp	r3, #0
 8001892:	da07      	bge.n	80018a4 <baro_read_press+0x5f4>
 8001894:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	f143 0300 	adc.w	r3, r3, #0
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	0a10      	lsrs	r0, r2, #8
 80018ae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018b2:	1219      	asrs	r1, r3, #8
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2

}
 80018ba:	4618      	mov	r0, r3
 80018bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80018c0:	46bd      	mov	sp, r7
 80018c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c6:	bf00      	nop
 80018c8:	200001c0 	.word	0x200001c0
 80018cc:	200001be 	.word	0x200001be
 80018d0:	200001bc 	.word	0x200001bc

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f001 ff9a 	bl	8003810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f888 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f000 fa80 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f000 fa56 	bl	8001d94 <MX_DMA_Init>
  MX_ADC1_Init();
 80018e8:	f000 f8ec 	bl	8001ac4 <MX_ADC1_Init>
  MX_TIM9_Init();
 80018ec:	f000 f9a0 	bl	8001c30 <MX_TIM9_Init>
  MX_TIM10_Init();
 80018f0:	f000 f9d8 	bl	8001ca4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80018f4:	f000 f9fa 	bl	8001cec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80018f8:	f000 f936 	bl	8001b68 <MX_I2C1_Init>
  MX_SPI1_Init();
 80018fc:	f000 f962 	bl	8001bc4 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8001900:	f000 fa1e 	bl	8001d40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001904:	f006 ff24 	bl	8008750 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART_LOG */
  muxUART_LOGHandle = osMutexNew(&muxUART_LOG_attributes);
 8001908:	4823      	ldr	r0, [pc, #140]	; (8001998 <main+0xc4>)
 800190a:	f007 f8e7 	bl	8008adc <osMutexNew>
 800190e:	4603      	mov	r3, r0
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <main+0xc8>)
 8001912:	6013      	str	r3, [r2, #0]

  /* creation of muxLcd */
  muxLcdHandle = osMutexNew(&muxLcd_attributes);
 8001914:	4822      	ldr	r0, [pc, #136]	; (80019a0 <main+0xcc>)
 8001916:	f007 f8e1 	bl	8008adc <osMutexNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <main+0xd0>)
 800191e:	6013      	str	r3, [r2, #0]

  /* creation of muxUART_WIFI */
  muxUART_WIFIHandle = osMutexNew(&muxUART_WIFI_attributes);
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <main+0xd4>)
 8001922:	f007 f8db 	bl	8008adc <osMutexNew>
 8001926:	4603      	mov	r3, r0
 8001928:	4a20      	ldr	r2, [pc, #128]	; (80019ac <main+0xd8>)
 800192a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUART_TX_WIFI */
  semUART_TX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_TX_WIFI_attributes);
 800192c:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <main+0xdc>)
 800192e:	2101      	movs	r1, #1
 8001930:	2001      	movs	r0, #1
 8001932:	f007 f9e1 	bl	8008cf8 <osSemaphoreNew>
 8001936:	4603      	mov	r3, r0
 8001938:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <main+0xe0>)
 800193a:	6013      	str	r3, [r2, #0]

  /* creation of semUART_RX_WIFI */
  semUART_RX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_RX_WIFI_attributes);
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <main+0xe4>)
 800193e:	2101      	movs	r1, #1
 8001940:	2001      	movs	r0, #1
 8001942:	f007 f9d9 	bl	8008cf8 <osSemaphoreNew>
 8001946:	4603      	mov	r3, r0
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <main+0xe8>)
 800194a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskWiFi */
  taskWiFiHandle = osThreadNew(StartTaskWiFi, NULL, &taskWiFi_attributes);
 800194c:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <main+0xec>)
 800194e:	2100      	movs	r1, #0
 8001950:	481c      	ldr	r0, [pc, #112]	; (80019c4 <main+0xf0>)
 8001952:	f006 ff47 	bl	80087e4 <osThreadNew>
 8001956:	4603      	mov	r3, r0
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <main+0xf4>)
 800195a:	6013      	str	r3, [r2, #0]

  /* creation of taskBaro */
  taskBaroHandle = osThreadNew(StartTaskBaro, NULL, &taskBaro_attributes);
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <main+0xf8>)
 800195e:	2100      	movs	r1, #0
 8001960:	481b      	ldr	r0, [pc, #108]	; (80019d0 <main+0xfc>)
 8001962:	f006 ff3f 	bl	80087e4 <osThreadNew>
 8001966:	4603      	mov	r3, r0
 8001968:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <main+0x100>)
 800196a:	6013      	str	r3, [r2, #0]

  /* creation of taskDefault */
  taskDefaultHandle = osThreadNew(StartTaskDefault, NULL, &taskDefault_attributes);
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <main+0x104>)
 800196e:	2100      	movs	r1, #0
 8001970:	481a      	ldr	r0, [pc, #104]	; (80019dc <main+0x108>)
 8001972:	f006 ff37 	bl	80087e4 <osThreadNew>
 8001976:	4603      	mov	r3, r0
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <main+0x10c>)
 800197a:	6013      	str	r3, [r2, #0]

  /* creation of taskWiFiListen */
  taskWiFiListenHandle = osThreadNew(StartTaskWiFiListen, NULL, &taskWiFiListen_attributes);
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <main+0x110>)
 800197e:	2100      	movs	r1, #0
 8001980:	4819      	ldr	r0, [pc, #100]	; (80019e8 <main+0x114>)
 8001982:	f006 ff2f 	bl	80087e4 <osThreadNew>
 8001986:	4603      	mov	r3, r0
 8001988:	4a18      	ldr	r2, [pc, #96]	; (80019ec <main+0x118>)
 800198a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  streams_init();
 800198c:	f001 f8ae 	bl	8002aec <streams_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001990:	f006 ff02 	bl	8008798 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001994:	e7fe      	b.n	8001994 <main+0xc0>
 8001996:	bf00      	nop
 8001998:	0800f718 	.word	0x0800f718
 800199c:	200004c4 	.word	0x200004c4
 80019a0:	0800f728 	.word	0x0800f728
 80019a4:	200004c8 	.word	0x200004c8
 80019a8:	0800f738 	.word	0x0800f738
 80019ac:	200004cc 	.word	0x200004cc
 80019b0:	0800f748 	.word	0x0800f748
 80019b4:	200004d0 	.word	0x200004d0
 80019b8:	0800f758 	.word	0x0800f758
 80019bc:	200004d4 	.word	0x200004d4
 80019c0:	0800f688 	.word	0x0800f688
 80019c4:	08001ed1 	.word	0x08001ed1
 80019c8:	200004b4 	.word	0x200004b4
 80019cc:	0800f6ac 	.word	0x0800f6ac
 80019d0:	08002055 	.word	0x08002055
 80019d4:	200004b8 	.word	0x200004b8
 80019d8:	0800f6d0 	.word	0x0800f6d0
 80019dc:	080020e9 	.word	0x080020e9
 80019e0:	200004bc 	.word	0x200004bc
 80019e4:	0800f6f4 	.word	0x0800f6f4
 80019e8:	08002dd9 	.word	0x08002dd9
 80019ec:	200004c0 	.word	0x200004c0

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	; 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00b f9ce 	bl	800cda0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <SystemClock_Config+0xcc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <SystemClock_Config+0xcc>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <SystemClock_Config+0xcc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <SystemClock_Config+0xd0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a3c:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <SystemClock_Config+0xd0>)
 8001a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <SystemClock_Config+0xd0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a64:	2319      	movs	r3, #25
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a68:	23a8      	movs	r3, #168	; 0xa8
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 f81b 	bl	8005ab4 <HAL_RCC_OscConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a84:	f000 fbcc 	bl	8002220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a88:	230f      	movs	r3, #15
 8001a8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 fa7d 	bl	8005fa4 <HAL_RCC_ClockConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ab0:	f000 fbb6 	bl	8002220 <Error_Handler>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3750      	adds	r7, #80	; 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aca:	463b      	mov	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001ada:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001ade:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ae2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <MX_ADC1_Init+0xa0>)
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b26:	f001 fee5 	bl	80038f4 <HAL_ADC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b30:	f000 fb76 	bl	8002220 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_ADC1_Init+0x98>)
 8001b46:	f001 ff19 	bl	800397c <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b50:	f000 fb66 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200001e8 	.word	0x200001e8
 8001b60:	40012000 	.word	0x40012000
 8001b64:	0f000001 	.word	0x0f000001

08001b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <MX_I2C1_Init+0x54>)
 8001b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <MX_I2C1_Init+0x58>)
 8001b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_I2C1_Init+0x50>)
 8001ba6:	f002 ffc5 	bl	8004b34 <HAL_I2C_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb0:	f000 fb36 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000230 	.word	0x20000230
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	000186a0 	.word	0x000186a0

08001bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bca:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <MX_SPI1_Init+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001c10:	220a      	movs	r2, #10
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_SPI1_Init+0x64>)
 8001c16:	f004 fba5 	bl	8006364 <HAL_SPI_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c20:	f000 fafe 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000284 	.word	0x20000284
 8001c2c:	40013000 	.word	0x40013000

08001c30 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	463b      	mov	r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c44:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <MX_TIM9_Init+0x70>)
 8001c46:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c4a:	f240 3247 	movw	r2, #839	; 0x347
 8001c4e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 49999;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c58:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c5c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001c6a:	480c      	ldr	r0, [pc, #48]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c6c:	f004 ff28 	bl	8006ac0 <HAL_TIM_Base_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001c76:	f000 fad3 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001c80:	463b      	mov	r3, r7
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_TIM9_Init+0x6c>)
 8001c86:	f005 f872 	bl	8006d6e <HAL_TIM_ConfigClockSource>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001c90:	f000 fac6 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200002dc 	.word	0x200002dc
 8001ca0:	40014000 	.word	0x40014000

08001ca4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_TIM10_Init+0x40>)
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <MX_TIM10_Init+0x44>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84;
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <MX_TIM10_Init+0x40>)
 8001cb0:	2254      	movs	r2, #84	; 0x54
 8001cb2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_TIM10_Init+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <MX_TIM10_Init+0x40>)
 8001cbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_TIM10_Init+0x40>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_TIM10_Init+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_TIM10_Init+0x40>)
 8001cd0:	f004 fef6 	bl	8006ac0 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001cda:	f000 faa1 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000324 	.word	0x20000324
 8001ce8:	40014400 	.word	0x40014400

08001cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <MX_USART1_UART_Init+0x50>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d24:	f005 fa4a 	bl	80071bc <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d2e:	f000 fa77 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000036c 	.word	0x2000036c
 8001d3c:	40011000 	.word	0x40011000

08001d40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_USART6_UART_Init+0x50>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USART6_UART_Init+0x4c>)
 8001d78:	f005 fa20 	bl	80071bc <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d82:	f000 fa4d 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200003b0 	.word	0x200003b0
 8001d90:	40011400 	.word	0x40011400

08001d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_DMA_Init+0x4c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <MX_DMA_Init+0x4c>)
 8001da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <MX_DMA_Init+0x4c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2105      	movs	r1, #5
 8001dba:	2039      	movs	r0, #57	; 0x39
 8001dbc:	f002 f8d7 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001dc0:	2039      	movs	r0, #57	; 0x39
 8001dc2:	f002 f8f0 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2105      	movs	r1, #5
 8001dca:	203a      	movs	r0, #58	; 0x3a
 8001dcc:	f002 f8cf 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dd0:	203a      	movs	r0, #58	; 0x3a
 8001dd2:	f002 f8e8 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a30      	ldr	r2, [pc, #192]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <MX_GPIO_Init+0xe0>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e70:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <MX_GPIO_Init+0xe4>)
 8001e72:	f002 fe45 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 8001e76:	2201      	movs	r2, #1
 8001e78:	2158      	movs	r1, #88	; 0x58
 8001e7a:	4814      	ldr	r0, [pc, #80]	; (8001ecc <MX_GPIO_Init+0xe8>)
 8001e7c:	f002 fe40 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <MX_GPIO_Init+0xe4>)
 8001e9a:	f002 fcad 	bl	80047f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin;
 8001e9e:	2358      	movs	r3, #88	; 0x58
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_GPIO_Init+0xe8>)
 8001eb6:	f002 fc9f 	bl	80047f8 <HAL_GPIO_Init>

}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <StartTaskWiFi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskWiFi */
void StartTaskWiFi(void *argument)
	{
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	b099      	sub	sp, #100	; 0x64
 8001ed4:	af08      	add	r7, sp, #32
 8001ed6:	60f8      	str	r0, [r7, #12]
	  /* USER CODE BEGIN 5 */
	  // Wait for WiFi init
	  osThreadFlagsWait(FLAG_WIFI_RDY, osFlagsWaitAll, osWaitForever);
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	2101      	movs	r1, #1
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f006 fd60 	bl	80089a4 <osThreadFlagsWait>

	  // And try to connect to AP
	  printf("Try to connect to '%s'... ", wifi_ap);
 8001ee4:	494e      	ldr	r1, [pc, #312]	; (8002020 <StartTaskWiFi+0x150>)
 8001ee6:	484f      	ldr	r0, [pc, #316]	; (8002024 <StartTaskWiFi+0x154>)
 8001ee8:	f00b fb42 	bl	800d570 <iprintf>
	  wifi_status_t st = wifi_connect_to_ap(wifi_ap, wifi_pass, pdMS_TO_TICKS(30000));
 8001eec:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <StartTaskWiFi+0x158>)
 8001ef2:	484b      	ldr	r0, [pc, #300]	; (8002020 <StartTaskWiFi+0x150>)
 8001ef4:	f001 f962 	bl	80031bc <wifi_connect_to_ap>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if (st) {
 8001efe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01e      	beq.n	8001f44 <StartTaskWiFi+0x74>
	    if (st == WIFI_ERR_TMT)
 8001f06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d103      	bne.n	8001f16 <StartTaskWiFi+0x46>
	      printf("timeout\n");
 8001f0e:	4847      	ldr	r0, [pc, #284]	; (800202c <StartTaskWiFi+0x15c>)
 8001f10:	f00b fbb4 	bl	800d67c <puts>
 8001f14:	e012      	b.n	8001f3c <StartTaskWiFi+0x6c>
	    else if (st == WIFI_ERR_NO_AP)
 8001f16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d103      	bne.n	8001f26 <StartTaskWiFi+0x56>
	      printf("no AP\n");
 8001f1e:	4844      	ldr	r0, [pc, #272]	; (8002030 <StartTaskWiFi+0x160>)
 8001f20:	f00b fbac 	bl	800d67c <puts>
 8001f24:	e00a      	b.n	8001f3c <StartTaskWiFi+0x6c>
	    else if (st == WIFI_ERR_NO_IP)
 8001f26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d103      	bne.n	8001f36 <StartTaskWiFi+0x66>
	      printf("didn't get IP\n");
 8001f2e:	4841      	ldr	r0, [pc, #260]	; (8002034 <StartTaskWiFi+0x164>)
 8001f30:	f00b fba4 	bl	800d67c <puts>
 8001f34:	e002      	b.n	8001f3c <StartTaskWiFi+0x6c>
	    else
	      printf("ERROR\n");
 8001f36:	4840      	ldr	r0, [pc, #256]	; (8002038 <StartTaskWiFi+0x168>)
 8001f38:	f00b fba0 	bl	800d67c <puts>
	    while (1) {
	      osDelay(10);
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f006 fdb2 	bl	8008aa6 <osDelay>
 8001f42:	e7fb      	b.n	8001f3c <StartTaskWiFi+0x6c>
	    }
	  }
	  printf("OK\n");
 8001f44:	483d      	ldr	r0, [pc, #244]	; (800203c <StartTaskWiFi+0x16c>)
 8001f46:	f00b fb99 	bl	800d67c <puts>
	  lcd_set_text_size(2, 2);
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f7ff f821 	bl	8000f94 <lcd_set_text_size>
	  lcd_set_cursor(4, 4);
 8001f52:	2104      	movs	r1, #4
 8001f54:	2004      	movs	r0, #4
 8001f56:	f7fe ffef 	bl	8000f38 <lcd_set_cursor>
	  lcd_print(wifi_ap);
 8001f5a:	4831      	ldr	r0, [pc, #196]	; (8002020 <StartTaskWiFi+0x150>)
 8001f5c:	f7fe ffd6 	bl	8000f0c <lcd_print>

	  uint32_t ip[4], mac[6];
	  if (wifi_get_own_ip(ip, mac) == WIFI_OK) {
 8001f60:	f107 0214 	add.w	r2, r7, #20
 8001f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 f9b8 	bl	80032e0 <wifi_get_own_ip>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d131      	bne.n	8001fda <StartTaskWiFi+0x10a>
	    printf("IP: %lu.%lu.%lu.%lu, MAC: %02lX:%02lX:%02lX:%02lX:%02lX:%02lX\n",
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f80:	6038      	str	r0, [r7, #0]
 8001f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	69f8      	ldr	r0, [r7, #28]
 8001f8a:	6a3c      	ldr	r4, [r7, #32]
 8001f8c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001f8e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8001f90:	9606      	str	r6, [sp, #24]
 8001f92:	9505      	str	r5, [sp, #20]
 8001f94:	9404      	str	r4, [sp, #16]
 8001f96:	9003      	str	r0, [sp, #12]
 8001f98:	9102      	str	r1, [sp, #8]
 8001f9a:	9201      	str	r2, [sp, #4]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4826      	ldr	r0, [pc, #152]	; (8002040 <StartTaskWiFi+0x170>)
 8001fa6:	f00b fae3 	bl	800d570 <iprintf>
	        ip[0], ip[1], ip[2], ip[3],
	        mac[0], mac[1], mac[2],
	        mac[3], mac[4], mac[5]);
	    sprintf(text, "%ld.%ld.%ld.%ld", ip[0], ip[1], ip[2], ip[3]);
 8001faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <StartTaskWiFi+0x174>)
 8001fbc:	4822      	ldr	r0, [pc, #136]	; (8002048 <StartTaskWiFi+0x178>)
 8001fbe:	f00b fd39 	bl	800da34 <siprintf>
	    lcd_set_text_size(2, 2);
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7fe ffe5 	bl	8000f94 <lcd_set_text_size>
	    lcd_set_cursor(3, 2);
 8001fca:	2102      	movs	r1, #2
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f7fe ffb3 	bl	8000f38 <lcd_set_cursor>
	    lcd_print(text);
 8001fd2:	481d      	ldr	r0, [pc, #116]	; (8002048 <StartTaskWiFi+0x178>)
 8001fd4:	f7fe ff9a 	bl	8000f0c <lcd_print>
 8001fd8:	e00e      	b.n	8001ff8 <StartTaskWiFi+0x128>
	  } else {
	    sprintf(text, "none");
 8001fda:	491c      	ldr	r1, [pc, #112]	; (800204c <StartTaskWiFi+0x17c>)
 8001fdc:	481a      	ldr	r0, [pc, #104]	; (8002048 <StartTaskWiFi+0x178>)
 8001fde:	f00b fd29 	bl	800da34 <siprintf>
	    lcd_set_text_size(2, 2);
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f7fe ffd5 	bl	8000f94 <lcd_set_text_size>
	    lcd_set_cursor(3, 2);
 8001fea:	2102      	movs	r1, #2
 8001fec:	2003      	movs	r0, #3
 8001fee:	f7fe ffa3 	bl	8000f38 <lcd_set_cursor>
	    lcd_print(text);
 8001ff2:	4815      	ldr	r0, [pc, #84]	; (8002048 <StartTaskWiFi+0x178>)
 8001ff4:	f7fe ff8a 	bl	8000f0c <lcd_print>
	  }

	  wifi_server(1, 80);
 8001ff8:	2150      	movs	r1, #80	; 0x50
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f001 fa70 	bl	80034e0 <wifi_server>
	  lcd_set_text_size(2, 2);
 8002000:	2102      	movs	r1, #2
 8002002:	2002      	movs	r0, #2
 8002004:	f7fe ffc6 	bl	8000f94 <lcd_set_text_size>
	  lcd_set_cursor(0, 5);
 8002008:	2105      	movs	r1, #5
 800200a:	2000      	movs	r0, #0
 800200c:	f7fe ff94 	bl	8000f38 <lcd_set_cursor>
	  lcd_print("SRV START");
 8002010:	480f      	ldr	r0, [pc, #60]	; (8002050 <StartTaskWiFi+0x180>)
 8002012:	f7fe ff7b 	bl	8000f0c <lcd_print>

	  /* Infinite loop */
	  for(;;) {
	    osDelay(pdMS_TO_TICKS(1000));
 8002016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800201a:	f006 fd44 	bl	8008aa6 <osDelay>
 800201e:	e7fa      	b.n	8002016 <StartTaskWiFi+0x146>
 8002020:	200000e4 	.word	0x200000e4
 8002024:	0800ed94 	.word	0x0800ed94
 8002028:	200000f8 	.word	0x200000f8
 800202c:	0800edb0 	.word	0x0800edb0
 8002030:	0800edb8 	.word	0x0800edb8
 8002034:	0800edc0 	.word	0x0800edc0
 8002038:	0800edd0 	.word	0x0800edd0
 800203c:	0800edd8 	.word	0x0800edd8
 8002040:	0800eddc 	.word	0x0800eddc
 8002044:	0800ee1c 	.word	0x0800ee1c
 8002048:	200004dc 	.word	0x200004dc
 800204c:	0800ee2c 	.word	0x0800ee2c
 8002050:	0800ee34 	.word	0x0800ee34

08002054 <StartTaskBaro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBaro */
void StartTaskBaro(void *argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBaro */
  osThreadFlagsWait(FLAG_BARO_RDY, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	2102      	movs	r1, #2
 8002062:	2002      	movs	r0, #2
 8002064:	f006 fc9e 	bl	80089a4 <osThreadFlagsWait>
  lcd_set_text_size(1, 1);
 8002068:	2101      	movs	r1, #1
 800206a:	2001      	movs	r0, #1
 800206c:	f7fe ff92 	bl	8000f94 <lcd_set_text_size>
  lcd_set_cursor(0, 12);
 8002070:	210c      	movs	r1, #12
 8002072:	2000      	movs	r0, #0
 8002074:	f7fe ff60 	bl	8000f38 <lcd_set_cursor>
  lcd_print("Pressure:");
 8002078:	4816      	ldr	r0, [pc, #88]	; (80020d4 <StartTaskBaro+0x80>)
 800207a:	f7fe ff47 	bl	8000f0c <lcd_print>

  /* Infinite loop */
  for(;;) {
    pressure = baro_read_press();
 800207e:	f7ff f917 	bl	80012b0 <baro_read_press>
 8002082:	4603      	mov	r3, r0
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <StartTaskBaro+0x84>)
 8002086:	6013      	str	r3, [r2, #0]
    sprintf(text, "%ld.%02ld hPa\n      ", pressure/100, pressure%100);
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <StartTaskBaro+0x84>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a13      	ldr	r2, [pc, #76]	; (80020dc <StartTaskBaro+0x88>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0959      	lsrs	r1, r3, #5
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <StartTaskBaro+0x84>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <StartTaskBaro+0x88>)
 800209a:	fba3 0302 	umull	r0, r3, r3, r2
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	fb00 f303 	mul.w	r3, r0, r3
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	460a      	mov	r2, r1
 80020aa:	490d      	ldr	r1, [pc, #52]	; (80020e0 <StartTaskBaro+0x8c>)
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <StartTaskBaro+0x90>)
 80020ae:	f00b fcc1 	bl	800da34 <siprintf>
    lcd_set_text_size(1, 1);
 80020b2:	2101      	movs	r1, #1
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7fe ff6d 	bl	8000f94 <lcd_set_text_size>
    lcd_set_cursor(10, 12);
 80020ba:	210c      	movs	r1, #12
 80020bc:	200a      	movs	r0, #10
 80020be:	f7fe ff3b 	bl	8000f38 <lcd_set_cursor>
    lcd_print(text);
 80020c2:	4808      	ldr	r0, [pc, #32]	; (80020e4 <StartTaskBaro+0x90>)
 80020c4:	f7fe ff22 	bl	8000f0c <lcd_print>
    osDelay(pdMS_TO_TICKS(1000));
 80020c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020cc:	f006 fceb 	bl	8008aa6 <osDelay>
    pressure = baro_read_press();
 80020d0:	e7d5      	b.n	800207e <StartTaskBaro+0x2a>
 80020d2:	bf00      	nop
 80020d4:	0800ee40 	.word	0x0800ee40
 80020d8:	200004d8 	.word	0x200004d8
 80020dc:	51eb851f 	.word	0x51eb851f
 80020e0:	0800ee4c 	.word	0x0800ee4c
 80020e4:	200004dc 	.word	0x200004dc

080020e8 <StartTaskDefault>:
* @brief Function implementing the taskDefault thread.
* @param argument: Not used
* @retval None
*/
void StartTaskDefault(void *argument)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskDefault */

	  lcd_init();
 80020f0:	f7fe fb6e 	bl	80007d0 <lcd_init>
	  lcd_fill(ST7735_BLUE);
 80020f4:	201f      	movs	r0, #31
 80020f6:	f7fe fd35 	bl	8000b64 <lcd_fill>
	  lcd_set_text_bg_color(ST7735_BLUE);
 80020fa:	201f      	movs	r0, #31
 80020fc:	f7fe fd5c 	bl	8000bb8 <lcd_set_text_bg_color>
	  lcd_set_text_color(ST7735_YELLOW);
 8002100:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002104:	f7fe fd48 	bl	8000b98 <lcd_set_text_color>
	  //lcd_set_text_size(2, 2);
	  lcd_set_cursor(0, 0);
 8002108:	2100      	movs	r1, #0
 800210a:	2000      	movs	r0, #0
 800210c:	f7fe ff14 	bl	8000f38 <lcd_set_cursor>
	  lcd_print("Init LCD... ");
 8002110:	4835      	ldr	r0, [pc, #212]	; (80021e8 <StartTaskDefault+0x100>)
 8002112:	f7fe fefb 	bl	8000f0c <lcd_print>
	  lcd_print("Baro:");
 8002116:	4835      	ldr	r0, [pc, #212]	; (80021ec <StartTaskDefault+0x104>)
 8002118:	f7fe fef8 	bl	8000f0c <lcd_print>
	  lcd_set_cursor(0, 2);
 800211c:	2102      	movs	r1, #2
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe ff0a 	bl	8000f38 <lcd_set_cursor>
	  lcd_print("WiFi:");
 8002124:	4832      	ldr	r0, [pc, #200]	; (80021f0 <StartTaskDefault+0x108>)
 8002126:	f7fe fef1 	bl	8000f0c <lcd_print>
	  lcd_set_cursor(0, 3);
 800212a:	2103      	movs	r1, #3
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe ff03 	bl	8000f38 <lcd_set_cursor>
	  lcd_print("IP:");
 8002132:	4830      	ldr	r0, [pc, #192]	; (80021f4 <StartTaskDefault+0x10c>)
 8002134:	f7fe feea 	bl	8000f0c <lcd_print>
	  lcd_set_cursor(0, 5);
 8002138:	2105      	movs	r1, #5
 800213a:	2000      	movs	r0, #0
 800213c:	f7fe fefc 	bl	8000f38 <lcd_set_cursor>
	  lcd_print("AP:");
 8002140:	482d      	ldr	r0, [pc, #180]	; (80021f8 <StartTaskDefault+0x110>)
 8002142:	f7fe fee3 	bl	8000f0c <lcd_print>
	  lcd_print("OK\n");
 8002146:	482d      	ldr	r0, [pc, #180]	; (80021fc <StartTaskDefault+0x114>)
 8002148:	f7fe fee0 	bl	8000f0c <lcd_print>

	  lcd_print("Init Barometer... ");
 800214c:	482c      	ldr	r0, [pc, #176]	; (8002200 <StartTaskDefault+0x118>)
 800214e:	f7fe fedd 	bl	8000f0c <lcd_print>
	  baro_stat_t b_st = baro_init();
 8002152:	f7fe ff37 	bl	8000fc4 <baro_init>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]
	  //lcd_set_text_size(2, 2);
	  lcd_set_cursor(5, 12);
 800215a:	210c      	movs	r1, #12
 800215c:	2005      	movs	r0, #5
 800215e:	f7fe feeb 	bl	8000f38 <lcd_set_cursor>
	  if (b_st) {
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <StartTaskDefault+0x8e>
	    lcd_print("FAIL");
 8002168:	4826      	ldr	r0, [pc, #152]	; (8002204 <StartTaskDefault+0x11c>)
 800216a:	f7fe fecf 	bl	8000f0c <lcd_print>
	    printf("ERROR\n");
 800216e:	4826      	ldr	r0, [pc, #152]	; (8002208 <StartTaskDefault+0x120>)
 8002170:	f00b fa84 	bl	800d67c <puts>
 8002174:	e00b      	b.n	800218e <StartTaskDefault+0xa6>
	  } else {
	    lcd_print("OK");
 8002176:	4825      	ldr	r0, [pc, #148]	; (800220c <StartTaskDefault+0x124>)
 8002178:	f7fe fec8 	bl	8000f0c <lcd_print>
	    printf("OK\n");
 800217c:	4823      	ldr	r0, [pc, #140]	; (800220c <StartTaskDefault+0x124>)
 800217e:	f00b fa7d 	bl	800d67c <puts>
	    osThreadFlagsSet(taskBaroHandle, FLAG_BARO_RDY);
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <StartTaskDefault+0x128>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2102      	movs	r1, #2
 8002188:	4618      	mov	r0, r3
 800218a:	f006 fbbd 	bl	8008908 <osThreadFlagsSet>
	  }

	  lcd_print("Init WIFI... ");
 800218e:	4821      	ldr	r0, [pc, #132]	; (8002214 <StartTaskDefault+0x12c>)
 8002190:	f7fe febc 	bl	8000f0c <lcd_print>
	  wifi_status_t w_st = wifi_init();
 8002194:	f000 febe 	bl	8002f14 <wifi_init>
 8002198:	4603      	mov	r3, r0
 800219a:	73bb      	strb	r3, [r7, #14]
	  //lcd_set_text_size(2, 2);
	  lcd_set_cursor(6, 15);
 800219c:	210f      	movs	r1, #15
 800219e:	2006      	movs	r0, #6
 80021a0:	f7fe feca 	bl	8000f38 <lcd_set_cursor>
	  if (w_st) {
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <StartTaskDefault+0xde>
	    lcd_print("FAIL");
 80021aa:	4816      	ldr	r0, [pc, #88]	; (8002204 <StartTaskDefault+0x11c>)
 80021ac:	f7fe feae 	bl	8000f0c <lcd_print>
	    if (w_st == WIFI_ERR_TMT)
 80021b0:	7bbb      	ldrb	r3, [r7, #14]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d103      	bne.n	80021be <StartTaskDefault+0xd6>
	      printf("timeout\n");
 80021b6:	4818      	ldr	r0, [pc, #96]	; (8002218 <StartTaskDefault+0x130>)
 80021b8:	f00b fa60 	bl	800d67c <puts>
 80021bc:	e00f      	b.n	80021de <StartTaskDefault+0xf6>
	    else
	      printf("ERROR\n");
 80021be:	4812      	ldr	r0, [pc, #72]	; (8002208 <StartTaskDefault+0x120>)
 80021c0:	f00b fa5c 	bl	800d67c <puts>
 80021c4:	e00b      	b.n	80021de <StartTaskDefault+0xf6>

	  } else {
	    printf("OK\n");
 80021c6:	4811      	ldr	r0, [pc, #68]	; (800220c <StartTaskDefault+0x124>)
 80021c8:	f00b fa58 	bl	800d67c <puts>
	    lcd_print("OK");
 80021cc:	480f      	ldr	r0, [pc, #60]	; (800220c <StartTaskDefault+0x124>)
 80021ce:	f7fe fe9d 	bl	8000f0c <lcd_print>
	    osThreadFlagsSet(taskWiFiHandle, FLAG_WIFI_RDY);
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <StartTaskDefault+0x134>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f006 fb95 	bl	8008908 <osThreadFlagsSet>
	  }

	  /* Infinite loop */
	  for(;;) {
	    osDelay(pdMS_TO_TICKS(1000));
 80021de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021e2:	f006 fc60 	bl	8008aa6 <osDelay>
 80021e6:	e7fa      	b.n	80021de <StartTaskDefault+0xf6>
 80021e8:	0800ee64 	.word	0x0800ee64
 80021ec:	0800ee74 	.word	0x0800ee74
 80021f0:	0800ee7c 	.word	0x0800ee7c
 80021f4:	0800ee84 	.word	0x0800ee84
 80021f8:	0800ee88 	.word	0x0800ee88
 80021fc:	0800ee8c 	.word	0x0800ee8c
 8002200:	0800ee90 	.word	0x0800ee90
 8002204:	0800eea4 	.word	0x0800eea4
 8002208:	0800edd0 	.word	0x0800edd0
 800220c:	0800edd8 	.word	0x0800edd8
 8002210:	200004b8 	.word	0x200004b8
 8002214:	0800eeac 	.word	0x0800eeac
 8002218:	0800edb0 	.word	0x0800edb0
 800221c:	200004b4 	.word	0x200004b4

08002220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002224:	b672      	cpsid	i
}
 8002226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002228:	e7fe      	b.n	8002228 <Error_Handler+0x8>
	...

0800222c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HAL_MspInit+0x64>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <HAL_MspInit+0x64>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_MspInit+0x64>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_MspInit+0x64>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_MspInit+0x64>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_MspInit+0x64>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	210f      	movs	r1, #15
 800226e:	f06f 0001 	mvn.w	r0, #1
 8002272:	f001 fe7c 	bl	8003f6e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2105      	movs	r1, #5
 800227a:	2005      	movs	r0, #5
 800227c:	f001 fe77 	bl	8003f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002280:	2005      	movs	r0, #5
 8002282:	f001 fe90 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_ADC_MspInit+0x7c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d127      	bne.n	8002306 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_ADC_MspInit+0x80>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_ADC_MspInit+0x80>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <HAL_ADC_MspInit+0x80>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_ADC_MspInit+0x80>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_ADC_MspInit+0x80>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_ADC_MspInit+0x80>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f2:	2303      	movs	r3, #3
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <HAL_ADC_MspInit+0x84>)
 8002302:	f002 fa79 	bl	80047f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40012000 	.word	0x40012000
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000

0800231c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_I2C_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12c      	bne.n	8002398 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800235a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002360:	2312      	movs	r3, #18
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800236c:	2304      	movs	r3, #4
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <HAL_I2C_MspInit+0x8c>)
 8002378:	f002 fa3e 	bl	80047f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 8002386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238a:	6413      	str	r3, [r2, #64]	; 0x40
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_I2C_MspInit+0x88>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40005400 	.word	0x40005400
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020400 	.word	0x40020400

080023ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_SPI_MspInit+0x94>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d133      	bne.n	8002436 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_SPI_MspInit+0x98>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_SPI_MspInit+0x98>)
 80023d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_SPI_MspInit+0x98>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_SPI_MspInit+0x98>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_SPI_MspInit+0x98>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_SPI_MspInit+0x98>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 8002406:	23a0      	movs	r3, #160	; 0xa0
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002416:	2305      	movs	r3, #5
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <HAL_SPI_MspInit+0x9c>)
 8002422:	f002 f9e9 	bl	80047f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2105      	movs	r1, #5
 800242a:	2023      	movs	r0, #35	; 0x23
 800242c:	f001 fd9f 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002430:	2023      	movs	r0, #35	; 0x23
 8002432:	f001 fdb8 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40013000 	.word	0x40013000
 8002444:	40023800 	.word	0x40023800
 8002448:	40020000 	.word	0x40020000

0800244c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_TIM_Base_MspInit+0x70>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d116      	bne.n	800248c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_TIM_Base_MspInit+0x74>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_TIM_Base_MspInit+0x74>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_TIM_Base_MspInit+0x74>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2105      	movs	r1, #5
 800247e:	2018      	movs	r0, #24
 8002480:	f001 fd75 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002484:	2018      	movs	r0, #24
 8002486:	f001 fd8e 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800248a:	e012      	b.n	80024b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_TIM_Base_MspInit+0x78>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10d      	bne.n	80024b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_TIM_Base_MspInit+0x74>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_TIM_Base_MspInit+0x74>)
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_TIM_Base_MspInit+0x74>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40014000 	.word	0x40014000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40014400 	.word	0x40014400

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	; 0x30
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_UART_MspInit+0x1c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d164      	bne.n	80025b4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	4b69      	ldr	r3, [pc, #420]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a68      	ldr	r2, [pc, #416]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b66      	ldr	r3, [pc, #408]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a61      	ldr	r2, [pc, #388]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002522:	23c0      	movs	r3, #192	; 0xc0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002532:	2307      	movs	r3, #7
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	4856      	ldr	r0, [pc, #344]	; (8002698 <HAL_UART_MspInit+0x1d0>)
 800253e:	f002 f95b 	bl	80047f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_UART_MspInit+0x1d4>)
 8002544:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_UART_MspInit+0x1d8>)
 8002546:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002548:	4b54      	ldr	r3, [pc, #336]	; (800269c <HAL_UART_MspInit+0x1d4>)
 800254a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800254e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002550:	4b52      	ldr	r3, [pc, #328]	; (800269c <HAL_UART_MspInit+0x1d4>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <HAL_UART_MspInit+0x1d4>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800255c:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_UART_MspInit+0x1d4>)
 800255e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002562:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002564:	4b4d      	ldr	r3, [pc, #308]	; (800269c <HAL_UART_MspInit+0x1d4>)
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_UART_MspInit+0x1d4>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_UART_MspInit+0x1d4>)
 8002572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002576:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002578:	4b48      	ldr	r3, [pc, #288]	; (800269c <HAL_UART_MspInit+0x1d4>)
 800257a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800257e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_UART_MspInit+0x1d4>)
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002586:	4845      	ldr	r0, [pc, #276]	; (800269c <HAL_UART_MspInit+0x1d4>)
 8002588:	f001 fd28 	bl	8003fdc <HAL_DMA_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002592:	f7ff fe45 	bl	8002220 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a40      	ldr	r2, [pc, #256]	; (800269c <HAL_UART_MspInit+0x1d4>)
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
 800259c:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_UART_MspInit+0x1d4>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2105      	movs	r1, #5
 80025a6:	2025      	movs	r0, #37	; 0x25
 80025a8:	f001 fce1 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ac:	2025      	movs	r0, #37	; 0x25
 80025ae:	f001 fcfa 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80025b2:	e068      	b.n	8002686 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART6)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <HAL_UART_MspInit+0x1dc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d163      	bne.n	8002686 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a33      	ldr	r2, [pc, #204]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80025c8:	f043 0320 	orr.w	r3, r3, #32
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a2c      	ldr	r2, [pc, #176]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_UART_MspInit+0x1cc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002608:	2308      	movs	r3, #8
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	4825      	ldr	r0, [pc, #148]	; (80026a8 <HAL_UART_MspInit+0x1e0>)
 8002614:	f002 f8f0 	bl	80047f8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <HAL_UART_MspInit+0x1e8>)
 800261c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002620:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002624:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800265a:	4814      	ldr	r0, [pc, #80]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 800265c:	f001 fcbe 	bl	8003fdc <HAL_DMA_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8002666:	f7ff fddb 	bl	8002220 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 800266e:	639a      	str	r2, [r3, #56]	; 0x38
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_UART_MspInit+0x1e4>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2105      	movs	r1, #5
 800267a:	2047      	movs	r0, #71	; 0x47
 800267c:	f001 fc77 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002680:	2047      	movs	r0, #71	; 0x47
 8002682:	f001 fc90 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40011000 	.word	0x40011000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020400 	.word	0x40020400
 800269c:	200003f4 	.word	0x200003f4
 80026a0:	40026440 	.word	0x40026440
 80026a4:	40011400 	.word	0x40011400
 80026a8:	40020000 	.word	0x40020000
 80026ac:	20000454 	.word	0x20000454
 80026b0:	40026428 	.word	0x40026428

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e4:	f001 f8e6 	bl	80038b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026e8:	f008 fc2a 	bl	800af40 <xTaskGetSchedulerState>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026f2:	f009 fd11 	bl	800c118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}

080026fa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800270e:	f004 fa26 	bl	8006b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200002dc 	.word	0x200002dc

0800271c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <SPI1_IRQHandler+0x10>)
 8002722:	f003 ffe5 	bl	80066f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000284 	.word	0x20000284

08002730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <USART1_IRQHandler+0x10>)
 8002736:	f004 ff1f 	bl	8007578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000036c 	.word	0x2000036c

08002744 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <DMA2_Stream1_IRQHandler+0x10>)
 800274a:	f001 fddf 	bl	800430c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000454 	.word	0x20000454

08002758 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DMA2_Stream2_IRQHandler+0x10>)
 800275e:	f001 fdd5 	bl	800430c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200003f4 	.word	0x200003f4

0800276c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <USART6_IRQHandler+0x10>)
 8002772:	f004 ff01 	bl	8007578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200003b0 	.word	0x200003b0

08002780 <__io_getchar>:
osSemaphoreId_t semUART_STDIOHandle;
const osSemaphoreAttr_t semUART_STDIO_attributes = {
  .name = "semUART_STDIO"
};

int __io_getchar(int file) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	int buf;
	if (file == FILE_STDIN)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <__io_getchar+0x14>
		buf = BUF_STDIO;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e008      	b.n	80027a6 <__io_getchar+0x26>
	else if (file == FILE_WIFI)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d102      	bne.n	80027a0 <__io_getchar+0x20>
		buf = BUF_WIFI;
 800279a:	2301      	movs	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e002      	b.n	80027a6 <__io_getchar+0x26>
	else
		return EOF;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	e09e      	b.n	80028e4 <__io_getchar+0x164>

	buffer[buf].head = &buffer[buf].buffer[UART_RX_BUF_SIZE - buffer[buf].hdma->Instance->NDTR];
 80027a6:	4951      	ldr	r1, [pc, #324]	; (80028ec <__io_getchar+0x16c>)
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3308      	adds	r3, #8
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	484c      	ldr	r0, [pc, #304]	; (80028ec <__io_getchar+0x16c>)
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4403      	add	r3, r0
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80027d2:	4419      	add	r1, r3
 80027d4:	4845      	ldr	r0, [pc, #276]	; (80028ec <__io_getchar+0x16c>)
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4403      	add	r3, r0
 80027e2:	330c      	adds	r3, #12
 80027e4:	6019      	str	r1, [r3, #0]

	while (buffer[buf].tail == buffer[buf].head) {
 80027e6:	e022      	b.n	800282e <__io_getchar+0xae>
		buffer[buf].head = &buffer[buf].buffer[UART_RX_BUF_SIZE - buffer[buf].hdma->Instance->NDTR];
 80027e8:	4940      	ldr	r1, [pc, #256]	; (80028ec <__io_getchar+0x16c>)
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3308      	adds	r3, #8
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	483c      	ldr	r0, [pc, #240]	; (80028ec <__io_getchar+0x16c>)
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4403      	add	r3, r0
 8002808:	3304      	adds	r3, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002814:	4419      	add	r1, r3
 8002816:	4835      	ldr	r0, [pc, #212]	; (80028ec <__io_getchar+0x16c>)
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4403      	add	r3, r0
 8002824:	330c      	adds	r3, #12
 8002826:	6019      	str	r1, [r3, #0]
		osDelay(1);
 8002828:	2001      	movs	r0, #1
 800282a:	f006 f93c 	bl	8008aa6 <osDelay>
	while (buffer[buf].tail == buffer[buf].head) {
 800282e:	492f      	ldr	r1, [pc, #188]	; (80028ec <__io_getchar+0x16c>)
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3310      	adds	r3, #16
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	482a      	ldr	r0, [pc, #168]	; (80028ec <__io_getchar+0x16c>)
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4403      	add	r3, r0
 800284e:	330c      	adds	r3, #12
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4299      	cmp	r1, r3
 8002854:	d0c8      	beq.n	80027e8 <__io_getchar+0x68>
	}

	uint8_t b = *buffer[buf].tail;
 8002856:	4925      	ldr	r1, [pc, #148]	; (80028ec <__io_getchar+0x16c>)
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3310      	adds	r3, #16
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	72fb      	strb	r3, [r7, #11]

	if (++buffer[buf].tail == (buffer[buf].buffer + UART_RX_BUF_SIZE))
 800286c:	491f      	ldr	r1, [pc, #124]	; (80028ec <__io_getchar+0x16c>)
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3310      	adds	r3, #16
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1c59      	adds	r1, r3, #1
 8002880:	481a      	ldr	r0, [pc, #104]	; (80028ec <__io_getchar+0x16c>)
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	3310      	adds	r3, #16
 8002890:	6019      	str	r1, [r3, #0]
 8002892:	4916      	ldr	r1, [pc, #88]	; (80028ec <__io_getchar+0x16c>)
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	3310      	adds	r3, #16
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	4811      	ldr	r0, [pc, #68]	; (80028ec <__io_getchar+0x16c>)
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4403      	add	r3, r0
 80028b2:	3308      	adds	r3, #8
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ba:	4299      	cmp	r1, r3
 80028bc:	d111      	bne.n	80028e2 <__io_getchar+0x162>
		buffer[buf].tail = buffer[buf].buffer;
 80028be:	490b      	ldr	r1, [pc, #44]	; (80028ec <__io_getchar+0x16c>)
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3308      	adds	r3, #8
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	4806      	ldr	r0, [pc, #24]	; (80028ec <__io_getchar+0x16c>)
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4403      	add	r3, r0
 80028de:	3310      	adds	r3, #16
 80028e0:	6019      	str	r1, [r3, #0]

	return (int)b;
 80028e2:	7afb      	ldrb	r3, [r7, #11]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000008 	.word	0x20000008

080028f0 <__io_putchar>:

int __io_putchar(int file, int ch) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	int buf;
	if (file == FILE_STDOUT || file == FILE_STDERR)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d002      	beq.n	8002906 <__io_putchar+0x16>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d102      	bne.n	800290c <__io_putchar+0x1c>
		buf = BUF_STDIO;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e007      	b.n	800291c <__io_putchar+0x2c>
	else if (file == FILE_WIFI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d102      	bne.n	8002918 <__io_putchar+0x28>
		buf = BUF_WIFI;
 8002912:	2301      	movs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e001      	b.n	800291c <__io_putchar+0x2c>
	else
		return 0;
 8002918:	2300      	movs	r3, #0
 800291a:	e035      	b.n	8002988 <__io_putchar+0x98>

	osMutexAcquire(buffer[buf].mutex_tx, osWaitForever);
 800291c:	491c      	ldr	r1, [pc, #112]	; (8002990 <__io_putchar+0xa0>)
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3314      	adds	r3, #20
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f04f 31ff 	mov.w	r1, #4294967295
 8002932:	4618      	mov	r0, r3
 8002934:	f006 f958 	bl	8008be8 <osMutexAcquire>
	HAL_UART_Transmit_IT(buffer[buf].huart, (uint8_t*)&ch, 1);
 8002938:	4915      	ldr	r1, [pc, #84]	; (8002990 <__io_putchar+0xa0>)
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4639      	mov	r1, r7
 800294a:	2201      	movs	r2, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fc82 	bl	8007256 <HAL_UART_Transmit_IT>
	osSemaphoreAcquire(buffer[buf].sem, osWaitForever);
 8002952:	490f      	ldr	r1, [pc, #60]	; (8002990 <__io_putchar+0xa0>)
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	331c      	adds	r3, #28
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	4618      	mov	r0, r3
 800296a:	f006 fa4f 	bl	8008e0c <osSemaphoreAcquire>
	osMutexRelease(buffer[buf].mutex_tx);
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <__io_putchar+0xa0>)
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3314      	adds	r3, #20
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f006 f97c 	bl	8008c7e <osMutexRelease>
	return 0;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000008 	.word	0x20000008

08002994 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_UART_TxCpltCallback+0x34>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d104      	bne.n	80029ae <HAL_UART_TxCpltCallback+0x1a>
		osSemaphoreRelease(semUART_STDIOHandle);
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_UART_TxCpltCallback+0x38>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f006 fa81 	bl	8008eb0 <osSemaphoreRelease>
	}

	if (huart == &huart6) {
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_UART_TxCpltCallback+0x3c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d104      	bne.n	80029c0 <HAL_UART_TxCpltCallback+0x2c>
		osSemaphoreRelease(semUART_WIFIHandle);
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_UART_TxCpltCallback+0x40>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f006 fa78 	bl	8008eb0 <osSemaphoreRelease>
	}
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000036c 	.word	0x2000036c
 80029cc:	20001554 	.word	0x20001554
 80029d0:	200003b0 	.word	0x200003b0
 80029d4:	20001550 	.word	0x20001550

080029d8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	int b;
	if (huart == &huart1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3f      	ldr	r2, [pc, #252]	; (8002ae0 <HAL_UART_ErrorCallback+0x108>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d102      	bne.n	80029ee <HAL_UART_ErrorCallback+0x16>
		b = BUF_STDIO;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e005      	b.n	80029fa <HAL_UART_ErrorCallback+0x22>
	else if (huart == &huart6)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a3c      	ldr	r2, [pc, #240]	; (8002ae4 <HAL_UART_ErrorCallback+0x10c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d170      	bne.n	8002ad8 <HAL_UART_ErrorCallback+0x100>
		b = BUF_WIFI;
 80029f6:	2301      	movs	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
	else
		return;

	// Stop UART reception
	HAL_UART_Abort(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f004 fcd0 	bl	80073a0 <HAL_UART_Abort>
	*            @arg UART_FLAG_NE:   Noise Error flag
	*            @arg UART_FLAG_FE:   Framing Error flag
	*            @arg UART_FLAG_PE:   Parity Error flag
	*/
	// Clear error flags
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d104      	bne.n	8002a18 <HAL_UART_ErrorCallback+0x40>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0208 	mvn.w	r2, #8
 8002a16:	601a      	str	r2, [r3, #0]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d104      	bne.n	8002a30 <HAL_UART_ErrorCallback+0x58>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0204 	mvn.w	r2, #4
 8002a2e:	601a      	str	r2, [r3, #0]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d104      	bne.n	8002a48 <HAL_UART_ErrorCallback+0x70>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0202 	mvn.w	r2, #2
 8002a46:	601a      	str	r2, [r3, #0]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d104      	bne.n	8002a60 <HAL_UART_ErrorCallback+0x88>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0201 	mvn.w	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

	// Reset ring buffer
	buffer[b].head = buffer[b].tail = buffer[b].buffer;
 8002a60:	4921      	ldr	r1, [pc, #132]	; (8002ae8 <HAL_UART_ErrorCallback+0x110>)
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3308      	adds	r3, #8
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	481d      	ldr	r0, [pc, #116]	; (8002ae8 <HAL_UART_ErrorCallback+0x110>)
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4403      	add	r3, r0
 8002a80:	3310      	adds	r3, #16
 8002a82:	6019      	str	r1, [r3, #0]
 8002a84:	4918      	ldr	r1, [pc, #96]	; (8002ae8 <HAL_UART_ErrorCallback+0x110>)
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3310      	adds	r3, #16
 8002a94:	6819      	ldr	r1, [r3, #0]
 8002a96:	4814      	ldr	r0, [pc, #80]	; (8002ae8 <HAL_UART_ErrorCallback+0x110>)
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4403      	add	r3, r0
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	6019      	str	r1, [r3, #0]
	// Restart UART reception
	HAL_UART_Receive_IT(huart, (uint8_t*)buffer[b].buffer, buffer[b].size);
 8002aa8:	490f      	ldr	r1, [pc, #60]	; (8002ae8 <HAL_UART_ErrorCallback+0x110>)
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	480b      	ldr	r0, [pc, #44]	; (8002ae8 <HAL_UART_ErrorCallback+0x110>)
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4403      	add	r3, r0
 8002ac8:	3320      	adds	r3, #32
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f004 fc05 	bl	80072e0 <HAL_UART_Receive_IT>
 8002ad6:	e000      	b.n	8002ada <HAL_UART_ErrorCallback+0x102>
		return;
 8002ad8:	bf00      	nop
}
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000036c 	.word	0x2000036c
 8002ae4:	200003b0 	.word	0x200003b0
 8002ae8:	20000008 	.word	0x20000008

08002aec <streams_init>:

/*********************************************************************/
/* INIT                                                              */
/*********************************************************************/
void streams_init(void) {
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
	muxUART_STDIO_TXHandle = osMutexNew(&muxUART_STDIO_TX_attributes);
 8002af2:	483a      	ldr	r0, [pc, #232]	; (8002bdc <streams_init+0xf0>)
 8002af4:	f005 fff2 	bl	8008adc <osMutexNew>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a39      	ldr	r2, [pc, #228]	; (8002be0 <streams_init+0xf4>)
 8002afc:	6013      	str	r3, [r2, #0]
	muxUART_STDIO_RXHandle = osMutexNew(&muxUART_STDIO_RX_attributes);
 8002afe:	4839      	ldr	r0, [pc, #228]	; (8002be4 <streams_init+0xf8>)
 8002b00:	f005 ffec 	bl	8008adc <osMutexNew>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <streams_init+0xfc>)
 8002b08:	6013      	str	r3, [r2, #0]
	muxUART_WIFI_TXHandle = osMutexNew(&muxUART_WIFI_TX_attributes);
 8002b0a:	4838      	ldr	r0, [pc, #224]	; (8002bec <streams_init+0x100>)
 8002b0c:	f005 ffe6 	bl	8008adc <osMutexNew>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <streams_init+0x104>)
 8002b14:	6013      	str	r3, [r2, #0]
	muxUART_WIFI_RXHandle = osMutexNew(&muxUART_WIFI_RX_attributes);
 8002b16:	4837      	ldr	r0, [pc, #220]	; (8002bf4 <streams_init+0x108>)
 8002b18:	f005 ffe0 	bl	8008adc <osMutexNew>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4a36      	ldr	r2, [pc, #216]	; (8002bf8 <streams_init+0x10c>)
 8002b20:	6013      	str	r3, [r2, #0]

	semUART_WIFIHandle = osSemaphoreNew(1, 0, &semUART_WIFI_attributes);
 8002b22:	4a36      	ldr	r2, [pc, #216]	; (8002bfc <streams_init+0x110>)
 8002b24:	2100      	movs	r1, #0
 8002b26:	2001      	movs	r0, #1
 8002b28:	f006 f8e6 	bl	8008cf8 <osSemaphoreNew>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4a34      	ldr	r2, [pc, #208]	; (8002c00 <streams_init+0x114>)
 8002b30:	6013      	str	r3, [r2, #0]
	semUART_STDIOHandle = osSemaphoreNew(1, 0, &semUART_STDIO_attributes);
 8002b32:	4a34      	ldr	r2, [pc, #208]	; (8002c04 <streams_init+0x118>)
 8002b34:	2100      	movs	r1, #0
 8002b36:	2001      	movs	r0, #1
 8002b38:	f006 f8de 	bl	8008cf8 <osSemaphoreNew>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <streams_init+0x11c>)
 8002b40:	6013      	str	r3, [r2, #0]

	buffer[BUF_STDIO].sem = semUART_STDIOHandle;
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <streams_init+0x11c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a31      	ldr	r2, [pc, #196]	; (8002c0c <streams_init+0x120>)
 8002b48:	61d3      	str	r3, [r2, #28]
	buffer[BUF_STDIO].mutex_rx = muxUART_STDIO_RXHandle;
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <streams_init+0xfc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <streams_init+0x120>)
 8002b50:	6193      	str	r3, [r2, #24]
	buffer[BUF_STDIO].mutex_tx = muxUART_STDIO_TXHandle;
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <streams_init+0xf4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2d      	ldr	r2, [pc, #180]	; (8002c0c <streams_init+0x120>)
 8002b58:	6153      	str	r3, [r2, #20]
	buffer[BUF_WIFI].sem = semUART_WIFIHandle;
 8002b5a:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <streams_init+0x114>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2b      	ldr	r2, [pc, #172]	; (8002c0c <streams_init+0x120>)
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
	buffer[BUF_WIFI].mutex_rx = muxUART_WIFI_RXHandle;
 8002b62:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <streams_init+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <streams_init+0x120>)
 8002b68:	63d3      	str	r3, [r2, #60]	; 0x3c
	buffer[BUF_WIFI].mutex_tx = muxUART_WIFI_TXHandle;
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <streams_init+0x104>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <streams_init+0x120>)
 8002b70:	6393      	str	r3, [r2, #56]	; 0x38

	for (uint32_t b = 0; b < BUF_MAX; b++) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	e028      	b.n	8002bca <streams_init+0xde>
		if (HAL_UART_Receive_DMA(buffer[b].huart,
 8002b78:	4924      	ldr	r1, [pc, #144]	; (8002c0c <streams_init+0x120>)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	6818      	ldr	r0, [r3, #0]
								 (uint8_t*)buffer[b].buffer,
 8002b88:	4920      	ldr	r1, [pc, #128]	; (8002c0c <streams_init+0x120>)
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3308      	adds	r3, #8
 8002b98:	6819      	ldr	r1, [r3, #0]
								 buffer[b].size) != HAL_OK) {
 8002b9a:	4c1c      	ldr	r4, [pc, #112]	; (8002c0c <streams_init+0x120>)
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4423      	add	r3, r4
 8002ba8:	3320      	adds	r3, #32
 8002baa:	681b      	ldr	r3, [r3, #0]
		if (HAL_UART_Receive_DMA(buffer[b].huart,
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f004 fbc6 	bl	8007340 <HAL_UART_Receive_DMA>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <streams_init+0xd8>
			printf("Error start UART RX %ld\n", b);
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4814      	ldr	r0, [pc, #80]	; (8002c10 <streams_init+0x124>)
 8002bbe:	f00a fcd7 	bl	800d570 <iprintf>
			while (1) {}
 8002bc2:	e7fe      	b.n	8002bc2 <streams_init+0xd6>
	for (uint32_t b = 0; b < BUF_MAX; b++) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d9d3      	bls.n	8002b78 <streams_init+0x8c>
		}
	}
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	0800f768 	.word	0x0800f768
 8002be0:	20001540 	.word	0x20001540
 8002be4:	0800f778 	.word	0x0800f778
 8002be8:	20001544 	.word	0x20001544
 8002bec:	0800f788 	.word	0x0800f788
 8002bf0:	20001548 	.word	0x20001548
 8002bf4:	0800f798 	.word	0x0800f798
 8002bf8:	2000154c 	.word	0x2000154c
 8002bfc:	0800f7a8 	.word	0x0800f7a8
 8002c00:	20001550 	.word	0x20001550
 8002c04:	0800f7b8 	.word	0x0800f7b8
 8002c08:	20001554 	.word	0x20001554
 8002c0c:	20000008 	.word	0x20000008
 8002c10:	0800ef24 	.word	0x0800ef24

08002c14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e00a      	b.n	8002c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c26:	f7ff fdab 	bl	8002780 <__io_getchar>
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	60ba      	str	r2, [r7, #8]
 8002c32:	b2ca      	uxtb	r2, r1
 8002c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dbf0      	blt.n	8002c26 <_read+0x12>
	}

return len;
 8002c44:	687b      	ldr	r3, [r7, #4]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e009      	b.n	8002c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	60ba      	str	r2, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fe41 	bl	80028f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf1      	blt.n	8002c60 <_write+0x12>
	}
	return len;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_close>:

int _close(int file)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cae:	605a      	str	r2, [r3, #4]
	return 0;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_isatty>:

int _isatty(int file)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	return 0;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_open>:

int _open(char *path, int flags, ...)
{
 8002cee:	b40e      	push	{r1, r2, r3}
 8002cf0:	b480      	push	{r7}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8002cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	b003      	add	sp, #12
 8002d08:	4770      	bx	lr
	...

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f009 fc66 	bl	800c60c <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20010000 	.word	0x20010000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20001558 	.word	0x20001558
 8002d74:	200063d8 	.word	0x200063d8

08002d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <SystemInit+0x20>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <SystemInit+0x20>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <cmp_resp>:
	[AT_RESP_WIFI_DISCONNECT] = "WIFI DISCONNECT",
	[AT_RESP_UNLINK] = "UNLINK",
	[AT_RESP_SEND_OK] = "SEND OK"
};

static int cmp_resp(char *text, int num) {
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	return strncmp(text, at_response[num], strlen(at_response[num]));
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <cmp_resp+0x38>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <cmp_resp+0x38>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fa62 	bl	8000280 <strlen>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f00a fec7 	bl	800db56 <strncmp>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000054 	.word	0x20000054

08002dd8 <StartTaskWiFiListen>:
    <h1>WiFi embedded server</h1>\
    <p>Pressure: %ld.%02ld hPa</p>\
</body>\
</html>";

void StartTaskWiFiListen(void *argument) {
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	while (1) {
		osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 8002de0:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	4618      	mov	r0, r3
 8002dea:	f005 fefd 	bl	8008be8 <osMutexAcquire>
		volatile uint8_t *head;
		head = &buffer[BUF_WIFI].buffer[UART_RX_BUF_SIZE - buffer[BUF_WIFI].hdma->Instance->NDTR];
 8002dee:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002dfe:	4413      	add	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
		int link = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
		if (buffer[BUF_WIFI].tail != head) {
 8002e06:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d065      	beq.n	8002edc <StartTaskWiFiListen+0x104>
			do {
				head = &buffer[BUF_WIFI].buffer[UART_RX_BUF_SIZE - buffer[BUF_WIFI].hdma->Instance->NDTR];
 8002e10:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
				memset(listener_buf, 0, LISTENER_BUF_SIZE);
 8002e24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4832      	ldr	r0, [pc, #200]	; (8002ef4 <StartTaskWiFiListen+0x11c>)
 8002e2c:	f009 ffb8 	bl	800cda0 <memset>
				uint32_t bytes = (uint32_t)buffer[BUF_WIFI].tail + buffer[BUF_WIFI].size - (uint32_t)head;
 8002e30:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	441a      	add	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	613b      	str	r3, [r7, #16]
				fgets((char*)listener_buf, bytes, fp);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <StartTaskWiFiListen+0x120>)
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	482a      	ldr	r0, [pc, #168]	; (8002ef4 <StartTaskWiFiListen+0x11c>)
 8002e4c:	f009 fc5e 	bl	800c70c <fgets>
				if (strstr((char*)listener_buf, ",CONNECT")) {
 8002e50:	492a      	ldr	r1, [pc, #168]	; (8002efc <StartTaskWiFiListen+0x124>)
 8002e52:	4828      	ldr	r0, [pc, #160]	; (8002ef4 <StartTaskWiFiListen+0x11c>)
 8002e54:	f00a fe9f 	bl	800db96 <strstr>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <StartTaskWiFiListen+0x94>
					sscanf((char*)listener_buf, "%d,CONNECT", &link);
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	461a      	mov	r2, r3
 8002e64:	4926      	ldr	r1, [pc, #152]	; (8002f00 <StartTaskWiFiListen+0x128>)
 8002e66:	4823      	ldr	r0, [pc, #140]	; (8002ef4 <StartTaskWiFiListen+0x11c>)
 8002e68:	f00a fe04 	bl	800da74 <siscanf>
				}
				if (strncmp((char*)listener_buf, "+IPD,", 5) == 0) {
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	4925      	ldr	r1, [pc, #148]	; (8002f04 <StartTaskWiFiListen+0x12c>)
 8002e70:	4820      	ldr	r0, [pc, #128]	; (8002ef4 <StartTaskWiFiListen+0x11c>)
 8002e72:	f00a fe70 	bl	800db56 <strncmp>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d12a      	bne.n	8002ed2 <StartTaskWiFiListen+0xfa>
					osDelay(pdMS_TO_TICKS(100));
 8002e7c:	2032      	movs	r0, #50	; 0x32
 8002e7e:	f005 fe12 	bl	8008aa6 <osDelay>
					// HOORAY!
					osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	4618      	mov	r0, r3
 8002e88:	f005 fef9 	bl	8008c7e <osMutexRelease>
					if (wifi_printf(link, html, pressure/100, pressure%100) == WIFI_OK) {
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <StartTaskWiFiListen+0x130>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <StartTaskWiFiListen+0x134>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0959      	lsrs	r1, r3, #5
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <StartTaskWiFiListen+0x130>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <StartTaskWiFiListen+0x134>)
 8002ea0:	fba3 4302 	umull	r4, r3, r3, r2
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	2464      	movs	r4, #100	; 0x64
 8002ea8:	fb04 f303 	mul.w	r3, r4, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	460a      	mov	r2, r1
 8002eb0:	4917      	ldr	r1, [pc, #92]	; (8002f10 <StartTaskWiFiListen+0x138>)
 8002eb2:	f000 fc01 	bl	80036b8 <wifi_printf>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <StartTaskWiFiListen+0xec>
						wifi_close(link);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fc26 	bl	8003710 <wifi_close>
					}
					osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 fe8b 	bl	8008be8 <osMutexAcquire>
				}

			} while (buffer[BUF_WIFI].tail != head);
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d199      	bne.n	8002e10 <StartTaskWiFiListen+0x38>
		}
		osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <StartTaskWiFiListen+0x118>)
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f005 fecc 	bl	8008c7e <osMutexRelease>
		osDelay(pdMS_TO_TICKS(10));
 8002ee6:	2005      	movs	r0, #5
 8002ee8:	f005 fddd 	bl	8008aa6 <osDelay>
	while (1) {
 8002eec:	e778      	b.n	8002de0 <StartTaskWiFiListen+0x8>
 8002eee:	bf00      	nop
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	200017bc 	.word	0x200017bc
 8002ef8:	200017b4 	.word	0x200017b4
 8002efc:	0800ef90 	.word	0x0800ef90
 8002f00:	0800ef9c 	.word	0x0800ef9c
 8002f04:	0800efa8 	.word	0x0800efa8
 8002f08:	200004d8 	.word	0x200004d8
 8002f0c:	51eb851f 	.word	0x51eb851f
 8002f10:	20000074 	.word	0x20000074

08002f14 <wifi_init>:
	}
}

/******************************************************************/
int wifi_init(void) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
	int ret = WIFI_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]

	fp = fopen("wifi", "wb+");
 8002f1e:	4975      	ldr	r1, [pc, #468]	; (80030f4 <wifi_init+0x1e0>)
 8002f20:	4875      	ldr	r0, [pc, #468]	; (80030f8 <wifi_init+0x1e4>)
 8002f22:	f009 fd27 	bl	800c974 <fopen>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4a74      	ldr	r2, [pc, #464]	; (80030fc <wifi_init+0x1e8>)
 8002f2a:	6013      	str	r3, [r2, #0]
	if (!fp)
 8002f2c:	4b73      	ldr	r3, [pc, #460]	; (80030fc <wifi_init+0x1e8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <wifi_init+0x24>
		return WIFI_ERR_IO;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d9      	b.n	80030ec <wifi_init+0x1d8>

	if (setvbuf(fp, NULL, _IONBF, 0) != 0) {
 8002f38:	4b70      	ldr	r3, [pc, #448]	; (80030fc <wifi_init+0x1e8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2202      	movs	r2, #2
 8002f40:	2100      	movs	r1, #0
 8002f42:	f00a fcb1 	bl	800d8a8 <setvbuf>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d000      	beq.n	8002f4e <wifi_init+0x3a>
		while (1) {}
 8002f4c:	e7fe      	b.n	8002f4c <wifi_init+0x38>
	}

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 8002f4e:	4b6c      	ldr	r3, [pc, #432]	; (8003100 <wifi_init+0x1ec>)
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	f04f 31ff 	mov.w	r1, #4294967295
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 fe46 	bl	8008be8 <osMutexAcquire>

	fprintf(fp, "ATE0\r\n");
 8002f5c:	4b67      	ldr	r3, [pc, #412]	; (80030fc <wifi_init+0x1e8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2206      	movs	r2, #6
 8002f62:	2101      	movs	r1, #1
 8002f64:	4867      	ldr	r0, [pc, #412]	; (8003104 <wifi_init+0x1f0>)
 8002f66:	f009 fe71 	bl	800cc4c <fwrite>

	TickType_t tmt_time = xTaskGetTickCount() + pdMS_TO_TICKS(20000);
 8002f6a:	f007 fc99 	bl	800a8a0 <xTaskGetTickCount>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002f74:	3310      	adds	r3, #16
 8002f76:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8002f78:	f007 fc92 	bl	800a8a0 <xTaskGetTickCount>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d802      	bhi.n	8002f8a <wifi_init+0x76>
			ret = WIFI_ERR_TMT;
 8002f84:	2302      	movs	r3, #2
 8002f86:	60fb      	str	r3, [r7, #12]
			goto quit;
 8002f88:	e0aa      	b.n	80030e0 <wifi_init+0x1cc>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f8e:	2100      	movs	r1, #0
 8002f90:	485d      	ldr	r0, [pc, #372]	; (8003108 <wifi_init+0x1f4>)
 8002f92:	f009 ff05 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8002f96:	4b59      	ldr	r3, [pc, #356]	; (80030fc <wifi_init+0x1e8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002fa0:	4859      	ldr	r0, [pc, #356]	; (8003108 <wifi_init+0x1f4>)
 8002fa2:	f009 fbb3 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4857      	ldr	r0, [pc, #348]	; (8003108 <wifi_init+0x1f4>)
 8002faa:	f7ff fef7 	bl	8002d9c <cmp_resp>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <wifi_init+0xb4>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4854      	ldr	r0, [pc, #336]	; (8003108 <wifi_init+0x1f4>)
 8002fb8:	f7ff fef0 	bl	8002d9c <cmp_resp>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1da      	bne.n	8002f78 <wifi_init+0x64>
			ret = WIFI_ERR_GENEGAL;
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	60fb      	str	r3, [r7, #12]
			goto quit;
 8002fc6:	e08b      	b.n	80030e0 <wifi_init+0x1cc>
			break;
 8002fc8:	bf00      	nop
		}
	}

	fprintf(fp, "AT+RST\r\n");
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <wifi_init+0x1e8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	484e      	ldr	r0, [pc, #312]	; (800310c <wifi_init+0x1f8>)
 8002fd4:	f009 fe3a 	bl	800cc4c <fwrite>
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8002fd8:	f007 fc62 	bl	800a8a0 <xTaskGetTickCount>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d802      	bhi.n	8002fea <wifi_init+0xd6>
			ret = WIFI_ERR_TMT;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	60fb      	str	r3, [r7, #12]
			goto quit;
 8002fe8:	e07a      	b.n	80030e0 <wifi_init+0x1cc>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4845      	ldr	r0, [pc, #276]	; (8003108 <wifi_init+0x1f4>)
 8002ff2:	f009 fed5 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <wifi_init+0x1e8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003000:	4841      	ldr	r0, [pc, #260]	; (8003108 <wifi_init+0x1f4>)
 8003002:	f009 fb83 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8003006:	2100      	movs	r1, #0
 8003008:	483f      	ldr	r0, [pc, #252]	; (8003108 <wifi_init+0x1f4>)
 800300a:	f7ff fec7 	bl	8002d9c <cmp_resp>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <wifi_init+0x114>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003014:	2101      	movs	r1, #1
 8003016:	483c      	ldr	r0, [pc, #240]	; (8003108 <wifi_init+0x1f4>)
 8003018:	f7ff fec0 	bl	8002d9c <cmp_resp>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1da      	bne.n	8002fd8 <wifi_init+0xc4>
			ret = WIFI_ERR_GENEGAL;
 8003022:	2305      	movs	r3, #5
 8003024:	60fb      	str	r3, [r7, #12]
			goto quit;
 8003026:	e05b      	b.n	80030e0 <wifi_init+0x1cc>
			break;
 8003028:	bf00      	nop
		}
	}

	// Discard all junk
	HAL_UART_Abort(buffer[BUF_WIFI].huart);
 800302a:	4b35      	ldr	r3, [pc, #212]	; (8003100 <wifi_init+0x1ec>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	4618      	mov	r0, r3
 8003030:	f004 f9b6 	bl	80073a0 <HAL_UART_Abort>
	buffer[BUF_WIFI].head = buffer[BUF_WIFI].tail = buffer[BUF_WIFI].buffer;
 8003034:	4b32      	ldr	r3, [pc, #200]	; (8003100 <wifi_init+0x1ec>)
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	4a31      	ldr	r2, [pc, #196]	; (8003100 <wifi_init+0x1ec>)
 800303a:	6353      	str	r3, [r2, #52]	; 0x34
 800303c:	4b30      	ldr	r3, [pc, #192]	; (8003100 <wifi_init+0x1ec>)
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	4a2f      	ldr	r2, [pc, #188]	; (8003100 <wifi_init+0x1ec>)
 8003042:	6313      	str	r3, [r2, #48]	; 0x30

	osDelay(pdMS_TO_TICKS(8000));
 8003044:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003048:	f005 fd2d 	bl	8008aa6 <osDelay>
	HAL_StatusTypeDef hal_st = HAL_UART_Receive_DMA(buffer[BUF_WIFI].huart,
 800304c:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <wifi_init+0x1ec>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
													(uint8_t*)buffer[BUF_WIFI].buffer,
 8003050:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <wifi_init+0x1ec>)
 8003052:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
													buffer[BUF_WIFI].size);
 8003054:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <wifi_init+0x1ec>)
 8003056:	6c52      	ldr	r2, [r2, #68]	; 0x44
	HAL_StatusTypeDef hal_st = HAL_UART_Receive_DMA(buffer[BUF_WIFI].huart,
 8003058:	b292      	uxth	r2, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f004 f970 	bl	8007340 <HAL_UART_Receive_DMA>
 8003060:	4603      	mov	r3, r0
 8003062:	71fb      	strb	r3, [r7, #7]
	if (hal_st != HAL_OK) {
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <wifi_init+0x15c>
		ret = WIFI_ERR_IO;
 800306a:	2301      	movs	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
		goto quit;
 800306e:	e037      	b.n	80030e0 <wifi_init+0x1cc>
	}

	fprintf(fp, "ATE0\r\n");
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <wifi_init+0x1e8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2206      	movs	r2, #6
 8003076:	2101      	movs	r1, #1
 8003078:	4822      	ldr	r0, [pc, #136]	; (8003104 <wifi_init+0x1f0>)
 800307a:	f009 fde7 	bl	800cc4c <fwrite>
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 800307e:	f007 fc0f 	bl	800a8a0 <xTaskGetTickCount>
 8003082:	4602      	mov	r2, r0
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4293      	cmp	r3, r2
 8003088:	d802      	bhi.n	8003090 <wifi_init+0x17c>
			ret = WIFI_ERR_TMT;
 800308a:	2302      	movs	r3, #2
 800308c:	60fb      	str	r3, [r7, #12]
			goto quit;
 800308e:	e027      	b.n	80030e0 <wifi_init+0x1cc>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003090:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003094:	2100      	movs	r1, #0
 8003096:	481c      	ldr	r0, [pc, #112]	; (8003108 <wifi_init+0x1f4>)
 8003098:	f009 fe82 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <wifi_init+0x1e8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80030a6:	4818      	ldr	r0, [pc, #96]	; (8003108 <wifi_init+0x1f4>)
 80030a8:	f009 fb30 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 80030ac:	2100      	movs	r1, #0
 80030ae:	4816      	ldr	r0, [pc, #88]	; (8003108 <wifi_init+0x1f4>)
 80030b0:	f7ff fe74 	bl	8002d9c <cmp_resp>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <wifi_init+0x1ba>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 80030ba:	2101      	movs	r1, #1
 80030bc:	4812      	ldr	r0, [pc, #72]	; (8003108 <wifi_init+0x1f4>)
 80030be:	f7ff fe6d 	bl	8002d9c <cmp_resp>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1da      	bne.n	800307e <wifi_init+0x16a>
			ret = WIFI_ERR_GENEGAL;
 80030c8:	2305      	movs	r3, #5
 80030ca:	60fb      	str	r3, [r7, #12]
			goto quit;
 80030cc:	e008      	b.n	80030e0 <wifi_init+0x1cc>
			break;
 80030ce:	bf00      	nop
		}
	}
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <wifi_init+0x1ec>)
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	4618      	mov	r0, r3
 80030d6:	f005 fdd2 	bl	8008c7e <osMutexRelease>

	wifi_set_mode(WIFI_MODE_STA);
 80030da:	2001      	movs	r0, #1
 80030dc:	f000 f818 	bl	8003110 <wifi_set_mode>

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <wifi_init+0x1ec>)
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	4618      	mov	r0, r3
 80030e6:	f005 fdca 	bl	8008c7e <osMutexRelease>
	return ret;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	0800efb0 	.word	0x0800efb0
 80030f8:	0800efb4 	.word	0x0800efb4
 80030fc:	200017b4 	.word	0x200017b4
 8003100:	20000008 	.word	0x20000008
 8003104:	0800efbc 	.word	0x0800efbc
 8003108:	2000155c 	.word	0x2000155c
 800310c:	0800efc4 	.word	0x0800efc4

08003110 <wifi_set_mode>:

int wifi_set_mode(wifi_mode_t mode) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
	wifi_status_t ret = WIFI_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <wifi_set_mode+0x9c>)
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	f04f 31ff 	mov.w	r1, #4294967295
 8003126:	4618      	mov	r0, r3
 8003128:	f005 fd5e 	bl	8008be8 <osMutexAcquire>

	fprintf(fp, "AT+CWMODE=%d\r\n", mode);
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <wifi_set_mode+0xa0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	79fa      	ldrb	r2, [r7, #7]
 8003132:	4920      	ldr	r1, [pc, #128]	; (80031b4 <wifi_set_mode+0xa4>)
 8003134:	4618      	mov	r0, r3
 8003136:	f009 fc25 	bl	800c984 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 800313a:	f007 fbb1 	bl	800a8a0 <xTaskGetTickCount>
 800313e:	4603      	mov	r3, r0
 8003140:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003144:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8003146:	f007 fbab 	bl	800a8a0 <xTaskGetTickCount>
 800314a:	4602      	mov	r2, r0
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4293      	cmp	r3, r2
 8003150:	d802      	bhi.n	8003158 <wifi_set_mode+0x48>
			ret = WIFI_ERR_TMT;
 8003152:	2302      	movs	r3, #2
 8003154:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003156:	e01f      	b.n	8003198 <wifi_set_mode+0x88>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003158:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800315c:	2100      	movs	r1, #0
 800315e:	4816      	ldr	r0, [pc, #88]	; (80031b8 <wifi_set_mode+0xa8>)
 8003160:	f009 fe1e 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <wifi_set_mode+0xa0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800316e:	4812      	ldr	r0, [pc, #72]	; (80031b8 <wifi_set_mode+0xa8>)
 8003170:	f009 facc 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8003174:	2100      	movs	r1, #0
 8003176:	4810      	ldr	r0, [pc, #64]	; (80031b8 <wifi_set_mode+0xa8>)
 8003178:	f7ff fe10 	bl	8002d9c <cmp_resp>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <wifi_set_mode+0x86>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003182:	2101      	movs	r1, #1
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <wifi_set_mode+0xa8>)
 8003186:	f7ff fe09 	bl	8002d9c <cmp_resp>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1da      	bne.n	8003146 <wifi_set_mode+0x36>
			ret = WIFI_ERR_GENEGAL;
 8003190:	2305      	movs	r3, #5
 8003192:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003194:	e000      	b.n	8003198 <wifi_set_mode+0x88>
			break;
 8003196:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <wifi_set_mode+0x9c>)
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	4618      	mov	r0, r3
 800319e:	f005 fd6e 	bl	8008c7e <osMutexRelease>
	return ret;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000008 	.word	0x20000008
 80031b0:	200017b4 	.word	0x200017b4
 80031b4:	0800efd0 	.word	0x0800efd0
 80031b8:	2000155c 	.word	0x2000155c

080031bc <wifi_connect_to_ap>:

int wifi_connect_to_ap(char *ap_name, char *pass, uint32_t tmt) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
	uint32_t flags = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
	wifi_status_t ret = WIFI_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	76fb      	strb	r3, [r7, #27]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80031d0:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <wifi_connect_to_ap+0x114>)
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 fd05 	bl	8008be8 <osMutexAcquire>

	fprintf(fp, "AT+CWJAP=\"%s\",\"%s\"\r\n", ap_name, pass);
 80031de:	4b3d      	ldr	r3, [pc, #244]	; (80032d4 <wifi_connect_to_ap+0x118>)
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	493c      	ldr	r1, [pc, #240]	; (80032d8 <wifi_connect_to_ap+0x11c>)
 80031e8:	f009 fbcc 	bl	800c984 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + tmt;
 80031ec:	f007 fb58 	bl	800a8a0 <xTaskGetTickCount>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 80031f8:	f007 fb52 	bl	800a8a0 <xTaskGetTickCount>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	4293      	cmp	r3, r2
 8003202:	d802      	bhi.n	800320a <wifi_connect_to_ap+0x4e>
			ret = WIFI_ERR_TMT;
 8003204:	2302      	movs	r3, #2
 8003206:	76fb      	strb	r3, [r7, #27]
			goto quit;
 8003208:	e058      	b.n	80032bc <wifi_connect_to_ap+0x100>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 800320a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800320e:	2100      	movs	r1, #0
 8003210:	4832      	ldr	r0, [pc, #200]	; (80032dc <wifi_connect_to_ap+0x120>)
 8003212:	f009 fdc5 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <wifi_connect_to_ap+0x118>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003220:	482e      	ldr	r0, [pc, #184]	; (80032dc <wifi_connect_to_ap+0x120>)
 8003222:	f009 fa73 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0) {
 8003226:	2100      	movs	r1, #0
 8003228:	482c      	ldr	r0, [pc, #176]	; (80032dc <wifi_connect_to_ap+0x120>)
 800322a:	f7ff fdb7 	bl	8002d9c <cmp_resp>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d117      	bne.n	8003264 <wifi_connect_to_ap+0xa8>
			if (flags & 0x3) {
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d13d      	bne.n	80032ba <wifi_connect_to_ap+0xfe>
				goto quit;
			}
			else {
				if (!(flags & 0x01)) {
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <wifi_connect_to_ap+0x92>
					ret = WIFI_ERR_NO_AP;
 8003248:	2304      	movs	r3, #4
 800324a:	76fb      	strb	r3, [r7, #27]
					goto quit;
 800324c:	e036      	b.n	80032bc <wifi_connect_to_ap+0x100>
				}
				if (!(flags & 0x02)) {
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <wifi_connect_to_ap+0xa2>
					ret = WIFI_ERR_NO_IP;
 8003258:	2303      	movs	r3, #3
 800325a:	76fb      	strb	r3, [r7, #27]
					goto quit;
 800325c:	e02e      	b.n	80032bc <wifi_connect_to_ap+0x100>
				}
				ret = WIFI_ERR_GENEGAL;
 800325e:	2305      	movs	r3, #5
 8003260:	76fb      	strb	r3, [r7, #27]
				goto quit;
 8003262:	e02b      	b.n	80032bc <wifi_connect_to_ap+0x100>
			}
		}
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003264:	2101      	movs	r1, #1
 8003266:	481d      	ldr	r0, [pc, #116]	; (80032dc <wifi_connect_to_ap+0x120>)
 8003268:	f7ff fd98 	bl	8002d9c <cmp_resp>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <wifi_connect_to_ap+0xbc>
			ret = WIFI_ERR_GENEGAL;
 8003272:	2305      	movs	r3, #5
 8003274:	76fb      	strb	r3, [r7, #27]
			goto quit;
 8003276:	e021      	b.n	80032bc <wifi_connect_to_ap+0x100>
		}
		if (cmp_resp(rx_buffer, AT_RESP_FAIL) == 0) {
 8003278:	2102      	movs	r1, #2
 800327a:	4818      	ldr	r0, [pc, #96]	; (80032dc <wifi_connect_to_ap+0x120>)
 800327c:	f7ff fd8e 	bl	8002d9c <cmp_resp>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <wifi_connect_to_ap+0xd0>
			ret = WIFI_ERR_GENEGAL;
 8003286:	2305      	movs	r3, #5
 8003288:	76fb      	strb	r3, [r7, #27]
			goto quit;
 800328a:	e017      	b.n	80032bc <wifi_connect_to_ap+0x100>
		}
		if (cmp_resp(rx_buffer, AT_RESP_WIFI_CONNECTED) == 0)
 800328c:	2103      	movs	r1, #3
 800328e:	4813      	ldr	r0, [pc, #76]	; (80032dc <wifi_connect_to_ap+0x120>)
 8003290:	f7ff fd84 	bl	8002d9c <cmp_resp>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <wifi_connect_to_ap+0xe6>
			flags |= 0x01;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
		if (cmp_resp(rx_buffer, AT_RESP_WIFI_GOT_IP) == 0)
 80032a2:	2104      	movs	r1, #4
 80032a4:	480d      	ldr	r0, [pc, #52]	; (80032dc <wifi_connect_to_ap+0x120>)
 80032a6:	f7ff fd79 	bl	8002d9c <cmp_resp>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1a3      	bne.n	80031f8 <wifi_connect_to_ap+0x3c>
			flags |= 0x02;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	61fb      	str	r3, [r7, #28]
		if (xTaskGetTickCount() >= tmt_time) {
 80032b8:	e79e      	b.n	80031f8 <wifi_connect_to_ap+0x3c>
				goto quit;
 80032ba:	bf00      	nop
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <wifi_connect_to_ap+0x114>)
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	4618      	mov	r0, r3
 80032c2:	f005 fcdc 	bl	8008c7e <osMutexRelease>
	return ret;
 80032c6:	7efb      	ldrb	r3, [r7, #27]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000008 	.word	0x20000008
 80032d4:	200017b4 	.word	0x200017b4
 80032d8:	0800efe0 	.word	0x0800efe0
 80032dc:	2000155c 	.word	0x2000155c

080032e0 <wifi_get_own_ip>:

int wifi_get_own_ip(uint32_t *ip, uint32_t *mac) {
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b08b      	sub	sp, #44	; 0x2c
 80032e4:	af04      	add	r7, sp, #16
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
	uint32_t flags = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

	wifi_status_t ret = WIFI_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	74fb      	strb	r3, [r7, #19]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80032f2:	4b46      	ldr	r3, [pc, #280]	; (800340c <wifi_get_own_ip+0x12c>)
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	f04f 31ff 	mov.w	r1, #4294967295
 80032fa:	4618      	mov	r0, r3
 80032fc:	f005 fc74 	bl	8008be8 <osMutexAcquire>

	fprintf(fp, "AT+CIFSR\r\n");
 8003300:	4b43      	ldr	r3, [pc, #268]	; (8003410 <wifi_get_own_ip+0x130>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	220a      	movs	r2, #10
 8003306:	2101      	movs	r1, #1
 8003308:	4842      	ldr	r0, [pc, #264]	; (8003414 <wifi_get_own_ip+0x134>)
 800330a:	f009 fc9f 	bl	800cc4c <fwrite>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 800330e:	f007 fac7 	bl	800a8a0 <xTaskGetTickCount>
 8003312:	4603      	mov	r3, r0
 8003314:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003318:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 800331a:	f007 fac1 	bl	800a8a0 <xTaskGetTickCount>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4293      	cmp	r3, r2
 8003324:	d802      	bhi.n	800332c <wifi_get_own_ip+0x4c>
			ret = WIFI_ERR_TMT;
 8003326:	2302      	movs	r3, #2
 8003328:	74fb      	strb	r3, [r7, #19]
			goto quit;
 800332a:	e064      	b.n	80033f6 <wifi_get_own_ip+0x116>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 800332c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003330:	2100      	movs	r1, #0
 8003332:	4839      	ldr	r0, [pc, #228]	; (8003418 <wifi_get_own_ip+0x138>)
 8003334:	f009 fd34 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <wifi_get_own_ip+0x130>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003342:	4835      	ldr	r0, [pc, #212]	; (8003418 <wifi_get_own_ip+0x138>)
 8003344:	f009 f9e2 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0) {
 8003348:	2100      	movs	r1, #0
 800334a:	4833      	ldr	r0, [pc, #204]	; (8003418 <wifi_get_own_ip+0x138>)
 800334c:	f7ff fd26 	bl	8002d9c <cmp_resp>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <wifi_get_own_ip+0x8c>
			if (flags & 0x03) {
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <wifi_get_own_ip+0x86>
				ret = WIFI_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	74fb      	strb	r3, [r7, #19]
				goto quit;
 8003364:	e047      	b.n	80033f6 <wifi_get_own_ip+0x116>
			} else {
				ret = WIFI_ERR_NO_IP;
 8003366:	2303      	movs	r3, #3
 8003368:	74fb      	strb	r3, [r7, #19]
				goto quit;
 800336a:	e044      	b.n	80033f6 <wifi_get_own_ip+0x116>
			}
		}
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 800336c:	2101      	movs	r1, #1
 800336e:	482a      	ldr	r0, [pc, #168]	; (8003418 <wifi_get_own_ip+0x138>)
 8003370:	f7ff fd14 	bl	8002d9c <cmp_resp>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <wifi_get_own_ip+0xa0>
			ret = WIFI_ERR_GENEGAL;
 800337a:	2305      	movs	r3, #5
 800337c:	74fb      	strb	r3, [r7, #19]
			goto quit;
 800337e:	e03a      	b.n	80033f6 <wifi_get_own_ip+0x116>
		}

		if (strncmp(rx_buffer, "+CIFSR:STAIP", sizeof("+CIFSR:STAIP")-1) == 0) {
 8003380:	220c      	movs	r2, #12
 8003382:	4926      	ldr	r1, [pc, #152]	; (800341c <wifi_get_own_ip+0x13c>)
 8003384:	4824      	ldr	r0, [pc, #144]	; (8003418 <wifi_get_own_ip+0x138>)
 8003386:	f00a fbe6 	bl	800db56 <strncmp>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <wifi_get_own_ip+0xd4>
			flags |= 0x01;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	617b      	str	r3, [r7, #20]
			sscanf(rx_buffer, "+CIFSR:STAIP,\"%lu.%lu.%lu.%lu\"",
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1d19      	adds	r1, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3308      	adds	r3, #8
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	320c      	adds	r2, #12
 80033a4:	9201      	str	r2, [sp, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	491c      	ldr	r1, [pc, #112]	; (8003420 <wifi_get_own_ip+0x140>)
 80033ae:	481a      	ldr	r0, [pc, #104]	; (8003418 <wifi_get_own_ip+0x138>)
 80033b0:	f00a fb60 	bl	800da74 <siscanf>
					&ip[0], &ip[1], &ip[2], &ip[3]);
		}
		if (strncmp(rx_buffer, "+CIFSR:STAMAC", sizeof("+CIFSR:STAMAC")-1) == 0) {
 80033b4:	220d      	movs	r2, #13
 80033b6:	491b      	ldr	r1, [pc, #108]	; (8003424 <wifi_get_own_ip+0x144>)
 80033b8:	4817      	ldr	r0, [pc, #92]	; (8003418 <wifi_get_own_ip+0x138>)
 80033ba:	f00a fbcc 	bl	800db56 <strncmp>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1aa      	bne.n	800331a <wifi_get_own_ip+0x3a>
			flags |= 0x02;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	617b      	str	r3, [r7, #20]
			sscanf(rx_buffer, "+CIFSR:STAMAC,\"%02lX:%02lX:%02lX:%02lX:%02lX:%02lX\"",
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	1d1c      	adds	r4, r3, #4
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	3308      	adds	r3, #8
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	320c      	adds	r2, #12
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	3110      	adds	r1, #16
 80033dc:	6838      	ldr	r0, [r7, #0]
 80033de:	3014      	adds	r0, #20
 80033e0:	9003      	str	r0, [sp, #12]
 80033e2:	9102      	str	r1, [sp, #8]
 80033e4:	9201      	str	r2, [sp, #4]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	4623      	mov	r3, r4
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	490e      	ldr	r1, [pc, #56]	; (8003428 <wifi_get_own_ip+0x148>)
 80033ee:	480a      	ldr	r0, [pc, #40]	; (8003418 <wifi_get_own_ip+0x138>)
 80033f0:	f00a fb40 	bl	800da74 <siscanf>
		if (xTaskGetTickCount() >= tmt_time) {
 80033f4:	e791      	b.n	800331a <wifi_get_own_ip+0x3a>
					&mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
		}
	}
quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <wifi_get_own_ip+0x12c>)
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	4618      	mov	r0, r3
 80033fc:	f005 fc3f 	bl	8008c7e <osMutexRelease>
	return ret;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	20000008 	.word	0x20000008
 8003410:	200017b4 	.word	0x200017b4
 8003414:	0800eff8 	.word	0x0800eff8
 8003418:	2000155c 	.word	0x2000155c
 800341c:	0800f004 	.word	0x0800f004
 8003420:	0800f014 	.word	0x0800f014
 8003424:	0800f034 	.word	0x0800f034
 8003428:	0800f044 	.word	0x0800f044

0800342c <wifi_multiple_conns>:

int wifi_multiple_conns(int multiple) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	wifi_status_t ret = WIFI_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]

	mux = multiple;
 8003438:	4a24      	ldr	r2, [pc, #144]	; (80034cc <wifi_multiple_conns+0xa0>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <wifi_multiple_conns+0xa4>)
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	f04f 31ff 	mov.w	r1, #4294967295
 8003446:	4618      	mov	r0, r3
 8003448:	f005 fbce 	bl	8008be8 <osMutexAcquire>
	fprintf(fp, "AT+CIPMUX=%d\r\n", multiple);
 800344c:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <wifi_multiple_conns+0xa8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4921      	ldr	r1, [pc, #132]	; (80034d8 <wifi_multiple_conns+0xac>)
 8003454:	4618      	mov	r0, r3
 8003456:	f009 fa95 	bl	800c984 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 800345a:	f007 fa21 	bl	800a8a0 <xTaskGetTickCount>
 800345e:	4603      	mov	r3, r0
 8003460:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003464:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8003466:	f007 fa1b 	bl	800a8a0 <xTaskGetTickCount>
 800346a:	4602      	mov	r2, r0
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4293      	cmp	r3, r2
 8003470:	d802      	bhi.n	8003478 <wifi_multiple_conns+0x4c>
			ret = WIFI_ERR_TMT;
 8003472:	2302      	movs	r3, #2
 8003474:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003476:	e01f      	b.n	80034b8 <wifi_multiple_conns+0x8c>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003478:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800347c:	2100      	movs	r1, #0
 800347e:	4817      	ldr	r0, [pc, #92]	; (80034dc <wifi_multiple_conns+0xb0>)
 8003480:	f009 fc8e 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <wifi_multiple_conns+0xa8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800348e:	4813      	ldr	r0, [pc, #76]	; (80034dc <wifi_multiple_conns+0xb0>)
 8003490:	f009 f93c 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8003494:	2100      	movs	r1, #0
 8003496:	4811      	ldr	r0, [pc, #68]	; (80034dc <wifi_multiple_conns+0xb0>)
 8003498:	f7ff fc80 	bl	8002d9c <cmp_resp>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <wifi_multiple_conns+0x8a>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 80034a2:	2101      	movs	r1, #1
 80034a4:	480d      	ldr	r0, [pc, #52]	; (80034dc <wifi_multiple_conns+0xb0>)
 80034a6:	f7ff fc79 	bl	8002d9c <cmp_resp>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1da      	bne.n	8003466 <wifi_multiple_conns+0x3a>
			ret = WIFI_ERR_GENEGAL;
 80034b0:	2305      	movs	r3, #5
 80034b2:	73fb      	strb	r3, [r7, #15]
			goto quit;
 80034b4:	e000      	b.n	80034b8 <wifi_multiple_conns+0x8c>
			break;
 80034b6:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <wifi_multiple_conns+0xa4>)
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	4618      	mov	r0, r3
 80034be:	f005 fbde 	bl	8008c7e <osMutexRelease>
	return ret;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200017b8 	.word	0x200017b8
 80034d0:	20000008 	.word	0x20000008
 80034d4:	200017b4 	.word	0x200017b4
 80034d8:	0800f078 	.word	0x0800f078
 80034dc:	2000155c 	.word	0x2000155c

080034e0 <wifi_server>:

int wifi_server(int create, int port) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
	wifi_status_t ret;

	ret = wifi_multiple_conns(1);
 80034ea:	2001      	movs	r0, #1
 80034ec:	f7ff ff9e 	bl	800342c <wifi_multiple_conns>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <wifi_server+0x1e>
		return ret;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	e04d      	b.n	800359a <wifi_server+0xba>
	}

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80034fe:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <wifi_server+0xc4>)
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	f04f 31ff 	mov.w	r1, #4294967295
 8003506:	4618      	mov	r0, r3
 8003508:	f005 fb6e 	bl	8008be8 <osMutexAcquire>

	if (create)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <wifi_server+0x42>
		fprintf(fp, "AT+CIPSERVER=%d,%d\r\n", create, port);
 8003512:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <wifi_server+0xc8>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4924      	ldr	r1, [pc, #144]	; (80035ac <wifi_server+0xcc>)
 800351c:	f009 fa32 	bl	800c984 <fiprintf>
 8003520:	e006      	b.n	8003530 <wifi_server+0x50>
	else
		fprintf(fp, "AT+CIPSERVER=0\r\n");
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <wifi_server+0xc8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2210      	movs	r2, #16
 8003528:	2101      	movs	r1, #1
 800352a:	4821      	ldr	r0, [pc, #132]	; (80035b0 <wifi_server+0xd0>)
 800352c:	f009 fb8e 	bl	800cc4c <fwrite>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 8003530:	f007 f9b6 	bl	800a8a0 <xTaskGetTickCount>
 8003534:	4603      	mov	r3, r0
 8003536:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800353a:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 800353c:	f007 f9b0 	bl	800a8a0 <xTaskGetTickCount>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4293      	cmp	r3, r2
 8003546:	d802      	bhi.n	800354e <wifi_server+0x6e>
			ret = WIFI_ERR_TMT;
 8003548:	2302      	movs	r3, #2
 800354a:	73fb      	strb	r3, [r7, #15]
			goto quit;
 800354c:	e01f      	b.n	800358e <wifi_server+0xae>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 800354e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003552:	2100      	movs	r1, #0
 8003554:	4817      	ldr	r0, [pc, #92]	; (80035b4 <wifi_server+0xd4>)
 8003556:	f009 fc23 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <wifi_server+0xc8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003564:	4813      	ldr	r0, [pc, #76]	; (80035b4 <wifi_server+0xd4>)
 8003566:	f009 f8d1 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 800356a:	2100      	movs	r1, #0
 800356c:	4811      	ldr	r0, [pc, #68]	; (80035b4 <wifi_server+0xd4>)
 800356e:	f7ff fc15 	bl	8002d9c <cmp_resp>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <wifi_server+0xac>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003578:	2101      	movs	r1, #1
 800357a:	480e      	ldr	r0, [pc, #56]	; (80035b4 <wifi_server+0xd4>)
 800357c:	f7ff fc0e 	bl	8002d9c <cmp_resp>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1da      	bne.n	800353c <wifi_server+0x5c>
			ret = WIFI_ERR_GENEGAL;
 8003586:	2305      	movs	r3, #5
 8003588:	73fb      	strb	r3, [r7, #15]
			goto quit;
 800358a:	e000      	b.n	800358e <wifi_server+0xae>
			break;
 800358c:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <wifi_server+0xc4>)
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	4618      	mov	r0, r3
 8003594:	f005 fb73 	bl	8008c7e <osMutexRelease>
	return ret;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000008 	.word	0x20000008
 80035a8:	200017b4 	.word	0x200017b4
 80035ac:	0800f088 	.word	0x0800f088
 80035b0:	0800f0a0 	.word	0x0800f0a0
 80035b4:	2000155c 	.word	0x2000155c

080035b8 <wifi_send>:

int wifi_send(int link, char *text, uint32_t len) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	uint32_t flags = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
	wifi_status_t ret = WIFI_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	76fb      	strb	r3, [r7, #27]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80035cc:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <wifi_send+0xe8>)
 80035ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	4618      	mov	r0, r3
 80035d6:	f005 fb07 	bl	8008be8 <osMutexAcquire>

	if (mux)
 80035da:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <wifi_send+0xec>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <wifi_send+0x3a>
		fprintf(fp, "AT+CIPSEND=%d,%ld\r\n", link, len);
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <wifi_send+0xf0>)
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4930      	ldr	r1, [pc, #192]	; (80036ac <wifi_send+0xf4>)
 80035ec:	f009 f9ca 	bl	800c984 <fiprintf>
 80035f0:	e006      	b.n	8003600 <wifi_send+0x48>
	else
		fprintf(fp, "AT+CIPSEND=%ld\r\n", len);
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <wifi_send+0xf0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	492d      	ldr	r1, [pc, #180]	; (80036b0 <wifi_send+0xf8>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f009 f9c2 	bl	800c984 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 8003600:	f007 f94e 	bl	800a8a0 <xTaskGetTickCount>
 8003604:	4603      	mov	r3, r0
 8003606:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800360a:	617b      	str	r3, [r7, #20]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 800360c:	f007 f948 	bl	800a8a0 <xTaskGetTickCount>
 8003610:	4602      	mov	r2, r0
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4293      	cmp	r3, r2
 8003616:	d802      	bhi.n	800361e <wifi_send+0x66>
			ret = WIFI_ERR_TMT;
 8003618:	2302      	movs	r3, #2
 800361a:	76fb      	strb	r3, [r7, #27]
			goto quit;
 800361c:	e036      	b.n	800368c <wifi_send+0xd4>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 800361e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003622:	2100      	movs	r1, #0
 8003624:	4823      	ldr	r0, [pc, #140]	; (80036b4 <wifi_send+0xfc>)
 8003626:	f009 fbbb 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <wifi_send+0xf0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003634:	481f      	ldr	r0, [pc, #124]	; (80036b4 <wifi_send+0xfc>)
 8003636:	f009 f869 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0) {
 800363a:	2100      	movs	r1, #0
 800363c:	481d      	ldr	r0, [pc, #116]	; (80036b4 <wifi_send+0xfc>)
 800363e:	f7ff fbad 	bl	8002d9c <cmp_resp>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <wifi_send+0xa8>
			fwrite(text, 1, len, fp);
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <wifi_send+0xf0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	2101      	movs	r1, #1
 8003650:	68b8      	ldr	r0, [r7, #8]
 8003652:	f009 fafb 	bl	800cc4c <fwrite>
			flags |= 1;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
			continue;
 800365e:	e013      	b.n	8003688 <wifi_send+0xd0>
		}
		if (flags) {
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <wifi_send+0xbc>
			if (cmp_resp(rx_buffer, AT_RESP_SEND_OK) == 0) {
 8003666:	2107      	movs	r1, #7
 8003668:	4812      	ldr	r0, [pc, #72]	; (80036b4 <wifi_send+0xfc>)
 800366a:	f7ff fb97 	bl	8002d9c <cmp_resp>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <wifi_send+0xd2>
				break;
			}
		}
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003674:	2101      	movs	r1, #1
 8003676:	480f      	ldr	r0, [pc, #60]	; (80036b4 <wifi_send+0xfc>)
 8003678:	f7ff fb90 	bl	8002d9c <cmp_resp>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1c4      	bne.n	800360c <wifi_send+0x54>
			ret = WIFI_ERR_GENEGAL;
 8003682:	2305      	movs	r3, #5
 8003684:	76fb      	strb	r3, [r7, #27]
			goto quit;
 8003686:	e001      	b.n	800368c <wifi_send+0xd4>
		if (xTaskGetTickCount() >= tmt_time) {
 8003688:	e7c0      	b.n	800360c <wifi_send+0x54>
				break;
 800368a:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <wifi_send+0xe8>)
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	4618      	mov	r0, r3
 8003692:	f005 faf4 	bl	8008c7e <osMutexRelease>
	return ret;
 8003696:	7efb      	ldrb	r3, [r7, #27]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000008 	.word	0x20000008
 80036a4:	200017b8 	.word	0x200017b8
 80036a8:	200017b4 	.word	0x200017b4
 80036ac:	0800f0b4 	.word	0x0800f0b4
 80036b0:	0800f0c8 	.word	0x0800f0c8
 80036b4:	2000155c 	.word	0x2000155c

080036b8 <wifi_printf>:

int wifi_printf(int link, char *fmt, ...) {
 80036b8:	b40e      	push	{r1, r2, r3}
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
	int len = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
	va_list args;
	memset(tx_buffer, 0, sizeof(rx_buffer));
 80036c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ca:	2100      	movs	r1, #0
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <wifi_printf+0x54>)
 80036ce:	f009 fb67 	bl	800cda0 <memset>
	va_start(args, fmt);
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	60bb      	str	r3, [r7, #8]
	vsprintf(tx_buffer, fmt, args);
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	69f9      	ldr	r1, [r7, #28]
 80036dc:	480b      	ldr	r0, [pc, #44]	; (800370c <wifi_printf+0x54>)
 80036de:	f00a fa87 	bl	800dbf0 <vsiprintf>
	va_end(args);
	len = strnlen(tx_buffer, sizeof(tx_buffer));
 80036e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80036e6:	4809      	ldr	r0, [pc, #36]	; (800370c <wifi_printf+0x54>)
 80036e8:	f00a fa49 	bl	800db7e <strnlen>
 80036ec:	4603      	mov	r3, r0
 80036ee:	60fb      	str	r3, [r7, #12]
	return wifi_send(link, tx_buffer, len);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	4905      	ldr	r1, [pc, #20]	; (800370c <wifi_printf+0x54>)
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ff5e 	bl	80035b8 <wifi_send>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003708:	b003      	add	sp, #12
 800370a:	4770      	bx	lr
 800370c:	20001688 	.word	0x20001688

08003710 <wifi_close>:

int wifi_close(int link) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	wifi_status_t ret = WIFI_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <wifi_close+0x9c>)
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	f04f 31ff 	mov.w	r1, #4294967295
 8003724:	4618      	mov	r0, r3
 8003726:	f005 fa5f 	bl	8008be8 <osMutexAcquire>

	fprintf(fp, "AT+CIPCLOSE=%d\r\n", link);
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <wifi_close+0xa0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4920      	ldr	r1, [pc, #128]	; (80037b4 <wifi_close+0xa4>)
 8003732:	4618      	mov	r0, r3
 8003734:	f009 f926 	bl	800c984 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 8003738:	f007 f8b2 	bl	800a8a0 <xTaskGetTickCount>
 800373c:	4603      	mov	r3, r0
 800373e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003742:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8003744:	f007 f8ac 	bl	800a8a0 <xTaskGetTickCount>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4293      	cmp	r3, r2
 800374e:	d802      	bhi.n	8003756 <wifi_close+0x46>
			ret = WIFI_ERR_TMT;
 8003750:	2302      	movs	r3, #2
 8003752:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003754:	e01f      	b.n	8003796 <wifi_close+0x86>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003756:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800375a:	2100      	movs	r1, #0
 800375c:	4816      	ldr	r0, [pc, #88]	; (80037b8 <wifi_close+0xa8>)
 800375e:	f009 fb1f 	bl	800cda0 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <wifi_close+0xa0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800376c:	4812      	ldr	r0, [pc, #72]	; (80037b8 <wifi_close+0xa8>)
 800376e:	f008 ffcd 	bl	800c70c <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8003772:	2100      	movs	r1, #0
 8003774:	4810      	ldr	r0, [pc, #64]	; (80037b8 <wifi_close+0xa8>)
 8003776:	f7ff fb11 	bl	8002d9c <cmp_resp>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <wifi_close+0x84>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003780:	2101      	movs	r1, #1
 8003782:	480d      	ldr	r0, [pc, #52]	; (80037b8 <wifi_close+0xa8>)
 8003784:	f7ff fb0a 	bl	8002d9c <cmp_resp>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1da      	bne.n	8003744 <wifi_close+0x34>
			ret = WIFI_ERR_GENEGAL;
 800378e:	2305      	movs	r3, #5
 8003790:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003792:	e000      	b.n	8003796 <wifi_close+0x86>
			break;
 8003794:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <wifi_close+0x9c>)
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	4618      	mov	r0, r3
 800379c:	f005 fa6f 	bl	8008c7e <osMutexRelease>
	return ret;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000008 	.word	0x20000008
 80037b0:	200017b4 	.word	0x200017b4
 80037b4:	0800f0dc 	.word	0x0800f0dc
 80037b8:	2000155c 	.word	0x2000155c

080037bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037c2:	490e      	ldr	r1, [pc, #56]	; (80037fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c8:	e002      	b.n	80037d0 <LoopCopyDataInit>

080037ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ce:	3304      	adds	r3, #4

080037d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d4:	d3f9      	bcc.n	80037ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037d8:	4c0b      	ldr	r4, [pc, #44]	; (8003808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037dc:	e001      	b.n	80037e2 <LoopFillZerobss>

080037de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e0:	3204      	adds	r2, #4

080037e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e4:	d3fb      	bcc.n	80037de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037e6:	f7ff fac7 	bl	8002d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ea:	f009 fa3d 	bl	800cc68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ee:	f7fe f871 	bl	80018d4 <main>
  bx  lr    
 80037f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80037f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037fc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003800:	0800f9ac 	.word	0x0800f9ac
  ldr r2, =_sbss
 8003804:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8003808:	200063d4 	.word	0x200063d4

0800380c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800380c:	e7fe      	b.n	800380c <ADC_IRQHandler>
	...

08003810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_Init+0x40>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <HAL_Init+0x40>)
 800381a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_Init+0x40>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <HAL_Init+0x40>)
 8003826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800382a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_Init+0x40>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <HAL_Init+0x40>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003838:	2003      	movs	r0, #3
 800383a:	f000 fb8d 	bl	8003f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800383e:	200f      	movs	r0, #15
 8003840:	f000 f808 	bl	8003854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003844:	f7fe fcf2 	bl	800222c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00

08003854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_InitTick+0x54>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_InitTick+0x58>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4619      	mov	r1, r3
 8003866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386a:	fbb3 f3f1 	udiv	r3, r3, r1
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fba5 	bl	8003fc2 <HAL_SYSTICK_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e00e      	b.n	80038a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d80a      	bhi.n	800389e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003888:	2200      	movs	r2, #0
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f000 fb6d 	bl	8003f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003894:	4a06      	ldr	r2, [pc, #24]	; (80038b0 <HAL_InitTick+0x5c>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000050 	.word	0x20000050
 80038ac:	20000110 	.word	0x20000110
 80038b0:	2000010c 	.word	0x2000010c

080038b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_IncTick+0x20>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_IncTick+0x24>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_IncTick+0x24>)
 80038c6:	6013      	str	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000110 	.word	0x20000110
 80038d8:	200019b0 	.word	0x200019b0

080038dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return uwTick;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_GetTick+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	200019b0 	.word	0x200019b0

080038f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e033      	b.n	8003972 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fe fcbe 	bl	8002294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d118      	bne.n	8003964 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800393a:	f023 0302 	bic.w	r3, r3, #2
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f93a 	bl	8003bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
 8003962:	e001      	b.n	8003968 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x1c>
 8003994:	2302      	movs	r3, #2
 8003996:	e105      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x228>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d925      	bls.n	80039f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68d9      	ldr	r1, [r3, #12]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	3b1e      	subs	r3, #30
 80039be:	2207      	movs	r2, #7
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43da      	mvns	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	400a      	ands	r2, r1
 80039cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68d9      	ldr	r1, [r3, #12]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	4618      	mov	r0, r3
 80039e0:	4603      	mov	r3, r0
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4403      	add	r3, r0
 80039e6:	3b1e      	subs	r3, #30
 80039e8:	409a      	lsls	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	e022      	b.n	8003a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6919      	ldr	r1, [r3, #16]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	4613      	mov	r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4413      	add	r3, r2
 8003a08:	2207      	movs	r2, #7
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	400a      	ands	r2, r1
 8003a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6919      	ldr	r1, [r3, #16]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4618      	mov	r0, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4403      	add	r3, r0
 8003a30:	409a      	lsls	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d824      	bhi.n	8003a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	3b05      	subs	r3, #5
 8003a54:	221f      	movs	r2, #31
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	400a      	ands	r2, r1
 8003a62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	4618      	mov	r0, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b05      	subs	r3, #5
 8003a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34
 8003a8a:	e04c      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d824      	bhi.n	8003ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3b23      	subs	r3, #35	; 0x23
 8003aa6:	221f      	movs	r2, #31
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43da      	mvns	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	3b23      	subs	r3, #35	; 0x23
 8003ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
 8003adc:	e023      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	3b41      	subs	r3, #65	; 0x41
 8003af0:	221f      	movs	r2, #31
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	400a      	ands	r2, r1
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	3b41      	subs	r3, #65	; 0x41
 8003b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_ADC_ConfigChannel+0x234>)
 8003b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_ADC_ConfigChannel+0x238>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d109      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1cc>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b12      	cmp	r3, #18
 8003b3a:	d105      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <HAL_ADC_ConfigChannel+0x238>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d123      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x21e>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d003      	beq.n	8003b62 <HAL_ADC_ConfigChannel+0x1e6>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b11      	cmp	r3, #17
 8003b60:	d11b      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d111      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_ADC_ConfigChannel+0x23c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <HAL_ADC_ConfigChannel+0x240>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	0c9a      	lsrs	r2, r3, #18
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b8c:	e002      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f9      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40012300 	.word	0x40012300
 8003bb4:	40012000 	.word	0x40012000
 8003bb8:	20000050 	.word	0x20000050
 8003bbc:	431bde83 	.word	0x431bde83

08003bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bc8:	4b79      	ldr	r3, [pc, #484]	; (8003db0 <ADC_Init+0x1f0>)
 8003bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	021a      	lsls	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6899      	ldr	r1, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <ADC_Init+0x1f4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d022      	beq.n	8003c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6899      	ldr	r1, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6899      	ldr	r1, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e00f      	b.n	8003cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0202 	bic.w	r2, r2, #2
 8003ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7e1b      	ldrb	r3, [r3, #24]
 8003cd8:	005a      	lsls	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01b      	beq.n	8003d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	3b01      	subs	r3, #1
 8003d18:	035a      	lsls	r2, r3, #13
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	e007      	b.n	8003d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	051a      	lsls	r2, r3, #20
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d76:	025a      	lsls	r2, r3, #9
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	029a      	lsls	r2, r3, #10
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40012300 	.word	0x40012300
 8003db4:	0f000001 	.word	0x0f000001

08003db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	60d3      	str	r3, [r2, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <__NVIC_GetPriorityGrouping+0x18>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 0307 	and.w	r3, r3, #7
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db0b      	blt.n	8003e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4907      	ldr	r1, [pc, #28]	; (8003e54 <__NVIC_EnableIRQ+0x38>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db0a      	blt.n	8003e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	490c      	ldr	r1, [pc, #48]	; (8003ea4 <__NVIC_SetPriority+0x4c>)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e80:	e00a      	b.n	8003e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <__NVIC_SetPriority+0x50>)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	440b      	add	r3, r1
 8003e96:	761a      	strb	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f1c3 0307 	rsb	r3, r3, #7
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	bf28      	it	cs
 8003eca:	2304      	movcs	r3, #4
 8003ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d902      	bls.n	8003edc <NVIC_EncodePriority+0x30>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3b03      	subs	r3, #3
 8003eda:	e000      	b.n	8003ede <NVIC_EncodePriority+0x32>
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	401a      	ands	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	4313      	orrs	r3, r2
         );
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	; 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f24:	d301      	bcc.n	8003f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f26:	2301      	movs	r3, #1
 8003f28:	e00f      	b.n	8003f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <SysTick_Config+0x40>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f32:	210f      	movs	r1, #15
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	f7ff ff8e 	bl	8003e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <SysTick_Config+0x40>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f42:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <SysTick_Config+0x40>)
 8003f44:	2207      	movs	r2, #7
 8003f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000e010 	.word	0xe000e010

08003f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff29 	bl	8003db8 <__NVIC_SetPriorityGrouping>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f80:	f7ff ff3e 	bl	8003e00 <__NVIC_GetPriorityGrouping>
 8003f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7ff ff8e 	bl	8003eac <NVIC_EncodePriority>
 8003f90:	4602      	mov	r2, r0
 8003f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff5d 	bl	8003e58 <__NVIC_SetPriority>
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	4603      	mov	r3, r0
 8003fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff31 	bl	8003e1c <__NVIC_EnableIRQ>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ffa2 	bl	8003f14 <SysTick_Config>
 8003fd0:	4603      	mov	r3, r0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fe8:	f7ff fc78 	bl	80038dc <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e099      	b.n	800412c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004018:	e00f      	b.n	800403a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800401a:	f7ff fc5f 	bl	80038dc <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b05      	cmp	r3, #5
 8004026:	d908      	bls.n	800403a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2203      	movs	r2, #3
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e078      	b.n	800412c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e8      	bne.n	800401a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_DMA_Init+0x158>)
 8004054:	4013      	ands	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2b04      	cmp	r3, #4
 8004092:	d107      	bne.n	80040a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4313      	orrs	r3, r2
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d117      	bne.n	80040fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fb0d 	bl	8004700 <DMA_CheckFifoParam>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040fa:	2301      	movs	r3, #1
 80040fc:	e016      	b.n	800412c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fac4 	bl	8004694 <DMA_CalcBaseAndBitshift>
 800410c:	4603      	mov	r3, r0
 800410e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	223f      	movs	r2, #63	; 0x3f
 8004116:	409a      	lsls	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	f010803f 	.word	0xf010803f

08004138 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_DMA_Start_IT+0x26>
 800415a:	2302      	movs	r3, #2
 800415c:	e040      	b.n	80041e0 <HAL_DMA_Start_IT+0xa8>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d12f      	bne.n	80041d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fa56 	bl	8004638 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	223f      	movs	r2, #63	; 0x3f
 8004192:	409a      	lsls	r2, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0216 	orr.w	r2, r2, #22
 80041a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0208 	orr.w	r2, r2, #8
 80041be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e005      	b.n	80041de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041f6:	f7ff fb71 	bl	80038dc <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d008      	beq.n	800421a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2280      	movs	r2, #128	; 0x80
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e052      	b.n	80042c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0216 	bic.w	r2, r2, #22
 8004228:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004238:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_DMA_Abort+0x62>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0208 	bic.w	r2, r2, #8
 8004258:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800426a:	e013      	b.n	8004294 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800426c:	f7ff fb36 	bl	80038dc <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b05      	cmp	r3, #5
 8004278:	d90c      	bls.n	8004294 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2203      	movs	r2, #3
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e015      	b.n	80042c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e4      	bne.n	800426c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	223f      	movs	r2, #63	; 0x3f
 80042a8:	409a      	lsls	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d004      	beq.n	80042e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e00c      	b.n	8004300 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2205      	movs	r2, #5
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004318:	4b8e      	ldr	r3, [pc, #568]	; (8004554 <HAL_DMA_IRQHandler+0x248>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a8e      	ldr	r2, [pc, #568]	; (8004558 <HAL_DMA_IRQHandler+0x24c>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	2208      	movs	r2, #8
 8004338:	409a      	lsls	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01a      	beq.n	8004378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	2208      	movs	r2, #8
 8004366:	409a      	lsls	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	2201      	movs	r2, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f043 0202 	orr.w	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	2204      	movs	r2, #4
 80043b4:	409a      	lsls	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d012      	beq.n	80043e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	2204      	movs	r2, #4
 80043d2:	409a      	lsls	r2, r3
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f043 0204 	orr.w	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	2210      	movs	r2, #16
 80043ea:	409a      	lsls	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d043      	beq.n	800447c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d03c      	beq.n	800447c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	2210      	movs	r2, #16
 8004408:	409a      	lsls	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d018      	beq.n	800444e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d024      	beq.n	800447c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
 800443a:	e01f      	b.n	800447c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01b      	beq.n	800447c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
 800444c:	e016      	b.n	800447c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d107      	bne.n	800446c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0208 	bic.w	r2, r2, #8
 800446a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	2220      	movs	r2, #32
 8004482:	409a      	lsls	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 808f 	beq.w	80045ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8087 	beq.w	80045ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a2:	2220      	movs	r2, #32
 80044a4:	409a      	lsls	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d136      	bne.n	8004524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0216 	bic.w	r2, r2, #22
 80044c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695a      	ldr	r2, [r3, #20]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_DMA_IRQHandler+0x1da>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0208 	bic.w	r2, r2, #8
 80044f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fa:	223f      	movs	r2, #63	; 0x3f
 80044fc:	409a      	lsls	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004516:	2b00      	cmp	r3, #0
 8004518:	d07e      	beq.n	8004618 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
        }
        return;
 8004522:	e079      	b.n	8004618 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01d      	beq.n	800456e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	2b00      	cmp	r3, #0
 8004546:	d031      	beq.n	80045ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
 8004550:	e02c      	b.n	80045ac <HAL_DMA_IRQHandler+0x2a0>
 8004552:	bf00      	nop
 8004554:	20000050 	.word	0x20000050
 8004558:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d023      	beq.n	80045ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
 800456c:	e01e      	b.n	80045ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0210 	bic.w	r2, r2, #16
 800458a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d032      	beq.n	800461a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d022      	beq.n	8004606 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2205      	movs	r2, #5
 80045c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	3301      	adds	r3, #1
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d307      	bcc.n	80045f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f2      	bne.n	80045d8 <HAL_DMA_IRQHandler+0x2cc>
 80045f2:	e000      	b.n	80045f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
 8004616:	e000      	b.n	800461a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004618:	bf00      	nop
    }
  }
}
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004654:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d108      	bne.n	8004678 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004676:	e007      	b.n	8004688 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	3b10      	subs	r3, #16
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <DMA_CalcBaseAndBitshift+0x64>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ae:	4a13      	ldr	r2, [pc, #76]	; (80046fc <DMA_CalcBaseAndBitshift+0x68>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d909      	bls.n	80046d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	659a      	str	r2, [r3, #88]	; 0x58
 80046d4:	e007      	b.n	80046e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	aaaaaaab 	.word	0xaaaaaaab
 80046fc:	0800f7e0 	.word	0x0800f7e0

08004700 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11f      	bne.n	800475a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d856      	bhi.n	80047ce <DMA_CheckFifoParam+0xce>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <DMA_CheckFifoParam+0x28>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	08004739 	.word	0x08004739
 800472c:	0800474b 	.word	0x0800474b
 8004730:	08004739 	.word	0x08004739
 8004734:	080047cf 	.word	0x080047cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d046      	beq.n	80047d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004748:	e043      	b.n	80047d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004752:	d140      	bne.n	80047d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004758:	e03d      	b.n	80047d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	d121      	bne.n	80047a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d837      	bhi.n	80047da <DMA_CheckFifoParam+0xda>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <DMA_CheckFifoParam+0x70>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004781 	.word	0x08004781
 8004774:	08004787 	.word	0x08004787
 8004778:	08004781 	.word	0x08004781
 800477c:	08004799 	.word	0x08004799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e030      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d025      	beq.n	80047de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004796:	e022      	b.n	80047de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047a0:	d11f      	bne.n	80047e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047a6:	e01c      	b.n	80047e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d903      	bls.n	80047b6 <DMA_CheckFifoParam+0xb6>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d003      	beq.n	80047bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047b4:	e018      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
      break;
 80047ba:	e015      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00e      	beq.n	80047e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e00b      	b.n	80047e6 <DMA_CheckFifoParam+0xe6>
      break;
 80047ce:	bf00      	nop
 80047d0:	e00a      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047d2:	bf00      	nop
 80047d4:	e008      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047d6:	bf00      	nop
 80047d8:	e006      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047da:	bf00      	nop
 80047dc:	e004      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
    }
  } 
  
  return status; 
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop

080047f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	; 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e159      	b.n	8004ac8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004814:	2201      	movs	r2, #1
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	429a      	cmp	r2, r3
 800482e:	f040 8148 	bne.w	8004ac2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d005      	beq.n	800484a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004846:	2b02      	cmp	r3, #2
 8004848:	d130      	bne.n	80048ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	2203      	movs	r2, #3
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004880:	2201      	movs	r2, #1
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 0201 	and.w	r2, r3, #1
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d017      	beq.n	80048e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	2203      	movs	r2, #3
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d123      	bne.n	800493c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	08da      	lsrs	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3208      	adds	r2, #8
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	220f      	movs	r2, #15
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	08da      	lsrs	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	69b9      	ldr	r1, [r7, #24]
 8004938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	2203      	movs	r2, #3
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0203 	and.w	r2, r3, #3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80a2 	beq.w	8004ac2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	4b57      	ldr	r3, [pc, #348]	; (8004ae0 <HAL_GPIO_Init+0x2e8>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	4a56      	ldr	r2, [pc, #344]	; (8004ae0 <HAL_GPIO_Init+0x2e8>)
 8004988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800498c:	6453      	str	r3, [r2, #68]	; 0x44
 800498e:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <HAL_GPIO_Init+0x2e8>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499a:	4a52      	ldr	r2, [pc, #328]	; (8004ae4 <HAL_GPIO_Init+0x2ec>)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	3302      	adds	r3, #2
 80049a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	220f      	movs	r2, #15
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a49      	ldr	r2, [pc, #292]	; (8004ae8 <HAL_GPIO_Init+0x2f0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d019      	beq.n	80049fa <HAL_GPIO_Init+0x202>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_GPIO_Init+0x2f4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_GPIO_Init+0x1fe>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a47      	ldr	r2, [pc, #284]	; (8004af0 <HAL_GPIO_Init+0x2f8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00d      	beq.n	80049f2 <HAL_GPIO_Init+0x1fa>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <HAL_GPIO_Init+0x2fc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <HAL_GPIO_Init+0x1f6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a45      	ldr	r2, [pc, #276]	; (8004af8 <HAL_GPIO_Init+0x300>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <HAL_GPIO_Init+0x1f2>
 80049e6:	2304      	movs	r3, #4
 80049e8:	e008      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049ea:	2307      	movs	r3, #7
 80049ec:	e006      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049ee:	2303      	movs	r3, #3
 80049f0:	e004      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e002      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_GPIO_Init+0x204>
 80049fa:	2300      	movs	r3, #0
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	f002 0203 	and.w	r2, r2, #3
 8004a02:	0092      	lsls	r2, r2, #2
 8004a04:	4093      	lsls	r3, r2
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a0c:	4935      	ldr	r1, [pc, #212]	; (8004ae4 <HAL_GPIO_Init+0x2ec>)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	3302      	adds	r3, #2
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a1a:	4b38      	ldr	r3, [pc, #224]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a3e:	4a2f      	ldr	r2, [pc, #188]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a68:	4a24      	ldr	r2, [pc, #144]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a92:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a98:	4b18      	ldr	r3, [pc, #96]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004abc:	4a0f      	ldr	r2, [pc, #60]	; (8004afc <HAL_GPIO_Init+0x304>)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	f67f aea2 	bls.w	8004814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40013800 	.word	0x40013800
 8004ae8:	40020000 	.word	0x40020000
 8004aec:	40020400 	.word	0x40020400
 8004af0:	40020800 	.word	0x40020800
 8004af4:	40020c00 	.word	0x40020c00
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40013c00 	.word	0x40013c00

08004b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b1c:	e003      	b.n	8004b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	619a      	str	r2, [r3, #24]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e12b      	b.n	8004d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd fbde 	bl	800231c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b98:	f001 fbbc 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8004b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4a81      	ldr	r2, [pc, #516]	; (8004da8 <HAL_I2C_Init+0x274>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d807      	bhi.n	8004bb8 <HAL_I2C_Init+0x84>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a80      	ldr	r2, [pc, #512]	; (8004dac <HAL_I2C_Init+0x278>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	bf94      	ite	ls
 8004bb0:	2301      	movls	r3, #1
 8004bb2:	2300      	movhi	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	e006      	b.n	8004bc6 <HAL_I2C_Init+0x92>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4a7d      	ldr	r2, [pc, #500]	; (8004db0 <HAL_I2C_Init+0x27c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bf94      	ite	ls
 8004bc0:	2301      	movls	r3, #1
 8004bc2:	2300      	movhi	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0e7      	b.n	8004d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a78      	ldr	r2, [pc, #480]	; (8004db4 <HAL_I2C_Init+0x280>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	0c9b      	lsrs	r3, r3, #18
 8004bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_I2C_Init+0x274>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d802      	bhi.n	8004c08 <HAL_I2C_Init+0xd4>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	3301      	adds	r3, #1
 8004c06:	e009      	b.n	8004c1c <HAL_I2C_Init+0xe8>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	4a69      	ldr	r2, [pc, #420]	; (8004db8 <HAL_I2C_Init+0x284>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	099b      	lsrs	r3, r3, #6
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	495c      	ldr	r1, [pc, #368]	; (8004da8 <HAL_I2C_Init+0x274>)
 8004c38:	428b      	cmp	r3, r1
 8004c3a:	d819      	bhi.n	8004c70 <HAL_I2C_Init+0x13c>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1e59      	subs	r1, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c50:	400b      	ands	r3, r1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <HAL_I2C_Init+0x138>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1e59      	subs	r1, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6a:	e051      	b.n	8004d10 <HAL_I2C_Init+0x1dc>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	e04f      	b.n	8004d10 <HAL_I2C_Init+0x1dc>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d111      	bne.n	8004c9c <HAL_I2C_Init+0x168>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1e58      	subs	r0, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6859      	ldr	r1, [r3, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	440b      	add	r3, r1
 8004c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e012      	b.n	8004cc2 <HAL_I2C_Init+0x18e>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1e58      	subs	r0, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	0099      	lsls	r1, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Init+0x196>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e022      	b.n	8004d10 <HAL_I2C_Init+0x1dc>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_I2C_Init+0x1bc>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1e58      	subs	r0, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6859      	ldr	r1, [r3, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	440b      	add	r3, r1
 8004ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cee:	e00f      	b.n	8004d10 <HAL_I2C_Init+0x1dc>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1e58      	subs	r0, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	0099      	lsls	r1, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d06:	3301      	adds	r3, #1
 8004d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	6809      	ldr	r1, [r1, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6911      	ldr	r1, [r2, #16]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68d2      	ldr	r2, [r2, #12]
 8004d4a:	4311      	orrs	r1, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	000186a0 	.word	0x000186a0
 8004dac:	001e847f 	.word	0x001e847f
 8004db0:	003d08ff 	.word	0x003d08ff
 8004db4:	431bde83 	.word	0x431bde83
 8004db8:	10624dd3 	.word	0x10624dd3

08004dbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dd6:	f7fe fd81 	bl	80038dc <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	f040 80d9 	bne.w	8004f9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2319      	movs	r3, #25
 8004df0:	2201      	movs	r2, #1
 8004df2:	496d      	ldr	r1, [pc, #436]	; (8004fa8 <HAL_I2C_Mem_Write+0x1ec>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fc7f 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
 8004e02:	e0cc      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_Mem_Write+0x56>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0c5      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d007      	beq.n	8004e38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2221      	movs	r2, #33	; 0x21
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a4d      	ldr	r2, [pc, #308]	; (8004fac <HAL_I2C_Mem_Write+0x1f0>)
 8004e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e7a:	88f8      	ldrh	r0, [r7, #6]
 8004e7c:	893a      	ldrh	r2, [r7, #8]
 8004e7e:	8979      	ldrh	r1, [r7, #10]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fab6 	bl	80053fc <I2C_RequestMemoryWrite>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d052      	beq.n	8004f3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e081      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fd00 	bl	80058a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d107      	bne.n	8004ec2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e06b      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	781a      	ldrb	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11b      	bne.n	8004f3c <HAL_I2C_Mem_Write+0x180>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1aa      	bne.n	8004e9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fcec 	bl	8005926 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d107      	bne.n	8004f6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e016      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	00100002 	.word	0x00100002
 8004fac:	ffff0000 	.word	0xffff0000

08004fb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08c      	sub	sp, #48	; 0x30
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	817b      	strh	r3, [r7, #10]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	813b      	strh	r3, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fca:	f7fe fc87 	bl	80038dc <HAL_GetTick>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	f040 8208 	bne.w	80053ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2319      	movs	r3, #25
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	497b      	ldr	r1, [pc, #492]	; (80051d4 <HAL_I2C_Mem_Read+0x224>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 fb85 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e1fb      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_I2C_Mem_Read+0x56>
 8005002:	2302      	movs	r3, #2
 8005004:	e1f4      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d007      	beq.n	800502c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2222      	movs	r2, #34	; 0x22
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2240      	movs	r2, #64	; 0x40
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800505c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a5b      	ldr	r2, [pc, #364]	; (80051d8 <HAL_I2C_Mem_Read+0x228>)
 800506c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800506e:	88f8      	ldrh	r0, [r7, #6]
 8005070:	893a      	ldrh	r2, [r7, #8]
 8005072:	8979      	ldrh	r1, [r7, #10]
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4603      	mov	r3, r0
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fa52 	bl	8005528 <I2C_RequestMemoryRead>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e1b0      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	2b00      	cmp	r3, #0
 8005094:	d113      	bne.n	80050be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005096:	2300      	movs	r3, #0
 8005098:	623b      	str	r3, [r7, #32]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e184      	b.n	80053c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d11b      	bne.n	80050fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e164      	b.n	80053c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	2b02      	cmp	r3, #2
 8005104:	d11b      	bne.n	800513e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005114:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	e144      	b.n	80053c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005154:	e138      	b.n	80053c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515a:	2b03      	cmp	r3, #3
 800515c:	f200 80f1 	bhi.w	8005342 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005164:	2b01      	cmp	r3, #1
 8005166:	d123      	bne.n	80051b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fc1b 	bl	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e139      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ae:	e10b      	b.n	80053c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d14e      	bne.n	8005256 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	2200      	movs	r2, #0
 80051c0:	4906      	ldr	r1, [pc, #24]	; (80051dc <HAL_I2C_Mem_Read+0x22c>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fa98 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e10e      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
 80051d2:	bf00      	nop
 80051d4:	00100002 	.word	0x00100002
 80051d8:	ffff0000 	.word	0xffff0000
 80051dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005254:	e0b8      	b.n	80053c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2200      	movs	r2, #0
 800525e:	4966      	ldr	r1, [pc, #408]	; (80053f8 <HAL_I2C_Mem_Read+0x448>)
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fa49 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0bf      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	2200      	movs	r2, #0
 80052ba:	494f      	ldr	r1, [pc, #316]	; (80053f8 <HAL_I2C_Mem_Read+0x448>)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fa1b 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e091      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005340:	e042      	b.n	80053c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fb2e 	bl	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e04c      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d118      	bne.n	80053c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f47f aec2 	bne.w	8005156 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e000      	b.n	80053f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3728      	adds	r7, #40	; 0x28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	00010004 	.word	0x00010004

080053fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	461a      	mov	r2, r3
 800540a:	4603      	mov	r3, r0
 800540c:	817b      	strh	r3, [r7, #10]
 800540e:	460b      	mov	r3, r1
 8005410:	813b      	strh	r3, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	2200      	movs	r2, #0
 800542e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f960 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544c:	d103      	bne.n	8005456 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e05f      	b.n	800551a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800545a:	897b      	ldrh	r3, [r7, #10]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005468:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	492d      	ldr	r1, [pc, #180]	; (8005524 <I2C_RequestMemoryWrite+0x128>)
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f998 	bl	80057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e04c      	b.n	800551a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fa02 	bl	80058a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d107      	bne.n	80054be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e02b      	b.n	800551a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054c8:	893b      	ldrh	r3, [r7, #8]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]
 80054d2:	e021      	b.n	8005518 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054d4:	893b      	ldrh	r3, [r7, #8]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b29b      	uxth	r3, r3
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	6a39      	ldr	r1, [r7, #32]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f9dc 	bl	80058a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d107      	bne.n	800550a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e005      	b.n	800551a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800550e:	893b      	ldrh	r3, [r7, #8]
 8005510:	b2da      	uxtb	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	00010002 	.word	0x00010002

08005528 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	460b      	mov	r3, r1
 800553c:	813b      	strh	r3, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005550:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2200      	movs	r2, #0
 800556a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f8c2 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00d      	beq.n	8005596 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005588:	d103      	bne.n	8005592 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e0aa      	b.n	80056ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005596:	897b      	ldrh	r3, [r7, #10]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	4952      	ldr	r1, [pc, #328]	; (80056f4 <I2C_RequestMemoryRead+0x1cc>)
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f8fa 	bl	80057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e097      	b.n	80056ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d4:	6a39      	ldr	r1, [r7, #32]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f964 	bl	80058a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d107      	bne.n	80055fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e076      	b.n	80056ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d105      	bne.n	8005610 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005604:	893b      	ldrh	r3, [r7, #8]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]
 800560e:	e021      	b.n	8005654 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	b29b      	uxth	r3, r3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	6a39      	ldr	r1, [r7, #32]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f93e 	bl	80058a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2b04      	cmp	r3, #4
 8005634:	d107      	bne.n	8005646 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e050      	b.n	80056ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800564a:	893b      	ldrh	r3, [r7, #8]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005656:	6a39      	ldr	r1, [r7, #32]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f923 	bl	80058a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	2b04      	cmp	r3, #4
 800566a:	d107      	bne.n	800567c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e035      	b.n	80056ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	2200      	movs	r2, #0
 8005698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f82b 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b6:	d103      	bne.n	80056c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e013      	b.n	80056ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056c4:	897b      	ldrh	r3, [r7, #10]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	6a3a      	ldr	r2, [r7, #32]
 80056d8:	4906      	ldr	r1, [pc, #24]	; (80056f4 <I2C_RequestMemoryRead+0x1cc>)
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f863 	bl	80057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	00010002 	.word	0x00010002

080056f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005708:	e025      	b.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d021      	beq.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fe f8e3 	bl	80038dc <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d116      	bne.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f043 0220 	orr.w	r2, r3, #32
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e023      	b.n	800579e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10d      	bne.n	800577c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	43da      	mvns	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4013      	ands	r3, r2
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf0c      	ite	eq
 8005772:	2301      	moveq	r3, #1
 8005774:	2300      	movne	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	e00c      	b.n	8005796 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	43da      	mvns	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	429a      	cmp	r2, r3
 800579a:	d0b6      	beq.n	800570a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057b4:	e051      	b.n	800585a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c4:	d123      	bne.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e046      	b.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d021      	beq.n	800585a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7fe f861 	bl	80038dc <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d302      	bcc.n	800582c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d116      	bne.n	800585a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f043 0220 	orr.w	r2, r3, #32
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e020      	b.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d10c      	bne.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	43da      	mvns	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf14      	ite	ne
 8005876:	2301      	movne	r3, #1
 8005878:	2300      	moveq	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e00b      	b.n	8005896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	43da      	mvns	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf14      	ite	ne
 8005890:	2301      	movne	r3, #1
 8005892:	2300      	moveq	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d18d      	bne.n	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b0:	e02d      	b.n	800590e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f8ce 	bl	8005a54 <I2C_IsAcknowledgeFailed>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e02d      	b.n	800591e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d021      	beq.n	800590e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ca:	f7fe f807 	bl	80038dc <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d302      	bcc.n	80058e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d116      	bne.n	800590e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f043 0220 	orr.w	r2, r3, #32
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e007      	b.n	800591e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d1ca      	bne.n	80058b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005932:	e02d      	b.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f88d 	bl	8005a54 <I2C_IsAcknowledgeFailed>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e02d      	b.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d021      	beq.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594c:	f7fd ffc6 	bl	80038dc <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	429a      	cmp	r2, r3
 800595a:	d302      	bcc.n	8005962 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d116      	bne.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e007      	b.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d1ca      	bne.n	8005934 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059b4:	e042      	b.n	8005a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d119      	bne.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0210 	mvn.w	r2, #16
 80059cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e029      	b.n	8005a4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fd ff70 	bl	80038dc <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d116      	bne.n	8005a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	f043 0220 	orr.w	r2, r3, #32
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e007      	b.n	8005a4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b40      	cmp	r3, #64	; 0x40
 8005a48:	d1b5      	bne.n	80059b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6a:	d11b      	bne.n	8005aa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	f043 0204 	orr.w	r2, r3, #4
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e267      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d075      	beq.n	8005bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ad2:	4b88      	ldr	r3, [pc, #544]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d00c      	beq.n	8005af8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ade:	4b85      	ldr	r3, [pc, #532]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d112      	bne.n	8005b10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aea:	4b82      	ldr	r3, [pc, #520]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af6:	d10b      	bne.n	8005b10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af8:	4b7e      	ldr	r3, [pc, #504]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d05b      	beq.n	8005bbc <HAL_RCC_OscConfig+0x108>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d157      	bne.n	8005bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e242      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b18:	d106      	bne.n	8005b28 <HAL_RCC_OscConfig+0x74>
 8005b1a:	4b76      	ldr	r3, [pc, #472]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a75      	ldr	r2, [pc, #468]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e01d      	b.n	8005b64 <HAL_RCC_OscConfig+0xb0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x98>
 8005b32:	4b70      	ldr	r3, [pc, #448]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6f      	ldr	r2, [pc, #444]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	4b6d      	ldr	r3, [pc, #436]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a6c      	ldr	r2, [pc, #432]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e00b      	b.n	8005b64 <HAL_RCC_OscConfig+0xb0>
 8005b4c:	4b69      	ldr	r3, [pc, #420]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a68      	ldr	r2, [pc, #416]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	4b66      	ldr	r3, [pc, #408]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a65      	ldr	r2, [pc, #404]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d013      	beq.n	8005b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6c:	f7fd feb6 	bl	80038dc <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b74:	f7fd feb2 	bl	80038dc <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b64      	cmp	r3, #100	; 0x64
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e207      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b86:	4b5b      	ldr	r3, [pc, #364]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f0      	beq.n	8005b74 <HAL_RCC_OscConfig+0xc0>
 8005b92:	e014      	b.n	8005bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b94:	f7fd fea2 	bl	80038dc <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b9c:	f7fd fe9e 	bl	80038dc <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b64      	cmp	r3, #100	; 0x64
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1f3      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bae:	4b51      	ldr	r3, [pc, #324]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0xe8>
 8005bba:	e000      	b.n	8005bbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d063      	beq.n	8005c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bca:	4b4a      	ldr	r3, [pc, #296]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd6:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d11c      	bne.n	8005c1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005be2:	4b44      	ldr	r3, [pc, #272]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d116      	bne.n	8005c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bee:	4b41      	ldr	r3, [pc, #260]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_RCC_OscConfig+0x152>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e1c7      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c06:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4937      	ldr	r1, [pc, #220]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c1a:	e03a      	b.n	8005c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c24:	4b34      	ldr	r3, [pc, #208]	; (8005cf8 <HAL_RCC_OscConfig+0x244>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2a:	f7fd fe57 	bl	80038dc <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c32:	f7fd fe53 	bl	80038dc <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e1a8      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c44:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4925      	ldr	r1, [pc, #148]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]
 8005c64:	e015      	b.n	8005c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c66:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <HAL_RCC_OscConfig+0x244>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fd fe36 	bl	80038dc <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c74:	f7fd fe32 	bl	80038dc <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e187      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c86:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d036      	beq.n	8005d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d016      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <HAL_RCC_OscConfig+0x248>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fd fe16 	bl	80038dc <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb4:	f7fd fe12 	bl	80038dc <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e167      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x200>
 8005cd2:	e01b      	b.n	8005d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cd4:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <HAL_RCC_OscConfig+0x248>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cda:	f7fd fdff 	bl	80038dc <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce0:	e00e      	b.n	8005d00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce2:	f7fd fdfb 	bl	80038dc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d907      	bls.n	8005d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e150      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	42470000 	.word	0x42470000
 8005cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d00:	4b88      	ldr	r3, [pc, #544]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1ea      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8097 	beq.w	8005e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d1e:	4b81      	ldr	r3, [pc, #516]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10f      	bne.n	8005d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	4b7d      	ldr	r3, [pc, #500]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	4a7c      	ldr	r2, [pc, #496]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6413      	str	r3, [r2, #64]	; 0x40
 8005d3a:	4b7a      	ldr	r3, [pc, #488]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d46:	2301      	movs	r3, #1
 8005d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d4a:	4b77      	ldr	r3, [pc, #476]	; (8005f28 <HAL_RCC_OscConfig+0x474>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d118      	bne.n	8005d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d56:	4b74      	ldr	r3, [pc, #464]	; (8005f28 <HAL_RCC_OscConfig+0x474>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a73      	ldr	r2, [pc, #460]	; (8005f28 <HAL_RCC_OscConfig+0x474>)
 8005d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d62:	f7fd fdbb 	bl	80038dc <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6a:	f7fd fdb7 	bl	80038dc <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e10c      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d7c:	4b6a      	ldr	r3, [pc, #424]	; (8005f28 <HAL_RCC_OscConfig+0x474>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d106      	bne.n	8005d9e <HAL_RCC_OscConfig+0x2ea>
 8005d90:	4b64      	ldr	r3, [pc, #400]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d94:	4a63      	ldr	r2, [pc, #396]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9c:	e01c      	b.n	8005dd8 <HAL_RCC_OscConfig+0x324>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d10c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x30c>
 8005da6:	4b5f      	ldr	r3, [pc, #380]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	4a5e      	ldr	r2, [pc, #376]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005dac:	f043 0304 	orr.w	r3, r3, #4
 8005db0:	6713      	str	r3, [r2, #112]	; 0x70
 8005db2:	4b5c      	ldr	r3, [pc, #368]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	4a5b      	ldr	r2, [pc, #364]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCC_OscConfig+0x324>
 8005dc0:	4b58      	ldr	r3, [pc, #352]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	4a57      	ldr	r2, [pc, #348]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	6713      	str	r3, [r2, #112]	; 0x70
 8005dcc:	4b55      	ldr	r3, [pc, #340]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd0:	4a54      	ldr	r2, [pc, #336]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005dd2:	f023 0304 	bic.w	r3, r3, #4
 8005dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d015      	beq.n	8005e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de0:	f7fd fd7c 	bl	80038dc <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de6:	e00a      	b.n	8005dfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de8:	f7fd fd78 	bl	80038dc <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e0cb      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfe:	4b49      	ldr	r3, [pc, #292]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0ee      	beq.n	8005de8 <HAL_RCC_OscConfig+0x334>
 8005e0a:	e014      	b.n	8005e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e0c:	f7fd fd66 	bl	80038dc <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e12:	e00a      	b.n	8005e2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e14:	f7fd fd62 	bl	80038dc <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e0b5      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e2a:	4b3e      	ldr	r3, [pc, #248]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1ee      	bne.n	8005e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3c:	4b39      	ldr	r3, [pc, #228]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	4a38      	ldr	r2, [pc, #224]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80a1 	beq.w	8005f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e52:	4b34      	ldr	r3, [pc, #208]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d05c      	beq.n	8005f18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d141      	bne.n	8005eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e66:	4b31      	ldr	r3, [pc, #196]	; (8005f2c <HAL_RCC_OscConfig+0x478>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fd fd36 	bl	80038dc <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e74:	f7fd fd32 	bl	80038dc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e087      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e86:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	019b      	lsls	r3, r3, #6
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	061b      	lsls	r3, r3, #24
 8005eb6:	491b      	ldr	r1, [pc, #108]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ebc:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <HAL_RCC_OscConfig+0x478>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fd fd0b 	bl	80038dc <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eca:	f7fd fd07 	bl	80038dc <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e05c      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_RCC_OscConfig+0x416>
 8005ee8:	e054      	b.n	8005f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <HAL_RCC_OscConfig+0x478>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7fd fcf4 	bl	80038dc <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd fcf0 	bl	80038dc <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e045      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x444>
 8005f16:	e03d      	b.n	8005f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e038      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40007000 	.word	0x40007000
 8005f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <HAL_RCC_OscConfig+0x4ec>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d028      	beq.n	8005f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d121      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d11a      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d111      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40023800 	.word	0x40023800

08005fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0cc      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b68      	ldr	r3, [pc, #416]	; (800615c <HAL_RCC_ClockConfig+0x1b8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d90c      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b65      	ldr	r3, [pc, #404]	; (800615c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fce:	4b63      	ldr	r3, [pc, #396]	; (800615c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d001      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0b8      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d020      	beq.n	800602e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ff8:	4b59      	ldr	r3, [pc, #356]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	4a58      	ldr	r2, [pc, #352]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006010:	4b53      	ldr	r3, [pc, #332]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a52      	ldr	r2, [pc, #328]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800601a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800601c:	4b50      	ldr	r3, [pc, #320]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	494d      	ldr	r1, [pc, #308]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	4313      	orrs	r3, r2
 800602c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d044      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d107      	bne.n	8006052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b47      	ldr	r3, [pc, #284]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d119      	bne.n	8006082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e07f      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d003      	beq.n	8006062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800605e:	2b03      	cmp	r3, #3
 8006060:	d107      	bne.n	8006072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006062:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e06f      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006072:	4b3b      	ldr	r3, [pc, #236]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e067      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006082:	4b37      	ldr	r3, [pc, #220]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f023 0203 	bic.w	r2, r3, #3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4934      	ldr	r1, [pc, #208]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	4313      	orrs	r3, r2
 8006092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006094:	f7fd fc22 	bl	80038dc <HAL_GetTick>
 8006098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800609c:	f7fd fc1e 	bl	80038dc <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e04f      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	4b2b      	ldr	r3, [pc, #172]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 020c 	and.w	r2, r3, #12
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d1eb      	bne.n	800609c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060c4:	4b25      	ldr	r3, [pc, #148]	; (800615c <HAL_RCC_ClockConfig+0x1b8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d20c      	bcs.n	80060ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d2:	4b22      	ldr	r3, [pc, #136]	; (800615c <HAL_RCC_ClockConfig+0x1b8>)
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b20      	ldr	r3, [pc, #128]	; (800615c <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d001      	beq.n	80060ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e032      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060f8:	4b19      	ldr	r3, [pc, #100]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4916      	ldr	r1, [pc, #88]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	4313      	orrs	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006116:	4b12      	ldr	r3, [pc, #72]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	490e      	ldr	r1, [pc, #56]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	4313      	orrs	r3, r2
 8006128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800612a:	f000 f821 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 800612e:	4602      	mov	r2, r0
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	490a      	ldr	r1, [pc, #40]	; (8006164 <HAL_RCC_ClockConfig+0x1c0>)
 800613c:	5ccb      	ldrb	r3, [r1, r3]
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	4a09      	ldr	r2, [pc, #36]	; (8006168 <HAL_RCC_ClockConfig+0x1c4>)
 8006144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_RCC_ClockConfig+0x1c8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd fb82 	bl	8003854 <HAL_InitTick>

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40023c00 	.word	0x40023c00
 8006160:	40023800 	.word	0x40023800
 8006164:	0800f7c8 	.word	0x0800f7c8
 8006168:	20000050 	.word	0x20000050
 800616c:	2000010c 	.word	0x2000010c

08006170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006174:	b090      	sub	sp, #64	; 0x40
 8006176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
 800617c:	2300      	movs	r3, #0
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006180:	2300      	movs	r3, #0
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006188:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	2b08      	cmp	r3, #8
 8006192:	d00d      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006194:	2b08      	cmp	r3, #8
 8006196:	f200 80a1 	bhi.w	80062dc <HAL_RCC_GetSysClockFreq+0x16c>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x34>
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d003      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x3a>
 80061a2:	e09b      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061a4:	4b53      	ldr	r3, [pc, #332]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80061a8:	e09b      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061aa:	4b53      	ldr	r3, [pc, #332]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80061ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061ae:	e098      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061b0:	4b4f      	ldr	r3, [pc, #316]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ba:	4b4d      	ldr	r3, [pc, #308]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d028      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c6:	4b4a      	ldr	r3, [pc, #296]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	2200      	movs	r2, #0
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	627a      	str	r2, [r7, #36]	; 0x24
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061d8:	2100      	movs	r1, #0
 80061da:	4b47      	ldr	r3, [pc, #284]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80061dc:	fb03 f201 	mul.w	r2, r3, r1
 80061e0:	2300      	movs	r3, #0
 80061e2:	fb00 f303 	mul.w	r3, r0, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	4a43      	ldr	r2, [pc, #268]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80061ea:	fba0 1202 	umull	r1, r2, r0, r2
 80061ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f0:	460a      	mov	r2, r1
 80061f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80061f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f6:	4413      	add	r3, r2
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	2200      	movs	r2, #0
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	61fa      	str	r2, [r7, #28]
 8006202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800620a:	f7fa f891 	bl	8000330 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4613      	mov	r3, r2
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006216:	e053      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006218:	4b35      	ldr	r3, [pc, #212]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	099b      	lsrs	r3, r3, #6
 800621e:	2200      	movs	r2, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	617a      	str	r2, [r7, #20]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800622a:	f04f 0b00 	mov.w	fp, #0
 800622e:	4652      	mov	r2, sl
 8006230:	465b      	mov	r3, fp
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f04f 0100 	mov.w	r1, #0
 800623a:	0159      	lsls	r1, r3, #5
 800623c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006240:	0150      	lsls	r0, r2, #5
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	ebb2 080a 	subs.w	r8, r2, sl
 800624a:	eb63 090b 	sbc.w	r9, r3, fp
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800625a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800625e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006262:	ebb2 0408 	subs.w	r4, r2, r8
 8006266:	eb63 0509 	sbc.w	r5, r3, r9
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	00eb      	lsls	r3, r5, #3
 8006274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006278:	00e2      	lsls	r2, r4, #3
 800627a:	4614      	mov	r4, r2
 800627c:	461d      	mov	r5, r3
 800627e:	eb14 030a 	adds.w	r3, r4, sl
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	eb45 030b 	adc.w	r3, r5, fp
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006296:	4629      	mov	r1, r5
 8006298:	028b      	lsls	r3, r1, #10
 800629a:	4621      	mov	r1, r4
 800629c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062a0:	4621      	mov	r1, r4
 80062a2:	028a      	lsls	r2, r1, #10
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	2200      	movs	r2, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b4:	f7fa f83c 	bl	8000330 <__aeabi_uldivmod>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4613      	mov	r3, r2
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	3301      	adds	r3, #1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80062d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062da:	e002      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3740      	adds	r7, #64	; 0x40
 80062e8:	46bd      	mov	sp, r7
 80062ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ee:	bf00      	nop
 80062f0:	40023800 	.word	0x40023800
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	017d7840 	.word	0x017d7840

080062fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <HAL_RCC_GetHCLKFreq+0x14>)
 8006302:	681b      	ldr	r3, [r3, #0]
}
 8006304:	4618      	mov	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000050 	.word	0x20000050

08006314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006318:	f7ff fff0 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 800631c:	4602      	mov	r2, r0
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	0a9b      	lsrs	r3, r3, #10
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	4903      	ldr	r1, [pc, #12]	; (8006338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800632a:	5ccb      	ldrb	r3, [r1, r3]
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40023800 	.word	0x40023800
 8006338:	0800f7d8 	.word	0x0800f7d8

0800633c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006340:	f7ff ffdc 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 8006344:	4602      	mov	r2, r0
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	0b5b      	lsrs	r3, r3, #13
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	4903      	ldr	r1, [pc, #12]	; (8006360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006352:	5ccb      	ldrb	r3, [r1, r3]
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40023800 	.word	0x40023800
 8006360:	0800f7d8 	.word	0x0800f7d8

08006364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e07b      	b.n	800646e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d108      	bne.n	8006390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006386:	d009      	beq.n	800639c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	61da      	str	r2, [r3, #28]
 800638e:	e005      	b.n	800639c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fb fff8 	bl	80023ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	ea42 0103 	orr.w	r1, r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	f003 0104 	and.w	r1, r3, #4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	f003 0210 	and.w	r2, r3, #16
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800645c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b088      	sub	sp, #32
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_SPI_Transmit+0x22>
 8006494:	2302      	movs	r3, #2
 8006496:	e126      	b.n	80066e6 <HAL_SPI_Transmit+0x270>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a0:	f7fd fa1c 	bl	80038dc <HAL_GetTick>
 80064a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d002      	beq.n	80064bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
 80064b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064ba:	e10b      	b.n	80066d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_SPI_Transmit+0x52>
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064cc:	e102      	b.n	80066d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2203      	movs	r2, #3
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	88fa      	ldrh	r2, [r7, #6]
 80064e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006514:	d10f      	bne.n	8006536 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006534:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d007      	beq.n	8006554 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655c:	d14b      	bne.n	80065f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_SPI_Transmit+0xf6>
 8006566:	8afb      	ldrh	r3, [r7, #22]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d13e      	bne.n	80065ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	881a      	ldrh	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	1c9a      	adds	r2, r3, #2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006590:	e02b      	b.n	80065ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b02      	cmp	r3, #2
 800659e:	d112      	bne.n	80065c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	881a      	ldrh	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80065c4:	e011      	b.n	80065ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065c6:	f7fd f989 	bl	80038dc <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d803      	bhi.n	80065de <HAL_SPI_Transmit+0x168>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d102      	bne.n	80065e4 <HAL_SPI_Transmit+0x16e>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065e8:	e074      	b.n	80066d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ce      	bne.n	8006592 <HAL_SPI_Transmit+0x11c>
 80065f4:	e04c      	b.n	8006690 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_SPI_Transmit+0x18e>
 80065fe:	8afb      	ldrh	r3, [r7, #22]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d140      	bne.n	8006686 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	330c      	adds	r3, #12
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800662a:	e02c      	b.n	8006686 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b02      	cmp	r3, #2
 8006638:	d113      	bne.n	8006662 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006660:	e011      	b.n	8006686 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006662:	f7fd f93b 	bl	80038dc <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d803      	bhi.n	800667a <HAL_SPI_Transmit+0x204>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d102      	bne.n	8006680 <HAL_SPI_Transmit+0x20a>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006684:	e026      	b.n	80066d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1cd      	bne.n	800662c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f9d1 	bl	8006a3c <SPI_EndRxTxTransaction>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e000      	b.n	80066d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80066d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	099b      	lsrs	r3, r3, #6
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10f      	bne.n	8006734 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	099b      	lsrs	r3, r3, #6
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
    return;
 8006732:	e0d7      	b.n	80068e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <HAL_SPI_IRQHandler+0x66>
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	09db      	lsrs	r3, r3, #7
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
    return;
 8006754:	e0c6      	b.n	80068e4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10c      	bne.n	800677c <HAL_SPI_IRQHandler+0x8c>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	099b      	lsrs	r3, r3, #6
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80b4 	beq.w	80068e4 <HAL_SPI_IRQHandler+0x1f4>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80ad 	beq.w	80068e4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	099b      	lsrs	r3, r3, #6
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d023      	beq.n	80067de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d011      	beq.n	80067c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	f043 0204 	orr.w	r2, r3, #4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	e00b      	b.n	80067de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	693b      	ldr	r3, [r7, #16]
        return;
 80067dc:	e082      	b.n	80068e4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d014      	beq.n	8006814 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f043 0201 	orr.w	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00c      	beq.n	800683a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	f043 0208 	orr.w	r2, r3, #8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800682c:	2300      	movs	r3, #0
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	2b00      	cmp	r3, #0
 8006840:	d04f      	beq.n	80068e2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006850:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <HAL_SPI_IRQHandler+0x17e>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d034      	beq.n	80068d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0203 	bic.w	r2, r2, #3
 800687c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d011      	beq.n	80068aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688a:	4a18      	ldr	r2, [pc, #96]	; (80068ec <HAL_SPI_IRQHandler+0x1fc>)
 800688c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006892:	4618      	mov	r0, r3
 8006894:	f7fd fd18 	bl	80042c8 <HAL_DMA_Abort_IT>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d016      	beq.n	80068e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b6:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <HAL_SPI_IRQHandler+0x1fc>)
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fd fd02 	bl	80042c8 <HAL_DMA_Abort_IT>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80068d6:	e003      	b.n	80068e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f809 	bl	80068f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80068de:	e000      	b.n	80068e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80068e0:	bf00      	nop
    return;
 80068e2:	bf00      	nop
  }
}
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08006905 	.word	0x08006905

080068f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff ffe6 	bl	80068f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800693c:	f7fc ffce 	bl	80038dc <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	4413      	add	r3, r2
 800694a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800694c:	f7fc ffc6 	bl	80038dc <HAL_GetTick>
 8006950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006952:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	015b      	lsls	r3, r3, #5
 8006958:	0d1b      	lsrs	r3, r3, #20
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006962:	e054      	b.n	8006a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d050      	beq.n	8006a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800696c:	f7fc ffb6 	bl	80038dc <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	429a      	cmp	r2, r3
 800697a:	d902      	bls.n	8006982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d13d      	bne.n	80069fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800699a:	d111      	bne.n	80069c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a4:	d004      	beq.n	80069b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ae:	d107      	bne.n	80069c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c8:	d10f      	bne.n	80069ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e017      	b.n	8006a2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d19b      	bne.n	8006964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000050 	.word	0x20000050

08006a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a48:	4b1b      	ldr	r3, [pc, #108]	; (8006ab8 <SPI_EndRxTxTransaction+0x7c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <SPI_EndRxTxTransaction+0x80>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	0d5b      	lsrs	r3, r3, #21
 8006a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a66:	d112      	bne.n	8006a8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2180      	movs	r1, #128	; 0x80
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff ff5a 	bl	800692c <SPI_WaitFlagStateUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a82:	f043 0220 	orr.w	r2, r3, #32
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e00f      	b.n	8006aae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b80      	cmp	r3, #128	; 0x80
 8006aa6:	d0f2      	beq.n	8006a8e <SPI_EndRxTxTransaction+0x52>
 8006aa8:	e000      	b.n	8006aac <SPI_EndRxTxTransaction+0x70>
        break;
 8006aaa:	bf00      	nop
  }

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000050 	.word	0x20000050
 8006abc:	165e9f81 	.word	0x165e9f81

08006ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e041      	b.n	8006b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fb fcb0 	bl	800244c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f000 fa2e 	bl	8006f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d122      	bne.n	8006bba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d11b      	bne.n	8006bba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f06f 0202 	mvn.w	r2, #2
 8006b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9bf 	bl	8006f24 <HAL_TIM_IC_CaptureCallback>
 8006ba6:	e005      	b.n	8006bb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f9b1 	bl	8006f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f9c2 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d122      	bne.n	8006c0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d11b      	bne.n	8006c0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f06f 0204 	mvn.w	r2, #4
 8006bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f995 	bl	8006f24 <HAL_TIM_IC_CaptureCallback>
 8006bfa:	e005      	b.n	8006c08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f987 	bl	8006f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f998 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d122      	bne.n	8006c62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d11b      	bne.n	8006c62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f06f 0208 	mvn.w	r2, #8
 8006c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2204      	movs	r2, #4
 8006c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f96b 	bl	8006f24 <HAL_TIM_IC_CaptureCallback>
 8006c4e:	e005      	b.n	8006c5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f95d 	bl	8006f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f96e 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d122      	bne.n	8006cb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d11b      	bne.n	8006cb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f06f 0210 	mvn.w	r2, #16
 8006c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f941 	bl	8006f24 <HAL_TIM_IC_CaptureCallback>
 8006ca2:	e005      	b.n	8006cb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f933 	bl	8006f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f944 	bl	8006f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d10e      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d107      	bne.n	8006ce2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f06f 0201 	mvn.w	r2, #1
 8006cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f90d 	bl	8006efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d10e      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b80      	cmp	r3, #128	; 0x80
 8006cfc:	d107      	bne.n	8006d0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa4d 	bl	80071a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d10e      	bne.n	8006d3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d107      	bne.n	8006d3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f909 	bl	8006f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d10e      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d107      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f06f 0220 	mvn.w	r2, #32
 8006d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fa17 	bl	8007194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_ConfigClockSource+0x1c>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e0b4      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x186>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2202      	movs	r2, #2
 8006d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006da8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006db0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc2:	d03e      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0xd4>
 8006dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc8:	f200 8087 	bhi.w	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd0:	f000 8086 	beq.w	8006ee0 <HAL_TIM_ConfigClockSource+0x172>
 8006dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd8:	d87f      	bhi.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006dda:	2b70      	cmp	r3, #112	; 0x70
 8006ddc:	d01a      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0xa6>
 8006dde:	2b70      	cmp	r3, #112	; 0x70
 8006de0:	d87b      	bhi.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006de2:	2b60      	cmp	r3, #96	; 0x60
 8006de4:	d050      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x11a>
 8006de6:	2b60      	cmp	r3, #96	; 0x60
 8006de8:	d877      	bhi.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006dea:	2b50      	cmp	r3, #80	; 0x50
 8006dec:	d03c      	beq.n	8006e68 <HAL_TIM_ConfigClockSource+0xfa>
 8006dee:	2b50      	cmp	r3, #80	; 0x50
 8006df0:	d873      	bhi.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d058      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x13a>
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d86f      	bhi.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006dfa:	2b30      	cmp	r3, #48	; 0x30
 8006dfc:	d064      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8006dfe:	2b30      	cmp	r3, #48	; 0x30
 8006e00:	d86b      	bhi.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d060      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d867      	bhi.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d05c      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8006e0e:	2b10      	cmp	r3, #16
 8006e10:	d05a      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8006e12:	e062      	b.n	8006eda <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6899      	ldr	r1, [r3, #8]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f000 f996 	bl	8007154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	609a      	str	r2, [r3, #8]
      break;
 8006e40:	e04f      	b.n	8006ee2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6899      	ldr	r1, [r3, #8]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f000 f97f 	bl	8007154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e64:	609a      	str	r2, [r3, #8]
      break;
 8006e66:	e03c      	b.n	8006ee2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6859      	ldr	r1, [r3, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f000 f8f3 	bl	8007060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2150      	movs	r1, #80	; 0x50
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 f94c 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 8006e86:	e02c      	b.n	8006ee2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6859      	ldr	r1, [r3, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	461a      	mov	r2, r3
 8006e96:	f000 f912 	bl	80070be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2160      	movs	r1, #96	; 0x60
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f93c 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 8006ea6:	e01c      	b.n	8006ee2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6859      	ldr	r1, [r3, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f000 f8d3 	bl	8007060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2140      	movs	r1, #64	; 0x40
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 f92c 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 8006ec6:	e00c      	b.n	8006ee2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f000 f923 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 8006ed8:	e003      	b.n	8006ee2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ede:	e000      	b.n	8006ee2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ee0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a34      	ldr	r2, [pc, #208]	; (8007044 <TIM_Base_SetConfig+0xe4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00f      	beq.n	8006f98 <TIM_Base_SetConfig+0x38>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7e:	d00b      	beq.n	8006f98 <TIM_Base_SetConfig+0x38>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a31      	ldr	r2, [pc, #196]	; (8007048 <TIM_Base_SetConfig+0xe8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d007      	beq.n	8006f98 <TIM_Base_SetConfig+0x38>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a30      	ldr	r2, [pc, #192]	; (800704c <TIM_Base_SetConfig+0xec>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_Base_SetConfig+0x38>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <TIM_Base_SetConfig+0xf0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d108      	bne.n	8006faa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a25      	ldr	r2, [pc, #148]	; (8007044 <TIM_Base_SetConfig+0xe4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01b      	beq.n	8006fea <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb8:	d017      	beq.n	8006fea <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a22      	ldr	r2, [pc, #136]	; (8007048 <TIM_Base_SetConfig+0xe8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a21      	ldr	r2, [pc, #132]	; (800704c <TIM_Base_SetConfig+0xec>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00f      	beq.n	8006fea <TIM_Base_SetConfig+0x8a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a20      	ldr	r2, [pc, #128]	; (8007050 <TIM_Base_SetConfig+0xf0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00b      	beq.n	8006fea <TIM_Base_SetConfig+0x8a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1f      	ldr	r2, [pc, #124]	; (8007054 <TIM_Base_SetConfig+0xf4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d007      	beq.n	8006fea <TIM_Base_SetConfig+0x8a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a1e      	ldr	r2, [pc, #120]	; (8007058 <TIM_Base_SetConfig+0xf8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d003      	beq.n	8006fea <TIM_Base_SetConfig+0x8a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1d      	ldr	r2, [pc, #116]	; (800705c <TIM_Base_SetConfig+0xfc>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d108      	bne.n	8006ffc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a08      	ldr	r2, [pc, #32]	; (8007044 <TIM_Base_SetConfig+0xe4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d103      	bne.n	8007030 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	615a      	str	r2, [r3, #20]
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800

08007060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 030a 	bic.w	r3, r3, #10
 800709c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070be:	b480      	push	{r7}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f023 0210 	bic.w	r2, r3, #16
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	031b      	lsls	r3, r3, #12
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	f043 0307 	orr.w	r3, r3, #7
 8007140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	609a      	str	r2, [r3, #8]
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800716e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	021a      	lsls	r2, r3, #8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	431a      	orrs	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4313      	orrs	r3, r2
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e03f      	b.n	800724e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fb f970 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fffd 	bl	8008200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	4613      	mov	r3, r2
 8007262:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b20      	cmp	r3, #32
 800726e:	d130      	bne.n	80072d2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_UART_Transmit_IT+0x26>
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e029      	b.n	80072d4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_UART_Transmit_IT+0x38>
 800728a:	2302      	movs	r3, #2
 800728c:	e022      	b.n	80072d4 <HAL_UART_Transmit_IT+0x7e>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	88fa      	ldrh	r2, [r7, #6]
 80072a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	88fa      	ldrh	r2, [r7, #6]
 80072a6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2221      	movs	r2, #33	; 0x21
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	e000      	b.n	80072d4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80072d2:	2302      	movs	r3, #2
  }
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d11d      	bne.n	8007336 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <HAL_UART_Receive_IT+0x26>
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e016      	b.n	8007338 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_UART_Receive_IT+0x38>
 8007314:	2302      	movs	r3, #2
 8007316:	e00f      	b.n	8007338 <HAL_UART_Receive_IT+0x58>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fcc9 	bl	8007cc4 <UART_Start_Receive_IT>
 8007332:	4603      	mov	r3, r0
 8007334:	e000      	b.n	8007338 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007336:	2302      	movs	r3, #2
  }
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b20      	cmp	r3, #32
 8007358:	d11d      	bne.n	8007396 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_UART_Receive_DMA+0x26>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e016      	b.n	8007398 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <HAL_UART_Receive_DMA+0x38>
 8007374:	2302      	movs	r3, #2
 8007376:	e00f      	b.n	8007398 <HAL_UART_Receive_DMA+0x58>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	461a      	mov	r2, r3
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fcd7 	bl	8007d40 <UART_Start_Receive_DMA>
 8007392:	4603      	mov	r3, r0
 8007394:	e000      	b.n	8007398 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007396:	2302      	movs	r3, #2
  }
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b0a0      	sub	sp, #128	; 0x80
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80073b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073ba:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80073be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073c8:	66ba      	str	r2, [r7, #104]	; 0x68
 80073ca:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80073ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80073d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e5      	bne.n	80073a8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3314      	adds	r3, #20
 80073e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80073ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3314      	adds	r3, #20
 80073fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073fc:	657a      	str	r2, [r7, #84]	; 0x54
 80073fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800740a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e5      	bne.n	80073dc <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	2b01      	cmp	r3, #1
 8007416:	d119      	bne.n	800744c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	f023 0310 	bic.w	r3, r3, #16
 800742e:	677b      	str	r3, [r7, #116]	; 0x74
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007438:	643a      	str	r2, [r7, #64]	; 0x40
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800743e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e5      	bne.n	8007418 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d136      	bne.n	80074c8 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3314      	adds	r3, #20
 8007460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	61fb      	str	r3, [r7, #28]
   return(result);
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007470:	673b      	str	r3, [r7, #112]	; 0x70
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3314      	adds	r3, #20
 8007478:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800747a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	2b00      	cmp	r3, #0
 8007494:	d018      	beq.n	80074c8 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749a:	2200      	movs	r2, #0
 800749c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fc fea0 	bl	80041e8 <HAL_DMA_Abort>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fd f8b4 	bl	8004620 <HAL_DMA_GetError>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d104      	bne.n	80074c8 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2210      	movs	r2, #16
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e052      	b.n	800756e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d136      	bne.n	8007544 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3314      	adds	r3, #20
 80074dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3314      	adds	r3, #20
 80074f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074f6:	61ba      	str	r2, [r7, #24]
 80074f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6979      	ldr	r1, [r7, #20]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	613b      	str	r3, [r7, #16]
   return(result);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e5      	bne.n	80074d6 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d018      	beq.n	8007544 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	2200      	movs	r2, #0
 8007518:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	4618      	mov	r0, r3
 8007520:	f7fc fe62 	bl	80041e8 <HAL_DMA_Abort>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00c      	beq.n	8007544 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd f876 	bl	8004620 <HAL_DMA_GetError>
 8007534:	4603      	mov	r3, r0
 8007536:	2b20      	cmp	r3, #32
 8007538:	d104      	bne.n	8007544 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2210      	movs	r2, #16
 800753e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e014      	b.n	800756e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3780      	adds	r7, #128	; 0x80
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b0ba      	sub	sp, #232	; 0xe8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800759e:	2300      	movs	r3, #0
 80075a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80075b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_UART_IRQHandler+0x66>
 80075ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fd57 	bl	800808a <UART_Receive_IT>
      return;
 80075dc:	e256      	b.n	8007a8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80de 	beq.w	80077a4 <HAL_UART_IRQHandler+0x22c>
 80075e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80d1 	beq.w	80077a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <HAL_UART_IRQHandler+0xae>
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f043 0201 	orr.w	r2, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <HAL_UART_IRQHandler+0xd2>
 8007632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f043 0202 	orr.w	r2, r3, #2
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <HAL_UART_IRQHandler+0xf6>
 8007656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	f043 0204 	orr.w	r2, r3, #4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0308 	and.w	r3, r3, #8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d011      	beq.n	800769e <HAL_UART_IRQHandler+0x126>
 800767a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d105      	bne.n	8007692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f043 0208 	orr.w	r2, r3, #8
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 81ed 	beq.w	8007a82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <HAL_UART_IRQHandler+0x14e>
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fce2 	bl	800808a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	bf0c      	ite	eq
 80076d4:	2301      	moveq	r3, #1
 80076d6:	2300      	movne	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d103      	bne.n	80076f2 <HAL_UART_IRQHandler+0x17a>
 80076ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d04f      	beq.n	8007792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fbea 	bl	8007ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d141      	bne.n	800778a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3314      	adds	r3, #20
 800770c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800771c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3314      	adds	r3, #20
 800772e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007732:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800773e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800774a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1d9      	bne.n	8007706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	2b00      	cmp	r3, #0
 8007758:	d013      	beq.n	8007782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	4a7d      	ldr	r2, [pc, #500]	; (8007954 <HAL_UART_IRQHandler+0x3dc>)
 8007760:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007766:	4618      	mov	r0, r3
 8007768:	f7fc fdae 	bl	80042c8 <HAL_DMA_Abort_IT>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d016      	beq.n	80077a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	e00e      	b.n	80077a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fb f928 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	e00a      	b.n	80077a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fb f924 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007790:	e006      	b.n	80077a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fb f920 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800779e:	e170      	b.n	8007a82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	bf00      	nop
    return;
 80077a2:	e16e      	b.n	8007a82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 814a 	bne.w	8007a42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8143 	beq.w	8007a42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 813c 	beq.w	8007a42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	60bb      	str	r3, [r7, #8]
 80077de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	f040 80b4 	bne.w	8007958 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8140 	beq.w	8007a86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800780a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800780e:	429a      	cmp	r2, r3
 8007810:	f080 8139 	bcs.w	8007a86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800781a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007826:	f000 8088 	beq.w	800793a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	330c      	adds	r3, #12
 8007830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	330c      	adds	r3, #12
 8007852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007856:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800785a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007862:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800786e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1d9      	bne.n	800782a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3314      	adds	r3, #20
 8007896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800789a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800789e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e1      	bne.n	8007876 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3314      	adds	r3, #20
 80078b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3314      	adds	r3, #20
 80078d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e3      	bne.n	80078b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	330c      	adds	r3, #12
 80078fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800790a:	f023 0310 	bic.w	r3, r3, #16
 800790e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	330c      	adds	r3, #12
 8007918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800791c:	65ba      	str	r2, [r7, #88]	; 0x58
 800791e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007922:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800792a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e3      	bne.n	80078f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	4618      	mov	r0, r3
 8007936:	f7fc fc57 	bl	80041e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007942:	b29b      	uxth	r3, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	b29b      	uxth	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f8b6 	bl	8007abc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007950:	e099      	b.n	8007a86 <HAL_UART_IRQHandler+0x50e>
 8007952:	bf00      	nop
 8007954:	08007f93 	.word	0x08007f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007960:	b29b      	uxth	r3, r3
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 808b 	beq.w	8007a8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8086 	beq.w	8007a8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	330c      	adds	r3, #12
 8007984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	330c      	adds	r3, #12
 800799e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079a2:	647a      	str	r2, [r7, #68]	; 0x44
 80079a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e3      	bne.n	800797e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3314      	adds	r3, #20
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	623b      	str	r3, [r7, #32]
   return(result);
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	f023 0301 	bic.w	r3, r3, #1
 80079cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3314      	adds	r3, #20
 80079d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079da:	633a      	str	r2, [r7, #48]	; 0x30
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e3      	bne.n	80079b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	330c      	adds	r3, #12
 8007a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	e853 3f00 	ldrex	r3, [r3]
 8007a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0310 	bic.w	r3, r3, #16
 8007a12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	330c      	adds	r3, #12
 8007a1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a20:	61fa      	str	r2, [r7, #28]
 8007a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	69b9      	ldr	r1, [r7, #24]
 8007a26:	69fa      	ldr	r2, [r7, #28]
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e3      	bne.n	80079fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f83e 	bl	8007abc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a40:	e023      	b.n	8007a8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_UART_IRQHandler+0x4ea>
 8007a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 faad 	bl	8007fba <UART_Transmit_IT>
    return;
 8007a60:	e014      	b.n	8007a8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00e      	beq.n	8007a8c <HAL_UART_IRQHandler+0x514>
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d008      	beq.n	8007a8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 faed 	bl	800805a <UART_EndTransmit_IT>
    return;
 8007a80:	e004      	b.n	8007a8c <HAL_UART_IRQHandler+0x514>
    return;
 8007a82:	bf00      	nop
 8007a84:	e002      	b.n	8007a8c <HAL_UART_IRQHandler+0x514>
      return;
 8007a86:	bf00      	nop
 8007a88:	e000      	b.n	8007a8c <HAL_UART_IRQHandler+0x514>
      return;
 8007a8a:	bf00      	nop
  }
}
 8007a8c:	37e8      	adds	r7, #232	; 0xe8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop

08007a94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b09c      	sub	sp, #112	; 0x70
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d172      	bne.n	8007bd6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af2:	2200      	movs	r2, #0
 8007af4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	330c      	adds	r3, #12
 8007afc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	330c      	adds	r3, #12
 8007b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b16:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e5      	bne.n	8007af6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3314      	adds	r3, #20
 8007b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	f023 0301 	bic.w	r3, r3, #1
 8007b40:	667b      	str	r3, [r7, #100]	; 0x64
 8007b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3314      	adds	r3, #20
 8007b48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e5      	bne.n	8007b2a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3314      	adds	r3, #20
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b74:	663b      	str	r3, [r7, #96]	; 0x60
 8007b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d119      	bne.n	8007bd6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f023 0310 	bic.w	r3, r3, #16
 8007bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bc2:	61fa      	str	r2, [r7, #28]
 8007bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	69b9      	ldr	r1, [r7, #24]
 8007bc8:	69fa      	ldr	r2, [r7, #28]
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	617b      	str	r3, [r7, #20]
   return(result);
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d106      	bne.n	8007bec <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007be2:	4619      	mov	r1, r3
 8007be4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007be6:	f7ff ff69 	bl	8007abc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bea:	e002      	b.n	8007bf2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007bec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bee:	f7ff ff51 	bl	8007a94 <HAL_UART_RxCpltCallback>
}
 8007bf2:	bf00      	nop
 8007bf4:	3770      	adds	r7, #112	; 0x70
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d108      	bne.n	8007c22 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff ff4e 	bl	8007abc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c20:	e002      	b.n	8007c28 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff ff40 	bl	8007aa8 <HAL_UART_RxHalfCpltCallback>
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4c:	2b80      	cmp	r3, #128	; 0x80
 8007c4e:	bf0c      	ite	eq
 8007c50:	2301      	moveq	r3, #1
 8007c52:	2300      	movne	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b21      	cmp	r3, #33	; 0x21
 8007c62:	d108      	bne.n	8007c76 <UART_DMAError+0x46>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c70:	68b8      	ldr	r0, [r7, #8]
 8007c72:	f000 f903 	bl	8007e7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b40      	cmp	r3, #64	; 0x40
 8007c82:	bf0c      	ite	eq
 8007c84:	2301      	moveq	r3, #1
 8007c86:	2300      	movne	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b22      	cmp	r3, #34	; 0x22
 8007c96:	d108      	bne.n	8007caa <UART_DMAError+0x7a>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007ca4:	68b8      	ldr	r0, [r7, #8]
 8007ca6:	f000 f911 	bl	8007ecc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f043 0210 	orr.w	r2, r3, #16
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cb6:	68b8      	ldr	r0, [r7, #8]
 8007cb8:	f7fa fe8e 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2222      	movs	r2, #34	; 0x22
 8007cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695a      	ldr	r2, [r3, #20]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0201 	orr.w	r2, r2, #1
 8007d20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0220 	orr.w	r2, r2, #32
 8007d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b098      	sub	sp, #96	; 0x60
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	88fa      	ldrh	r2, [r7, #6]
 8007d58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2222      	movs	r2, #34	; 0x22
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	4a40      	ldr	r2, [pc, #256]	; (8007e70 <UART_Start_Receive_DMA+0x130>)
 8007d6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	4a3f      	ldr	r2, [pc, #252]	; (8007e74 <UART_Start_Receive_DMA+0x134>)
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	4a3e      	ldr	r2, [pc, #248]	; (8007e78 <UART_Start_Receive_DMA+0x138>)
 8007d7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	2200      	movs	r2, #0
 8007d86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007d88:	f107 0308 	add.w	r3, r7, #8
 8007d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	f7fc f9ca 	bl	8004138 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007da4:	2300      	movs	r3, #0
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	613b      	str	r3, [r7, #16]
 8007db8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d019      	beq.n	8007dfe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	330c      	adds	r3, #12
 8007de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007dec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e5      	bne.n	8007dca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3314      	adds	r3, #20
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	f043 0301 	orr.w	r3, r3, #1
 8007e14:	657b      	str	r3, [r7, #84]	; 0x54
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e1e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3314      	adds	r3, #20
 8007e38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	617b      	str	r3, [r7, #20]
   return(result);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e48:	653b      	str	r3, [r7, #80]	; 0x50
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e52:	627a      	str	r2, [r7, #36]	; 0x24
 8007e54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6a39      	ldr	r1, [r7, #32]
 8007e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3760      	adds	r7, #96	; 0x60
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	08007ad5 	.word	0x08007ad5
 8007e74:	08007bfb 	.word	0x08007bfb
 8007e78:	08007c31 	.word	0x08007c31

08007e7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b089      	sub	sp, #36	; 0x24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	330c      	adds	r3, #12
 8007e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	61ba      	str	r2, [r7, #24]
 8007ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6979      	ldr	r1, [r7, #20]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e5      	bne.n	8007e84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ec0:	bf00      	nop
 8007ec2:	3724      	adds	r7, #36	; 0x24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b095      	sub	sp, #84	; 0x54
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ef4:	643a      	str	r2, [r7, #64]	; 0x40
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e5      	bne.n	8007ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3314      	adds	r3, #20
 8007f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3314      	adds	r3, #20
 8007f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e5      	bne.n	8007f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d119      	bne.n	8007f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0310 	bic.w	r3, r3, #16
 8007f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f64:	61ba      	str	r2, [r7, #24]
 8007f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e5      	bne.n	8007f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f86:	bf00      	nop
 8007f88:	3754      	adds	r7, #84	; 0x54
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7fa fd13 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fb2:	bf00      	nop
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b21      	cmp	r3, #33	; 0x21
 8007fcc:	d13e      	bne.n	800804c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd6:	d114      	bne.n	8008002 <UART_Transmit_IT+0x48>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d110      	bne.n	8008002 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	1c9a      	adds	r2, r3, #2
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	621a      	str	r2, [r3, #32]
 8008000:	e008      	b.n	8008014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	1c59      	adds	r1, r3, #1
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6211      	str	r1, [r2, #32]
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29b      	uxth	r3, r3
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4619      	mov	r1, r3
 8008022:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10f      	bne.n	8008048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	e000      	b.n	800804e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800804c:	2302      	movs	r3, #2
  }
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fa fc8a 	bl	8002994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b08c      	sub	sp, #48	; 0x30
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b22      	cmp	r3, #34	; 0x22
 800809c:	f040 80ab 	bne.w	80081f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a8:	d117      	bne.n	80080da <UART_Receive_IT+0x50>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d113      	bne.n	80080da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	1c9a      	adds	r2, r3, #2
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28
 80080d8:	e026      	b.n	8008128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ec:	d007      	beq.n	80080fe <UART_Receive_IT+0x74>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10a      	bne.n	800810c <UART_Receive_IT+0x82>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	b2da      	uxtb	r2, r3
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	701a      	strb	r2, [r3, #0]
 800810a:	e008      	b.n	800811e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008118:	b2da      	uxtb	r2, r3
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29b      	uxth	r3, r3
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4619      	mov	r1, r3
 8008136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008138:	2b00      	cmp	r3, #0
 800813a:	d15a      	bne.n	80081f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0220 	bic.w	r2, r2, #32
 800814a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800815a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	2b01      	cmp	r3, #1
 800817a:	d135      	bne.n	80081e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	330c      	adds	r3, #12
 8008188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	613b      	str	r3, [r7, #16]
   return(result);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f023 0310 	bic.w	r3, r3, #16
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	330c      	adds	r3, #12
 80081a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a2:	623a      	str	r2, [r7, #32]
 80081a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	69f9      	ldr	r1, [r7, #28]
 80081a8:	6a3a      	ldr	r2, [r7, #32]
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e5      	bne.n	8008182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0310 	and.w	r3, r3, #16
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d10a      	bne.n	80081da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fc6b 	bl	8007abc <HAL_UARTEx_RxEventCallback>
 80081e6:	e002      	b.n	80081ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff fc53 	bl	8007a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e002      	b.n	80081f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e000      	b.n	80081f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081f6:	2302      	movs	r3, #2
  }
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3730      	adds	r7, #48	; 0x30
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008204:	b0c0      	sub	sp, #256	; 0x100
 8008206:	af00      	add	r7, sp, #0
 8008208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	68d9      	ldr	r1, [r3, #12]
 800821e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	ea40 0301 	orr.w	r3, r0, r1
 8008228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	431a      	orrs	r2, r3
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	431a      	orrs	r2, r3
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	4313      	orrs	r3, r2
 8008248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008258:	f021 010c 	bic.w	r1, r1, #12
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008266:	430b      	orrs	r3, r1
 8008268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800826a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827a:	6999      	ldr	r1, [r3, #24]
 800827c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	ea40 0301 	orr.w	r3, r0, r1
 8008286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4b8f      	ldr	r3, [pc, #572]	; (80084cc <UART_SetConfig+0x2cc>)
 8008290:	429a      	cmp	r2, r3
 8008292:	d005      	beq.n	80082a0 <UART_SetConfig+0xa0>
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b8d      	ldr	r3, [pc, #564]	; (80084d0 <UART_SetConfig+0x2d0>)
 800829c:	429a      	cmp	r2, r3
 800829e:	d104      	bne.n	80082aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a0:	f7fe f84c 	bl	800633c <HAL_RCC_GetPCLK2Freq>
 80082a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082a8:	e003      	b.n	80082b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082aa:	f7fe f833 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 80082ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082bc:	f040 810c 	bne.w	80084d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082d2:	4622      	mov	r2, r4
 80082d4:	462b      	mov	r3, r5
 80082d6:	1891      	adds	r1, r2, r2
 80082d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80082da:	415b      	adcs	r3, r3
 80082dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082e2:	4621      	mov	r1, r4
 80082e4:	eb12 0801 	adds.w	r8, r2, r1
 80082e8:	4629      	mov	r1, r5
 80082ea:	eb43 0901 	adc.w	r9, r3, r1
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008302:	4690      	mov	r8, r2
 8008304:	4699      	mov	r9, r3
 8008306:	4623      	mov	r3, r4
 8008308:	eb18 0303 	adds.w	r3, r8, r3
 800830c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008310:	462b      	mov	r3, r5
 8008312:	eb49 0303 	adc.w	r3, r9, r3
 8008316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800831a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800832a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800832e:	460b      	mov	r3, r1
 8008330:	18db      	adds	r3, r3, r3
 8008332:	653b      	str	r3, [r7, #80]	; 0x50
 8008334:	4613      	mov	r3, r2
 8008336:	eb42 0303 	adc.w	r3, r2, r3
 800833a:	657b      	str	r3, [r7, #84]	; 0x54
 800833c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008344:	f7f7 fff4 	bl	8000330 <__aeabi_uldivmod>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4b61      	ldr	r3, [pc, #388]	; (80084d4 <UART_SetConfig+0x2d4>)
 800834e:	fba3 2302 	umull	r2, r3, r3, r2
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	011c      	lsls	r4, r3, #4
 8008356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800835a:	2200      	movs	r2, #0
 800835c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008368:	4642      	mov	r2, r8
 800836a:	464b      	mov	r3, r9
 800836c:	1891      	adds	r1, r2, r2
 800836e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008370:	415b      	adcs	r3, r3
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008378:	4641      	mov	r1, r8
 800837a:	eb12 0a01 	adds.w	sl, r2, r1
 800837e:	4649      	mov	r1, r9
 8008380:	eb43 0b01 	adc.w	fp, r3, r1
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008398:	4692      	mov	sl, r2
 800839a:	469b      	mov	fp, r3
 800839c:	4643      	mov	r3, r8
 800839e:	eb1a 0303 	adds.w	r3, sl, r3
 80083a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083a6:	464b      	mov	r3, r9
 80083a8:	eb4b 0303 	adc.w	r3, fp, r3
 80083ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083c4:	460b      	mov	r3, r1
 80083c6:	18db      	adds	r3, r3, r3
 80083c8:	643b      	str	r3, [r7, #64]	; 0x40
 80083ca:	4613      	mov	r3, r2
 80083cc:	eb42 0303 	adc.w	r3, r2, r3
 80083d0:	647b      	str	r3, [r7, #68]	; 0x44
 80083d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083da:	f7f7 ffa9 	bl	8000330 <__aeabi_uldivmod>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	4b3b      	ldr	r3, [pc, #236]	; (80084d4 <UART_SetConfig+0x2d4>)
 80083e6:	fba3 2301 	umull	r2, r3, r3, r1
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	2264      	movs	r2, #100	; 0x64
 80083ee:	fb02 f303 	mul.w	r3, r2, r3
 80083f2:	1acb      	subs	r3, r1, r3
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083fa:	4b36      	ldr	r3, [pc, #216]	; (80084d4 <UART_SetConfig+0x2d4>)
 80083fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008408:	441c      	add	r4, r3
 800840a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840e:	2200      	movs	r2, #0
 8008410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800841c:	4642      	mov	r2, r8
 800841e:	464b      	mov	r3, r9
 8008420:	1891      	adds	r1, r2, r2
 8008422:	63b9      	str	r1, [r7, #56]	; 0x38
 8008424:	415b      	adcs	r3, r3
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800842c:	4641      	mov	r1, r8
 800842e:	1851      	adds	r1, r2, r1
 8008430:	6339      	str	r1, [r7, #48]	; 0x30
 8008432:	4649      	mov	r1, r9
 8008434:	414b      	adcs	r3, r1
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008444:	4659      	mov	r1, fp
 8008446:	00cb      	lsls	r3, r1, #3
 8008448:	4651      	mov	r1, sl
 800844a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800844e:	4651      	mov	r1, sl
 8008450:	00ca      	lsls	r2, r1, #3
 8008452:	4610      	mov	r0, r2
 8008454:	4619      	mov	r1, r3
 8008456:	4603      	mov	r3, r0
 8008458:	4642      	mov	r2, r8
 800845a:	189b      	adds	r3, r3, r2
 800845c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008460:	464b      	mov	r3, r9
 8008462:	460a      	mov	r2, r1
 8008464:	eb42 0303 	adc.w	r3, r2, r3
 8008468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800846c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800847c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008480:	460b      	mov	r3, r1
 8008482:	18db      	adds	r3, r3, r3
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
 8008486:	4613      	mov	r3, r2
 8008488:	eb42 0303 	adc.w	r3, r2, r3
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800848e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008496:	f7f7 ff4b 	bl	8000330 <__aeabi_uldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <UART_SetConfig+0x2d4>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	2164      	movs	r1, #100	; 0x64
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	3332      	adds	r3, #50	; 0x32
 80084b2:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <UART_SetConfig+0x2d4>)
 80084b4:	fba2 2303 	umull	r2, r3, r2, r3
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	f003 0207 	and.w	r2, r3, #7
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4422      	add	r2, r4
 80084c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084c8:	e105      	b.n	80086d6 <UART_SetConfig+0x4d6>
 80084ca:	bf00      	nop
 80084cc:	40011000 	.word	0x40011000
 80084d0:	40011400 	.word	0x40011400
 80084d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084ea:	4642      	mov	r2, r8
 80084ec:	464b      	mov	r3, r9
 80084ee:	1891      	adds	r1, r2, r2
 80084f0:	6239      	str	r1, [r7, #32]
 80084f2:	415b      	adcs	r3, r3
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24
 80084f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084fa:	4641      	mov	r1, r8
 80084fc:	1854      	adds	r4, r2, r1
 80084fe:	4649      	mov	r1, r9
 8008500:	eb43 0501 	adc.w	r5, r3, r1
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	f04f 0300 	mov.w	r3, #0
 800850c:	00eb      	lsls	r3, r5, #3
 800850e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008512:	00e2      	lsls	r2, r4, #3
 8008514:	4614      	mov	r4, r2
 8008516:	461d      	mov	r5, r3
 8008518:	4643      	mov	r3, r8
 800851a:	18e3      	adds	r3, r4, r3
 800851c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008520:	464b      	mov	r3, r9
 8008522:	eb45 0303 	adc.w	r3, r5, r3
 8008526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008546:	4629      	mov	r1, r5
 8008548:	008b      	lsls	r3, r1, #2
 800854a:	4621      	mov	r1, r4
 800854c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008550:	4621      	mov	r1, r4
 8008552:	008a      	lsls	r2, r1, #2
 8008554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008558:	f7f7 feea 	bl	8000330 <__aeabi_uldivmod>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4b60      	ldr	r3, [pc, #384]	; (80086e4 <UART_SetConfig+0x4e4>)
 8008562:	fba3 2302 	umull	r2, r3, r3, r2
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	011c      	lsls	r4, r3, #4
 800856a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800856e:	2200      	movs	r2, #0
 8008570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	1891      	adds	r1, r2, r2
 8008582:	61b9      	str	r1, [r7, #24]
 8008584:	415b      	adcs	r3, r3
 8008586:	61fb      	str	r3, [r7, #28]
 8008588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800858c:	4641      	mov	r1, r8
 800858e:	1851      	adds	r1, r2, r1
 8008590:	6139      	str	r1, [r7, #16]
 8008592:	4649      	mov	r1, r9
 8008594:	414b      	adcs	r3, r1
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085a4:	4659      	mov	r1, fp
 80085a6:	00cb      	lsls	r3, r1, #3
 80085a8:	4651      	mov	r1, sl
 80085aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ae:	4651      	mov	r1, sl
 80085b0:	00ca      	lsls	r2, r1, #3
 80085b2:	4610      	mov	r0, r2
 80085b4:	4619      	mov	r1, r3
 80085b6:	4603      	mov	r3, r0
 80085b8:	4642      	mov	r2, r8
 80085ba:	189b      	adds	r3, r3, r2
 80085bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085c0:	464b      	mov	r3, r9
 80085c2:	460a      	mov	r2, r1
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80085d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085e4:	4649      	mov	r1, r9
 80085e6:	008b      	lsls	r3, r1, #2
 80085e8:	4641      	mov	r1, r8
 80085ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ee:	4641      	mov	r1, r8
 80085f0:	008a      	lsls	r2, r1, #2
 80085f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085f6:	f7f7 fe9b 	bl	8000330 <__aeabi_uldivmod>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4b39      	ldr	r3, [pc, #228]	; (80086e4 <UART_SetConfig+0x4e4>)
 8008600:	fba3 1302 	umull	r1, r3, r3, r2
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	2164      	movs	r1, #100	; 0x64
 8008608:	fb01 f303 	mul.w	r3, r1, r3
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	3332      	adds	r3, #50	; 0x32
 8008612:	4a34      	ldr	r2, [pc, #208]	; (80086e4 <UART_SetConfig+0x4e4>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800861e:	441c      	add	r4, r3
 8008620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008624:	2200      	movs	r2, #0
 8008626:	673b      	str	r3, [r7, #112]	; 0x70
 8008628:	677a      	str	r2, [r7, #116]	; 0x74
 800862a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800862e:	4642      	mov	r2, r8
 8008630:	464b      	mov	r3, r9
 8008632:	1891      	adds	r1, r2, r2
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	415b      	adcs	r3, r3
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800863e:	4641      	mov	r1, r8
 8008640:	1851      	adds	r1, r2, r1
 8008642:	6039      	str	r1, [r7, #0]
 8008644:	4649      	mov	r1, r9
 8008646:	414b      	adcs	r3, r1
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008656:	4659      	mov	r1, fp
 8008658:	00cb      	lsls	r3, r1, #3
 800865a:	4651      	mov	r1, sl
 800865c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008660:	4651      	mov	r1, sl
 8008662:	00ca      	lsls	r2, r1, #3
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	4603      	mov	r3, r0
 800866a:	4642      	mov	r2, r8
 800866c:	189b      	adds	r3, r3, r2
 800866e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008670:	464b      	mov	r3, r9
 8008672:	460a      	mov	r2, r1
 8008674:	eb42 0303 	adc.w	r3, r2, r3
 8008678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800867a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	663b      	str	r3, [r7, #96]	; 0x60
 8008684:	667a      	str	r2, [r7, #100]	; 0x64
 8008686:	f04f 0200 	mov.w	r2, #0
 800868a:	f04f 0300 	mov.w	r3, #0
 800868e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008692:	4649      	mov	r1, r9
 8008694:	008b      	lsls	r3, r1, #2
 8008696:	4641      	mov	r1, r8
 8008698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800869c:	4641      	mov	r1, r8
 800869e:	008a      	lsls	r2, r1, #2
 80086a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086a4:	f7f7 fe44 	bl	8000330 <__aeabi_uldivmod>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <UART_SetConfig+0x4e4>)
 80086ae:	fba3 1302 	umull	r1, r3, r3, r2
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	2164      	movs	r1, #100	; 0x64
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	3332      	adds	r3, #50	; 0x32
 80086c0:	4a08      	ldr	r2, [pc, #32]	; (80086e4 <UART_SetConfig+0x4e4>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4422      	add	r2, r4
 80086d4:	609a      	str	r2, [r3, #8]
}
 80086d6:	bf00      	nop
 80086d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086dc:	46bd      	mov	sp, r7
 80086de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086e2:	bf00      	nop
 80086e4:	51eb851f 	.word	0x51eb851f

080086e8 <__NVIC_SetPriority>:
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	db0a      	blt.n	8008712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	490c      	ldr	r1, [pc, #48]	; (8008734 <__NVIC_SetPriority+0x4c>)
 8008702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008706:	0112      	lsls	r2, r2, #4
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	440b      	add	r3, r1
 800870c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008710:	e00a      	b.n	8008728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	b2da      	uxtb	r2, r3
 8008716:	4908      	ldr	r1, [pc, #32]	; (8008738 <__NVIC_SetPriority+0x50>)
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	3b04      	subs	r3, #4
 8008720:	0112      	lsls	r2, r2, #4
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	440b      	add	r3, r1
 8008726:	761a      	strb	r2, [r3, #24]
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	e000e100 	.word	0xe000e100
 8008738:	e000ed00 	.word	0xe000ed00

0800873c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008740:	2100      	movs	r1, #0
 8008742:	f06f 0004 	mvn.w	r0, #4
 8008746:	f7ff ffcf 	bl	80086e8 <__NVIC_SetPriority>
#endif
}
 800874a:	bf00      	nop
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008756:	f3ef 8305 	mrs	r3, IPSR
 800875a:	603b      	str	r3, [r7, #0]
  return(result);
 800875c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008762:	f06f 0305 	mvn.w	r3, #5
 8008766:	607b      	str	r3, [r7, #4]
 8008768:	e00c      	b.n	8008784 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800876a:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <osKernelInitialize+0x44>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d105      	bne.n	800877e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <osKernelInitialize+0x44>)
 8008774:	2201      	movs	r2, #1
 8008776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008778:	2300      	movs	r3, #0
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	e002      	b.n	8008784 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800877e:	f04f 33ff 	mov.w	r3, #4294967295
 8008782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008784:	687b      	ldr	r3, [r7, #4]
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	200019b4 	.word	0x200019b4

08008798 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	603b      	str	r3, [r7, #0]
  return(result);
 80087a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80087aa:	f06f 0305 	mvn.w	r3, #5
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	e010      	b.n	80087d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087b2:	4b0b      	ldr	r3, [pc, #44]	; (80087e0 <osKernelStart+0x48>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d109      	bne.n	80087ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087ba:	f7ff ffbf 	bl	800873c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087be:	4b08      	ldr	r3, [pc, #32]	; (80087e0 <osKernelStart+0x48>)
 80087c0:	2202      	movs	r2, #2
 80087c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087c4:	f001 ff50 	bl	800a668 <vTaskStartScheduler>
      stat = osOK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	e002      	b.n	80087d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087d4:	687b      	ldr	r3, [r7, #4]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200019b4 	.word	0x200019b4

080087e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08e      	sub	sp, #56	; 0x38
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f4:	f3ef 8305 	mrs	r3, IPSR
 80087f8:	617b      	str	r3, [r7, #20]
  return(result);
 80087fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d17e      	bne.n	80088fe <osThreadNew+0x11a>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d07b      	beq.n	80088fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008806:	2380      	movs	r3, #128	; 0x80
 8008808:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800880a:	2318      	movs	r3, #24
 800880c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008812:	f04f 33ff 	mov.w	r3, #4294967295
 8008816:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d045      	beq.n	80088aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d002      	beq.n	800882c <osThreadNew+0x48>
        name = attr->name;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d008      	beq.n	8008852 <osThreadNew+0x6e>
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	2b38      	cmp	r3, #56	; 0x38
 8008844:	d805      	bhi.n	8008852 <osThreadNew+0x6e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <osThreadNew+0x72>
        return (NULL);
 8008852:	2300      	movs	r3, #0
 8008854:	e054      	b.n	8008900 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	089b      	lsrs	r3, r3, #2
 8008864:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00e      	beq.n	800888c <osThreadNew+0xa8>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2bbb      	cmp	r3, #187	; 0xbb
 8008874:	d90a      	bls.n	800888c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <osThreadNew+0xa8>
        mem = 1;
 8008886:	2301      	movs	r3, #1
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	e010      	b.n	80088ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10c      	bne.n	80088ae <osThreadNew+0xca>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d108      	bne.n	80088ae <osThreadNew+0xca>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <osThreadNew+0xca>
          mem = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61bb      	str	r3, [r7, #24]
 80088a8:	e001      	b.n	80088ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d110      	bne.n	80088d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088bc:	9202      	str	r2, [sp, #8]
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6a3a      	ldr	r2, [r7, #32]
 80088c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f001 fce0 	bl	800a290 <xTaskCreateStatic>
 80088d0:	4603      	mov	r3, r0
 80088d2:	613b      	str	r3, [r7, #16]
 80088d4:	e013      	b.n	80088fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d110      	bne.n	80088fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f107 0310 	add.w	r3, r7, #16
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f001 fd2b 	bl	800a34a <xTaskCreate>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d001      	beq.n	80088fe <osThreadNew+0x11a>
            hTask = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088fe:	693b      	ldr	r3, [r7, #16]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3728      	adds	r7, #40	; 0x28
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af02      	add	r7, sp, #8
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <osThreadFlagsSet+0x1a>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	da03      	bge.n	800892a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008922:	f06f 0303 	mvn.w	r3, #3
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e035      	b.n	8008996 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008930:	f3ef 8305 	mrs	r3, IPSR
 8008934:	613b      	str	r3, [r7, #16]
  return(result);
 8008936:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01f      	beq.n	800897c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008940:	f107 0308 	add.w	r3, r7, #8
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	2201      	movs	r2, #1
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6978      	ldr	r0, [r7, #20]
 800894e:	f002 fd9f 	bl	800b490 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008952:	f107 030c 	add.w	r3, r7, #12
 8008956:	2200      	movs	r2, #0
 8008958:	9200      	str	r2, [sp, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	2100      	movs	r1, #0
 800895e:	6978      	ldr	r0, [r7, #20]
 8008960:	f002 fd96 	bl	800b490 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d015      	beq.n	8008996 <osThreadFlagsSet+0x8e>
 800896a:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <osThreadFlagsSet+0x98>)
 800896c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	e00c      	b.n	8008996 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800897c:	2300      	movs	r3, #0
 800897e:	2201      	movs	r2, #1
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6978      	ldr	r0, [r7, #20]
 8008984:	f002 fcc6 	bl	800b314 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008988:	f107 030c 	add.w	r3, r7, #12
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	6978      	ldr	r0, [r7, #20]
 8008992:	f002 fcbf 	bl	800b314 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008996:	68fb      	ldr	r3, [r7, #12]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08c      	sub	sp, #48	; 0x30
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b0:	f3ef 8305 	mrs	r3, IPSR
 80089b4:	617b      	str	r3, [r7, #20]
  return(result);
 80089b6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80089bc:	f06f 0305 	mvn.w	r3, #5
 80089c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089c2:	e06b      	b.n	8008a9c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	da03      	bge.n	80089d2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80089ca:	f06f 0303 	mvn.w	r3, #3
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089d0:	e064      	b.n	8008a9c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
 80089e0:	e001      	b.n	80089e6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80089ee:	f001 ff57 	bl	800a8a0 <xTaskGetTickCount>
 80089f2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80089f4:	f107 0210 	add.w	r2, r7, #16
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089fc:	2000      	movs	r0, #0
 80089fe:	f002 fc29 	bl	800b254 <xTaskNotifyWait>
 8008a02:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d137      	bne.n	8008a7a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a16:	4313      	orrs	r3, r2
 8008a18:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00c      	beq.n	8008a3e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	4013      	ands	r3, r2
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d032      	beq.n	8008a96 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10f      	bne.n	8008a56 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008a36:	f06f 0302 	mvn.w	r3, #2
 8008a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008a3c:	e02e      	b.n	8008a9c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	4013      	ands	r3, r2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d128      	bne.n	8008a9a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d103      	bne.n	8008a56 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008a4e:	f06f 0302 	mvn.w	r3, #2
 8008a52:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008a54:	e022      	b.n	8008a9c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008a56:	f001 ff23 	bl	800a8a0 <xTaskGetTickCount>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d902      	bls.n	8008a70 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6e:	e00e      	b.n	8008a8e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
 8008a78:	e009      	b.n	8008a8e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008a80:	f06f 0302 	mvn.w	r3, #2
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a86:	e002      	b.n	8008a8e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008a88:	f06f 0301 	mvn.w	r3, #1
 8008a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1af      	bne.n	80089f4 <osThreadFlagsWait+0x50>
 8008a94:	e002      	b.n	8008a9c <osThreadFlagsWait+0xf8>
            break;
 8008a96:	bf00      	nop
 8008a98:	e000      	b.n	8008a9c <osThreadFlagsWait+0xf8>
            break;
 8008a9a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3730      	adds	r7, #48	; 0x30
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aae:	f3ef 8305 	mrs	r3, IPSR
 8008ab2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <osDelay+0x1c>
    stat = osErrorISR;
 8008aba:	f06f 0305 	mvn.w	r3, #5
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	e007      	b.n	8008ad2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fd97 	bl	800a600 <vTaskDelay>
    }
  }

  return (stat);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ae8:	f3ef 8305 	mrs	r3, IPSR
 8008aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8008aee:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d174      	bne.n	8008bde <osMutexNew+0x102>
    if (attr != NULL) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	61bb      	str	r3, [r7, #24]
 8008b00:	e001      	b.n	8008b06 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <osMutexNew+0x3a>
      rmtx = 1U;
 8008b10:	2301      	movs	r3, #1
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e001      	b.n	8008b1a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d15c      	bne.n	8008bde <osMutexNew+0x102>
      mem = -1;
 8008b24:	f04f 33ff 	mov.w	r3, #4294967295
 8008b28:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d015      	beq.n	8008b5c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d006      	beq.n	8008b46 <osMutexNew+0x6a>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b4f      	cmp	r3, #79	; 0x4f
 8008b3e:	d902      	bls.n	8008b46 <osMutexNew+0x6a>
          mem = 1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	e00c      	b.n	8008b60 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d108      	bne.n	8008b60 <osMutexNew+0x84>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <osMutexNew+0x84>
            mem = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	e001      	b.n	8008b60 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d112      	bne.n	8008b8c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	4619      	mov	r1, r3
 8008b72:	2004      	movs	r0, #4
 8008b74:	f000 fc37 	bl	80093e6 <xQueueCreateMutexStatic>
 8008b78:	61f8      	str	r0, [r7, #28]
 8008b7a:	e016      	b.n	8008baa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	4619      	mov	r1, r3
 8008b82:	2001      	movs	r0, #1
 8008b84:	f000 fc2f 	bl	80093e6 <xQueueCreateMutexStatic>
 8008b88:	61f8      	str	r0, [r7, #28]
 8008b8a:	e00e      	b.n	8008baa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008b98:	2004      	movs	r0, #4
 8008b9a:	f000 fc0c 	bl	80093b6 <xQueueCreateMutex>
 8008b9e:	61f8      	str	r0, [r7, #28]
 8008ba0:	e003      	b.n	8008baa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	f000 fc07 	bl	80093b6 <xQueueCreateMutex>
 8008ba8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <osMutexNew+0xee>
        if (attr != NULL) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <osMutexNew+0xe2>
          name = attr->name;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	e001      	b.n	8008bc2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	69f8      	ldr	r0, [r7, #28]
 8008bc6:	f001 fadb 	bl	800a180 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <osMutexNew+0x102>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008bde:	69fb      	ldr	r3, [r7, #28]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3720      	adds	r7, #32
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f023 0301 	bic.w	r3, r3, #1
 8008bf8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c06:	f3ef 8305 	mrs	r3, IPSR
 8008c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008c12:	f06f 0305 	mvn.w	r3, #5
 8008c16:	617b      	str	r3, [r7, #20]
 8008c18:	e02c      	b.n	8008c74 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008c20:	f06f 0303 	mvn.w	r3, #3
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	e025      	b.n	8008c74 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d011      	beq.n	8008c52 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6938      	ldr	r0, [r7, #16]
 8008c32:	f000 fc27 	bl	8009484 <xQueueTakeMutexRecursive>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d01b      	beq.n	8008c74 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008c42:	f06f 0301 	mvn.w	r3, #1
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e014      	b.n	8008c74 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c4a:	f06f 0302 	mvn.w	r3, #2
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	e010      	b.n	8008c74 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6938      	ldr	r0, [r7, #16]
 8008c56:	f000 ffbb 	bl	8009bd0 <xQueueSemaphoreTake>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d009      	beq.n	8008c74 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008c66:	f06f 0301 	mvn.w	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e002      	b.n	8008c74 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008c6e:	f06f 0302 	mvn.w	r3, #2
 8008c72:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008c74:	697b      	ldr	r3, [r7, #20]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c9a:	f3ef 8305 	mrs	r3, IPSR
 8008c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ca0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <osMutexRelease+0x30>
    stat = osErrorISR;
 8008ca6:	f06f 0305 	mvn.w	r3, #5
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	e01f      	b.n	8008cee <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d103      	bne.n	8008cbc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008cb4:	f06f 0303 	mvn.w	r3, #3
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	e018      	b.n	8008cee <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008cc2:	6938      	ldr	r0, [r7, #16]
 8008cc4:	f000 fbaa 	bl	800941c <xQueueGiveMutexRecursive>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d00f      	beq.n	8008cee <osMutexRelease+0x70>
        stat = osErrorResource;
 8008cce:	f06f 0302 	mvn.w	r3, #2
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	e00b      	b.n	8008cee <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	6938      	ldr	r0, [r7, #16]
 8008cde:	f000 fc71 	bl	80095c4 <xQueueGenericSend>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d002      	beq.n	8008cee <osMutexRelease+0x70>
        stat = osErrorResource;
 8008ce8:	f06f 0302 	mvn.w	r3, #2
 8008cec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008cee:	697b      	ldr	r3, [r7, #20]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08a      	sub	sp, #40	; 0x28
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d08:	f3ef 8305 	mrs	r3, IPSR
 8008d0c:	613b      	str	r3, [r7, #16]
  return(result);
 8008d0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d175      	bne.n	8008e00 <osSemaphoreNew+0x108>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d072      	beq.n	8008e00 <osSemaphoreNew+0x108>
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d86e      	bhi.n	8008e00 <osSemaphoreNew+0x108>
    mem = -1;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d015      	beq.n	8008d5a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <osSemaphoreNew+0x4c>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2b4f      	cmp	r3, #79	; 0x4f
 8008d3c:	d902      	bls.n	8008d44 <osSemaphoreNew+0x4c>
        mem = 1;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	e00c      	b.n	8008d5e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d108      	bne.n	8008d5e <osSemaphoreNew+0x66>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d104      	bne.n	8008d5e <osSemaphoreNew+0x66>
          mem = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	61bb      	str	r3, [r7, #24]
 8008d58:	e001      	b.n	8008d5e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d64:	d04c      	beq.n	8008e00 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d128      	bne.n	8008dbe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d10a      	bne.n	8008d88 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2203      	movs	r2, #3
 8008d78:	9200      	str	r2, [sp, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	2001      	movs	r0, #1
 8008d80:	f000 fa2a 	bl	80091d8 <xQueueGenericCreateStatic>
 8008d84:	61f8      	str	r0, [r7, #28]
 8008d86:	e005      	b.n	8008d94 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008d88:	2203      	movs	r2, #3
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	f000 fa9b 	bl	80092c8 <xQueueGenericCreate>
 8008d92:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d022      	beq.n	8008de0 <osSemaphoreNew+0xe8>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01f      	beq.n	8008de0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008da0:	2300      	movs	r3, #0
 8008da2:	2200      	movs	r2, #0
 8008da4:	2100      	movs	r1, #0
 8008da6:	69f8      	ldr	r0, [r7, #28]
 8008da8:	f000 fc0c 	bl	80095c4 <xQueueGenericSend>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d016      	beq.n	8008de0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008db2:	69f8      	ldr	r0, [r7, #28]
 8008db4:	f001 f898 	bl	8009ee8 <vQueueDelete>
            hSemaphore = NULL;
 8008db8:	2300      	movs	r3, #0
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	e010      	b.n	8008de0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d108      	bne.n	8008dd6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fb8f 	bl	80094f0 <xQueueCreateCountingSemaphoreStatic>
 8008dd2:	61f8      	str	r0, [r7, #28]
 8008dd4:	e004      	b.n	8008de0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008dd6:	68b9      	ldr	r1, [r7, #8]
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 fbc0 	bl	800955e <xQueueCreateCountingSemaphore>
 8008dde:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00c      	beq.n	8008e00 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	617b      	str	r3, [r7, #20]
 8008df2:	e001      	b.n	8008df8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008df8:	6979      	ldr	r1, [r7, #20]
 8008dfa:	69f8      	ldr	r0, [r7, #28]
 8008dfc:	f001 f9c0 	bl	800a180 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008e00:	69fb      	ldr	r3, [r7, #28]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3720      	adds	r7, #32
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d103      	bne.n	8008e2c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008e24:	f06f 0303 	mvn.w	r3, #3
 8008e28:	617b      	str	r3, [r7, #20]
 8008e2a:	e039      	b.n	8008ea0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e2c:	f3ef 8305 	mrs	r3, IPSR
 8008e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e32:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d022      	beq.n	8008e7e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008e3e:	f06f 0303 	mvn.w	r3, #3
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	e02c      	b.n	8008ea0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008e4a:	f107 0308 	add.w	r3, r7, #8
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2100      	movs	r1, #0
 8008e52:	6938      	ldr	r0, [r7, #16]
 8008e54:	f000 ffc8 	bl	8009de8 <xQueueReceiveFromISR>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d003      	beq.n	8008e66 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008e5e:	f06f 0302 	mvn.w	r3, #2
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	e01c      	b.n	8008ea0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d019      	beq.n	8008ea0 <osSemaphoreAcquire+0x94>
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <osSemaphoreAcquire+0xa0>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	e010      	b.n	8008ea0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6938      	ldr	r0, [r7, #16]
 8008e82:	f000 fea5 	bl	8009bd0 <xQueueSemaphoreTake>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d009      	beq.n	8008ea0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008e92:	f06f 0301 	mvn.w	r3, #1
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	e002      	b.n	8008ea0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008e9a:	f06f 0302 	mvn.w	r3, #2
 8008e9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008ea0:	697b      	ldr	r3, [r7, #20]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d103      	bne.n	8008ece <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008ec6:	f06f 0303 	mvn.w	r3, #3
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e02c      	b.n	8008f28 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ece:	f3ef 8305 	mrs	r3, IPSR
 8008ed2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01a      	beq.n	8008f10 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ede:	f107 0308 	add.w	r3, r7, #8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6938      	ldr	r0, [r7, #16]
 8008ee6:	f000 fd06 	bl	80098f6 <xQueueGiveFromISR>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d003      	beq.n	8008ef8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008ef0:	f06f 0302 	mvn.w	r3, #2
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	e017      	b.n	8008f28 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d014      	beq.n	8008f28 <osSemaphoreRelease+0x78>
 8008efe:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <osSemaphoreRelease+0x84>)
 8008f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	e00b      	b.n	8008f28 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008f10:	2300      	movs	r3, #0
 8008f12:	2200      	movs	r2, #0
 8008f14:	2100      	movs	r1, #0
 8008f16:	6938      	ldr	r0, [r7, #16]
 8008f18:	f000 fb54 	bl	80095c4 <xQueueGenericSend>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d002      	beq.n	8008f28 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008f22:	f06f 0302 	mvn.w	r3, #2
 8008f26:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008f28:	697b      	ldr	r3, [r7, #20]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4a07      	ldr	r2, [pc, #28]	; (8008f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	4a06      	ldr	r2, [pc, #24]	; (8008f68 <vApplicationGetIdleTaskMemory+0x30>)
 8008f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2280      	movs	r2, #128	; 0x80
 8008f54:	601a      	str	r2, [r3, #0]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	200019b8 	.word	0x200019b8
 8008f68:	20001a74 	.word	0x20001a74

08008f6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4a07      	ldr	r2, [pc, #28]	; (8008f98 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	4a06      	ldr	r2, [pc, #24]	; (8008f9c <vApplicationGetTimerTaskMemory+0x30>)
 8008f82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f8a:	601a      	str	r2, [r3, #0]
}
 8008f8c:	bf00      	nop
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	20001c74 	.word	0x20001c74
 8008f9c:	20001d30 	.word	0x20001d30

08008fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f103 0208 	add.w	r2, r3, #8
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f103 0208 	add.w	r2, r3, #8
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f103 0208 	add.w	r2, r3, #8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009042:	b480      	push	{r7}
 8009044:	b085      	sub	sp, #20
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009058:	d103      	bne.n	8009062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e00c      	b.n	800907c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3308      	adds	r3, #8
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	e002      	b.n	8009070 <vListInsert+0x2e>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	d2f6      	bcs.n	800906a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
}
 80090a8:	bf00      	nop
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	6892      	ldr	r2, [r2, #8]
 80090ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6852      	ldr	r2, [r2, #4]
 80090d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d103      	bne.n	80090e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	1e5a      	subs	r2, r3, #1
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009132:	f002 ff5f 	bl	800bff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009142:	fb01 f303 	mul.w	r3, r1, r3
 8009146:	441a      	add	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009162:	3b01      	subs	r3, #1
 8009164:	68f9      	ldr	r1, [r7, #12]
 8009166:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009168:	fb01 f303 	mul.w	r3, r1, r3
 800916c:	441a      	add	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	22ff      	movs	r2, #255	; 0xff
 8009176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	22ff      	movs	r2, #255	; 0xff
 800917e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d114      	bne.n	80091b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01a      	beq.n	80091c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3310      	adds	r3, #16
 8009194:	4618      	mov	r0, r3
 8009196:	f001 fd01 	bl	800ab9c <xTaskRemoveFromEventList>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d012      	beq.n	80091c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091a0:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <xQueueGenericReset+0xcc>)
 80091a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	e009      	b.n	80091c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3310      	adds	r3, #16
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff fef2 	bl	8008fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3324      	adds	r3, #36	; 0x24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff feed 	bl	8008fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091c6:	f002 ff45 	bl	800c054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091ca:	2301      	movs	r3, #1
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08e      	sub	sp, #56	; 0x38
 80091dc:	af02      	add	r7, sp, #8
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	627b      	str	r3, [r7, #36]	; 0x24
}
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <xQueueGenericCreateStatic+0x52>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <xQueueGenericCreateStatic+0x56>
 800922a:	2301      	movs	r3, #1
 800922c:	e000      	b.n	8009230 <xQueueGenericCreateStatic+0x58>
 800922e:	2300      	movs	r3, #0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	623b      	str	r3, [r7, #32]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d102      	bne.n	8009256 <xQueueGenericCreateStatic+0x7e>
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <xQueueGenericCreateStatic+0x82>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <xQueueGenericCreateStatic+0x84>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	61fb      	str	r3, [r7, #28]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009276:	2350      	movs	r3, #80	; 0x50
 8009278:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b50      	cmp	r3, #80	; 0x50
 800927e:	d00a      	beq.n	8009296 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	61bb      	str	r3, [r7, #24]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009296:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00d      	beq.n	80092be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	4613      	mov	r3, r2
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f83f 	bl	800933c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3730      	adds	r7, #48	; 0x30
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b08a      	sub	sp, #40	; 0x28
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	613b      	str	r3, [r7, #16]
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	fb02 f303 	mul.w	r3, r2, r3
 80092fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	3350      	adds	r3, #80	; 0x50
 8009300:	4618      	mov	r0, r3
 8009302:	f002 ff99 	bl	800c238 <pvPortMalloc>
 8009306:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d011      	beq.n	8009332 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	3350      	adds	r3, #80	; 0x50
 8009316:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009320:	79fa      	ldrb	r2, [r7, #7]
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	4613      	mov	r3, r2
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 f805 	bl	800933c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009332:	69bb      	ldr	r3, [r7, #24]
	}
 8009334:	4618      	mov	r0, r3
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	e002      	b.n	800935e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800936a:	2101      	movs	r1, #1
 800936c:	69b8      	ldr	r0, [r7, #24]
 800936e:	f7ff fecb 	bl	8009108 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00e      	beq.n	80093ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093a2:	2300      	movs	r3, #0
 80093a4:	2200      	movs	r2, #0
 80093a6:	2100      	movs	r1, #0
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f90b 	bl	80095c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	4603      	mov	r3, r0
 80093be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093c0:	2301      	movs	r3, #1
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	2300      	movs	r3, #0
 80093c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	461a      	mov	r2, r3
 80093cc:	6939      	ldr	r1, [r7, #16]
 80093ce:	6978      	ldr	r0, [r7, #20]
 80093d0:	f7ff ff7a 	bl	80092c8 <xQueueGenericCreate>
 80093d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff ffd3 	bl	8009382 <prvInitialiseMutex>

		return xNewQueue;
 80093dc:	68fb      	ldr	r3, [r7, #12]
	}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b088      	sub	sp, #32
 80093ea:	af02      	add	r7, sp, #8
 80093ec:	4603      	mov	r3, r0
 80093ee:	6039      	str	r1, [r7, #0]
 80093f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093f2:	2301      	movs	r3, #1
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	2300      	movs	r3, #0
 80093f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2200      	movs	r2, #0
 8009402:	6939      	ldr	r1, [r7, #16]
 8009404:	6978      	ldr	r0, [r7, #20]
 8009406:	f7ff fee7 	bl	80091d8 <xQueueGenericCreateStatic>
 800940a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff ffb8 	bl	8009382 <prvInitialiseMutex>

		return xNewQueue;
 8009412:	68fb      	ldr	r3, [r7, #12]
	}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800941c:	b590      	push	{r4, r7, lr}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10a      	bne.n	8009444 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	60fb      	str	r3, [r7, #12]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	689c      	ldr	r4, [r3, #8]
 8009448:	f001 fd6a 	bl	800af20 <xTaskGetCurrentTaskHandle>
 800944c:	4603      	mov	r3, r0
 800944e:	429c      	cmp	r4, r3
 8009450:	d111      	bne.n	8009476 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	1e5a      	subs	r2, r3, #1
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d105      	bne.n	8009470 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009464:	2300      	movs	r3, #0
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f000 f8aa 	bl	80095c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009470:	2301      	movs	r3, #1
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	e001      	b.n	800947a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009476:	2300      	movs	r3, #0
 8009478:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800947a:	697b      	ldr	r3, [r7, #20]
	}
 800947c:	4618      	mov	r0, r3
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	bd90      	pop	{r4, r7, pc}

08009484 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009484:	b590      	push	{r4, r7, lr}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	60fb      	str	r3, [r7, #12]
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	689c      	ldr	r4, [r3, #8]
 80094b2:	f001 fd35 	bl	800af20 <xTaskGetCurrentTaskHandle>
 80094b6:	4603      	mov	r3, r0
 80094b8:	429c      	cmp	r4, r3
 80094ba:	d107      	bne.n	80094cc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80094c6:	2301      	movs	r3, #1
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e00c      	b.n	80094e6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6938      	ldr	r0, [r7, #16]
 80094d0:	f000 fb7e 	bl	8009bd0 <xQueueSemaphoreTake>
 80094d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80094e6:	697b      	ldr	r3, [r7, #20]
	}
 80094e8:	4618      	mov	r0, r3
 80094ea:	371c      	adds	r7, #28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}

080094f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af02      	add	r7, sp, #8
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	61bb      	str	r3, [r7, #24]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	429a      	cmp	r2, r3
 800951e:	d90a      	bls.n	8009536 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	617b      	str	r3, [r7, #20]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009536:	2302      	movs	r3, #2
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	2100      	movs	r1, #0
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff fe49 	bl	80091d8 <xQueueGenericCreateStatic>
 8009546:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009554:	69fb      	ldr	r3, [r7, #28]
	}
 8009556:	4618      	mov	r0, r3
 8009558:	3720      	adds	r7, #32
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10a      	bne.n	8009584 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	613b      	str	r3, [r7, #16]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d90a      	bls.n	80095a2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60fb      	str	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095a2:	2202      	movs	r2, #2
 80095a4:	2100      	movs	r1, #0
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fe8e 	bl	80092c8 <xQueueGenericCreate>
 80095ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80095ba:	697b      	ldr	r3, [r7, #20]
	}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095d2:	2300      	movs	r3, #0
 80095d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <xQueueGenericSend+0x32>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d103      	bne.n	8009604 <xQueueGenericSend+0x40>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <xQueueGenericSend+0x44>
 8009604:	2301      	movs	r3, #1
 8009606:	e000      	b.n	800960a <xQueueGenericSend+0x46>
 8009608:	2300      	movs	r3, #0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10a      	bne.n	8009624 <xQueueGenericSend+0x60>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009620:	bf00      	nop
 8009622:	e7fe      	b.n	8009622 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2b02      	cmp	r3, #2
 8009628:	d103      	bne.n	8009632 <xQueueGenericSend+0x6e>
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <xQueueGenericSend+0x72>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <xQueueGenericSend+0x74>
 8009636:	2300      	movs	r3, #0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xQueueGenericSend+0x8e>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	623b      	str	r3, [r7, #32]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009652:	f001 fc75 	bl	800af40 <xTaskGetSchedulerState>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d102      	bne.n	8009662 <xQueueGenericSend+0x9e>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <xQueueGenericSend+0xa2>
 8009662:	2301      	movs	r3, #1
 8009664:	e000      	b.n	8009668 <xQueueGenericSend+0xa4>
 8009666:	2300      	movs	r3, #0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <xQueueGenericSend+0xbe>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	61fb      	str	r3, [r7, #28]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009682:	f002 fcb7 	bl	800bff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800968e:	429a      	cmp	r2, r3
 8009690:	d302      	bcc.n	8009698 <xQueueGenericSend+0xd4>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d129      	bne.n	80096ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800969e:	f000 fc5e 	bl	8009f5e <prvCopyDataToQueue>
 80096a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d010      	beq.n	80096ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 fa73 	bl	800ab9c <xTaskRemoveFromEventList>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d013      	beq.n	80096e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096bc:	4b3f      	ldr	r3, [pc, #252]	; (80097bc <xQueueGenericSend+0x1f8>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	e00a      	b.n	80096e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096d4:	4b39      	ldr	r3, [pc, #228]	; (80097bc <xQueueGenericSend+0x1f8>)
 80096d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096e4:	f002 fcb6 	bl	800c054 <vPortExitCritical>
				return pdPASS;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e063      	b.n	80097b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096f2:	f002 fcaf 	bl	800c054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	e05c      	b.n	80097b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d106      	bne.n	800970e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009700:	f107 0314 	add.w	r3, r7, #20
 8009704:	4618      	mov	r0, r3
 8009706:	f001 faad 	bl	800ac64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800970a:	2301      	movs	r3, #1
 800970c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800970e:	f002 fca1 	bl	800c054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009712:	f001 f819 	bl	800a748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009716:	f002 fc6d 	bl	800bff4 <vPortEnterCritical>
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009720:	b25b      	sxtb	r3, r3
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d103      	bne.n	8009730 <xQueueGenericSend+0x16c>
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009736:	b25b      	sxtb	r3, r3
 8009738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973c:	d103      	bne.n	8009746 <xQueueGenericSend+0x182>
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009746:	f002 fc85 	bl	800c054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800974a:	1d3a      	adds	r2, r7, #4
 800974c:	f107 0314 	add.w	r3, r7, #20
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fa9c 	bl	800ac90 <xTaskCheckForTimeOut>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d124      	bne.n	80097a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800975e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009760:	f000 fcf5 	bl	800a14e <prvIsQueueFull>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d018      	beq.n	800979c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	3310      	adds	r3, #16
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f001 f9c2 	bl	800aafc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800977a:	f000 fc80 	bl	800a07e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800977e:	f000 fff1 	bl	800a764 <xTaskResumeAll>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	f47f af7c 	bne.w	8009682 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800978a:	4b0c      	ldr	r3, [pc, #48]	; (80097bc <xQueueGenericSend+0x1f8>)
 800978c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	e772      	b.n	8009682 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800979c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800979e:	f000 fc6e 	bl	800a07e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097a2:	f000 ffdf 	bl	800a764 <xTaskResumeAll>
 80097a6:	e76c      	b.n	8009682 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097aa:	f000 fc68 	bl	800a07e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097ae:	f000 ffd9 	bl	800a764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3738      	adds	r7, #56	; 0x38
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	e000ed04 	.word	0xe000ed04

080097c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b090      	sub	sp, #64	; 0x40
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d103      	bne.n	80097fc <xQueueGenericSendFromISR+0x3c>
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <xQueueGenericSendFromISR+0x40>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <xQueueGenericSendFromISR+0x42>
 8009800:	2300      	movs	r3, #0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d103      	bne.n	800982a <xQueueGenericSendFromISR+0x6a>
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <xQueueGenericSendFromISR+0x6e>
 800982a:	2301      	movs	r3, #1
 800982c:	e000      	b.n	8009830 <xQueueGenericSendFromISR+0x70>
 800982e:	2300      	movs	r3, #0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	623b      	str	r3, [r7, #32]
}
 8009846:	bf00      	nop
 8009848:	e7fe      	b.n	8009848 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800984a:	f002 fcb5 	bl	800c1b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800984e:	f3ef 8211 	mrs	r2, BASEPRI
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	61fa      	str	r2, [r7, #28]
 8009864:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009866:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009872:	429a      	cmp	r2, r3
 8009874:	d302      	bcc.n	800987c <xQueueGenericSendFromISR+0xbc>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b02      	cmp	r3, #2
 800987a:	d12f      	bne.n	80098dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009892:	f000 fb64 	bl	8009f5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009896:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989e:	d112      	bne.n	80098c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d016      	beq.n	80098d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 f975 	bl	800ab9c <xTaskRemoveFromEventList>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00e      	beq.n	80098d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00b      	beq.n	80098d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	e007      	b.n	80098d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ca:	3301      	adds	r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	b25a      	sxtb	r2, r3
 80098d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098d6:	2301      	movs	r3, #1
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80098da:	e001      	b.n	80098e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098dc:	2300      	movs	r3, #0
 80098de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3740      	adds	r7, #64	; 0x40
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b08e      	sub	sp, #56	; 0x38
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10a      	bne.n	8009920 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	623b      	str	r3, [r7, #32]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00a      	beq.n	800993e <xQueueGiveFromISR+0x48>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	61fb      	str	r3, [r7, #28]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d103      	bne.n	800994e <xQueueGiveFromISR+0x58>
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <xQueueGiveFromISR+0x5c>
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <xQueueGiveFromISR+0x5e>
 8009952:	2300      	movs	r3, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	61bb      	str	r3, [r7, #24]
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800996e:	f002 fc23 	bl	800c1b8 <vPortValidateInterruptPriority>
	__asm volatile
 8009972:	f3ef 8211 	mrs	r2, BASEPRI
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	617a      	str	r2, [r7, #20]
 8009988:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800998a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800998c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800999a:	429a      	cmp	r2, r3
 800999c:	d22b      	bcs.n	80099f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d112      	bne.n	80099e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d016      	beq.n	80099f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	3324      	adds	r3, #36	; 0x24
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 f8e8 	bl	800ab9c <xTaskRemoveFromEventList>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00e      	beq.n	80099f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00b      	beq.n	80099f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2201      	movs	r2, #1
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	e007      	b.n	80099f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e4:	3301      	adds	r3, #1
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	b25a      	sxtb	r2, r3
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099f0:	2301      	movs	r3, #1
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
 80099f4:	e001      	b.n	80099fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f383 8811 	msr	BASEPRI, r3
}
 8009a04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3738      	adds	r7, #56	; 0x38
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08c      	sub	sp, #48	; 0x30
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10a      	bne.n	8009a40 <xQueueReceive+0x30>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	623b      	str	r3, [r7, #32]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <xQueueReceive+0x3e>
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <xQueueReceive+0x42>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e000      	b.n	8009a54 <xQueueReceive+0x44>
 8009a52:	2300      	movs	r3, #0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <xQueueReceive+0x5e>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	61fb      	str	r3, [r7, #28]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a6e:	f001 fa67 	bl	800af40 <xTaskGetSchedulerState>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <xQueueReceive+0x6e>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <xQueueReceive+0x72>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e000      	b.n	8009a84 <xQueueReceive+0x74>
 8009a82:	2300      	movs	r3, #0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <xQueueReceive+0x8e>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	61bb      	str	r3, [r7, #24]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a9e:	f002 faa9 	bl	800bff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01f      	beq.n	8009aee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab2:	f000 fabe 	bl	800a032 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	1e5a      	subs	r2, r3, #1
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00f      	beq.n	8009ae6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	3310      	adds	r3, #16
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 f866 	bl	800ab9c <xTaskRemoveFromEventList>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d007      	beq.n	8009ae6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ad6:	4b3d      	ldr	r3, [pc, #244]	; (8009bcc <xQueueReceive+0x1bc>)
 8009ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ae6:	f002 fab5 	bl	800c054 <vPortExitCritical>
				return pdPASS;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e069      	b.n	8009bc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009af4:	f002 faae 	bl	800c054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009af8:	2300      	movs	r3, #0
 8009afa:	e062      	b.n	8009bc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d106      	bne.n	8009b10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b02:	f107 0310 	add.w	r3, r7, #16
 8009b06:	4618      	mov	r0, r3
 8009b08:	f001 f8ac 	bl	800ac64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b10:	f002 faa0 	bl	800c054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b14:	f000 fe18 	bl	800a748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b18:	f002 fa6c 	bl	800bff4 <vPortEnterCritical>
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b22:	b25b      	sxtb	r3, r3
 8009b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b28:	d103      	bne.n	8009b32 <xQueueReceive+0x122>
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b38:	b25b      	sxtb	r3, r3
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	d103      	bne.n	8009b48 <xQueueReceive+0x138>
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b48:	f002 fa84 	bl	800c054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b4c:	1d3a      	adds	r2, r7, #4
 8009b4e:	f107 0310 	add.w	r3, r7, #16
 8009b52:	4611      	mov	r1, r2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 f89b 	bl	800ac90 <xTaskCheckForTimeOut>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d123      	bne.n	8009ba8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b62:	f000 fade 	bl	800a122 <prvIsQueueEmpty>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d017      	beq.n	8009b9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	3324      	adds	r3, #36	; 0x24
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 ffc1 	bl	800aafc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b7c:	f000 fa7f 	bl	800a07e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b80:	f000 fdf0 	bl	800a764 <xTaskResumeAll>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d189      	bne.n	8009a9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <xQueueReceive+0x1bc>)
 8009b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	e780      	b.n	8009a9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b9e:	f000 fa6e 	bl	800a07e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ba2:	f000 fddf 	bl	800a764 <xTaskResumeAll>
 8009ba6:	e77a      	b.n	8009a9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009baa:	f000 fa68 	bl	800a07e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bae:	f000 fdd9 	bl	800a764 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb4:	f000 fab5 	bl	800a122 <prvIsQueueEmpty>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f43f af6f 	beq.w	8009a9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3730      	adds	r7, #48	; 0x30
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	e000ed04 	.word	0xe000ed04

08009bd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08e      	sub	sp, #56	; 0x38
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10a      	bne.n	8009c02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	623b      	str	r3, [r7, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	61fb      	str	r3, [r7, #28]
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c20:	f001 f98e 	bl	800af40 <xTaskGetSchedulerState>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <xQueueSemaphoreTake+0x60>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <xQueueSemaphoreTake+0x64>
 8009c30:	2301      	movs	r3, #1
 8009c32:	e000      	b.n	8009c36 <xQueueSemaphoreTake+0x66>
 8009c34:	2300      	movs	r3, #0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10a      	bne.n	8009c50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	61bb      	str	r3, [r7, #24]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c50:	f002 f9d0 	bl	800bff4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d024      	beq.n	8009caa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	1e5a      	subs	r2, r3, #1
 8009c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c70:	f001 fadc 	bl	800b22c <pvTaskIncrementMutexHeldCount>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00f      	beq.n	8009ca2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	3310      	adds	r3, #16
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 ff88 	bl	800ab9c <xTaskRemoveFromEventList>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d007      	beq.n	8009ca2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c92:	4b54      	ldr	r3, [pc, #336]	; (8009de4 <xQueueSemaphoreTake+0x214>)
 8009c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ca2:	f002 f9d7 	bl	800c054 <vPortExitCritical>
				return pdPASS;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e097      	b.n	8009dda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d111      	bne.n	8009cd4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	617b      	str	r3, [r7, #20]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009ccc:	f002 f9c2 	bl	800c054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	e082      	b.n	8009dda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d106      	bne.n	8009ce8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cda:	f107 030c 	add.w	r3, r7, #12
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 ffc0 	bl	800ac64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ce8:	f002 f9b4 	bl	800c054 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cec:	f000 fd2c 	bl	800a748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cf0:	f002 f980 	bl	800bff4 <vPortEnterCritical>
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cfa:	b25b      	sxtb	r3, r3
 8009cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d00:	d103      	bne.n	8009d0a <xQueueSemaphoreTake+0x13a>
 8009d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d10:	b25b      	sxtb	r3, r3
 8009d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d16:	d103      	bne.n	8009d20 <xQueueSemaphoreTake+0x150>
 8009d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d20:	f002 f998 	bl	800c054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d24:	463a      	mov	r2, r7
 8009d26:	f107 030c 	add.w	r3, r7, #12
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 ffaf 	bl	800ac90 <xTaskCheckForTimeOut>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d132      	bne.n	8009d9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d3a:	f000 f9f2 	bl	800a122 <prvIsQueueEmpty>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d026      	beq.n	8009d92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d109      	bne.n	8009d60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009d4c:	f002 f952 	bl	800bff4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f001 f911 	bl	800af7c <xTaskPriorityInherit>
 8009d5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009d5c:	f002 f97a 	bl	800c054 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	3324      	adds	r3, #36	; 0x24
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	4611      	mov	r1, r2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fec7 	bl	800aafc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d70:	f000 f985 	bl	800a07e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d74:	f000 fcf6 	bl	800a764 <xTaskResumeAll>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f47f af68 	bne.w	8009c50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009d80:	4b18      	ldr	r3, [pc, #96]	; (8009de4 <xQueueSemaphoreTake+0x214>)
 8009d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	e75e      	b.n	8009c50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d94:	f000 f973 	bl	800a07e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d98:	f000 fce4 	bl	800a764 <xTaskResumeAll>
 8009d9c:	e758      	b.n	8009c50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009da0:	f000 f96d 	bl	800a07e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009da4:	f000 fcde 	bl	800a764 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009daa:	f000 f9ba 	bl	800a122 <prvIsQueueEmpty>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f43f af4d 	beq.w	8009c50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00d      	beq.n	8009dd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009dbc:	f002 f91a 	bl	800bff4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dc2:	f000 f8b4 	bl	8009f2e <prvGetDisinheritPriorityAfterTimeout>
 8009dc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f001 f9aa 	bl	800b128 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009dd4:	f002 f93e 	bl	800c054 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009dd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3738      	adds	r7, #56	; 0x38
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08e      	sub	sp, #56	; 0x38
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	623b      	str	r3, [r7, #32]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <xQueueReceiveFromISR+0x3a>
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <xQueueReceiveFromISR+0x3e>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <xQueueReceiveFromISR+0x40>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	61fb      	str	r3, [r7, #28]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e42:	f002 f9b9 	bl	800c1b8 <vPortValidateInterruptPriority>
	__asm volatile
 8009e46:	f3ef 8211 	mrs	r2, BASEPRI
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	61ba      	str	r2, [r7, #24]
 8009e5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d02f      	beq.n	8009ece <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e7c:	f000 f8d9 	bl	800a032 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	1e5a      	subs	r2, r3, #1
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d112      	bne.n	8009eb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d016      	beq.n	8009ec8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	3310      	adds	r3, #16
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fe7c 	bl	800ab9c <xTaskRemoveFromEventList>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00e      	beq.n	8009ec8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00b      	beq.n	8009ec8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	e007      	b.n	8009ec8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	b25a      	sxtb	r2, r3
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	637b      	str	r3, [r7, #52]	; 0x34
 8009ecc:	e001      	b.n	8009ed2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f383 8811 	msr	BASEPRI, r3
}
 8009edc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3738      	adds	r7, #56	; 0x38
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <vQueueDelete+0x28>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	60bb      	str	r3, [r7, #8]
}
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f95f 	bl	800a1d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f002 fa55 	bl	800c3d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d006      	beq.n	8009f4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	e001      	b.n	8009f50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f50:	68fb      	ldr	r3, [r7, #12]
	}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b086      	sub	sp, #24
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10d      	bne.n	8009f98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d14d      	bne.n	800a020 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f001 f85f 	bl	800b04c <xTaskPriorityDisinherit>
 8009f8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	609a      	str	r2, [r3, #8]
 8009f96:	e043      	b.n	800a020 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d119      	bne.n	8009fd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6858      	ldr	r0, [r3, #4]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	f002 feeb 	bl	800cd84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	441a      	add	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d32b      	bcc.n	800a020 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	605a      	str	r2, [r3, #4]
 8009fd0:	e026      	b.n	800a020 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68d8      	ldr	r0, [r3, #12]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	461a      	mov	r2, r3
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	f002 fed1 	bl	800cd84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	425b      	negs	r3, r3
 8009fec:	441a      	add	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d207      	bcs.n	800a00e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	425b      	negs	r3, r3
 800a008:	441a      	add	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d105      	bne.n	800a020 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a028:	697b      	ldr	r3, [r7, #20]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	2b00      	cmp	r3, #0
 800a042:	d018      	beq.n	800a076 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04c:	441a      	add	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d303      	bcc.n	800a066 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68d9      	ldr	r1, [r3, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	461a      	mov	r2, r3
 800a070:	6838      	ldr	r0, [r7, #0]
 800a072:	f002 fe87 	bl	800cd84 <memcpy>
	}
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a086:	f001 ffb5 	bl	800bff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a090:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a092:	e011      	b.n	800a0b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d012      	beq.n	800a0c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3324      	adds	r3, #36	; 0x24
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 fd7b 	bl	800ab9c <xTaskRemoveFromEventList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0ac:	f000 fe52 	bl	800ad54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dce9      	bgt.n	800a094 <prvUnlockQueue+0x16>
 800a0c0:	e000      	b.n	800a0c4 <prvUnlockQueue+0x46>
					break;
 800a0c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	22ff      	movs	r2, #255	; 0xff
 800a0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0cc:	f001 ffc2 	bl	800c054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0d0:	f001 ff90 	bl	800bff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0dc:	e011      	b.n	800a102 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d012      	beq.n	800a10c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	3310      	adds	r3, #16
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fd56 	bl	800ab9c <xTaskRemoveFromEventList>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0f6:	f000 fe2d 	bl	800ad54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a106:	2b00      	cmp	r3, #0
 800a108:	dce9      	bgt.n	800a0de <prvUnlockQueue+0x60>
 800a10a:	e000      	b.n	800a10e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a10c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	22ff      	movs	r2, #255	; 0xff
 800a112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a116:	f001 ff9d 	bl	800c054 <vPortExitCritical>
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a12a:	f001 ff63 	bl	800bff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a136:	2301      	movs	r3, #1
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	e001      	b.n	800a140 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a140:	f001 ff88 	bl	800c054 <vPortExitCritical>

	return xReturn;
 800a144:	68fb      	ldr	r3, [r7, #12]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a156:	f001 ff4d 	bl	800bff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a162:	429a      	cmp	r2, r3
 800a164:	d102      	bne.n	800a16c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a166:	2301      	movs	r3, #1
 800a168:	60fb      	str	r3, [r7, #12]
 800a16a:	e001      	b.n	800a170 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a170:	f001 ff70 	bl	800c054 <vPortExitCritical>

	return xReturn;
 800a174:	68fb      	ldr	r3, [r7, #12]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a18a:	2300      	movs	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	e014      	b.n	800a1ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a190:	4a0f      	ldr	r2, [pc, #60]	; (800a1d0 <vQueueAddToRegistry+0x50>)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10b      	bne.n	800a1b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a19c:	490c      	ldr	r1, [pc, #48]	; (800a1d0 <vQueueAddToRegistry+0x50>)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a1a6:	4a0a      	ldr	r2, [pc, #40]	; (800a1d0 <vQueueAddToRegistry+0x50>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1b2:	e006      	b.n	800a1c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b07      	cmp	r3, #7
 800a1be:	d9e7      	bls.n	800a190 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	20002130 	.word	0x20002130

0800a1d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	e016      	b.n	800a210 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a1e2:	4a10      	ldr	r2, [pc, #64]	; (800a224 <vQueueUnregisterQueue+0x50>)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d10b      	bne.n	800a20a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a1f2:	4a0c      	ldr	r2, [pc, #48]	; (800a224 <vQueueUnregisterQueue+0x50>)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a1fc:	4a09      	ldr	r2, [pc, #36]	; (800a224 <vQueueUnregisterQueue+0x50>)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	00db      	lsls	r3, r3, #3
 800a202:	4413      	add	r3, r2
 800a204:	2200      	movs	r2, #0
 800a206:	605a      	str	r2, [r3, #4]
				break;
 800a208:	e006      	b.n	800a218 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b07      	cmp	r3, #7
 800a214:	d9e5      	bls.n	800a1e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	20002130 	.word	0x20002130

0800a228 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a238:	f001 fedc 	bl	800bff4 <vPortEnterCritical>
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a242:	b25b      	sxtb	r3, r3
 800a244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a248:	d103      	bne.n	800a252 <vQueueWaitForMessageRestricted+0x2a>
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a258:	b25b      	sxtb	r3, r3
 800a25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25e:	d103      	bne.n	800a268 <vQueueWaitForMessageRestricted+0x40>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a268:	f001 fef4 	bl	800c054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	3324      	adds	r3, #36	; 0x24
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 fc61 	bl	800ab44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a282:	6978      	ldr	r0, [r7, #20]
 800a284:	f7ff fefb 	bl	800a07e <prvUnlockQueue>
	}
 800a288:	bf00      	nop
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08e      	sub	sp, #56	; 0x38
 800a294:	af04      	add	r7, sp, #16
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
 800a29c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10a      	bne.n	800a2ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	623b      	str	r3, [r7, #32]
}
 800a2b6:	bf00      	nop
 800a2b8:	e7fe      	b.n	800a2b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10a      	bne.n	800a2d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	61fb      	str	r3, [r7, #28]
}
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2d6:	23bc      	movs	r3, #188	; 0xbc
 800a2d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	2bbc      	cmp	r3, #188	; 0xbc
 800a2de:	d00a      	beq.n	800a2f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	61bb      	str	r3, [r7, #24]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d01e      	beq.n	800a33c <xTaskCreateStatic+0xac>
 800a2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a300:	2b00      	cmp	r3, #0
 800a302:	d01b      	beq.n	800a33c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a30c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	2202      	movs	r2, #2
 800a312:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a316:	2300      	movs	r3, #0
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	68b9      	ldr	r1, [r7, #8]
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 f850 	bl	800a3d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a336:	f000 f8f3 	bl	800a520 <prvAddNewTaskToReadyList>
 800a33a:	e001      	b.n	800a340 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a340:	697b      	ldr	r3, [r7, #20]
	}
 800a342:	4618      	mov	r0, r3
 800a344:	3728      	adds	r7, #40	; 0x28
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b08c      	sub	sp, #48	; 0x30
 800a34e:	af04      	add	r7, sp, #16
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	603b      	str	r3, [r7, #0]
 800a356:	4613      	mov	r3, r2
 800a358:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a35a:	88fb      	ldrh	r3, [r7, #6]
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 ff6a 	bl	800c238 <pvPortMalloc>
 800a364:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00e      	beq.n	800a38a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a36c:	20bc      	movs	r0, #188	; 0xbc
 800a36e:	f001 ff63 	bl	800c238 <pvPortMalloc>
 800a372:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	631a      	str	r2, [r3, #48]	; 0x30
 800a380:	e005      	b.n	800a38e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a382:	6978      	ldr	r0, [r7, #20]
 800a384:	f002 f824 	bl	800c3d0 <vPortFree>
 800a388:	e001      	b.n	800a38e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d017      	beq.n	800a3c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a39c:	88fa      	ldrh	r2, [r7, #6]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9303      	str	r3, [sp, #12]
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	9302      	str	r3, [sp, #8]
 800a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a8:	9301      	str	r3, [sp, #4]
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68b9      	ldr	r1, [r7, #8]
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 f80e 	bl	800a3d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3b8:	69f8      	ldr	r0, [r7, #28]
 800a3ba:	f000 f8b1 	bl	800a520 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	e002      	b.n	800a3ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3720      	adds	r7, #32
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	21a5      	movs	r1, #165	; 0xa5
 800a3ee:	f002 fcd7 	bl	800cda0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	617b      	str	r3, [r7, #20]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d01f      	beq.n	800a472 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a432:	2300      	movs	r3, #0
 800a434:	61fb      	str	r3, [r7, #28]
 800a436:	e012      	b.n	800a45e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	4413      	add	r3, r2
 800a43e:	7819      	ldrb	r1, [r3, #0]
 800a440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	4413      	add	r3, r2
 800a446:	3334      	adds	r3, #52	; 0x34
 800a448:	460a      	mov	r2, r1
 800a44a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d006      	beq.n	800a466 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	3301      	adds	r3, #1
 800a45c:	61fb      	str	r3, [r7, #28]
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	2b0f      	cmp	r3, #15
 800a462:	d9e9      	bls.n	800a438 <prvInitialiseNewTask+0x64>
 800a464:	e000      	b.n	800a468 <prvInitialiseNewTask+0x94>
			{
				break;
 800a466:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a470:	e003      	b.n	800a47a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	2b37      	cmp	r3, #55	; 0x37
 800a47e:	d901      	bls.n	800a484 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a480:	2337      	movs	r3, #55	; 0x37
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a488:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a48e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	2200      	movs	r2, #0
 800a494:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	3304      	adds	r3, #4
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe fda0 	bl	8008fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a2:	3318      	adds	r3, #24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fd9b 	bl	8008fe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d2:	3354      	adds	r3, #84	; 0x54
 800a4d4:	2260      	movs	r2, #96	; 0x60
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f002 fc61 	bl	800cda0 <memset>
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	4a0c      	ldr	r2, [pc, #48]	; (800a514 <prvInitialiseNewTask+0x140>)
 800a4e2:	659a      	str	r2, [r3, #88]	; 0x58
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	4a0c      	ldr	r2, [pc, #48]	; (800a518 <prvInitialiseNewTask+0x144>)
 800a4e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	4a0b      	ldr	r2, [pc, #44]	; (800a51c <prvInitialiseNewTask+0x148>)
 800a4ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	68f9      	ldr	r1, [r7, #12]
 800a4f4:	69b8      	ldr	r0, [r7, #24]
 800a4f6:	f001 fc51 	bl	800bd9c <pxPortInitialiseStack>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a50c:	bf00      	nop
 800a50e:	3720      	adds	r7, #32
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	0800f808 	.word	0x0800f808
 800a518:	0800f828 	.word	0x0800f828
 800a51c:	0800f7e8 	.word	0x0800f7e8

0800a520 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a528:	f001 fd64 	bl	800bff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a52c:	4b2d      	ldr	r3, [pc, #180]	; (800a5e4 <prvAddNewTaskToReadyList+0xc4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3301      	adds	r3, #1
 800a532:	4a2c      	ldr	r2, [pc, #176]	; (800a5e4 <prvAddNewTaskToReadyList+0xc4>)
 800a534:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a536:	4b2c      	ldr	r3, [pc, #176]	; (800a5e8 <prvAddNewTaskToReadyList+0xc8>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a53e:	4a2a      	ldr	r2, [pc, #168]	; (800a5e8 <prvAddNewTaskToReadyList+0xc8>)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a544:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <prvAddNewTaskToReadyList+0xc4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d110      	bne.n	800a56e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a54c:	f000 fc26 	bl	800ad9c <prvInitialiseTaskLists>
 800a550:	e00d      	b.n	800a56e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a552:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <prvAddNewTaskToReadyList+0xcc>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d109      	bne.n	800a56e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a55a:	4b23      	ldr	r3, [pc, #140]	; (800a5e8 <prvAddNewTaskToReadyList+0xc8>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	429a      	cmp	r2, r3
 800a566:	d802      	bhi.n	800a56e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a568:	4a1f      	ldr	r2, [pc, #124]	; (800a5e8 <prvAddNewTaskToReadyList+0xc8>)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a56e:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <prvAddNewTaskToReadyList+0xd0>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3301      	adds	r3, #1
 800a574:	4a1e      	ldr	r2, [pc, #120]	; (800a5f0 <prvAddNewTaskToReadyList+0xd0>)
 800a576:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a578:	4b1d      	ldr	r3, [pc, #116]	; (800a5f0 <prvAddNewTaskToReadyList+0xd0>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a584:	4b1b      	ldr	r3, [pc, #108]	; (800a5f4 <prvAddNewTaskToReadyList+0xd4>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d903      	bls.n	800a594 <prvAddNewTaskToReadyList+0x74>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a590:	4a18      	ldr	r2, [pc, #96]	; (800a5f4 <prvAddNewTaskToReadyList+0xd4>)
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	4613      	mov	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <prvAddNewTaskToReadyList+0xd8>)
 800a5a2:	441a      	add	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f7fe fd25 	bl	8008ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5b0:	f001 fd50 	bl	800c054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <prvAddNewTaskToReadyList+0xcc>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00e      	beq.n	800a5da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <prvAddNewTaskToReadyList+0xc8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d207      	bcs.n	800a5da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5ca:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <prvAddNewTaskToReadyList+0xdc>)
 800a5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20002644 	.word	0x20002644
 800a5e8:	20002170 	.word	0x20002170
 800a5ec:	20002650 	.word	0x20002650
 800a5f0:	20002660 	.word	0x20002660
 800a5f4:	2000264c 	.word	0x2000264c
 800a5f8:	20002174 	.word	0x20002174
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d017      	beq.n	800a642 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a612:	4b13      	ldr	r3, [pc, #76]	; (800a660 <vTaskDelay+0x60>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <vTaskDelay+0x30>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	60bb      	str	r3, [r7, #8]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a630:	f000 f88a 	bl	800a748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a634:	2100      	movs	r1, #0
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f001 f80e 	bl	800b658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a63c:	f000 f892 	bl	800a764 <xTaskResumeAll>
 800a640:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d107      	bne.n	800a658 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a648:	4b06      	ldr	r3, [pc, #24]	; (800a664 <vTaskDelay+0x64>)
 800a64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a64e:	601a      	str	r2, [r3, #0]
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a658:	bf00      	nop
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	2000266c 	.word	0x2000266c
 800a664:	e000ed04 	.word	0xe000ed04

0800a668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08a      	sub	sp, #40	; 0x28
 800a66c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a672:	2300      	movs	r3, #0
 800a674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a676:	463a      	mov	r2, r7
 800a678:	1d39      	adds	r1, r7, #4
 800a67a:	f107 0308 	add.w	r3, r7, #8
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fc5a 	bl	8008f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	9202      	str	r2, [sp, #8]
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	2300      	movs	r3, #0
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	2300      	movs	r3, #0
 800a694:	460a      	mov	r2, r1
 800a696:	4924      	ldr	r1, [pc, #144]	; (800a728 <vTaskStartScheduler+0xc0>)
 800a698:	4824      	ldr	r0, [pc, #144]	; (800a72c <vTaskStartScheduler+0xc4>)
 800a69a:	f7ff fdf9 	bl	800a290 <xTaskCreateStatic>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4a23      	ldr	r2, [pc, #140]	; (800a730 <vTaskStartScheduler+0xc8>)
 800a6a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6a4:	4b22      	ldr	r3, [pc, #136]	; (800a730 <vTaskStartScheduler+0xc8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	617b      	str	r3, [r7, #20]
 800a6b0:	e001      	b.n	800a6b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d102      	bne.n	800a6c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6bc:	f001 f820 	bl	800b700 <xTimerCreateTimerTask>
 800a6c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d11b      	bne.n	800a700 <vTaskStartScheduler+0x98>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	613b      	str	r3, [r7, #16]
}
 800a6da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6dc:	4b15      	ldr	r3, [pc, #84]	; (800a734 <vTaskStartScheduler+0xcc>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3354      	adds	r3, #84	; 0x54
 800a6e2:	4a15      	ldr	r2, [pc, #84]	; (800a738 <vTaskStartScheduler+0xd0>)
 800a6e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <vTaskStartScheduler+0xd4>)
 800a6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6ee:	4b14      	ldr	r3, [pc, #80]	; (800a740 <vTaskStartScheduler+0xd8>)
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6f4:	4b13      	ldr	r3, [pc, #76]	; (800a744 <vTaskStartScheduler+0xdc>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6fa:	f001 fbd9 	bl	800beb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6fe:	e00e      	b.n	800a71e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a706:	d10a      	bne.n	800a71e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60fb      	str	r3, [r7, #12]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <vTaskStartScheduler+0xb4>
}
 800a71e:	bf00      	nop
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	0800f0f0 	.word	0x0800f0f0
 800a72c:	0800ad6d 	.word	0x0800ad6d
 800a730:	20002668 	.word	0x20002668
 800a734:	20002170 	.word	0x20002170
 800a738:	20000118 	.word	0x20000118
 800a73c:	20002664 	.word	0x20002664
 800a740:	20002650 	.word	0x20002650
 800a744:	20002648 	.word	0x20002648

0800a748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a748:	b480      	push	{r7}
 800a74a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a74c:	4b04      	ldr	r3, [pc, #16]	; (800a760 <vTaskSuspendAll+0x18>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	4a03      	ldr	r2, [pc, #12]	; (800a760 <vTaskSuspendAll+0x18>)
 800a754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a756:	bf00      	nop
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	2000266c 	.word	0x2000266c

0800a764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a76e:	2300      	movs	r3, #0
 800a770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a772:	4b42      	ldr	r3, [pc, #264]	; (800a87c <xTaskResumeAll+0x118>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10a      	bne.n	800a790 <xTaskResumeAll+0x2c>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	603b      	str	r3, [r7, #0]
}
 800a78c:	bf00      	nop
 800a78e:	e7fe      	b.n	800a78e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a790:	f001 fc30 	bl	800bff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a794:	4b39      	ldr	r3, [pc, #228]	; (800a87c <xTaskResumeAll+0x118>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3b01      	subs	r3, #1
 800a79a:	4a38      	ldr	r2, [pc, #224]	; (800a87c <xTaskResumeAll+0x118>)
 800a79c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a79e:	4b37      	ldr	r3, [pc, #220]	; (800a87c <xTaskResumeAll+0x118>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d162      	bne.n	800a86c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7a6:	4b36      	ldr	r3, [pc, #216]	; (800a880 <xTaskResumeAll+0x11c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d05e      	beq.n	800a86c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7ae:	e02f      	b.n	800a810 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b0:	4b34      	ldr	r3, [pc, #208]	; (800a884 <xTaskResumeAll+0x120>)
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3318      	adds	r3, #24
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fe fc79 	bl	80090b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fc74 	bl	80090b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d0:	4b2d      	ldr	r3, [pc, #180]	; (800a888 <xTaskResumeAll+0x124>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d903      	bls.n	800a7e0 <xTaskResumeAll+0x7c>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	4a2a      	ldr	r2, [pc, #168]	; (800a888 <xTaskResumeAll+0x124>)
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4a27      	ldr	r2, [pc, #156]	; (800a88c <xTaskResumeAll+0x128>)
 800a7ee:	441a      	add	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	f7fe fbff 	bl	8008ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a800:	4b23      	ldr	r3, [pc, #140]	; (800a890 <xTaskResumeAll+0x12c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	429a      	cmp	r2, r3
 800a808:	d302      	bcc.n	800a810 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a80a:	4b22      	ldr	r3, [pc, #136]	; (800a894 <xTaskResumeAll+0x130>)
 800a80c:	2201      	movs	r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a810:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <xTaskResumeAll+0x120>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1cb      	bne.n	800a7b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a81e:	f000 fb5f 	bl	800aee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a822:	4b1d      	ldr	r3, [pc, #116]	; (800a898 <xTaskResumeAll+0x134>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d010      	beq.n	800a850 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a82e:	f000 f847 	bl	800a8c0 <xTaskIncrementTick>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a838:	4b16      	ldr	r3, [pc, #88]	; (800a894 <xTaskResumeAll+0x130>)
 800a83a:	2201      	movs	r2, #1
 800a83c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3b01      	subs	r3, #1
 800a842:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1f1      	bne.n	800a82e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a84a:	4b13      	ldr	r3, [pc, #76]	; (800a898 <xTaskResumeAll+0x134>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a850:	4b10      	ldr	r3, [pc, #64]	; (800a894 <xTaskResumeAll+0x130>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a858:	2301      	movs	r3, #1
 800a85a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a85c:	4b0f      	ldr	r3, [pc, #60]	; (800a89c <xTaskResumeAll+0x138>)
 800a85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a86c:	f001 fbf2 	bl	800c054 <vPortExitCritical>

	return xAlreadyYielded;
 800a870:	68bb      	ldr	r3, [r7, #8]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	2000266c 	.word	0x2000266c
 800a880:	20002644 	.word	0x20002644
 800a884:	20002604 	.word	0x20002604
 800a888:	2000264c 	.word	0x2000264c
 800a88c:	20002174 	.word	0x20002174
 800a890:	20002170 	.word	0x20002170
 800a894:	20002658 	.word	0x20002658
 800a898:	20002654 	.word	0x20002654
 800a89c:	e000ed04 	.word	0xe000ed04

0800a8a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8a6:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <xTaskGetTickCount+0x1c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8ac:	687b      	ldr	r3, [r7, #4]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	20002648 	.word	0x20002648

0800a8c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ca:	4b4f      	ldr	r3, [pc, #316]	; (800aa08 <xTaskIncrementTick+0x148>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f040 808f 	bne.w	800a9f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8d4:	4b4d      	ldr	r3, [pc, #308]	; (800aa0c <xTaskIncrementTick+0x14c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8dc:	4a4b      	ldr	r2, [pc, #300]	; (800aa0c <xTaskIncrementTick+0x14c>)
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d120      	bne.n	800a92a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8e8:	4b49      	ldr	r3, [pc, #292]	; (800aa10 <xTaskIncrementTick+0x150>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <xTaskIncrementTick+0x48>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	603b      	str	r3, [r7, #0]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xTaskIncrementTick+0x46>
 800a908:	4b41      	ldr	r3, [pc, #260]	; (800aa10 <xTaskIncrementTick+0x150>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	4b41      	ldr	r3, [pc, #260]	; (800aa14 <xTaskIncrementTick+0x154>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a3f      	ldr	r2, [pc, #252]	; (800aa10 <xTaskIncrementTick+0x150>)
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	4a3f      	ldr	r2, [pc, #252]	; (800aa14 <xTaskIncrementTick+0x154>)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	4b3e      	ldr	r3, [pc, #248]	; (800aa18 <xTaskIncrementTick+0x158>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3301      	adds	r3, #1
 800a922:	4a3d      	ldr	r2, [pc, #244]	; (800aa18 <xTaskIncrementTick+0x158>)
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	f000 fadb 	bl	800aee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a92a:	4b3c      	ldr	r3, [pc, #240]	; (800aa1c <xTaskIncrementTick+0x15c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	429a      	cmp	r2, r3
 800a932:	d349      	bcc.n	800a9c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a934:	4b36      	ldr	r3, [pc, #216]	; (800aa10 <xTaskIncrementTick+0x150>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d104      	bne.n	800a948 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a93e:	4b37      	ldr	r3, [pc, #220]	; (800aa1c <xTaskIncrementTick+0x15c>)
 800a940:	f04f 32ff 	mov.w	r2, #4294967295
 800a944:	601a      	str	r2, [r3, #0]
					break;
 800a946:	e03f      	b.n	800a9c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a948:	4b31      	ldr	r3, [pc, #196]	; (800aa10 <xTaskIncrementTick+0x150>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d203      	bcs.n	800a968 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a960:	4a2e      	ldr	r2, [pc, #184]	; (800aa1c <xTaskIncrementTick+0x15c>)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a966:	e02f      	b.n	800a9c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe fba1 	bl	80090b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a976:	2b00      	cmp	r3, #0
 800a978:	d004      	beq.n	800a984 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	3318      	adds	r3, #24
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fb98 	bl	80090b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a988:	4b25      	ldr	r3, [pc, #148]	; (800aa20 <xTaskIncrementTick+0x160>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d903      	bls.n	800a998 <xTaskIncrementTick+0xd8>
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a994:	4a22      	ldr	r2, [pc, #136]	; (800aa20 <xTaskIncrementTick+0x160>)
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99c:	4613      	mov	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4a1f      	ldr	r2, [pc, #124]	; (800aa24 <xTaskIncrementTick+0x164>)
 800a9a6:	441a      	add	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	f7fe fb23 	bl	8008ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b8:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <xTaskIncrementTick+0x168>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d3b8      	bcc.n	800a934 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9c6:	e7b5      	b.n	800a934 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9c8:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <xTaskIncrementTick+0x168>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ce:	4915      	ldr	r1, [pc, #84]	; (800aa24 <xTaskIncrementTick+0x164>)
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	440b      	add	r3, r1
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d901      	bls.n	800a9e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9e4:	4b11      	ldr	r3, [pc, #68]	; (800aa2c <xTaskIncrementTick+0x16c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	617b      	str	r3, [r7, #20]
 800a9f0:	e004      	b.n	800a9fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9f2:	4b0f      	ldr	r3, [pc, #60]	; (800aa30 <xTaskIncrementTick+0x170>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	4a0d      	ldr	r2, [pc, #52]	; (800aa30 <xTaskIncrementTick+0x170>)
 800a9fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9fc:	697b      	ldr	r3, [r7, #20]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	2000266c 	.word	0x2000266c
 800aa0c:	20002648 	.word	0x20002648
 800aa10:	200025fc 	.word	0x200025fc
 800aa14:	20002600 	.word	0x20002600
 800aa18:	2000265c 	.word	0x2000265c
 800aa1c:	20002664 	.word	0x20002664
 800aa20:	2000264c 	.word	0x2000264c
 800aa24:	20002174 	.word	0x20002174
 800aa28:	20002170 	.word	0x20002170
 800aa2c:	20002658 	.word	0x20002658
 800aa30:	20002654 	.word	0x20002654

0800aa34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa3a:	4b2a      	ldr	r3, [pc, #168]	; (800aae4 <vTaskSwitchContext+0xb0>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa42:	4b29      	ldr	r3, [pc, #164]	; (800aae8 <vTaskSwitchContext+0xb4>)
 800aa44:	2201      	movs	r2, #1
 800aa46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa48:	e046      	b.n	800aad8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800aa4a:	4b27      	ldr	r3, [pc, #156]	; (800aae8 <vTaskSwitchContext+0xb4>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa50:	4b26      	ldr	r3, [pc, #152]	; (800aaec <vTaskSwitchContext+0xb8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e010      	b.n	800aa7a <vTaskSwitchContext+0x46>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10a      	bne.n	800aa74 <vTaskSwitchContext+0x40>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	607b      	str	r3, [r7, #4]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <vTaskSwitchContext+0x3e>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	491d      	ldr	r1, [pc, #116]	; (800aaf0 <vTaskSwitchContext+0xbc>)
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	440b      	add	r3, r1
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0e4      	beq.n	800aa58 <vTaskSwitchContext+0x24>
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4613      	mov	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4a15      	ldr	r2, [pc, #84]	; (800aaf0 <vTaskSwitchContext+0xbc>)
 800aa9a:	4413      	add	r3, r2
 800aa9c:	60bb      	str	r3, [r7, #8]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	605a      	str	r2, [r3, #4]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	3308      	adds	r3, #8
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d104      	bne.n	800aabe <vTaskSwitchContext+0x8a>
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	605a      	str	r2, [r3, #4]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	4a0b      	ldr	r2, [pc, #44]	; (800aaf4 <vTaskSwitchContext+0xc0>)
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	4a08      	ldr	r2, [pc, #32]	; (800aaec <vTaskSwitchContext+0xb8>)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aace:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <vTaskSwitchContext+0xc0>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3354      	adds	r3, #84	; 0x54
 800aad4:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <vTaskSwitchContext+0xc4>)
 800aad6:	6013      	str	r3, [r2, #0]
}
 800aad8:	bf00      	nop
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	2000266c 	.word	0x2000266c
 800aae8:	20002658 	.word	0x20002658
 800aaec:	2000264c 	.word	0x2000264c
 800aaf0:	20002174 	.word	0x20002174
 800aaf4:	20002170 	.word	0x20002170
 800aaf8:	20000118 	.word	0x20000118

0800aafc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60fb      	str	r3, [r7, #12]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab22:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <vTaskPlaceOnEventList+0x44>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3318      	adds	r3, #24
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7fe fa89 	bl	8009042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab30:	2101      	movs	r1, #1
 800ab32:	6838      	ldr	r0, [r7, #0]
 800ab34:	f000 fd90 	bl	800b658 <prvAddCurrentTaskToDelayedList>
}
 800ab38:	bf00      	nop
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	20002170 	.word	0x20002170

0800ab44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	617b      	str	r3, [r7, #20]
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3318      	adds	r3, #24
 800ab72:	4619      	mov	r1, r3
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7fe fa40 	bl	8008ffa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ab80:	f04f 33ff 	mov.w	r3, #4294967295
 800ab84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	68b8      	ldr	r0, [r7, #8]
 800ab8a:	f000 fd65 	bl	800b658 <prvAddCurrentTaskToDelayedList>
	}
 800ab8e:	bf00      	nop
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20002170 	.word	0x20002170

0800ab9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	60fb      	str	r3, [r7, #12]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	3318      	adds	r3, #24
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fe fa71 	bl	80090b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abd2:	4b1e      	ldr	r3, [pc, #120]	; (800ac4c <xTaskRemoveFromEventList+0xb0>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d11d      	bne.n	800ac16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	3304      	adds	r3, #4
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe fa68 	bl	80090b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe8:	4b19      	ldr	r3, [pc, #100]	; (800ac50 <xTaskRemoveFromEventList+0xb4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d903      	bls.n	800abf8 <xTaskRemoveFromEventList+0x5c>
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	4a16      	ldr	r2, [pc, #88]	; (800ac50 <xTaskRemoveFromEventList+0xb4>)
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfc:	4613      	mov	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4a13      	ldr	r2, [pc, #76]	; (800ac54 <xTaskRemoveFromEventList+0xb8>)
 800ac06:	441a      	add	r2, r3
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f7fe f9f3 	bl	8008ffa <vListInsertEnd>
 800ac14:	e005      	b.n	800ac22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	3318      	adds	r3, #24
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	480e      	ldr	r0, [pc, #56]	; (800ac58 <xTaskRemoveFromEventList+0xbc>)
 800ac1e:	f7fe f9ec 	bl	8008ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <xTaskRemoveFromEventList+0xc0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d905      	bls.n	800ac3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac30:	2301      	movs	r3, #1
 800ac32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac34:	4b0a      	ldr	r3, [pc, #40]	; (800ac60 <xTaskRemoveFromEventList+0xc4>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	e001      	b.n	800ac40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac40:	697b      	ldr	r3, [r7, #20]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	2000266c 	.word	0x2000266c
 800ac50:	2000264c 	.word	0x2000264c
 800ac54:	20002174 	.word	0x20002174
 800ac58:	20002604 	.word	0x20002604
 800ac5c:	20002170 	.word	0x20002170
 800ac60:	20002658 	.word	0x20002658

0800ac64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac6c:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <vTaskInternalSetTimeOutState+0x24>)
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac74:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <vTaskInternalSetTimeOutState+0x28>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	605a      	str	r2, [r3, #4]
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	2000265c 	.word	0x2000265c
 800ac8c:	20002648 	.word	0x20002648

0800ac90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	613b      	str	r3, [r7, #16]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60fb      	str	r3, [r7, #12]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800acd2:	f001 f98f 	bl	800bff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acd6:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <xTaskCheckForTimeOut+0xbc>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	69ba      	ldr	r2, [r7, #24]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acee:	d102      	bne.n	800acf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acf0:	2300      	movs	r3, #0
 800acf2:	61fb      	str	r3, [r7, #28]
 800acf4:	e023      	b.n	800ad3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	4b15      	ldr	r3, [pc, #84]	; (800ad50 <xTaskCheckForTimeOut+0xc0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d007      	beq.n	800ad12 <xTaskCheckForTimeOut+0x82>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d302      	bcc.n	800ad12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	61fb      	str	r3, [r7, #28]
 800ad10:	e015      	b.n	800ad3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d20b      	bcs.n	800ad34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	1ad2      	subs	r2, r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff ff9b 	bl	800ac64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	61fb      	str	r3, [r7, #28]
 800ad32:	e004      	b.n	800ad3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad3e:	f001 f989 	bl	800c054 <vPortExitCritical>

	return xReturn;
 800ad42:	69fb      	ldr	r3, [r7, #28]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3720      	adds	r7, #32
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20002648 	.word	0x20002648
 800ad50:	2000265c 	.word	0x2000265c

0800ad54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad54:	b480      	push	{r7}
 800ad56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad58:	4b03      	ldr	r3, [pc, #12]	; (800ad68 <vTaskMissedYield+0x14>)
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
}
 800ad5e:	bf00      	nop
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	20002658 	.word	0x20002658

0800ad6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad74:	f000 f852 	bl	800ae1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad78:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <prvIdleTask+0x28>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d9f9      	bls.n	800ad74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad80:	4b05      	ldr	r3, [pc, #20]	; (800ad98 <prvIdleTask+0x2c>)
 800ad82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad90:	e7f0      	b.n	800ad74 <prvIdleTask+0x8>
 800ad92:	bf00      	nop
 800ad94:	20002174 	.word	0x20002174
 800ad98:	e000ed04 	.word	0xe000ed04

0800ad9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ada2:	2300      	movs	r3, #0
 800ada4:	607b      	str	r3, [r7, #4]
 800ada6:	e00c      	b.n	800adc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4613      	mov	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4a12      	ldr	r2, [pc, #72]	; (800adfc <prvInitialiseTaskLists+0x60>)
 800adb4:	4413      	add	r3, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe f8f2 	bl	8008fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	607b      	str	r3, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b37      	cmp	r3, #55	; 0x37
 800adc6:	d9ef      	bls.n	800ada8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800adc8:	480d      	ldr	r0, [pc, #52]	; (800ae00 <prvInitialiseTaskLists+0x64>)
 800adca:	f7fe f8e9 	bl	8008fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adce:	480d      	ldr	r0, [pc, #52]	; (800ae04 <prvInitialiseTaskLists+0x68>)
 800add0:	f7fe f8e6 	bl	8008fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800add4:	480c      	ldr	r0, [pc, #48]	; (800ae08 <prvInitialiseTaskLists+0x6c>)
 800add6:	f7fe f8e3 	bl	8008fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adda:	480c      	ldr	r0, [pc, #48]	; (800ae0c <prvInitialiseTaskLists+0x70>)
 800addc:	f7fe f8e0 	bl	8008fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ade0:	480b      	ldr	r0, [pc, #44]	; (800ae10 <prvInitialiseTaskLists+0x74>)
 800ade2:	f7fe f8dd 	bl	8008fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ade6:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <prvInitialiseTaskLists+0x78>)
 800ade8:	4a05      	ldr	r2, [pc, #20]	; (800ae00 <prvInitialiseTaskLists+0x64>)
 800adea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adec:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <prvInitialiseTaskLists+0x7c>)
 800adee:	4a05      	ldr	r2, [pc, #20]	; (800ae04 <prvInitialiseTaskLists+0x68>)
 800adf0:	601a      	str	r2, [r3, #0]
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20002174 	.word	0x20002174
 800ae00:	200025d4 	.word	0x200025d4
 800ae04:	200025e8 	.word	0x200025e8
 800ae08:	20002604 	.word	0x20002604
 800ae0c:	20002618 	.word	0x20002618
 800ae10:	20002630 	.word	0x20002630
 800ae14:	200025fc 	.word	0x200025fc
 800ae18:	20002600 	.word	0x20002600

0800ae1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae22:	e019      	b.n	800ae58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae24:	f001 f8e6 	bl	800bff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae28:	4b10      	ldr	r3, [pc, #64]	; (800ae6c <prvCheckTasksWaitingTermination+0x50>)
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3304      	adds	r3, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe f93d 	bl	80090b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae3a:	4b0d      	ldr	r3, [pc, #52]	; (800ae70 <prvCheckTasksWaitingTermination+0x54>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	4a0b      	ldr	r2, [pc, #44]	; (800ae70 <prvCheckTasksWaitingTermination+0x54>)
 800ae42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae44:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <prvCheckTasksWaitingTermination+0x58>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	4a0a      	ldr	r2, [pc, #40]	; (800ae74 <prvCheckTasksWaitingTermination+0x58>)
 800ae4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae4e:	f001 f901 	bl	800c054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f810 	bl	800ae78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae58:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <prvCheckTasksWaitingTermination+0x58>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e1      	bne.n	800ae24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20002618 	.word	0x20002618
 800ae70:	20002644 	.word	0x20002644
 800ae74:	2000262c 	.word	0x2000262c

0800ae78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3354      	adds	r3, #84	; 0x54
 800ae84:	4618      	mov	r0, r3
 800ae86:	f002 fc0f 	bl	800d6a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d108      	bne.n	800aea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 fa99 	bl	800c3d0 <vPortFree>
				vPortFree( pxTCB );
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f001 fa96 	bl	800c3d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aea4:	e018      	b.n	800aed8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d103      	bne.n	800aeb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f001 fa8d 	bl	800c3d0 <vPortFree>
	}
 800aeb6:	e00f      	b.n	800aed8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d00a      	beq.n	800aed8 <prvDeleteTCB+0x60>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	60fb      	str	r3, [r7, #12]
}
 800aed4:	bf00      	nop
 800aed6:	e7fe      	b.n	800aed6 <prvDeleteTCB+0x5e>
	}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <prvResetNextTaskUnblockTime+0x38>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d104      	bne.n	800aefa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aef0:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <prvResetNextTaskUnblockTime+0x3c>)
 800aef2:	f04f 32ff 	mov.w	r2, #4294967295
 800aef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aef8:	e008      	b.n	800af0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefa:	4b07      	ldr	r3, [pc, #28]	; (800af18 <prvResetNextTaskUnblockTime+0x38>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4a04      	ldr	r2, [pc, #16]	; (800af1c <prvResetNextTaskUnblockTime+0x3c>)
 800af0a:	6013      	str	r3, [r2, #0]
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	200025fc 	.word	0x200025fc
 800af1c:	20002664 	.word	0x20002664

0800af20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <xTaskGetCurrentTaskHandle+0x1c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800af2c:	687b      	ldr	r3, [r7, #4]
	}
 800af2e:	4618      	mov	r0, r3
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	20002170 	.word	0x20002170

0800af40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af46:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <xTaskGetSchedulerState+0x34>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d102      	bne.n	800af54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af4e:	2301      	movs	r3, #1
 800af50:	607b      	str	r3, [r7, #4]
 800af52:	e008      	b.n	800af66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af54:	4b08      	ldr	r3, [pc, #32]	; (800af78 <xTaskGetSchedulerState+0x38>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d102      	bne.n	800af62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af5c:	2302      	movs	r3, #2
 800af5e:	607b      	str	r3, [r7, #4]
 800af60:	e001      	b.n	800af66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af62:	2300      	movs	r3, #0
 800af64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af66:	687b      	ldr	r3, [r7, #4]
	}
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	20002650 	.word	0x20002650
 800af78:	2000266c 	.word	0x2000266c

0800af7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d051      	beq.n	800b036 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af96:	4b2a      	ldr	r3, [pc, #168]	; (800b040 <xTaskPriorityInherit+0xc4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d241      	bcs.n	800b024 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	db06      	blt.n	800afb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <xTaskPriorityInherit+0xc4>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	6959      	ldr	r1, [r3, #20]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4a1f      	ldr	r2, [pc, #124]	; (800b044 <xTaskPriorityInherit+0xc8>)
 800afc8:	4413      	add	r3, r2
 800afca:	4299      	cmp	r1, r3
 800afcc:	d122      	bne.n	800b014 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe f86e 	bl	80090b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afd8:	4b19      	ldr	r3, [pc, #100]	; (800b040 <xTaskPriorityInherit+0xc4>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe6:	4b18      	ldr	r3, [pc, #96]	; (800b048 <xTaskPriorityInherit+0xcc>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	d903      	bls.n	800aff6 <xTaskPriorityInherit+0x7a>
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	4a15      	ldr	r2, [pc, #84]	; (800b048 <xTaskPriorityInherit+0xcc>)
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affa:	4613      	mov	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4a10      	ldr	r2, [pc, #64]	; (800b044 <xTaskPriorityInherit+0xc8>)
 800b004:	441a      	add	r2, r3
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	3304      	adds	r3, #4
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f7fd fff4 	bl	8008ffa <vListInsertEnd>
 800b012:	e004      	b.n	800b01e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b014:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <xTaskPriorityInherit+0xc4>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b01e:	2301      	movs	r3, #1
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	e008      	b.n	800b036 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <xTaskPriorityInherit+0xc4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02e:	429a      	cmp	r2, r3
 800b030:	d201      	bcs.n	800b036 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b032:	2301      	movs	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b036:	68fb      	ldr	r3, [r7, #12]
	}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20002170 	.word	0x20002170
 800b044:	20002174 	.word	0x20002174
 800b048:	2000264c 	.word	0x2000264c

0800b04c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b058:	2300      	movs	r3, #0
 800b05a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d056      	beq.n	800b110 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b062:	4b2e      	ldr	r3, [pc, #184]	; (800b11c <xTaskPriorityDisinherit+0xd0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d00a      	beq.n	800b082 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	60fb      	str	r3, [r7, #12]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10a      	bne.n	800b0a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	60bb      	str	r3, [r7, #8]
}
 800b09c:	bf00      	nop
 800b09e:	e7fe      	b.n	800b09e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a4:	1e5a      	subs	r2, r3, #1
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d02c      	beq.n	800b110 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d128      	bne.n	800b110 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fd fff6 	bl	80090b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e0:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <xTaskPriorityDisinherit+0xd4>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d903      	bls.n	800b0f0 <xTaskPriorityDisinherit+0xa4>
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	4a0c      	ldr	r2, [pc, #48]	; (800b120 <xTaskPriorityDisinherit+0xd4>)
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4a09      	ldr	r2, [pc, #36]	; (800b124 <xTaskPriorityDisinherit+0xd8>)
 800b0fe:	441a      	add	r2, r3
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	3304      	adds	r3, #4
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	f7fd ff77 	bl	8008ffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b10c:	2301      	movs	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b110:	697b      	ldr	r3, [r7, #20]
	}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20002170 	.word	0x20002170
 800b120:	2000264c 	.word	0x2000264c
 800b124:	20002174 	.word	0x20002174

0800b128 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b136:	2301      	movs	r3, #1
 800b138:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d06a      	beq.n	800b216 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	60fb      	str	r3, [r7, #12]
}
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d902      	bls.n	800b16e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	61fb      	str	r3, [r7, #28]
 800b16c:	e002      	b.n	800b174 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b172:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	69fa      	ldr	r2, [r7, #28]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d04b      	beq.n	800b216 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	429a      	cmp	r2, r3
 800b186:	d146      	bne.n	800b216 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b188:	4b25      	ldr	r3, [pc, #148]	; (800b220 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d10a      	bne.n	800b1a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	60bb      	str	r3, [r7, #8]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	69fa      	ldr	r2, [r7, #28]
 800b1b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	db04      	blt.n	800b1c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	6959      	ldr	r1, [r3, #20]
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4a13      	ldr	r2, [pc, #76]	; (800b224 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b1d6:	4413      	add	r3, r2
 800b1d8:	4299      	cmp	r1, r3
 800b1da:	d11c      	bne.n	800b216 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fd ff67 	bl	80090b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ea:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d903      	bls.n	800b1fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	4a0c      	ldr	r2, [pc, #48]	; (800b228 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4a07      	ldr	r2, [pc, #28]	; (800b224 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b208:	441a      	add	r2, r3
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	3304      	adds	r3, #4
 800b20e:	4619      	mov	r1, r3
 800b210:	4610      	mov	r0, r2
 800b212:	f7fd fef2 	bl	8008ffa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b216:	bf00      	nop
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20002170 	.word	0x20002170
 800b224:	20002174 	.word	0x20002174
 800b228:	2000264c 	.word	0x2000264c

0800b22c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <pvTaskIncrementMutexHeldCount+0x24>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <pvTaskIncrementMutexHeldCount+0x24>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b23e:	3201      	adds	r2, #1
 800b240:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b242:	4b03      	ldr	r3, [pc, #12]	; (800b250 <pvTaskIncrementMutexHeldCount+0x24>)
 800b244:	681b      	ldr	r3, [r3, #0]
	}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	20002170 	.word	0x20002170

0800b254 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
 800b260:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b262:	f000 fec7 	bl	800bff4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b266:	4b29      	ldr	r3, [pc, #164]	; (800b30c <xTaskNotifyWait+0xb8>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b02      	cmp	r3, #2
 800b272:	d01c      	beq.n	800b2ae <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b274:	4b25      	ldr	r3, [pc, #148]	; (800b30c <xTaskNotifyWait+0xb8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	43d2      	mvns	r2, r2
 800b280:	400a      	ands	r2, r1
 800b282:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b286:	4b21      	ldr	r3, [pc, #132]	; (800b30c <xTaskNotifyWait+0xb8>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00b      	beq.n	800b2ae <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b296:	2101      	movs	r1, #1
 800b298:	6838      	ldr	r0, [r7, #0]
 800b29a:	f000 f9dd 	bl	800b658 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b29e:	4b1c      	ldr	r3, [pc, #112]	; (800b310 <xTaskNotifyWait+0xbc>)
 800b2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b2ae:	f000 fed1 	bl	800c054 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b2b2:	f000 fe9f 	bl	800bff4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b2bc:	4b13      	ldr	r3, [pc, #76]	; (800b30c <xTaskNotifyWait+0xb8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b2c8:	4b10      	ldr	r3, [pc, #64]	; (800b30c <xTaskNotifyWait+0xb8>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d002      	beq.n	800b2dc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e00a      	b.n	800b2f2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b2dc:	4b0b      	ldr	r3, [pc, #44]	; (800b30c <xTaskNotifyWait+0xb8>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	43d2      	mvns	r2, r2
 800b2e8:	400a      	ands	r2, r1
 800b2ea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2f2:	4b06      	ldr	r3, [pc, #24]	; (800b30c <xTaskNotifyWait+0xb8>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800b2fc:	f000 feaa 	bl	800c054 <vPortExitCritical>

		return xReturn;
 800b300:	697b      	ldr	r3, [r7, #20]
	}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20002170 	.word	0x20002170
 800b310:	e000ed04 	.word	0xe000ed04

0800b314 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b314:	b580      	push	{r7, lr}
 800b316:	b08a      	sub	sp, #40	; 0x28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	4613      	mov	r3, r2
 800b322:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b324:	2301      	movs	r3, #1
 800b326:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10a      	bne.n	800b344 <xTaskGenericNotify+0x30>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	61bb      	str	r3, [r7, #24]
}
 800b340:	bf00      	nop
 800b342:	e7fe      	b.n	800b342 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b348:	f000 fe54 	bl	800bff4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b362:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d82d      	bhi.n	800b3ce <xTaskGenericNotify+0xba>
 800b372:	a201      	add	r2, pc, #4	; (adr r2, 800b378 <xTaskGenericNotify+0x64>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b3f1 	.word	0x0800b3f1
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b39f 	.word	0x0800b39f
 800b384:	0800b3af 	.word	0x0800b3af
 800b388:	0800b3b9 	.word	0x0800b3b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	431a      	orrs	r2, r3
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b39c:	e02b      	b.n	800b3f6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b3ac:	e023      	b.n	800b3f6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b3b6:	e01e      	b.n	800b3f6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b3b8:	7ffb      	ldrb	r3, [r7, #31]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d004      	beq.n	800b3c8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b3c6:	e016      	b.n	800b3f6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b3cc:	e013      	b.n	800b3f6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d8:	d00c      	beq.n	800b3f4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	617b      	str	r3, [r7, #20]
}
 800b3ec:	bf00      	nop
 800b3ee:	e7fe      	b.n	800b3ee <xTaskGenericNotify+0xda>
					break;
 800b3f0:	bf00      	nop
 800b3f2:	e000      	b.n	800b3f6 <xTaskGenericNotify+0xe2>

					break;
 800b3f4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b3f6:	7ffb      	ldrb	r3, [r7, #31]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d13a      	bne.n	800b472 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4618      	mov	r0, r3
 800b402:	f7fd fe57 	bl	80090b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b406:	6a3b      	ldr	r3, [r7, #32]
 800b408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40a:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <xTaskGenericNotify+0x16c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d903      	bls.n	800b41a <xTaskGenericNotify+0x106>
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b416:	4a1a      	ldr	r2, [pc, #104]	; (800b480 <xTaskGenericNotify+0x16c>)
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	4613      	mov	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4a17      	ldr	r2, [pc, #92]	; (800b484 <xTaskGenericNotify+0x170>)
 800b428:	441a      	add	r2, r3
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4619      	mov	r1, r3
 800b430:	4610      	mov	r0, r2
 800b432:	f7fd fde2 	bl	8008ffa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00a      	beq.n	800b454 <xTaskGenericNotify+0x140>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	613b      	str	r3, [r7, #16]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4b0b      	ldr	r3, [pc, #44]	; (800b488 <xTaskGenericNotify+0x174>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45e:	429a      	cmp	r2, r3
 800b460:	d907      	bls.n	800b472 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b462:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <xTaskGenericNotify+0x178>)
 800b464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b472:	f000 fdef 	bl	800c054 <vPortExitCritical>

		return xReturn;
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b478:	4618      	mov	r0, r3
 800b47a:	3728      	adds	r7, #40	; 0x28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	2000264c 	.word	0x2000264c
 800b484:	20002174 	.word	0x20002174
 800b488:	20002170 	.word	0x20002170
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08e      	sub	sp, #56	; 0x38
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	4613      	mov	r3, r2
 800b49e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4c0:	f000 fe7a 	bl	800c1b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b4c8:	f3ef 8211 	mrs	r2, BASEPRI
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	623a      	str	r2, [r7, #32]
 800b4de:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b4e0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	2202      	movs	r2, #2
 800b502:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d82f      	bhi.n	800b56c <xTaskGenericNotifyFromISR+0xdc>
 800b50c:	a201      	add	r2, pc, #4	; (adr r2, 800b514 <xTaskGenericNotifyFromISR+0x84>)
 800b50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b512:	bf00      	nop
 800b514:	0800b58f 	.word	0x0800b58f
 800b518:	0800b529 	.word	0x0800b529
 800b51c:	0800b53b 	.word	0x0800b53b
 800b520:	0800b54b 	.word	0x0800b54b
 800b524:	0800b555 	.word	0x0800b555
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	431a      	orrs	r2, r3
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b538:	e02c      	b.n	800b594 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b548:	e024      	b.n	800b594 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b552:	e01f      	b.n	800b594 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d004      	beq.n	800b566 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b564:	e016      	b.n	800b594 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b566:	2300      	movs	r3, #0
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b56a:	e013      	b.n	800b594 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b576:	d00c      	beq.n	800b592 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	61bb      	str	r3, [r7, #24]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b58e:	bf00      	nop
 800b590:	e000      	b.n	800b594 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b592:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b594:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d146      	bne.n	800b62a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00a      	beq.n	800b5ba <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	617b      	str	r3, [r7, #20]
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ba:	4b21      	ldr	r3, [pc, #132]	; (800b640 <xTaskGenericNotifyFromISR+0x1b0>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d11d      	bne.n	800b5fe <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fd fd74 	bl	80090b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d0:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <xTaskGenericNotifyFromISR+0x1b4>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d903      	bls.n	800b5e0 <xTaskGenericNotifyFromISR+0x150>
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5dc:	4a19      	ldr	r2, [pc, #100]	; (800b644 <xTaskGenericNotifyFromISR+0x1b4>)
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4a16      	ldr	r2, [pc, #88]	; (800b648 <xTaskGenericNotifyFromISR+0x1b8>)
 800b5ee:	441a      	add	r2, r3
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	f7fd fcff 	bl	8008ffa <vListInsertEnd>
 800b5fc:	e005      	b.n	800b60a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b600:	3318      	adds	r3, #24
 800b602:	4619      	mov	r1, r3
 800b604:	4811      	ldr	r0, [pc, #68]	; (800b64c <xTaskGenericNotifyFromISR+0x1bc>)
 800b606:	f7fd fcf8 	bl	8008ffa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60e:	4b10      	ldr	r3, [pc, #64]	; (800b650 <xTaskGenericNotifyFromISR+0x1c0>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	429a      	cmp	r2, r3
 800b616:	d908      	bls.n	800b62a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b620:	2201      	movs	r2, #1
 800b622:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b624:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <xTaskGenericNotifyFromISR+0x1c4>)
 800b626:	2201      	movs	r2, #1
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f383 8811 	msr	BASEPRI, r3
}
 800b634:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b638:	4618      	mov	r0, r3
 800b63a:	3738      	adds	r7, #56	; 0x38
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	2000266c 	.word	0x2000266c
 800b644:	2000264c 	.word	0x2000264c
 800b648:	20002174 	.word	0x20002174
 800b64c:	20002604 	.word	0x20002604
 800b650:	20002170 	.word	0x20002170
 800b654:	20002658 	.word	0x20002658

0800b658 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b662:	4b21      	ldr	r3, [pc, #132]	; (800b6e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b668:	4b20      	ldr	r3, [pc, #128]	; (800b6ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3304      	adds	r3, #4
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fd fd20 	bl	80090b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d10a      	bne.n	800b692 <prvAddCurrentTaskToDelayedList+0x3a>
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d007      	beq.n	800b692 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b682:	4b1a      	ldr	r3, [pc, #104]	; (800b6ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3304      	adds	r3, #4
 800b688:	4619      	mov	r1, r3
 800b68a:	4819      	ldr	r0, [pc, #100]	; (800b6f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b68c:	f7fd fcb5 	bl	8008ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b690:	e026      	b.n	800b6e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4413      	add	r3, r2
 800b698:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b69a:	4b14      	ldr	r3, [pc, #80]	; (800b6ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d209      	bcs.n	800b6be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6aa:	4b12      	ldr	r3, [pc, #72]	; (800b6f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	f7fd fcc3 	bl	8009042 <vListInsert>
}
 800b6bc:	e010      	b.n	800b6e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6be:	4b0e      	ldr	r3, [pc, #56]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	f7fd fcb9 	bl	8009042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6d0:	4b0a      	ldr	r3, [pc, #40]	; (800b6fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d202      	bcs.n	800b6e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6da:	4a08      	ldr	r2, [pc, #32]	; (800b6fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6013      	str	r3, [r2, #0]
}
 800b6e0:	bf00      	nop
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20002648 	.word	0x20002648
 800b6ec:	20002170 	.word	0x20002170
 800b6f0:	20002630 	.word	0x20002630
 800b6f4:	20002600 	.word	0x20002600
 800b6f8:	200025fc 	.word	0x200025fc
 800b6fc:	20002664 	.word	0x20002664

0800b700 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b706:	2300      	movs	r3, #0
 800b708:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b70a:	f000 fb07 	bl	800bd1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b70e:	4b1c      	ldr	r3, [pc, #112]	; (800b780 <xTimerCreateTimerTask+0x80>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d021      	beq.n	800b75a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b71e:	1d3a      	adds	r2, r7, #4
 800b720:	f107 0108 	add.w	r1, r7, #8
 800b724:	f107 030c 	add.w	r3, r7, #12
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fd fc1f 	bl	8008f6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	9202      	str	r2, [sp, #8]
 800b736:	9301      	str	r3, [sp, #4]
 800b738:	2302      	movs	r3, #2
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	2300      	movs	r3, #0
 800b73e:	460a      	mov	r2, r1
 800b740:	4910      	ldr	r1, [pc, #64]	; (800b784 <xTimerCreateTimerTask+0x84>)
 800b742:	4811      	ldr	r0, [pc, #68]	; (800b788 <xTimerCreateTimerTask+0x88>)
 800b744:	f7fe fda4 	bl	800a290 <xTaskCreateStatic>
 800b748:	4603      	mov	r3, r0
 800b74a:	4a10      	ldr	r2, [pc, #64]	; (800b78c <xTimerCreateTimerTask+0x8c>)
 800b74c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <xTimerCreateTimerTask+0x8c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b756:	2301      	movs	r3, #1
 800b758:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10a      	bne.n	800b776 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	613b      	str	r3, [r7, #16]
}
 800b772:	bf00      	nop
 800b774:	e7fe      	b.n	800b774 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b776:	697b      	ldr	r3, [r7, #20]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	200026a0 	.word	0x200026a0
 800b784:	0800f0f8 	.word	0x0800f0f8
 800b788:	0800b8c5 	.word	0x0800b8c5
 800b78c:	200026a4 	.word	0x200026a4

0800b790 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08a      	sub	sp, #40	; 0x28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <xTimerGenericCommand+0x2e>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	623b      	str	r3, [r7, #32]
}
 800b7ba:	bf00      	nop
 800b7bc:	e7fe      	b.n	800b7bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7be:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <xTimerGenericCommand+0x98>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d02a      	beq.n	800b81c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2b05      	cmp	r3, #5
 800b7d6:	dc18      	bgt.n	800b80a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7d8:	f7ff fbb2 	bl	800af40 <xTaskGetSchedulerState>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d109      	bne.n	800b7f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7e2:	4b11      	ldr	r3, [pc, #68]	; (800b828 <xTimerGenericCommand+0x98>)
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	f107 0110 	add.w	r1, r7, #16
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ee:	f7fd fee9 	bl	80095c4 <xQueueGenericSend>
 800b7f2:	6278      	str	r0, [r7, #36]	; 0x24
 800b7f4:	e012      	b.n	800b81c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7f6:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <xTimerGenericCommand+0x98>)
 800b7f8:	6818      	ldr	r0, [r3, #0]
 800b7fa:	f107 0110 	add.w	r1, r7, #16
 800b7fe:	2300      	movs	r3, #0
 800b800:	2200      	movs	r2, #0
 800b802:	f7fd fedf 	bl	80095c4 <xQueueGenericSend>
 800b806:	6278      	str	r0, [r7, #36]	; 0x24
 800b808:	e008      	b.n	800b81c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b80a:	4b07      	ldr	r3, [pc, #28]	; (800b828 <xTimerGenericCommand+0x98>)
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f107 0110 	add.w	r1, r7, #16
 800b812:	2300      	movs	r3, #0
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	f7fd ffd3 	bl	80097c0 <xQueueGenericSendFromISR>
 800b81a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3728      	adds	r7, #40	; 0x28
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	200026a0 	.word	0x200026a0

0800b82c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af02      	add	r7, sp, #8
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b836:	4b22      	ldr	r3, [pc, #136]	; (800b8c0 <prvProcessExpiredTimer+0x94>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	3304      	adds	r3, #4
 800b844:	4618      	mov	r0, r3
 800b846:	f7fd fc35 	bl	80090b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d022      	beq.n	800b89e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	699a      	ldr	r2, [r3, #24]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	18d1      	adds	r1, r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	6978      	ldr	r0, [r7, #20]
 800b866:	f000 f8d1 	bl	800ba0c <prvInsertTimerInActiveList>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d01f      	beq.n	800b8b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b870:	2300      	movs	r3, #0
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	2300      	movs	r3, #0
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	2100      	movs	r1, #0
 800b87a:	6978      	ldr	r0, [r7, #20]
 800b87c:	f7ff ff88 	bl	800b790 <xTimerGenericCommand>
 800b880:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d113      	bne.n	800b8b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	60fb      	str	r3, [r7, #12]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8a4:	f023 0301 	bic.w	r3, r3, #1
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	6978      	ldr	r0, [r7, #20]
 800b8b6:	4798      	blx	r3
}
 800b8b8:	bf00      	nop
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	20002698 	.word	0x20002698

0800b8c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8cc:	f107 0308 	add.w	r3, r7, #8
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f857 	bl	800b984 <prvGetNextExpireTime>
 800b8d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f803 	bl	800b8e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8e2:	f000 f8d5 	bl	800ba90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8e6:	e7f1      	b.n	800b8cc <prvTimerTask+0x8>

0800b8e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8f2:	f7fe ff29 	bl	800a748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8f6:	f107 0308 	add.w	r3, r7, #8
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f000 f866 	bl	800b9cc <prvSampleTimeNow>
 800b900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d130      	bne.n	800b96a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <prvProcessTimerOrBlockTask+0x3c>
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	429a      	cmp	r2, r3
 800b914:	d806      	bhi.n	800b924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b916:	f7fe ff25 	bl	800a764 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b91a:	68f9      	ldr	r1, [r7, #12]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff ff85 	bl	800b82c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b922:	e024      	b.n	800b96e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d008      	beq.n	800b93c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b92a:	4b13      	ldr	r3, [pc, #76]	; (800b978 <prvProcessTimerOrBlockTask+0x90>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <prvProcessTimerOrBlockTask+0x50>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <prvProcessTimerOrBlockTask+0x52>
 800b938:	2300      	movs	r3, #0
 800b93a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <prvProcessTimerOrBlockTask+0x94>)
 800b93e:	6818      	ldr	r0, [r3, #0]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	4619      	mov	r1, r3
 800b94a:	f7fe fc6d 	bl	800a228 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b94e:	f7fe ff09 	bl	800a764 <xTaskResumeAll>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b958:	4b09      	ldr	r3, [pc, #36]	; (800b980 <prvProcessTimerOrBlockTask+0x98>)
 800b95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b95e:	601a      	str	r2, [r3, #0]
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	f3bf 8f6f 	isb	sy
}
 800b968:	e001      	b.n	800b96e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b96a:	f7fe fefb 	bl	800a764 <xTaskResumeAll>
}
 800b96e:	bf00      	nop
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	2000269c 	.word	0x2000269c
 800b97c:	200026a0 	.word	0x200026a0
 800b980:	e000ed04 	.word	0xe000ed04

0800b984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b98c:	4b0e      	ldr	r3, [pc, #56]	; (800b9c8 <prvGetNextExpireTime+0x44>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <prvGetNextExpireTime+0x16>
 800b996:	2201      	movs	r2, #1
 800b998:	e000      	b.n	800b99c <prvGetNextExpireTime+0x18>
 800b99a:	2200      	movs	r2, #0
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d105      	bne.n	800b9b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9a8:	4b07      	ldr	r3, [pc, #28]	; (800b9c8 <prvGetNextExpireTime+0x44>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	e001      	b.n	800b9b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	20002698 	.word	0x20002698

0800b9cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9d4:	f7fe ff64 	bl	800a8a0 <xTaskGetTickCount>
 800b9d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9da:	4b0b      	ldr	r3, [pc, #44]	; (800ba08 <prvSampleTimeNow+0x3c>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d205      	bcs.n	800b9f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9e4:	f000 f936 	bl	800bc54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	e002      	b.n	800b9f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9f6:	4a04      	ldr	r2, [pc, #16]	; (800ba08 <prvSampleTimeNow+0x3c>)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	200026a8 	.word	0x200026a8

0800ba0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d812      	bhi.n	800ba58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d302      	bcc.n	800ba46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
 800ba44:	e01b      	b.n	800ba7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba46:	4b10      	ldr	r3, [pc, #64]	; (800ba88 <prvInsertTimerInActiveList+0x7c>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4619      	mov	r1, r3
 800ba50:	4610      	mov	r0, r2
 800ba52:	f7fd faf6 	bl	8009042 <vListInsert>
 800ba56:	e012      	b.n	800ba7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d206      	bcs.n	800ba6e <prvInsertTimerInActiveList+0x62>
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d302      	bcc.n	800ba6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	617b      	str	r3, [r7, #20]
 800ba6c:	e007      	b.n	800ba7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba6e:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <prvInsertTimerInActiveList+0x80>)
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4619      	mov	r1, r3
 800ba78:	4610      	mov	r0, r2
 800ba7a:	f7fd fae2 	bl	8009042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba7e:	697b      	ldr	r3, [r7, #20]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	2000269c 	.word	0x2000269c
 800ba8c:	20002698 	.word	0x20002698

0800ba90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08e      	sub	sp, #56	; 0x38
 800ba94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba96:	e0ca      	b.n	800bc2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	da18      	bge.n	800bad0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba9e:	1d3b      	adds	r3, r7, #4
 800baa0:	3304      	adds	r3, #4
 800baa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800baa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10a      	bne.n	800bac0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	61fb      	str	r3, [r7, #28]
}
 800babc:	bf00      	nop
 800babe:	e7fe      	b.n	800babe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bac6:	6850      	ldr	r0, [r2, #4]
 800bac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baca:	6892      	ldr	r2, [r2, #8]
 800bacc:	4611      	mov	r1, r2
 800bace:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f2c0 80aa 	blt.w	800bc2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	3304      	adds	r3, #4
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fd fae3 	bl	80090b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baee:	463b      	mov	r3, r7
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff ff6b 	bl	800b9cc <prvSampleTimeNow>
 800baf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b09      	cmp	r3, #9
 800bafc:	f200 8097 	bhi.w	800bc2e <prvProcessReceivedCommands+0x19e>
 800bb00:	a201      	add	r2, pc, #4	; (adr r2, 800bb08 <prvProcessReceivedCommands+0x78>)
 800bb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb06:	bf00      	nop
 800bb08:	0800bb31 	.word	0x0800bb31
 800bb0c:	0800bb31 	.word	0x0800bb31
 800bb10:	0800bb31 	.word	0x0800bb31
 800bb14:	0800bba5 	.word	0x0800bba5
 800bb18:	0800bbb9 	.word	0x0800bbb9
 800bb1c:	0800bc03 	.word	0x0800bc03
 800bb20:	0800bb31 	.word	0x0800bb31
 800bb24:	0800bb31 	.word	0x0800bb31
 800bb28:	0800bba5 	.word	0x0800bba5
 800bb2c:	0800bbb9 	.word	0x0800bbb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb36:	f043 0301 	orr.w	r3, r3, #1
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	18d1      	adds	r1, r2, r3
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb50:	f7ff ff5c 	bl	800ba0c <prvInsertTimerInActiveList>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d069      	beq.n	800bc2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d05e      	beq.n	800bc2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	441a      	add	r2, r3
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	2100      	movs	r1, #0
 800bb80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb82:	f7ff fe05 	bl	800b790 <xTimerGenericCommand>
 800bb86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d14f      	bne.n	800bc2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	61bb      	str	r3, [r7, #24]
}
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbaa:	f023 0301 	bic.w	r3, r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bbb6:	e03a      	b.n	800bc2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbbe:	f043 0301 	orr.w	r3, r3, #1
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10a      	bne.n	800bbee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	617b      	str	r3, [r7, #20]
}
 800bbea:	bf00      	nop
 800bbec:	e7fe      	b.n	800bbec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	699a      	ldr	r2, [r3, #24]
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	18d1      	adds	r1, r2, r3
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbfc:	f7ff ff06 	bl	800ba0c <prvInsertTimerInActiveList>
					break;
 800bc00:	e015      	b.n	800bc2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d103      	bne.n	800bc18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bc10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc12:	f000 fbdd 	bl	800c3d0 <vPortFree>
 800bc16:	e00a      	b.n	800bc2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc2a:	e000      	b.n	800bc2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc2e:	4b08      	ldr	r3, [pc, #32]	; (800bc50 <prvProcessReceivedCommands+0x1c0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	1d39      	adds	r1, r7, #4
 800bc34:	2200      	movs	r2, #0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd feea 	bl	8009a10 <xQueueReceive>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f47f af2a 	bne.w	800ba98 <prvProcessReceivedCommands+0x8>
	}
}
 800bc44:	bf00      	nop
 800bc46:	bf00      	nop
 800bc48:	3730      	adds	r7, #48	; 0x30
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	200026a0 	.word	0x200026a0

0800bc54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc5a:	e048      	b.n	800bcee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc5c:	4b2d      	ldr	r3, [pc, #180]	; (800bd14 <prvSwitchTimerLists+0xc0>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc66:	4b2b      	ldr	r3, [pc, #172]	; (800bd14 <prvSwitchTimerLists+0xc0>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3304      	adds	r3, #4
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fd fa1d 	bl	80090b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d02e      	beq.n	800bcee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	4413      	add	r3, r2
 800bc98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d90e      	bls.n	800bcc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcae:	4b19      	ldr	r3, [pc, #100]	; (800bd14 <prvSwitchTimerLists+0xc0>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4610      	mov	r0, r2
 800bcba:	f7fd f9c2 	bl	8009042 <vListInsert>
 800bcbe:	e016      	b.n	800bcee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	2100      	movs	r1, #0
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f7ff fd60 	bl	800b790 <xTimerGenericCommand>
 800bcd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	603b      	str	r3, [r7, #0]
}
 800bcea:	bf00      	nop
 800bcec:	e7fe      	b.n	800bcec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcee:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <prvSwitchTimerLists+0xc0>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1b1      	bne.n	800bc5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcf8:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <prvSwitchTimerLists+0xc0>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcfe:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <prvSwitchTimerLists+0xc4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a04      	ldr	r2, [pc, #16]	; (800bd14 <prvSwitchTimerLists+0xc0>)
 800bd04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd06:	4a04      	ldr	r2, [pc, #16]	; (800bd18 <prvSwitchTimerLists+0xc4>)
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	6013      	str	r3, [r2, #0]
}
 800bd0c:	bf00      	nop
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20002698 	.word	0x20002698
 800bd18:	2000269c 	.word	0x2000269c

0800bd1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd22:	f000 f967 	bl	800bff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd26:	4b15      	ldr	r3, [pc, #84]	; (800bd7c <prvCheckForValidListAndQueue+0x60>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d120      	bne.n	800bd70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd2e:	4814      	ldr	r0, [pc, #80]	; (800bd80 <prvCheckForValidListAndQueue+0x64>)
 800bd30:	f7fd f936 	bl	8008fa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd34:	4813      	ldr	r0, [pc, #76]	; (800bd84 <prvCheckForValidListAndQueue+0x68>)
 800bd36:	f7fd f933 	bl	8008fa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd3a:	4b13      	ldr	r3, [pc, #76]	; (800bd88 <prvCheckForValidListAndQueue+0x6c>)
 800bd3c:	4a10      	ldr	r2, [pc, #64]	; (800bd80 <prvCheckForValidListAndQueue+0x64>)
 800bd3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd40:	4b12      	ldr	r3, [pc, #72]	; (800bd8c <prvCheckForValidListAndQueue+0x70>)
 800bd42:	4a10      	ldr	r2, [pc, #64]	; (800bd84 <prvCheckForValidListAndQueue+0x68>)
 800bd44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd46:	2300      	movs	r3, #0
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	4b11      	ldr	r3, [pc, #68]	; (800bd90 <prvCheckForValidListAndQueue+0x74>)
 800bd4c:	4a11      	ldr	r2, [pc, #68]	; (800bd94 <prvCheckForValidListAndQueue+0x78>)
 800bd4e:	2110      	movs	r1, #16
 800bd50:	200a      	movs	r0, #10
 800bd52:	f7fd fa41 	bl	80091d8 <xQueueGenericCreateStatic>
 800bd56:	4603      	mov	r3, r0
 800bd58:	4a08      	ldr	r2, [pc, #32]	; (800bd7c <prvCheckForValidListAndQueue+0x60>)
 800bd5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd5c:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <prvCheckForValidListAndQueue+0x60>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d005      	beq.n	800bd70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <prvCheckForValidListAndQueue+0x60>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	490b      	ldr	r1, [pc, #44]	; (800bd98 <prvCheckForValidListAndQueue+0x7c>)
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe fa08 	bl	800a180 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd70:	f000 f970 	bl	800c054 <vPortExitCritical>
}
 800bd74:	bf00      	nop
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	200026a0 	.word	0x200026a0
 800bd80:	20002670 	.word	0x20002670
 800bd84:	20002684 	.word	0x20002684
 800bd88:	20002698 	.word	0x20002698
 800bd8c:	2000269c 	.word	0x2000269c
 800bd90:	2000274c 	.word	0x2000274c
 800bd94:	200026ac 	.word	0x200026ac
 800bd98:	0800f100 	.word	0x0800f100

0800bd9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3b04      	subs	r3, #4
 800bdac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bdb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3b04      	subs	r3, #4
 800bdba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	f023 0201 	bic.w	r2, r3, #1
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3b04      	subs	r3, #4
 800bdca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdcc:	4a0c      	ldr	r2, [pc, #48]	; (800be00 <pxPortInitialiseStack+0x64>)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3b14      	subs	r3, #20
 800bdd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3b04      	subs	r3, #4
 800bde2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f06f 0202 	mvn.w	r2, #2
 800bdea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3b20      	subs	r3, #32
 800bdf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	0800be05 	.word	0x0800be05

0800be04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be0e:	4b12      	ldr	r3, [pc, #72]	; (800be58 <prvTaskExitError+0x54>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be16:	d00a      	beq.n	800be2e <prvTaskExitError+0x2a>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	60fb      	str	r3, [r7, #12]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <prvTaskExitError+0x28>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	60bb      	str	r3, [r7, #8]
}
 800be40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be42:	bf00      	nop
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0fc      	beq.n	800be44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be4a:	bf00      	nop
 800be4c:	bf00      	nop
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	20000114 	.word	0x20000114
 800be5c:	00000000 	.word	0x00000000

0800be60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be60:	4b07      	ldr	r3, [pc, #28]	; (800be80 <pxCurrentTCBConst2>)
 800be62:	6819      	ldr	r1, [r3, #0]
 800be64:	6808      	ldr	r0, [r1, #0]
 800be66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6a:	f380 8809 	msr	PSP, r0
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f04f 0000 	mov.w	r0, #0
 800be76:	f380 8811 	msr	BASEPRI, r0
 800be7a:	4770      	bx	lr
 800be7c:	f3af 8000 	nop.w

0800be80 <pxCurrentTCBConst2>:
 800be80:	20002170 	.word	0x20002170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop

0800be88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be88:	4808      	ldr	r0, [pc, #32]	; (800beac <prvPortStartFirstTask+0x24>)
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	6800      	ldr	r0, [r0, #0]
 800be8e:	f380 8808 	msr	MSP, r0
 800be92:	f04f 0000 	mov.w	r0, #0
 800be96:	f380 8814 	msr	CONTROL, r0
 800be9a:	b662      	cpsie	i
 800be9c:	b661      	cpsie	f
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	df00      	svc	0
 800bea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beaa:	bf00      	nop
 800beac:	e000ed08 	.word	0xe000ed08

0800beb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800beb6:	4b46      	ldr	r3, [pc, #280]	; (800bfd0 <xPortStartScheduler+0x120>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a46      	ldr	r2, [pc, #280]	; (800bfd4 <xPortStartScheduler+0x124>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d10a      	bne.n	800bed6 <xPortStartScheduler+0x26>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	613b      	str	r3, [r7, #16]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bed6:	4b3e      	ldr	r3, [pc, #248]	; (800bfd0 <xPortStartScheduler+0x120>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a3f      	ldr	r2, [pc, #252]	; (800bfd8 <xPortStartScheduler+0x128>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d10a      	bne.n	800bef6 <xPortStartScheduler+0x46>
	__asm volatile
 800bee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	60fb      	str	r3, [r7, #12]
}
 800bef2:	bf00      	nop
 800bef4:	e7fe      	b.n	800bef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bef6:	4b39      	ldr	r3, [pc, #228]	; (800bfdc <xPortStartScheduler+0x12c>)
 800bef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	22ff      	movs	r2, #255	; 0xff
 800bf06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	4b31      	ldr	r3, [pc, #196]	; (800bfe0 <xPortStartScheduler+0x130>)
 800bf1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf1e:	4b31      	ldr	r3, [pc, #196]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf20:	2207      	movs	r2, #7
 800bf22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf24:	e009      	b.n	800bf3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bf26:	4b2f      	ldr	r3, [pc, #188]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	4a2d      	ldr	r2, [pc, #180]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf3a:	78fb      	ldrb	r3, [r7, #3]
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf42:	2b80      	cmp	r3, #128	; 0x80
 800bf44:	d0ef      	beq.n	800bf26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf46:	4b27      	ldr	r3, [pc, #156]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f1c3 0307 	rsb	r3, r3, #7
 800bf4e:	2b04      	cmp	r3, #4
 800bf50:	d00a      	beq.n	800bf68 <xPortStartScheduler+0xb8>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	60bb      	str	r3, [r7, #8]
}
 800bf64:	bf00      	nop
 800bf66:	e7fe      	b.n	800bf66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf68:	4b1e      	ldr	r3, [pc, #120]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	4a1d      	ldr	r2, [pc, #116]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf7a:	4a1a      	ldr	r2, [pc, #104]	; (800bfe4 <xPortStartScheduler+0x134>)
 800bf7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf86:	4b18      	ldr	r3, [pc, #96]	; (800bfe8 <xPortStartScheduler+0x138>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a17      	ldr	r2, [pc, #92]	; (800bfe8 <xPortStartScheduler+0x138>)
 800bf8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf92:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <xPortStartScheduler+0x138>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a14      	ldr	r2, [pc, #80]	; (800bfe8 <xPortStartScheduler+0x138>)
 800bf98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf9e:	f000 f8dd 	bl	800c15c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfa2:	4b12      	ldr	r3, [pc, #72]	; (800bfec <xPortStartScheduler+0x13c>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bfa8:	f000 f8fc 	bl	800c1a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfac:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <xPortStartScheduler+0x140>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a0f      	ldr	r2, [pc, #60]	; (800bff0 <xPortStartScheduler+0x140>)
 800bfb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bfb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfb8:	f7ff ff66 	bl	800be88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfbc:	f7fe fd3a 	bl	800aa34 <vTaskSwitchContext>
	prvTaskExitError();
 800bfc0:	f7ff ff20 	bl	800be04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	e000ed00 	.word	0xe000ed00
 800bfd4:	410fc271 	.word	0x410fc271
 800bfd8:	410fc270 	.word	0x410fc270
 800bfdc:	e000e400 	.word	0xe000e400
 800bfe0:	2000279c 	.word	0x2000279c
 800bfe4:	200027a0 	.word	0x200027a0
 800bfe8:	e000ed20 	.word	0xe000ed20
 800bfec:	20000114 	.word	0x20000114
 800bff0:	e000ef34 	.word	0xe000ef34

0800bff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	607b      	str	r3, [r7, #4]
}
 800c00c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c00e:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <vPortEnterCritical+0x58>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3301      	adds	r3, #1
 800c014:	4a0d      	ldr	r2, [pc, #52]	; (800c04c <vPortEnterCritical+0x58>)
 800c016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c018:	4b0c      	ldr	r3, [pc, #48]	; (800c04c <vPortEnterCritical+0x58>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d10f      	bne.n	800c040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c020:	4b0b      	ldr	r3, [pc, #44]	; (800c050 <vPortEnterCritical+0x5c>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <vPortEnterCritical+0x4c>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	603b      	str	r3, [r7, #0]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <vPortEnterCritical+0x4a>
	}
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	20000114 	.word	0x20000114
 800c050:	e000ed04 	.word	0xe000ed04

0800c054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c05a:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <vPortExitCritical+0x50>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10a      	bne.n	800c078 <vPortExitCritical+0x24>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	607b      	str	r3, [r7, #4]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c078:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <vPortExitCritical+0x50>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	4a09      	ldr	r2, [pc, #36]	; (800c0a4 <vPortExitCritical+0x50>)
 800c080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c082:	4b08      	ldr	r3, [pc, #32]	; (800c0a4 <vPortExitCritical+0x50>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d105      	bne.n	800c096 <vPortExitCritical+0x42>
 800c08a:	2300      	movs	r3, #0
 800c08c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	f383 8811 	msr	BASEPRI, r3
}
 800c094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c096:	bf00      	nop
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	20000114 	.word	0x20000114
	...

0800c0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0b0:	f3ef 8009 	mrs	r0, PSP
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	4b15      	ldr	r3, [pc, #84]	; (800c110 <pxCurrentTCBConst>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	f01e 0f10 	tst.w	lr, #16
 800c0c0:	bf08      	it	eq
 800c0c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ca:	6010      	str	r0, [r2, #0]
 800c0cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c0d4:	f380 8811 	msr	BASEPRI, r0
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f7fe fca8 	bl	800aa34 <vTaskSwitchContext>
 800c0e4:	f04f 0000 	mov.w	r0, #0
 800c0e8:	f380 8811 	msr	BASEPRI, r0
 800c0ec:	bc09      	pop	{r0, r3}
 800c0ee:	6819      	ldr	r1, [r3, #0]
 800c0f0:	6808      	ldr	r0, [r1, #0]
 800c0f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f6:	f01e 0f10 	tst.w	lr, #16
 800c0fa:	bf08      	it	eq
 800c0fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c100:	f380 8809 	msr	PSP, r0
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	f3af 8000 	nop.w

0800c110 <pxCurrentTCBConst>:
 800c110:	20002170 	.word	0x20002170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop

0800c118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	607b      	str	r3, [r7, #4]
}
 800c130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c132:	f7fe fbc5 	bl	800a8c0 <xTaskIncrementTick>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c13c:	4b06      	ldr	r3, [pc, #24]	; (800c158 <xPortSysTickHandler+0x40>)
 800c13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	2300      	movs	r3, #0
 800c146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	f383 8811 	msr	BASEPRI, r3
}
 800c14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c15c:	b480      	push	{r7}
 800c15e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c160:	4b0b      	ldr	r3, [pc, #44]	; (800c190 <vPortSetupTimerInterrupt+0x34>)
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c166:	4b0b      	ldr	r3, [pc, #44]	; (800c194 <vPortSetupTimerInterrupt+0x38>)
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c16c:	4b0a      	ldr	r3, [pc, #40]	; (800c198 <vPortSetupTimerInterrupt+0x3c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a0a      	ldr	r2, [pc, #40]	; (800c19c <vPortSetupTimerInterrupt+0x40>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	095b      	lsrs	r3, r3, #5
 800c178:	4a09      	ldr	r2, [pc, #36]	; (800c1a0 <vPortSetupTimerInterrupt+0x44>)
 800c17a:	3b01      	subs	r3, #1
 800c17c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c17e:	4b04      	ldr	r3, [pc, #16]	; (800c190 <vPortSetupTimerInterrupt+0x34>)
 800c180:	2207      	movs	r2, #7
 800c182:	601a      	str	r2, [r3, #0]
}
 800c184:	bf00      	nop
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	e000e010 	.word	0xe000e010
 800c194:	e000e018 	.word	0xe000e018
 800c198:	20000050 	.word	0x20000050
 800c19c:	10624dd3 	.word	0x10624dd3
 800c1a0:	e000e014 	.word	0xe000e014

0800c1a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c1b4 <vPortEnableVFP+0x10>
 800c1a8:	6801      	ldr	r1, [r0, #0]
 800c1aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c1ae:	6001      	str	r1, [r0, #0]
 800c1b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1b2:	bf00      	nop
 800c1b4:	e000ed88 	.word	0xe000ed88

0800c1b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1be:	f3ef 8305 	mrs	r3, IPSR
 800c1c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b0f      	cmp	r3, #15
 800c1c8:	d914      	bls.n	800c1f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1ca:	4a17      	ldr	r2, [pc, #92]	; (800c228 <vPortValidateInterruptPriority+0x70>)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1d4:	4b15      	ldr	r3, [pc, #84]	; (800c22c <vPortValidateInterruptPriority+0x74>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	7afa      	ldrb	r2, [r7, #11]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d20a      	bcs.n	800c1f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	607b      	str	r3, [r7, #4]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1f4:	4b0e      	ldr	r3, [pc, #56]	; (800c230 <vPortValidateInterruptPriority+0x78>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c1fc:	4b0d      	ldr	r3, [pc, #52]	; (800c234 <vPortValidateInterruptPriority+0x7c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d90a      	bls.n	800c21a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c208:	f383 8811 	msr	BASEPRI, r3
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	603b      	str	r3, [r7, #0]
}
 800c216:	bf00      	nop
 800c218:	e7fe      	b.n	800c218 <vPortValidateInterruptPriority+0x60>
	}
 800c21a:	bf00      	nop
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	e000e3f0 	.word	0xe000e3f0
 800c22c:	2000279c 	.word	0x2000279c
 800c230:	e000ed0c 	.word	0xe000ed0c
 800c234:	200027a0 	.word	0x200027a0

0800c238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08a      	sub	sp, #40	; 0x28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c240:	2300      	movs	r3, #0
 800c242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c244:	f7fe fa80 	bl	800a748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c248:	4b5b      	ldr	r3, [pc, #364]	; (800c3b8 <pvPortMalloc+0x180>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c250:	f000 f920 	bl	800c494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c254:	4b59      	ldr	r3, [pc, #356]	; (800c3bc <pvPortMalloc+0x184>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f040 8093 	bne.w	800c388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d01d      	beq.n	800c2a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c268:	2208      	movs	r2, #8
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4413      	add	r3, r2
 800c26e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f003 0307 	and.w	r3, r3, #7
 800c276:	2b00      	cmp	r3, #0
 800c278:	d014      	beq.n	800c2a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f023 0307 	bic.w	r3, r3, #7
 800c280:	3308      	adds	r3, #8
 800c282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00a      	beq.n	800c2a4 <pvPortMalloc+0x6c>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	617b      	str	r3, [r7, #20]
}
 800c2a0:	bf00      	nop
 800c2a2:	e7fe      	b.n	800c2a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d06e      	beq.n	800c388 <pvPortMalloc+0x150>
 800c2aa:	4b45      	ldr	r3, [pc, #276]	; (800c3c0 <pvPortMalloc+0x188>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d869      	bhi.n	800c388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2b4:	4b43      	ldr	r3, [pc, #268]	; (800c3c4 <pvPortMalloc+0x18c>)
 800c2b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2b8:	4b42      	ldr	r3, [pc, #264]	; (800c3c4 <pvPortMalloc+0x18c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2be:	e004      	b.n	800c2ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d903      	bls.n	800c2dc <pvPortMalloc+0xa4>
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1f1      	bne.n	800c2c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2dc:	4b36      	ldr	r3, [pc, #216]	; (800c3b8 <pvPortMalloc+0x180>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d050      	beq.n	800c388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2208      	movs	r2, #8
 800c2ec:	4413      	add	r3, r2
 800c2ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	1ad2      	subs	r2, r2, r3
 800c300:	2308      	movs	r3, #8
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	429a      	cmp	r2, r3
 800c306:	d91f      	bls.n	800c348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4413      	add	r3, r2
 800c30e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	f003 0307 	and.w	r3, r3, #7
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <pvPortMalloc+0xf8>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	613b      	str	r3, [r7, #16]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	685a      	ldr	r2, [r3, #4]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c342:	69b8      	ldr	r0, [r7, #24]
 800c344:	f000 f908 	bl	800c558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c348:	4b1d      	ldr	r3, [pc, #116]	; (800c3c0 <pvPortMalloc+0x188>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	4a1b      	ldr	r2, [pc, #108]	; (800c3c0 <pvPortMalloc+0x188>)
 800c354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c356:	4b1a      	ldr	r3, [pc, #104]	; (800c3c0 <pvPortMalloc+0x188>)
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	4b1b      	ldr	r3, [pc, #108]	; (800c3c8 <pvPortMalloc+0x190>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d203      	bcs.n	800c36a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c362:	4b17      	ldr	r3, [pc, #92]	; (800c3c0 <pvPortMalloc+0x188>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a18      	ldr	r2, [pc, #96]	; (800c3c8 <pvPortMalloc+0x190>)
 800c368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	685a      	ldr	r2, [r3, #4]
 800c36e:	4b13      	ldr	r3, [pc, #76]	; (800c3bc <pvPortMalloc+0x184>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	431a      	orrs	r2, r3
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	2200      	movs	r2, #0
 800c37c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c37e:	4b13      	ldr	r3, [pc, #76]	; (800c3cc <pvPortMalloc+0x194>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	4a11      	ldr	r2, [pc, #68]	; (800c3cc <pvPortMalloc+0x194>)
 800c386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c388:	f7fe f9ec 	bl	800a764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	f003 0307 	and.w	r3, r3, #7
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00a      	beq.n	800c3ac <pvPortMalloc+0x174>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	60fb      	str	r3, [r7, #12]
}
 800c3a8:	bf00      	nop
 800c3aa:	e7fe      	b.n	800c3aa <pvPortMalloc+0x172>
	return pvReturn;
 800c3ac:	69fb      	ldr	r3, [r7, #28]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3728      	adds	r7, #40	; 0x28
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	200063ac 	.word	0x200063ac
 800c3bc:	200063c0 	.word	0x200063c0
 800c3c0:	200063b0 	.word	0x200063b0
 800c3c4:	200063a4 	.word	0x200063a4
 800c3c8:	200063b4 	.word	0x200063b4
 800c3cc:	200063b8 	.word	0x200063b8

0800c3d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d04d      	beq.n	800c47e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3e2:	2308      	movs	r3, #8
 800c3e4:	425b      	negs	r3, r3
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	4b24      	ldr	r3, [pc, #144]	; (800c488 <vPortFree+0xb8>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <vPortFree+0x44>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	60fb      	str	r3, [r7, #12]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <vPortFree+0x62>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60bb      	str	r3, [r7, #8]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	4b14      	ldr	r3, [pc, #80]	; (800c488 <vPortFree+0xb8>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01e      	beq.n	800c47e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d11a      	bne.n	800c47e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	4b0e      	ldr	r3, [pc, #56]	; (800c488 <vPortFree+0xb8>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	43db      	mvns	r3, r3
 800c452:	401a      	ands	r2, r3
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c458:	f7fe f976 	bl	800a748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <vPortFree+0xbc>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4413      	add	r3, r2
 800c466:	4a09      	ldr	r2, [pc, #36]	; (800c48c <vPortFree+0xbc>)
 800c468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c46a:	6938      	ldr	r0, [r7, #16]
 800c46c:	f000 f874 	bl	800c558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c470:	4b07      	ldr	r3, [pc, #28]	; (800c490 <vPortFree+0xc0>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	3301      	adds	r3, #1
 800c476:	4a06      	ldr	r2, [pc, #24]	; (800c490 <vPortFree+0xc0>)
 800c478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c47a:	f7fe f973 	bl	800a764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c47e:	bf00      	nop
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	200063c0 	.word	0x200063c0
 800c48c:	200063b0 	.word	0x200063b0
 800c490:	200063bc 	.word	0x200063bc

0800c494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c49a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c49e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4a0:	4b27      	ldr	r3, [pc, #156]	; (800c540 <prvHeapInit+0xac>)
 800c4a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f003 0307 	and.w	r3, r3, #7
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00c      	beq.n	800c4c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3307      	adds	r3, #7
 800c4b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f023 0307 	bic.w	r3, r3, #7
 800c4ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	4a1f      	ldr	r2, [pc, #124]	; (800c540 <prvHeapInit+0xac>)
 800c4c4:	4413      	add	r3, r2
 800c4c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4cc:	4a1d      	ldr	r2, [pc, #116]	; (800c544 <prvHeapInit+0xb0>)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4d2:	4b1c      	ldr	r3, [pc, #112]	; (800c544 <prvHeapInit+0xb0>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	4413      	add	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4e0:	2208      	movs	r2, #8
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	1a9b      	subs	r3, r3, r2
 800c4e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f023 0307 	bic.w	r3, r3, #7
 800c4ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4a15      	ldr	r2, [pc, #84]	; (800c548 <prvHeapInit+0xb4>)
 800c4f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4f6:	4b14      	ldr	r3, [pc, #80]	; (800c548 <prvHeapInit+0xb4>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4fe:	4b12      	ldr	r3, [pc, #72]	; (800c548 <prvHeapInit+0xb4>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2200      	movs	r2, #0
 800c504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	1ad2      	subs	r2, r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c514:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <prvHeapInit+0xb4>)
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	4a0a      	ldr	r2, [pc, #40]	; (800c54c <prvHeapInit+0xb8>)
 800c522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	4a09      	ldr	r2, [pc, #36]	; (800c550 <prvHeapInit+0xbc>)
 800c52a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c52c:	4b09      	ldr	r3, [pc, #36]	; (800c554 <prvHeapInit+0xc0>)
 800c52e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c532:	601a      	str	r2, [r3, #0]
}
 800c534:	bf00      	nop
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	200027a4 	.word	0x200027a4
 800c544:	200063a4 	.word	0x200063a4
 800c548:	200063ac 	.word	0x200063ac
 800c54c:	200063b4 	.word	0x200063b4
 800c550:	200063b0 	.word	0x200063b0
 800c554:	200063c0 	.word	0x200063c0

0800c558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c560:	4b28      	ldr	r3, [pc, #160]	; (800c604 <prvInsertBlockIntoFreeList+0xac>)
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	e002      	b.n	800c56c <prvInsertBlockIntoFreeList+0x14>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	429a      	cmp	r2, r3
 800c574:	d8f7      	bhi.n	800c566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	4413      	add	r3, r2
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	d108      	bne.n	800c59a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	441a      	add	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	441a      	add	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d118      	bne.n	800c5e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	4b15      	ldr	r3, [pc, #84]	; (800c608 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d00d      	beq.n	800c5d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	441a      	add	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	e008      	b.n	800c5e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <prvInsertBlockIntoFreeList+0xb0>)
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	e003      	b.n	800c5e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d002      	beq.n	800c5f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5f6:	bf00      	nop
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	200063a4 	.word	0x200063a4
 800c608:	200063ac 	.word	0x200063ac

0800c60c <__errno>:
 800c60c:	4b01      	ldr	r3, [pc, #4]	; (800c614 <__errno+0x8>)
 800c60e:	6818      	ldr	r0, [r3, #0]
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20000118 	.word	0x20000118

0800c618 <_fgets_r>:
 800c618:	2a01      	cmp	r2, #1
 800c61a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c61e:	4680      	mov	r8, r0
 800c620:	460d      	mov	r5, r1
 800c622:	4617      	mov	r7, r2
 800c624:	461c      	mov	r4, r3
 800c626:	dc03      	bgt.n	800c630 <_fgets_r+0x18>
 800c628:	2500      	movs	r5, #0
 800c62a:	4628      	mov	r0, r5
 800c62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c630:	b118      	cbz	r0, 800c63a <_fgets_r+0x22>
 800c632:	6983      	ldr	r3, [r0, #24]
 800c634:	b90b      	cbnz	r3, 800c63a <_fgets_r+0x22>
 800c636:	f000 f8cb 	bl	800c7d0 <__sinit>
 800c63a:	4b31      	ldr	r3, [pc, #196]	; (800c700 <_fgets_r+0xe8>)
 800c63c:	429c      	cmp	r4, r3
 800c63e:	d120      	bne.n	800c682 <_fgets_r+0x6a>
 800c640:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c646:	07de      	lsls	r6, r3, #31
 800c648:	d405      	bmi.n	800c656 <_fgets_r+0x3e>
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	0598      	lsls	r0, r3, #22
 800c64e:	d402      	bmi.n	800c656 <_fgets_r+0x3e>
 800c650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c652:	f000 fb2f 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800c656:	3f01      	subs	r7, #1
 800c658:	46a9      	mov	r9, r5
 800c65a:	6866      	ldr	r6, [r4, #4]
 800c65c:	b9f6      	cbnz	r6, 800c69c <_fgets_r+0x84>
 800c65e:	4621      	mov	r1, r4
 800c660:	4640      	mov	r0, r8
 800c662:	f001 f887 	bl	800d774 <__srefill_r>
 800c666:	b1c0      	cbz	r0, 800c69a <_fgets_r+0x82>
 800c668:	45a9      	cmp	r9, r5
 800c66a:	d145      	bne.n	800c6f8 <_fgets_r+0xe0>
 800c66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c66e:	07d9      	lsls	r1, r3, #31
 800c670:	d4da      	bmi.n	800c628 <_fgets_r+0x10>
 800c672:	89a5      	ldrh	r5, [r4, #12]
 800c674:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 800c678:	d1d6      	bne.n	800c628 <_fgets_r+0x10>
 800c67a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c67c:	f000 fb1b 	bl	800ccb6 <__retarget_lock_release_recursive>
 800c680:	e7d3      	b.n	800c62a <_fgets_r+0x12>
 800c682:	4b20      	ldr	r3, [pc, #128]	; (800c704 <_fgets_r+0xec>)
 800c684:	429c      	cmp	r4, r3
 800c686:	d102      	bne.n	800c68e <_fgets_r+0x76>
 800c688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c68c:	e7da      	b.n	800c644 <_fgets_r+0x2c>
 800c68e:	4b1e      	ldr	r3, [pc, #120]	; (800c708 <_fgets_r+0xf0>)
 800c690:	429c      	cmp	r4, r3
 800c692:	bf08      	it	eq
 800c694:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 800c698:	e7d4      	b.n	800c644 <_fgets_r+0x2c>
 800c69a:	6866      	ldr	r6, [r4, #4]
 800c69c:	f8d4 a000 	ldr.w	sl, [r4]
 800c6a0:	42be      	cmp	r6, r7
 800c6a2:	bf28      	it	cs
 800c6a4:	463e      	movcs	r6, r7
 800c6a6:	4632      	mov	r2, r6
 800c6a8:	210a      	movs	r1, #10
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	f7f3 fd98 	bl	80001e0 <memchr>
 800c6b0:	6863      	ldr	r3, [r4, #4]
 800c6b2:	b1a0      	cbz	r0, 800c6de <_fgets_r+0xc6>
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	eba0 060a 	sub.w	r6, r0, sl
 800c6ba:	1b9b      	subs	r3, r3, r6
 800c6bc:	e9c4 0300 	strd	r0, r3, [r4]
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	4651      	mov	r1, sl
 800c6c4:	4648      	mov	r0, r9
 800c6c6:	f000 fb5d 	bl	800cd84 <memcpy>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f809 3006 	strb.w	r3, [r9, r6]
 800c6d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6d2:	07da      	lsls	r2, r3, #31
 800c6d4:	d4a9      	bmi.n	800c62a <_fgets_r+0x12>
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	059b      	lsls	r3, r3, #22
 800c6da:	d4a6      	bmi.n	800c62a <_fgets_r+0x12>
 800c6dc:	e7cd      	b.n	800c67a <_fgets_r+0x62>
 800c6de:	1b9b      	subs	r3, r3, r6
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	4433      	add	r3, r6
 800c6e6:	4648      	mov	r0, r9
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	4651      	mov	r1, sl
 800c6ee:	f000 fb49 	bl	800cd84 <memcpy>
 800c6f2:	1bbf      	subs	r7, r7, r6
 800c6f4:	44b1      	add	r9, r6
 800c6f6:	d1b0      	bne.n	800c65a <_fgets_r+0x42>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f889 3000 	strb.w	r3, [r9]
 800c6fe:	e7e7      	b.n	800c6d0 <_fgets_r+0xb8>
 800c700:	0800f808 	.word	0x0800f808
 800c704:	0800f828 	.word	0x0800f828
 800c708:	0800f7e8 	.word	0x0800f7e8

0800c70c <fgets>:
 800c70c:	4613      	mov	r3, r2
 800c70e:	460a      	mov	r2, r1
 800c710:	4601      	mov	r1, r0
 800c712:	4802      	ldr	r0, [pc, #8]	; (800c71c <fgets+0x10>)
 800c714:	6800      	ldr	r0, [r0, #0]
 800c716:	f7ff bf7f 	b.w	800c618 <_fgets_r>
 800c71a:	bf00      	nop
 800c71c:	20000118 	.word	0x20000118

0800c720 <std>:
 800c720:	2300      	movs	r3, #0
 800c722:	b510      	push	{r4, lr}
 800c724:	4604      	mov	r4, r0
 800c726:	e9c0 3300 	strd	r3, r3, [r0]
 800c72a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c72e:	6083      	str	r3, [r0, #8]
 800c730:	8181      	strh	r1, [r0, #12]
 800c732:	6643      	str	r3, [r0, #100]	; 0x64
 800c734:	81c2      	strh	r2, [r0, #14]
 800c736:	6183      	str	r3, [r0, #24]
 800c738:	4619      	mov	r1, r3
 800c73a:	2208      	movs	r2, #8
 800c73c:	305c      	adds	r0, #92	; 0x5c
 800c73e:	f000 fb2f 	bl	800cda0 <memset>
 800c742:	4b05      	ldr	r3, [pc, #20]	; (800c758 <std+0x38>)
 800c744:	6263      	str	r3, [r4, #36]	; 0x24
 800c746:	4b05      	ldr	r3, [pc, #20]	; (800c75c <std+0x3c>)
 800c748:	62a3      	str	r3, [r4, #40]	; 0x28
 800c74a:	4b05      	ldr	r3, [pc, #20]	; (800c760 <std+0x40>)
 800c74c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c74e:	4b05      	ldr	r3, [pc, #20]	; (800c764 <std+0x44>)
 800c750:	6224      	str	r4, [r4, #32]
 800c752:	6323      	str	r3, [r4, #48]	; 0x30
 800c754:	bd10      	pop	{r4, pc}
 800c756:	bf00      	nop
 800c758:	0800dacd 	.word	0x0800dacd
 800c75c:	0800daf3 	.word	0x0800daf3
 800c760:	0800db2b 	.word	0x0800db2b
 800c764:	0800db4f 	.word	0x0800db4f

0800c768 <_cleanup_r>:
 800c768:	4901      	ldr	r1, [pc, #4]	; (800c770 <_cleanup_r+0x8>)
 800c76a:	f000 b9f0 	b.w	800cb4e <_fwalk_reent>
 800c76e:	bf00      	nop
 800c770:	0800ded5 	.word	0x0800ded5

0800c774 <__sfmoreglue>:
 800c774:	b570      	push	{r4, r5, r6, lr}
 800c776:	2268      	movs	r2, #104	; 0x68
 800c778:	1e4d      	subs	r5, r1, #1
 800c77a:	4355      	muls	r5, r2
 800c77c:	460e      	mov	r6, r1
 800c77e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c782:	f000 fb81 	bl	800ce88 <_malloc_r>
 800c786:	4604      	mov	r4, r0
 800c788:	b140      	cbz	r0, 800c79c <__sfmoreglue+0x28>
 800c78a:	2100      	movs	r1, #0
 800c78c:	e9c0 1600 	strd	r1, r6, [r0]
 800c790:	300c      	adds	r0, #12
 800c792:	60a0      	str	r0, [r4, #8]
 800c794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c798:	f000 fb02 	bl	800cda0 <memset>
 800c79c:	4620      	mov	r0, r4
 800c79e:	bd70      	pop	{r4, r5, r6, pc}

0800c7a0 <__sfp_lock_acquire>:
 800c7a0:	4801      	ldr	r0, [pc, #4]	; (800c7a8 <__sfp_lock_acquire+0x8>)
 800c7a2:	f000 ba87 	b.w	800ccb4 <__retarget_lock_acquire_recursive>
 800c7a6:	bf00      	nop
 800c7a8:	200063c5 	.word	0x200063c5

0800c7ac <__sfp_lock_release>:
 800c7ac:	4801      	ldr	r0, [pc, #4]	; (800c7b4 <__sfp_lock_release+0x8>)
 800c7ae:	f000 ba82 	b.w	800ccb6 <__retarget_lock_release_recursive>
 800c7b2:	bf00      	nop
 800c7b4:	200063c5 	.word	0x200063c5

0800c7b8 <__sinit_lock_acquire>:
 800c7b8:	4801      	ldr	r0, [pc, #4]	; (800c7c0 <__sinit_lock_acquire+0x8>)
 800c7ba:	f000 ba7b 	b.w	800ccb4 <__retarget_lock_acquire_recursive>
 800c7be:	bf00      	nop
 800c7c0:	200063c6 	.word	0x200063c6

0800c7c4 <__sinit_lock_release>:
 800c7c4:	4801      	ldr	r0, [pc, #4]	; (800c7cc <__sinit_lock_release+0x8>)
 800c7c6:	f000 ba76 	b.w	800ccb6 <__retarget_lock_release_recursive>
 800c7ca:	bf00      	nop
 800c7cc:	200063c6 	.word	0x200063c6

0800c7d0 <__sinit>:
 800c7d0:	b510      	push	{r4, lr}
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	f7ff fff0 	bl	800c7b8 <__sinit_lock_acquire>
 800c7d8:	69a3      	ldr	r3, [r4, #24]
 800c7da:	b11b      	cbz	r3, 800c7e4 <__sinit+0x14>
 800c7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7e0:	f7ff bff0 	b.w	800c7c4 <__sinit_lock_release>
 800c7e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c7e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c7ea:	4b13      	ldr	r3, [pc, #76]	; (800c838 <__sinit+0x68>)
 800c7ec:	4a13      	ldr	r2, [pc, #76]	; (800c83c <__sinit+0x6c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c7f2:	42a3      	cmp	r3, r4
 800c7f4:	bf04      	itt	eq
 800c7f6:	2301      	moveq	r3, #1
 800c7f8:	61a3      	streq	r3, [r4, #24]
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 f820 	bl	800c840 <__sfp>
 800c800:	6060      	str	r0, [r4, #4]
 800c802:	4620      	mov	r0, r4
 800c804:	f000 f81c 	bl	800c840 <__sfp>
 800c808:	60a0      	str	r0, [r4, #8]
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 f818 	bl	800c840 <__sfp>
 800c810:	2200      	movs	r2, #0
 800c812:	60e0      	str	r0, [r4, #12]
 800c814:	2104      	movs	r1, #4
 800c816:	6860      	ldr	r0, [r4, #4]
 800c818:	f7ff ff82 	bl	800c720 <std>
 800c81c:	68a0      	ldr	r0, [r4, #8]
 800c81e:	2201      	movs	r2, #1
 800c820:	2109      	movs	r1, #9
 800c822:	f7ff ff7d 	bl	800c720 <std>
 800c826:	68e0      	ldr	r0, [r4, #12]
 800c828:	2202      	movs	r2, #2
 800c82a:	2112      	movs	r1, #18
 800c82c:	f7ff ff78 	bl	800c720 <std>
 800c830:	2301      	movs	r3, #1
 800c832:	61a3      	str	r3, [r4, #24]
 800c834:	e7d2      	b.n	800c7dc <__sinit+0xc>
 800c836:	bf00      	nop
 800c838:	0800f848 	.word	0x0800f848
 800c83c:	0800c769 	.word	0x0800c769

0800c840 <__sfp>:
 800c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c842:	4607      	mov	r7, r0
 800c844:	f7ff ffac 	bl	800c7a0 <__sfp_lock_acquire>
 800c848:	4b1e      	ldr	r3, [pc, #120]	; (800c8c4 <__sfp+0x84>)
 800c84a:	681e      	ldr	r6, [r3, #0]
 800c84c:	69b3      	ldr	r3, [r6, #24]
 800c84e:	b913      	cbnz	r3, 800c856 <__sfp+0x16>
 800c850:	4630      	mov	r0, r6
 800c852:	f7ff ffbd 	bl	800c7d0 <__sinit>
 800c856:	3648      	adds	r6, #72	; 0x48
 800c858:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	d503      	bpl.n	800c868 <__sfp+0x28>
 800c860:	6833      	ldr	r3, [r6, #0]
 800c862:	b30b      	cbz	r3, 800c8a8 <__sfp+0x68>
 800c864:	6836      	ldr	r6, [r6, #0]
 800c866:	e7f7      	b.n	800c858 <__sfp+0x18>
 800c868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c86c:	b9d5      	cbnz	r5, 800c8a4 <__sfp+0x64>
 800c86e:	4b16      	ldr	r3, [pc, #88]	; (800c8c8 <__sfp+0x88>)
 800c870:	60e3      	str	r3, [r4, #12]
 800c872:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c876:	6665      	str	r5, [r4, #100]	; 0x64
 800c878:	f000 fa1a 	bl	800ccb0 <__retarget_lock_init_recursive>
 800c87c:	f7ff ff96 	bl	800c7ac <__sfp_lock_release>
 800c880:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c884:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c888:	6025      	str	r5, [r4, #0]
 800c88a:	61a5      	str	r5, [r4, #24]
 800c88c:	2208      	movs	r2, #8
 800c88e:	4629      	mov	r1, r5
 800c890:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c894:	f000 fa84 	bl	800cda0 <memset>
 800c898:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c89c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a4:	3468      	adds	r4, #104	; 0x68
 800c8a6:	e7d9      	b.n	800c85c <__sfp+0x1c>
 800c8a8:	2104      	movs	r1, #4
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	f7ff ff62 	bl	800c774 <__sfmoreglue>
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	6030      	str	r0, [r6, #0]
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1d5      	bne.n	800c864 <__sfp+0x24>
 800c8b8:	f7ff ff78 	bl	800c7ac <__sfp_lock_release>
 800c8bc:	230c      	movs	r3, #12
 800c8be:	603b      	str	r3, [r7, #0]
 800c8c0:	e7ee      	b.n	800c8a0 <__sfp+0x60>
 800c8c2:	bf00      	nop
 800c8c4:	0800f848 	.word	0x0800f848
 800c8c8:	ffff0001 	.word	0xffff0001

0800c8cc <_fopen_r>:
 800c8cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	aa01      	add	r2, sp, #4
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	f001 fb4b 	bl	800df70 <__sflags>
 800c8da:	4606      	mov	r6, r0
 800c8dc:	b918      	cbnz	r0, 800c8e6 <_fopen_r+0x1a>
 800c8de:	2400      	movs	r4, #0
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	b003      	add	sp, #12
 800c8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	f7ff ffaa 	bl	800c840 <__sfp>
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d0f5      	beq.n	800c8de <_fopen_r+0x12>
 800c8f2:	4639      	mov	r1, r7
 800c8f4:	9a01      	ldr	r2, [sp, #4]
 800c8f6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f000 fe26 	bl	800d54c <_open_r>
 800c900:	1e07      	subs	r7, r0, #0
 800c902:	da09      	bge.n	800c918 <_fopen_r+0x4c>
 800c904:	2500      	movs	r5, #0
 800c906:	f7ff ff4b 	bl	800c7a0 <__sfp_lock_acquire>
 800c90a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c90c:	81a5      	strh	r5, [r4, #12]
 800c90e:	f000 f9d0 	bl	800ccb2 <__retarget_lock_close_recursive>
 800c912:	f7ff ff4b 	bl	800c7ac <__sfp_lock_release>
 800c916:	e7e2      	b.n	800c8de <_fopen_r+0x12>
 800c918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c91a:	07db      	lsls	r3, r3, #31
 800c91c:	d405      	bmi.n	800c92a <_fopen_r+0x5e>
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	0598      	lsls	r0, r3, #22
 800c922:	d402      	bmi.n	800c92a <_fopen_r+0x5e>
 800c924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c926:	f000 f9c5 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800c92a:	4b0e      	ldr	r3, [pc, #56]	; (800c964 <_fopen_r+0x98>)
 800c92c:	6263      	str	r3, [r4, #36]	; 0x24
 800c92e:	4b0e      	ldr	r3, [pc, #56]	; (800c968 <_fopen_r+0x9c>)
 800c930:	62a3      	str	r3, [r4, #40]	; 0x28
 800c932:	4b0e      	ldr	r3, [pc, #56]	; (800c96c <_fopen_r+0xa0>)
 800c934:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c936:	05f1      	lsls	r1, r6, #23
 800c938:	4b0d      	ldr	r3, [pc, #52]	; (800c970 <_fopen_r+0xa4>)
 800c93a:	81e7      	strh	r7, [r4, #14]
 800c93c:	81a6      	strh	r6, [r4, #12]
 800c93e:	6224      	str	r4, [r4, #32]
 800c940:	6323      	str	r3, [r4, #48]	; 0x30
 800c942:	d505      	bpl.n	800c950 <_fopen_r+0x84>
 800c944:	2302      	movs	r3, #2
 800c946:	2200      	movs	r2, #0
 800c948:	4621      	mov	r1, r4
 800c94a:	4628      	mov	r0, r5
 800c94c:	f000 f82c 	bl	800c9a8 <_fseek_r>
 800c950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c952:	07da      	lsls	r2, r3, #31
 800c954:	d4c4      	bmi.n	800c8e0 <_fopen_r+0x14>
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	059b      	lsls	r3, r3, #22
 800c95a:	d4c1      	bmi.n	800c8e0 <_fopen_r+0x14>
 800c95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c95e:	f000 f9aa 	bl	800ccb6 <__retarget_lock_release_recursive>
 800c962:	e7bd      	b.n	800c8e0 <_fopen_r+0x14>
 800c964:	0800dacd 	.word	0x0800dacd
 800c968:	0800daf3 	.word	0x0800daf3
 800c96c:	0800db2b 	.word	0x0800db2b
 800c970:	0800db4f 	.word	0x0800db4f

0800c974 <fopen>:
 800c974:	4b02      	ldr	r3, [pc, #8]	; (800c980 <fopen+0xc>)
 800c976:	460a      	mov	r2, r1
 800c978:	4601      	mov	r1, r0
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	f7ff bfa6 	b.w	800c8cc <_fopen_r>
 800c980:	20000118 	.word	0x20000118

0800c984 <fiprintf>:
 800c984:	b40e      	push	{r1, r2, r3}
 800c986:	b503      	push	{r0, r1, lr}
 800c988:	4601      	mov	r1, r0
 800c98a:	ab03      	add	r3, sp, #12
 800c98c:	4805      	ldr	r0, [pc, #20]	; (800c9a4 <fiprintf+0x20>)
 800c98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c992:	6800      	ldr	r0, [r0, #0]
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	f000 fb15 	bl	800cfc4 <_vfiprintf_r>
 800c99a:	b002      	add	sp, #8
 800c99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a0:	b003      	add	sp, #12
 800c9a2:	4770      	bx	lr
 800c9a4:	20000118 	.word	0x20000118

0800c9a8 <_fseek_r>:
 800c9a8:	f000 b800 	b.w	800c9ac <_fseeko_r>

0800c9ac <_fseeko_r>:
 800c9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	4617      	mov	r7, r2
 800c9b4:	461d      	mov	r5, r3
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	b118      	cbz	r0, 800c9c2 <_fseeko_r+0x16>
 800c9ba:	6983      	ldr	r3, [r0, #24]
 800c9bc:	b90b      	cbnz	r3, 800c9c2 <_fseeko_r+0x16>
 800c9be:	f7ff ff07 	bl	800c7d0 <__sinit>
 800c9c2:	4b51      	ldr	r3, [pc, #324]	; (800cb08 <_fseeko_r+0x15c>)
 800c9c4:	429c      	cmp	r4, r3
 800c9c6:	d122      	bne.n	800ca0e <_fseeko_r+0x62>
 800c9c8:	6874      	ldr	r4, [r6, #4]
 800c9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9cc:	07d9      	lsls	r1, r3, #31
 800c9ce:	d405      	bmi.n	800c9dc <_fseeko_r+0x30>
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	059a      	lsls	r2, r3, #22
 800c9d4:	d402      	bmi.n	800c9dc <_fseeko_r+0x30>
 800c9d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9d8:	f000 f96c 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800c9e2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800c9e6:	d103      	bne.n	800c9f0 <_fseeko_r+0x44>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f001 fa72 	bl	800ded4 <_fflush_r>
 800c9f0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800c9f4:	f1b8 0f00 	cmp.w	r8, #0
 800c9f8:	d113      	bne.n	800ca22 <_fseeko_r+0x76>
 800c9fa:	231d      	movs	r3, #29
 800c9fc:	6033      	str	r3, [r6, #0]
 800c9fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca00:	07d9      	lsls	r1, r3, #31
 800ca02:	d578      	bpl.n	800caf6 <_fseeko_r+0x14a>
 800ca04:	f04f 35ff 	mov.w	r5, #4294967295
 800ca08:	4628      	mov	r0, r5
 800ca0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0e:	4b3f      	ldr	r3, [pc, #252]	; (800cb0c <_fseeko_r+0x160>)
 800ca10:	429c      	cmp	r4, r3
 800ca12:	d101      	bne.n	800ca18 <_fseeko_r+0x6c>
 800ca14:	68b4      	ldr	r4, [r6, #8]
 800ca16:	e7d8      	b.n	800c9ca <_fseeko_r+0x1e>
 800ca18:	4b3d      	ldr	r3, [pc, #244]	; (800cb10 <_fseeko_r+0x164>)
 800ca1a:	429c      	cmp	r4, r3
 800ca1c:	bf08      	it	eq
 800ca1e:	68f4      	ldreq	r4, [r6, #12]
 800ca20:	e7d3      	b.n	800c9ca <_fseeko_r+0x1e>
 800ca22:	2d01      	cmp	r5, #1
 800ca24:	d036      	beq.n	800ca94 <_fseeko_r+0xe8>
 800ca26:	f035 0302 	bics.w	r3, r5, #2
 800ca2a:	d162      	bne.n	800caf2 <_fseeko_r+0x146>
 800ca2c:	6923      	ldr	r3, [r4, #16]
 800ca2e:	b91b      	cbnz	r3, 800ca38 <_fseeko_r+0x8c>
 800ca30:	4621      	mov	r1, r4
 800ca32:	4630      	mov	r0, r6
 800ca34:	f000 f966 	bl	800cd04 <__smakebuf_r>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f001 fa4a 	bl	800ded4 <_fflush_r>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d1dc      	bne.n	800c9fe <_fseeko_r+0x52>
 800ca44:	6a21      	ldr	r1, [r4, #32]
 800ca46:	462b      	mov	r3, r5
 800ca48:	463a      	mov	r2, r7
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	47c0      	blx	r8
 800ca4e:	3001      	adds	r0, #1
 800ca50:	d0d5      	beq.n	800c9fe <_fseeko_r+0x52>
 800ca52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca54:	b141      	cbz	r1, 800ca68 <_fseeko_r+0xbc>
 800ca56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca5a:	4299      	cmp	r1, r3
 800ca5c:	d002      	beq.n	800ca64 <_fseeko_r+0xb8>
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f000 f9a6 	bl	800cdb0 <_free_r>
 800ca64:	2300      	movs	r3, #0
 800ca66:	6363      	str	r3, [r4, #52]	; 0x34
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	2600      	movs	r6, #0
 800ca70:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800ca74:	6066      	str	r6, [r4, #4]
 800ca76:	81a3      	strh	r3, [r4, #12]
 800ca78:	2208      	movs	r2, #8
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca80:	f000 f98e 	bl	800cda0 <memset>
 800ca84:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ca86:	f015 0501 	ands.w	r5, r5, #1
 800ca8a:	d13b      	bne.n	800cb04 <_fseeko_r+0x158>
 800ca8c:	89a3      	ldrh	r3, [r4, #12]
 800ca8e:	059b      	lsls	r3, r3, #22
 800ca90:	d4ba      	bmi.n	800ca08 <_fseeko_r+0x5c>
 800ca92:	e021      	b.n	800cad8 <_fseeko_r+0x12c>
 800ca94:	4621      	mov	r1, r4
 800ca96:	4630      	mov	r0, r6
 800ca98:	f001 fa1c 	bl	800ded4 <_fflush_r>
 800ca9c:	89a2      	ldrh	r2, [r4, #12]
 800ca9e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caa2:	d00c      	beq.n	800cabe <_fseeko_r+0x112>
 800caa4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	075a      	lsls	r2, r3, #29
 800caaa:	d519      	bpl.n	800cae0 <_fseeko_r+0x134>
 800caac:	6863      	ldr	r3, [r4, #4]
 800caae:	1aed      	subs	r5, r5, r3
 800cab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cab2:	b10b      	cbz	r3, 800cab8 <_fseeko_r+0x10c>
 800cab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cab6:	1aed      	subs	r5, r5, r3
 800cab8:	442f      	add	r7, r5
 800caba:	2500      	movs	r5, #0
 800cabc:	e7b6      	b.n	800ca2c <_fseeko_r+0x80>
 800cabe:	462b      	mov	r3, r5
 800cac0:	6a21      	ldr	r1, [r4, #32]
 800cac2:	4630      	mov	r0, r6
 800cac4:	47c0      	blx	r8
 800cac6:	1c43      	adds	r3, r0, #1
 800cac8:	4605      	mov	r5, r0
 800caca:	d1ec      	bne.n	800caa6 <_fseeko_r+0xfa>
 800cacc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cace:	07d8      	lsls	r0, r3, #31
 800cad0:	d498      	bmi.n	800ca04 <_fseeko_r+0x58>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	0599      	lsls	r1, r3, #22
 800cad6:	d495      	bmi.n	800ca04 <_fseeko_r+0x58>
 800cad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cada:	f000 f8ec 	bl	800ccb6 <__retarget_lock_release_recursive>
 800cade:	e793      	b.n	800ca08 <_fseeko_r+0x5c>
 800cae0:	0718      	lsls	r0, r3, #28
 800cae2:	d5e9      	bpl.n	800cab8 <_fseeko_r+0x10c>
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	6922      	ldr	r2, [r4, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d0e5      	beq.n	800cab8 <_fseeko_r+0x10c>
 800caec:	1a9b      	subs	r3, r3, r2
 800caee:	441d      	add	r5, r3
 800caf0:	e7e2      	b.n	800cab8 <_fseeko_r+0x10c>
 800caf2:	2316      	movs	r3, #22
 800caf4:	e782      	b.n	800c9fc <_fseeko_r+0x50>
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	059a      	lsls	r2, r3, #22
 800cafa:	d483      	bmi.n	800ca04 <_fseeko_r+0x58>
 800cafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cafe:	f000 f8da 	bl	800ccb6 <__retarget_lock_release_recursive>
 800cb02:	e77f      	b.n	800ca04 <_fseeko_r+0x58>
 800cb04:	4635      	mov	r5, r6
 800cb06:	e77f      	b.n	800ca08 <_fseeko_r+0x5c>
 800cb08:	0800f808 	.word	0x0800f808
 800cb0c:	0800f828 	.word	0x0800f828
 800cb10:	0800f7e8 	.word	0x0800f7e8

0800cb14 <_fwalk>:
 800cb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb18:	460f      	mov	r7, r1
 800cb1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb1e:	2600      	movs	r6, #0
 800cb20:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800cb24:	f1b8 0801 	subs.w	r8, r8, #1
 800cb28:	d505      	bpl.n	800cb36 <_fwalk+0x22>
 800cb2a:	6824      	ldr	r4, [r4, #0]
 800cb2c:	2c00      	cmp	r4, #0
 800cb2e:	d1f7      	bne.n	800cb20 <_fwalk+0xc>
 800cb30:	4630      	mov	r0, r6
 800cb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb36:	89ab      	ldrh	r3, [r5, #12]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d906      	bls.n	800cb4a <_fwalk+0x36>
 800cb3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb40:	3301      	adds	r3, #1
 800cb42:	d002      	beq.n	800cb4a <_fwalk+0x36>
 800cb44:	4628      	mov	r0, r5
 800cb46:	47b8      	blx	r7
 800cb48:	4306      	orrs	r6, r0
 800cb4a:	3568      	adds	r5, #104	; 0x68
 800cb4c:	e7ea      	b.n	800cb24 <_fwalk+0x10>

0800cb4e <_fwalk_reent>:
 800cb4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb52:	4606      	mov	r6, r0
 800cb54:	4688      	mov	r8, r1
 800cb56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb5a:	2700      	movs	r7, #0
 800cb5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb60:	f1b9 0901 	subs.w	r9, r9, #1
 800cb64:	d505      	bpl.n	800cb72 <_fwalk_reent+0x24>
 800cb66:	6824      	ldr	r4, [r4, #0]
 800cb68:	2c00      	cmp	r4, #0
 800cb6a:	d1f7      	bne.n	800cb5c <_fwalk_reent+0xe>
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb72:	89ab      	ldrh	r3, [r5, #12]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d907      	bls.n	800cb88 <_fwalk_reent+0x3a>
 800cb78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	d003      	beq.n	800cb88 <_fwalk_reent+0x3a>
 800cb80:	4629      	mov	r1, r5
 800cb82:	4630      	mov	r0, r6
 800cb84:	47c0      	blx	r8
 800cb86:	4307      	orrs	r7, r0
 800cb88:	3568      	adds	r5, #104	; 0x68
 800cb8a:	e7e9      	b.n	800cb60 <_fwalk_reent+0x12>

0800cb8c <_fwrite_r>:
 800cb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb90:	9c08      	ldr	r4, [sp, #32]
 800cb92:	468a      	mov	sl, r1
 800cb94:	4690      	mov	r8, r2
 800cb96:	fb02 f903 	mul.w	r9, r2, r3
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	b118      	cbz	r0, 800cba6 <_fwrite_r+0x1a>
 800cb9e:	6983      	ldr	r3, [r0, #24]
 800cba0:	b90b      	cbnz	r3, 800cba6 <_fwrite_r+0x1a>
 800cba2:	f7ff fe15 	bl	800c7d0 <__sinit>
 800cba6:	4b26      	ldr	r3, [pc, #152]	; (800cc40 <_fwrite_r+0xb4>)
 800cba8:	429c      	cmp	r4, r3
 800cbaa:	d123      	bne.n	800cbf4 <_fwrite_r+0x68>
 800cbac:	686c      	ldr	r4, [r5, #4]
 800cbae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbb0:	07de      	lsls	r6, r3, #31
 800cbb2:	d405      	bmi.n	800cbc0 <_fwrite_r+0x34>
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	0598      	lsls	r0, r3, #22
 800cbb8:	d402      	bmi.n	800cbc0 <_fwrite_r+0x34>
 800cbba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbbc:	f000 f87a 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	0719      	lsls	r1, r3, #28
 800cbc4:	d520      	bpl.n	800cc08 <_fwrite_r+0x7c>
 800cbc6:	6923      	ldr	r3, [r4, #16]
 800cbc8:	b1f3      	cbz	r3, 800cc08 <_fwrite_r+0x7c>
 800cbca:	2600      	movs	r6, #0
 800cbcc:	454e      	cmp	r6, r9
 800cbce:	d029      	beq.n	800cc24 <_fwrite_r+0x98>
 800cbd0:	68a7      	ldr	r7, [r4, #8]
 800cbd2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800cbd6:	3f01      	subs	r7, #1
 800cbd8:	2f00      	cmp	r7, #0
 800cbda:	60a7      	str	r7, [r4, #8]
 800cbdc:	da04      	bge.n	800cbe8 <_fwrite_r+0x5c>
 800cbde:	69a3      	ldr	r3, [r4, #24]
 800cbe0:	429f      	cmp	r7, r3
 800cbe2:	db19      	blt.n	800cc18 <_fwrite_r+0x8c>
 800cbe4:	290a      	cmp	r1, #10
 800cbe6:	d017      	beq.n	800cc18 <_fwrite_r+0x8c>
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	1c5a      	adds	r2, r3, #1
 800cbec:	6022      	str	r2, [r4, #0]
 800cbee:	7019      	strb	r1, [r3, #0]
 800cbf0:	3601      	adds	r6, #1
 800cbf2:	e7eb      	b.n	800cbcc <_fwrite_r+0x40>
 800cbf4:	4b13      	ldr	r3, [pc, #76]	; (800cc44 <_fwrite_r+0xb8>)
 800cbf6:	429c      	cmp	r4, r3
 800cbf8:	d101      	bne.n	800cbfe <_fwrite_r+0x72>
 800cbfa:	68ac      	ldr	r4, [r5, #8]
 800cbfc:	e7d7      	b.n	800cbae <_fwrite_r+0x22>
 800cbfe:	4b12      	ldr	r3, [pc, #72]	; (800cc48 <_fwrite_r+0xbc>)
 800cc00:	429c      	cmp	r4, r3
 800cc02:	bf08      	it	eq
 800cc04:	68ec      	ldreq	r4, [r5, #12]
 800cc06:	e7d2      	b.n	800cbae <_fwrite_r+0x22>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f001 f85e 	bl	800dccc <__swsetup_r>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d0da      	beq.n	800cbca <_fwrite_r+0x3e>
 800cc14:	2600      	movs	r6, #0
 800cc16:	e005      	b.n	800cc24 <_fwrite_r+0x98>
 800cc18:	4622      	mov	r2, r4
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 fff2 	bl	800dc04 <__swbuf_r>
 800cc20:	3001      	adds	r0, #1
 800cc22:	d1e5      	bne.n	800cbf0 <_fwrite_r+0x64>
 800cc24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc26:	07da      	lsls	r2, r3, #31
 800cc28:	d405      	bmi.n	800cc36 <_fwrite_r+0xaa>
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	059b      	lsls	r3, r3, #22
 800cc2e:	d402      	bmi.n	800cc36 <_fwrite_r+0xaa>
 800cc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc32:	f000 f840 	bl	800ccb6 <__retarget_lock_release_recursive>
 800cc36:	fbb6 f0f8 	udiv	r0, r6, r8
 800cc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc3e:	bf00      	nop
 800cc40:	0800f808 	.word	0x0800f808
 800cc44:	0800f828 	.word	0x0800f828
 800cc48:	0800f7e8 	.word	0x0800f7e8

0800cc4c <fwrite>:
 800cc4c:	b507      	push	{r0, r1, r2, lr}
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	4613      	mov	r3, r2
 800cc52:	460a      	mov	r2, r1
 800cc54:	4601      	mov	r1, r0
 800cc56:	4803      	ldr	r0, [pc, #12]	; (800cc64 <fwrite+0x18>)
 800cc58:	6800      	ldr	r0, [r0, #0]
 800cc5a:	f7ff ff97 	bl	800cb8c <_fwrite_r>
 800cc5e:	b003      	add	sp, #12
 800cc60:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc64:	20000118 	.word	0x20000118

0800cc68 <__libc_init_array>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	4d0d      	ldr	r5, [pc, #52]	; (800cca0 <__libc_init_array+0x38>)
 800cc6c:	4c0d      	ldr	r4, [pc, #52]	; (800cca4 <__libc_init_array+0x3c>)
 800cc6e:	1b64      	subs	r4, r4, r5
 800cc70:	10a4      	asrs	r4, r4, #2
 800cc72:	2600      	movs	r6, #0
 800cc74:	42a6      	cmp	r6, r4
 800cc76:	d109      	bne.n	800cc8c <__libc_init_array+0x24>
 800cc78:	4d0b      	ldr	r5, [pc, #44]	; (800cca8 <__libc_init_array+0x40>)
 800cc7a:	4c0c      	ldr	r4, [pc, #48]	; (800ccac <__libc_init_array+0x44>)
 800cc7c:	f002 f842 	bl	800ed04 <_init>
 800cc80:	1b64      	subs	r4, r4, r5
 800cc82:	10a4      	asrs	r4, r4, #2
 800cc84:	2600      	movs	r6, #0
 800cc86:	42a6      	cmp	r6, r4
 800cc88:	d105      	bne.n	800cc96 <__libc_init_array+0x2e>
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}
 800cc8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc90:	4798      	blx	r3
 800cc92:	3601      	adds	r6, #1
 800cc94:	e7ee      	b.n	800cc74 <__libc_init_array+0xc>
 800cc96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc9a:	4798      	blx	r3
 800cc9c:	3601      	adds	r6, #1
 800cc9e:	e7f2      	b.n	800cc86 <__libc_init_array+0x1e>
 800cca0:	0800f9a4 	.word	0x0800f9a4
 800cca4:	0800f9a4 	.word	0x0800f9a4
 800cca8:	0800f9a4 	.word	0x0800f9a4
 800ccac:	0800f9a8 	.word	0x0800f9a8

0800ccb0 <__retarget_lock_init_recursive>:
 800ccb0:	4770      	bx	lr

0800ccb2 <__retarget_lock_close_recursive>:
 800ccb2:	4770      	bx	lr

0800ccb4 <__retarget_lock_acquire_recursive>:
 800ccb4:	4770      	bx	lr

0800ccb6 <__retarget_lock_release_recursive>:
 800ccb6:	4770      	bx	lr

0800ccb8 <__swhatbuf_r>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	460e      	mov	r6, r1
 800ccbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc0:	2900      	cmp	r1, #0
 800ccc2:	b096      	sub	sp, #88	; 0x58
 800ccc4:	4614      	mov	r4, r2
 800ccc6:	461d      	mov	r5, r3
 800ccc8:	da08      	bge.n	800ccdc <__swhatbuf_r+0x24>
 800ccca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	602a      	str	r2, [r5, #0]
 800ccd2:	061a      	lsls	r2, r3, #24
 800ccd4:	d410      	bmi.n	800ccf8 <__swhatbuf_r+0x40>
 800ccd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccda:	e00e      	b.n	800ccfa <__swhatbuf_r+0x42>
 800ccdc:	466a      	mov	r2, sp
 800ccde:	f001 f97d 	bl	800dfdc <_fstat_r>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	dbf1      	blt.n	800ccca <__swhatbuf_r+0x12>
 800cce6:	9a01      	ldr	r2, [sp, #4]
 800cce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccf0:	425a      	negs	r2, r3
 800ccf2:	415a      	adcs	r2, r3
 800ccf4:	602a      	str	r2, [r5, #0]
 800ccf6:	e7ee      	b.n	800ccd6 <__swhatbuf_r+0x1e>
 800ccf8:	2340      	movs	r3, #64	; 0x40
 800ccfa:	2000      	movs	r0, #0
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	b016      	add	sp, #88	; 0x58
 800cd00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd04 <__smakebuf_r>:
 800cd04:	898b      	ldrh	r3, [r1, #12]
 800cd06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd08:	079d      	lsls	r5, r3, #30
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	d507      	bpl.n	800cd20 <__smakebuf_r+0x1c>
 800cd10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	6123      	str	r3, [r4, #16]
 800cd18:	2301      	movs	r3, #1
 800cd1a:	6163      	str	r3, [r4, #20]
 800cd1c:	b002      	add	sp, #8
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	ab01      	add	r3, sp, #4
 800cd22:	466a      	mov	r2, sp
 800cd24:	f7ff ffc8 	bl	800ccb8 <__swhatbuf_r>
 800cd28:	9900      	ldr	r1, [sp, #0]
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f000 f8ab 	bl	800ce88 <_malloc_r>
 800cd32:	b948      	cbnz	r0, 800cd48 <__smakebuf_r+0x44>
 800cd34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd38:	059a      	lsls	r2, r3, #22
 800cd3a:	d4ef      	bmi.n	800cd1c <__smakebuf_r+0x18>
 800cd3c:	f023 0303 	bic.w	r3, r3, #3
 800cd40:	f043 0302 	orr.w	r3, r3, #2
 800cd44:	81a3      	strh	r3, [r4, #12]
 800cd46:	e7e3      	b.n	800cd10 <__smakebuf_r+0xc>
 800cd48:	4b0d      	ldr	r3, [pc, #52]	; (800cd80 <__smakebuf_r+0x7c>)
 800cd4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	6020      	str	r0, [r4, #0]
 800cd50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	9b00      	ldr	r3, [sp, #0]
 800cd58:	6163      	str	r3, [r4, #20]
 800cd5a:	9b01      	ldr	r3, [sp, #4]
 800cd5c:	6120      	str	r0, [r4, #16]
 800cd5e:	b15b      	cbz	r3, 800cd78 <__smakebuf_r+0x74>
 800cd60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd64:	4630      	mov	r0, r6
 800cd66:	f001 f94b 	bl	800e000 <_isatty_r>
 800cd6a:	b128      	cbz	r0, 800cd78 <__smakebuf_r+0x74>
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	f023 0303 	bic.w	r3, r3, #3
 800cd72:	f043 0301 	orr.w	r3, r3, #1
 800cd76:	81a3      	strh	r3, [r4, #12]
 800cd78:	89a0      	ldrh	r0, [r4, #12]
 800cd7a:	4305      	orrs	r5, r0
 800cd7c:	81a5      	strh	r5, [r4, #12]
 800cd7e:	e7cd      	b.n	800cd1c <__smakebuf_r+0x18>
 800cd80:	0800c769 	.word	0x0800c769

0800cd84 <memcpy>:
 800cd84:	440a      	add	r2, r1
 800cd86:	4291      	cmp	r1, r2
 800cd88:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd8c:	d100      	bne.n	800cd90 <memcpy+0xc>
 800cd8e:	4770      	bx	lr
 800cd90:	b510      	push	{r4, lr}
 800cd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd9a:	4291      	cmp	r1, r2
 800cd9c:	d1f9      	bne.n	800cd92 <memcpy+0xe>
 800cd9e:	bd10      	pop	{r4, pc}

0800cda0 <memset>:
 800cda0:	4402      	add	r2, r0
 800cda2:	4603      	mov	r3, r0
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d100      	bne.n	800cdaa <memset+0xa>
 800cda8:	4770      	bx	lr
 800cdaa:	f803 1b01 	strb.w	r1, [r3], #1
 800cdae:	e7f9      	b.n	800cda4 <memset+0x4>

0800cdb0 <_free_r>:
 800cdb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdb2:	2900      	cmp	r1, #0
 800cdb4:	d044      	beq.n	800ce40 <_free_r+0x90>
 800cdb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdba:	9001      	str	r0, [sp, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f1a1 0404 	sub.w	r4, r1, #4
 800cdc2:	bfb8      	it	lt
 800cdc4:	18e4      	addlt	r4, r4, r3
 800cdc6:	f001 f95f 	bl	800e088 <__malloc_lock>
 800cdca:	4a1e      	ldr	r2, [pc, #120]	; (800ce44 <_free_r+0x94>)
 800cdcc:	9801      	ldr	r0, [sp, #4]
 800cdce:	6813      	ldr	r3, [r2, #0]
 800cdd0:	b933      	cbnz	r3, 800cde0 <_free_r+0x30>
 800cdd2:	6063      	str	r3, [r4, #4]
 800cdd4:	6014      	str	r4, [r2, #0]
 800cdd6:	b003      	add	sp, #12
 800cdd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cddc:	f001 b95a 	b.w	800e094 <__malloc_unlock>
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	d908      	bls.n	800cdf6 <_free_r+0x46>
 800cde4:	6825      	ldr	r5, [r4, #0]
 800cde6:	1961      	adds	r1, r4, r5
 800cde8:	428b      	cmp	r3, r1
 800cdea:	bf01      	itttt	eq
 800cdec:	6819      	ldreq	r1, [r3, #0]
 800cdee:	685b      	ldreq	r3, [r3, #4]
 800cdf0:	1949      	addeq	r1, r1, r5
 800cdf2:	6021      	streq	r1, [r4, #0]
 800cdf4:	e7ed      	b.n	800cdd2 <_free_r+0x22>
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	b10b      	cbz	r3, 800ce00 <_free_r+0x50>
 800cdfc:	42a3      	cmp	r3, r4
 800cdfe:	d9fa      	bls.n	800cdf6 <_free_r+0x46>
 800ce00:	6811      	ldr	r1, [r2, #0]
 800ce02:	1855      	adds	r5, r2, r1
 800ce04:	42a5      	cmp	r5, r4
 800ce06:	d10b      	bne.n	800ce20 <_free_r+0x70>
 800ce08:	6824      	ldr	r4, [r4, #0]
 800ce0a:	4421      	add	r1, r4
 800ce0c:	1854      	adds	r4, r2, r1
 800ce0e:	42a3      	cmp	r3, r4
 800ce10:	6011      	str	r1, [r2, #0]
 800ce12:	d1e0      	bne.n	800cdd6 <_free_r+0x26>
 800ce14:	681c      	ldr	r4, [r3, #0]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	6053      	str	r3, [r2, #4]
 800ce1a:	4421      	add	r1, r4
 800ce1c:	6011      	str	r1, [r2, #0]
 800ce1e:	e7da      	b.n	800cdd6 <_free_r+0x26>
 800ce20:	d902      	bls.n	800ce28 <_free_r+0x78>
 800ce22:	230c      	movs	r3, #12
 800ce24:	6003      	str	r3, [r0, #0]
 800ce26:	e7d6      	b.n	800cdd6 <_free_r+0x26>
 800ce28:	6825      	ldr	r5, [r4, #0]
 800ce2a:	1961      	adds	r1, r4, r5
 800ce2c:	428b      	cmp	r3, r1
 800ce2e:	bf04      	itt	eq
 800ce30:	6819      	ldreq	r1, [r3, #0]
 800ce32:	685b      	ldreq	r3, [r3, #4]
 800ce34:	6063      	str	r3, [r4, #4]
 800ce36:	bf04      	itt	eq
 800ce38:	1949      	addeq	r1, r1, r5
 800ce3a:	6021      	streq	r1, [r4, #0]
 800ce3c:	6054      	str	r4, [r2, #4]
 800ce3e:	e7ca      	b.n	800cdd6 <_free_r+0x26>
 800ce40:	b003      	add	sp, #12
 800ce42:	bd30      	pop	{r4, r5, pc}
 800ce44:	200063c8 	.word	0x200063c8

0800ce48 <sbrk_aligned>:
 800ce48:	b570      	push	{r4, r5, r6, lr}
 800ce4a:	4e0e      	ldr	r6, [pc, #56]	; (800ce84 <sbrk_aligned+0x3c>)
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	6831      	ldr	r1, [r6, #0]
 800ce50:	4605      	mov	r5, r0
 800ce52:	b911      	cbnz	r1, 800ce5a <sbrk_aligned+0x12>
 800ce54:	f000 fd18 	bl	800d888 <_sbrk_r>
 800ce58:	6030      	str	r0, [r6, #0]
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	f000 fd13 	bl	800d888 <_sbrk_r>
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	d00a      	beq.n	800ce7c <sbrk_aligned+0x34>
 800ce66:	1cc4      	adds	r4, r0, #3
 800ce68:	f024 0403 	bic.w	r4, r4, #3
 800ce6c:	42a0      	cmp	r0, r4
 800ce6e:	d007      	beq.n	800ce80 <sbrk_aligned+0x38>
 800ce70:	1a21      	subs	r1, r4, r0
 800ce72:	4628      	mov	r0, r5
 800ce74:	f000 fd08 	bl	800d888 <_sbrk_r>
 800ce78:	3001      	adds	r0, #1
 800ce7a:	d101      	bne.n	800ce80 <sbrk_aligned+0x38>
 800ce7c:	f04f 34ff 	mov.w	r4, #4294967295
 800ce80:	4620      	mov	r0, r4
 800ce82:	bd70      	pop	{r4, r5, r6, pc}
 800ce84:	200063cc 	.word	0x200063cc

0800ce88 <_malloc_r>:
 800ce88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8c:	1ccd      	adds	r5, r1, #3
 800ce8e:	f025 0503 	bic.w	r5, r5, #3
 800ce92:	3508      	adds	r5, #8
 800ce94:	2d0c      	cmp	r5, #12
 800ce96:	bf38      	it	cc
 800ce98:	250c      	movcc	r5, #12
 800ce9a:	2d00      	cmp	r5, #0
 800ce9c:	4607      	mov	r7, r0
 800ce9e:	db01      	blt.n	800cea4 <_malloc_r+0x1c>
 800cea0:	42a9      	cmp	r1, r5
 800cea2:	d905      	bls.n	800ceb0 <_malloc_r+0x28>
 800cea4:	230c      	movs	r3, #12
 800cea6:	603b      	str	r3, [r7, #0]
 800cea8:	2600      	movs	r6, #0
 800ceaa:	4630      	mov	r0, r6
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	4e2e      	ldr	r6, [pc, #184]	; (800cf6c <_malloc_r+0xe4>)
 800ceb2:	f001 f8e9 	bl	800e088 <__malloc_lock>
 800ceb6:	6833      	ldr	r3, [r6, #0]
 800ceb8:	461c      	mov	r4, r3
 800ceba:	bb34      	cbnz	r4, 800cf0a <_malloc_r+0x82>
 800cebc:	4629      	mov	r1, r5
 800cebe:	4638      	mov	r0, r7
 800cec0:	f7ff ffc2 	bl	800ce48 <sbrk_aligned>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	4604      	mov	r4, r0
 800cec8:	d14d      	bne.n	800cf66 <_malloc_r+0xde>
 800ceca:	6834      	ldr	r4, [r6, #0]
 800cecc:	4626      	mov	r6, r4
 800cece:	2e00      	cmp	r6, #0
 800ced0:	d140      	bne.n	800cf54 <_malloc_r+0xcc>
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	4631      	mov	r1, r6
 800ced6:	4638      	mov	r0, r7
 800ced8:	eb04 0803 	add.w	r8, r4, r3
 800cedc:	f000 fcd4 	bl	800d888 <_sbrk_r>
 800cee0:	4580      	cmp	r8, r0
 800cee2:	d13a      	bne.n	800cf5a <_malloc_r+0xd2>
 800cee4:	6821      	ldr	r1, [r4, #0]
 800cee6:	3503      	adds	r5, #3
 800cee8:	1a6d      	subs	r5, r5, r1
 800ceea:	f025 0503 	bic.w	r5, r5, #3
 800ceee:	3508      	adds	r5, #8
 800cef0:	2d0c      	cmp	r5, #12
 800cef2:	bf38      	it	cc
 800cef4:	250c      	movcc	r5, #12
 800cef6:	4629      	mov	r1, r5
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7ff ffa5 	bl	800ce48 <sbrk_aligned>
 800cefe:	3001      	adds	r0, #1
 800cf00:	d02b      	beq.n	800cf5a <_malloc_r+0xd2>
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	442b      	add	r3, r5
 800cf06:	6023      	str	r3, [r4, #0]
 800cf08:	e00e      	b.n	800cf28 <_malloc_r+0xa0>
 800cf0a:	6822      	ldr	r2, [r4, #0]
 800cf0c:	1b52      	subs	r2, r2, r5
 800cf0e:	d41e      	bmi.n	800cf4e <_malloc_r+0xc6>
 800cf10:	2a0b      	cmp	r2, #11
 800cf12:	d916      	bls.n	800cf42 <_malloc_r+0xba>
 800cf14:	1961      	adds	r1, r4, r5
 800cf16:	42a3      	cmp	r3, r4
 800cf18:	6025      	str	r5, [r4, #0]
 800cf1a:	bf18      	it	ne
 800cf1c:	6059      	strne	r1, [r3, #4]
 800cf1e:	6863      	ldr	r3, [r4, #4]
 800cf20:	bf08      	it	eq
 800cf22:	6031      	streq	r1, [r6, #0]
 800cf24:	5162      	str	r2, [r4, r5]
 800cf26:	604b      	str	r3, [r1, #4]
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f104 060b 	add.w	r6, r4, #11
 800cf2e:	f001 f8b1 	bl	800e094 <__malloc_unlock>
 800cf32:	f026 0607 	bic.w	r6, r6, #7
 800cf36:	1d23      	adds	r3, r4, #4
 800cf38:	1af2      	subs	r2, r6, r3
 800cf3a:	d0b6      	beq.n	800ceaa <_malloc_r+0x22>
 800cf3c:	1b9b      	subs	r3, r3, r6
 800cf3e:	50a3      	str	r3, [r4, r2]
 800cf40:	e7b3      	b.n	800ceaa <_malloc_r+0x22>
 800cf42:	6862      	ldr	r2, [r4, #4]
 800cf44:	42a3      	cmp	r3, r4
 800cf46:	bf0c      	ite	eq
 800cf48:	6032      	streq	r2, [r6, #0]
 800cf4a:	605a      	strne	r2, [r3, #4]
 800cf4c:	e7ec      	b.n	800cf28 <_malloc_r+0xa0>
 800cf4e:	4623      	mov	r3, r4
 800cf50:	6864      	ldr	r4, [r4, #4]
 800cf52:	e7b2      	b.n	800ceba <_malloc_r+0x32>
 800cf54:	4634      	mov	r4, r6
 800cf56:	6876      	ldr	r6, [r6, #4]
 800cf58:	e7b9      	b.n	800cece <_malloc_r+0x46>
 800cf5a:	230c      	movs	r3, #12
 800cf5c:	603b      	str	r3, [r7, #0]
 800cf5e:	4638      	mov	r0, r7
 800cf60:	f001 f898 	bl	800e094 <__malloc_unlock>
 800cf64:	e7a1      	b.n	800ceaa <_malloc_r+0x22>
 800cf66:	6025      	str	r5, [r4, #0]
 800cf68:	e7de      	b.n	800cf28 <_malloc_r+0xa0>
 800cf6a:	bf00      	nop
 800cf6c:	200063c8 	.word	0x200063c8

0800cf70 <__sfputc_r>:
 800cf70:	6893      	ldr	r3, [r2, #8]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	b410      	push	{r4}
 800cf78:	6093      	str	r3, [r2, #8]
 800cf7a:	da08      	bge.n	800cf8e <__sfputc_r+0x1e>
 800cf7c:	6994      	ldr	r4, [r2, #24]
 800cf7e:	42a3      	cmp	r3, r4
 800cf80:	db01      	blt.n	800cf86 <__sfputc_r+0x16>
 800cf82:	290a      	cmp	r1, #10
 800cf84:	d103      	bne.n	800cf8e <__sfputc_r+0x1e>
 800cf86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf8a:	f000 be3b 	b.w	800dc04 <__swbuf_r>
 800cf8e:	6813      	ldr	r3, [r2, #0]
 800cf90:	1c58      	adds	r0, r3, #1
 800cf92:	6010      	str	r0, [r2, #0]
 800cf94:	7019      	strb	r1, [r3, #0]
 800cf96:	4608      	mov	r0, r1
 800cf98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <__sfputs_r>:
 800cf9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa0:	4606      	mov	r6, r0
 800cfa2:	460f      	mov	r7, r1
 800cfa4:	4614      	mov	r4, r2
 800cfa6:	18d5      	adds	r5, r2, r3
 800cfa8:	42ac      	cmp	r4, r5
 800cfaa:	d101      	bne.n	800cfb0 <__sfputs_r+0x12>
 800cfac:	2000      	movs	r0, #0
 800cfae:	e007      	b.n	800cfc0 <__sfputs_r+0x22>
 800cfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb4:	463a      	mov	r2, r7
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f7ff ffda 	bl	800cf70 <__sfputc_r>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d1f3      	bne.n	800cfa8 <__sfputs_r+0xa>
 800cfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfc4 <_vfiprintf_r>:
 800cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	460d      	mov	r5, r1
 800cfca:	b09d      	sub	sp, #116	; 0x74
 800cfcc:	4614      	mov	r4, r2
 800cfce:	4698      	mov	r8, r3
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	b118      	cbz	r0, 800cfdc <_vfiprintf_r+0x18>
 800cfd4:	6983      	ldr	r3, [r0, #24]
 800cfd6:	b90b      	cbnz	r3, 800cfdc <_vfiprintf_r+0x18>
 800cfd8:	f7ff fbfa 	bl	800c7d0 <__sinit>
 800cfdc:	4b89      	ldr	r3, [pc, #548]	; (800d204 <_vfiprintf_r+0x240>)
 800cfde:	429d      	cmp	r5, r3
 800cfe0:	d11b      	bne.n	800d01a <_vfiprintf_r+0x56>
 800cfe2:	6875      	ldr	r5, [r6, #4]
 800cfe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfe6:	07d9      	lsls	r1, r3, #31
 800cfe8:	d405      	bmi.n	800cff6 <_vfiprintf_r+0x32>
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	059a      	lsls	r2, r3, #22
 800cfee:	d402      	bmi.n	800cff6 <_vfiprintf_r+0x32>
 800cff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff2:	f7ff fe5f 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800cff6:	89ab      	ldrh	r3, [r5, #12]
 800cff8:	071b      	lsls	r3, r3, #28
 800cffa:	d501      	bpl.n	800d000 <_vfiprintf_r+0x3c>
 800cffc:	692b      	ldr	r3, [r5, #16]
 800cffe:	b9eb      	cbnz	r3, 800d03c <_vfiprintf_r+0x78>
 800d000:	4629      	mov	r1, r5
 800d002:	4630      	mov	r0, r6
 800d004:	f000 fe62 	bl	800dccc <__swsetup_r>
 800d008:	b1c0      	cbz	r0, 800d03c <_vfiprintf_r+0x78>
 800d00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d00c:	07dc      	lsls	r4, r3, #31
 800d00e:	d50e      	bpl.n	800d02e <_vfiprintf_r+0x6a>
 800d010:	f04f 30ff 	mov.w	r0, #4294967295
 800d014:	b01d      	add	sp, #116	; 0x74
 800d016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01a:	4b7b      	ldr	r3, [pc, #492]	; (800d208 <_vfiprintf_r+0x244>)
 800d01c:	429d      	cmp	r5, r3
 800d01e:	d101      	bne.n	800d024 <_vfiprintf_r+0x60>
 800d020:	68b5      	ldr	r5, [r6, #8]
 800d022:	e7df      	b.n	800cfe4 <_vfiprintf_r+0x20>
 800d024:	4b79      	ldr	r3, [pc, #484]	; (800d20c <_vfiprintf_r+0x248>)
 800d026:	429d      	cmp	r5, r3
 800d028:	bf08      	it	eq
 800d02a:	68f5      	ldreq	r5, [r6, #12]
 800d02c:	e7da      	b.n	800cfe4 <_vfiprintf_r+0x20>
 800d02e:	89ab      	ldrh	r3, [r5, #12]
 800d030:	0598      	lsls	r0, r3, #22
 800d032:	d4ed      	bmi.n	800d010 <_vfiprintf_r+0x4c>
 800d034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d036:	f7ff fe3e 	bl	800ccb6 <__retarget_lock_release_recursive>
 800d03a:	e7e9      	b.n	800d010 <_vfiprintf_r+0x4c>
 800d03c:	2300      	movs	r3, #0
 800d03e:	9309      	str	r3, [sp, #36]	; 0x24
 800d040:	2320      	movs	r3, #32
 800d042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d046:	f8cd 800c 	str.w	r8, [sp, #12]
 800d04a:	2330      	movs	r3, #48	; 0x30
 800d04c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d210 <_vfiprintf_r+0x24c>
 800d050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d054:	f04f 0901 	mov.w	r9, #1
 800d058:	4623      	mov	r3, r4
 800d05a:	469a      	mov	sl, r3
 800d05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d060:	b10a      	cbz	r2, 800d066 <_vfiprintf_r+0xa2>
 800d062:	2a25      	cmp	r2, #37	; 0x25
 800d064:	d1f9      	bne.n	800d05a <_vfiprintf_r+0x96>
 800d066:	ebba 0b04 	subs.w	fp, sl, r4
 800d06a:	d00b      	beq.n	800d084 <_vfiprintf_r+0xc0>
 800d06c:	465b      	mov	r3, fp
 800d06e:	4622      	mov	r2, r4
 800d070:	4629      	mov	r1, r5
 800d072:	4630      	mov	r0, r6
 800d074:	f7ff ff93 	bl	800cf9e <__sfputs_r>
 800d078:	3001      	adds	r0, #1
 800d07a:	f000 80aa 	beq.w	800d1d2 <_vfiprintf_r+0x20e>
 800d07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d080:	445a      	add	r2, fp
 800d082:	9209      	str	r2, [sp, #36]	; 0x24
 800d084:	f89a 3000 	ldrb.w	r3, [sl]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 80a2 	beq.w	800d1d2 <_vfiprintf_r+0x20e>
 800d08e:	2300      	movs	r3, #0
 800d090:	f04f 32ff 	mov.w	r2, #4294967295
 800d094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d098:	f10a 0a01 	add.w	sl, sl, #1
 800d09c:	9304      	str	r3, [sp, #16]
 800d09e:	9307      	str	r3, [sp, #28]
 800d0a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0a4:	931a      	str	r3, [sp, #104]	; 0x68
 800d0a6:	4654      	mov	r4, sl
 800d0a8:	2205      	movs	r2, #5
 800d0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ae:	4858      	ldr	r0, [pc, #352]	; (800d210 <_vfiprintf_r+0x24c>)
 800d0b0:	f7f3 f896 	bl	80001e0 <memchr>
 800d0b4:	9a04      	ldr	r2, [sp, #16]
 800d0b6:	b9d8      	cbnz	r0, 800d0f0 <_vfiprintf_r+0x12c>
 800d0b8:	06d1      	lsls	r1, r2, #27
 800d0ba:	bf44      	itt	mi
 800d0bc:	2320      	movmi	r3, #32
 800d0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c2:	0713      	lsls	r3, r2, #28
 800d0c4:	bf44      	itt	mi
 800d0c6:	232b      	movmi	r3, #43	; 0x2b
 800d0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d2:	d015      	beq.n	800d100 <_vfiprintf_r+0x13c>
 800d0d4:	9a07      	ldr	r2, [sp, #28]
 800d0d6:	4654      	mov	r4, sl
 800d0d8:	2000      	movs	r0, #0
 800d0da:	f04f 0c0a 	mov.w	ip, #10
 800d0de:	4621      	mov	r1, r4
 800d0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0e4:	3b30      	subs	r3, #48	; 0x30
 800d0e6:	2b09      	cmp	r3, #9
 800d0e8:	d94e      	bls.n	800d188 <_vfiprintf_r+0x1c4>
 800d0ea:	b1b0      	cbz	r0, 800d11a <_vfiprintf_r+0x156>
 800d0ec:	9207      	str	r2, [sp, #28]
 800d0ee:	e014      	b.n	800d11a <_vfiprintf_r+0x156>
 800d0f0:	eba0 0308 	sub.w	r3, r0, r8
 800d0f4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	9304      	str	r3, [sp, #16]
 800d0fc:	46a2      	mov	sl, r4
 800d0fe:	e7d2      	b.n	800d0a6 <_vfiprintf_r+0xe2>
 800d100:	9b03      	ldr	r3, [sp, #12]
 800d102:	1d19      	adds	r1, r3, #4
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	9103      	str	r1, [sp, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bfbb      	ittet	lt
 800d10c:	425b      	neglt	r3, r3
 800d10e:	f042 0202 	orrlt.w	r2, r2, #2
 800d112:	9307      	strge	r3, [sp, #28]
 800d114:	9307      	strlt	r3, [sp, #28]
 800d116:	bfb8      	it	lt
 800d118:	9204      	strlt	r2, [sp, #16]
 800d11a:	7823      	ldrb	r3, [r4, #0]
 800d11c:	2b2e      	cmp	r3, #46	; 0x2e
 800d11e:	d10c      	bne.n	800d13a <_vfiprintf_r+0x176>
 800d120:	7863      	ldrb	r3, [r4, #1]
 800d122:	2b2a      	cmp	r3, #42	; 0x2a
 800d124:	d135      	bne.n	800d192 <_vfiprintf_r+0x1ce>
 800d126:	9b03      	ldr	r3, [sp, #12]
 800d128:	1d1a      	adds	r2, r3, #4
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	9203      	str	r2, [sp, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	bfb8      	it	lt
 800d132:	f04f 33ff 	movlt.w	r3, #4294967295
 800d136:	3402      	adds	r4, #2
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d220 <_vfiprintf_r+0x25c>
 800d13e:	7821      	ldrb	r1, [r4, #0]
 800d140:	2203      	movs	r2, #3
 800d142:	4650      	mov	r0, sl
 800d144:	f7f3 f84c 	bl	80001e0 <memchr>
 800d148:	b140      	cbz	r0, 800d15c <_vfiprintf_r+0x198>
 800d14a:	2340      	movs	r3, #64	; 0x40
 800d14c:	eba0 000a 	sub.w	r0, r0, sl
 800d150:	fa03 f000 	lsl.w	r0, r3, r0
 800d154:	9b04      	ldr	r3, [sp, #16]
 800d156:	4303      	orrs	r3, r0
 800d158:	3401      	adds	r4, #1
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d160:	482c      	ldr	r0, [pc, #176]	; (800d214 <_vfiprintf_r+0x250>)
 800d162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d166:	2206      	movs	r2, #6
 800d168:	f7f3 f83a 	bl	80001e0 <memchr>
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d03f      	beq.n	800d1f0 <_vfiprintf_r+0x22c>
 800d170:	4b29      	ldr	r3, [pc, #164]	; (800d218 <_vfiprintf_r+0x254>)
 800d172:	bb1b      	cbnz	r3, 800d1bc <_vfiprintf_r+0x1f8>
 800d174:	9b03      	ldr	r3, [sp, #12]
 800d176:	3307      	adds	r3, #7
 800d178:	f023 0307 	bic.w	r3, r3, #7
 800d17c:	3308      	adds	r3, #8
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d182:	443b      	add	r3, r7
 800d184:	9309      	str	r3, [sp, #36]	; 0x24
 800d186:	e767      	b.n	800d058 <_vfiprintf_r+0x94>
 800d188:	fb0c 3202 	mla	r2, ip, r2, r3
 800d18c:	460c      	mov	r4, r1
 800d18e:	2001      	movs	r0, #1
 800d190:	e7a5      	b.n	800d0de <_vfiprintf_r+0x11a>
 800d192:	2300      	movs	r3, #0
 800d194:	3401      	adds	r4, #1
 800d196:	9305      	str	r3, [sp, #20]
 800d198:	4619      	mov	r1, r3
 800d19a:	f04f 0c0a 	mov.w	ip, #10
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a4:	3a30      	subs	r2, #48	; 0x30
 800d1a6:	2a09      	cmp	r2, #9
 800d1a8:	d903      	bls.n	800d1b2 <_vfiprintf_r+0x1ee>
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d0c5      	beq.n	800d13a <_vfiprintf_r+0x176>
 800d1ae:	9105      	str	r1, [sp, #20]
 800d1b0:	e7c3      	b.n	800d13a <_vfiprintf_r+0x176>
 800d1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e7f0      	b.n	800d19e <_vfiprintf_r+0x1da>
 800d1bc:	ab03      	add	r3, sp, #12
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	4b16      	ldr	r3, [pc, #88]	; (800d21c <_vfiprintf_r+0x258>)
 800d1c4:	a904      	add	r1, sp, #16
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	f3af 8000 	nop.w
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	1c78      	adds	r0, r7, #1
 800d1d0:	d1d6      	bne.n	800d180 <_vfiprintf_r+0x1bc>
 800d1d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1d4:	07d9      	lsls	r1, r3, #31
 800d1d6:	d405      	bmi.n	800d1e4 <_vfiprintf_r+0x220>
 800d1d8:	89ab      	ldrh	r3, [r5, #12]
 800d1da:	059a      	lsls	r2, r3, #22
 800d1dc:	d402      	bmi.n	800d1e4 <_vfiprintf_r+0x220>
 800d1de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e0:	f7ff fd69 	bl	800ccb6 <__retarget_lock_release_recursive>
 800d1e4:	89ab      	ldrh	r3, [r5, #12]
 800d1e6:	065b      	lsls	r3, r3, #25
 800d1e8:	f53f af12 	bmi.w	800d010 <_vfiprintf_r+0x4c>
 800d1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1ee:	e711      	b.n	800d014 <_vfiprintf_r+0x50>
 800d1f0:	ab03      	add	r3, sp, #12
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	462a      	mov	r2, r5
 800d1f6:	4b09      	ldr	r3, [pc, #36]	; (800d21c <_vfiprintf_r+0x258>)
 800d1f8:	a904      	add	r1, sp, #16
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f000 f880 	bl	800d300 <_printf_i>
 800d200:	e7e4      	b.n	800d1cc <_vfiprintf_r+0x208>
 800d202:	bf00      	nop
 800d204:	0800f808 	.word	0x0800f808
 800d208:	0800f828 	.word	0x0800f828
 800d20c:	0800f7e8 	.word	0x0800f7e8
 800d210:	0800f84c 	.word	0x0800f84c
 800d214:	0800f856 	.word	0x0800f856
 800d218:	00000000 	.word	0x00000000
 800d21c:	0800cf9f 	.word	0x0800cf9f
 800d220:	0800f852 	.word	0x0800f852

0800d224 <_printf_common>:
 800d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	4616      	mov	r6, r2
 800d22a:	4699      	mov	r9, r3
 800d22c:	688a      	ldr	r2, [r1, #8]
 800d22e:	690b      	ldr	r3, [r1, #16]
 800d230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d234:	4293      	cmp	r3, r2
 800d236:	bfb8      	it	lt
 800d238:	4613      	movlt	r3, r2
 800d23a:	6033      	str	r3, [r6, #0]
 800d23c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d240:	4607      	mov	r7, r0
 800d242:	460c      	mov	r4, r1
 800d244:	b10a      	cbz	r2, 800d24a <_printf_common+0x26>
 800d246:	3301      	adds	r3, #1
 800d248:	6033      	str	r3, [r6, #0]
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	0699      	lsls	r1, r3, #26
 800d24e:	bf42      	ittt	mi
 800d250:	6833      	ldrmi	r3, [r6, #0]
 800d252:	3302      	addmi	r3, #2
 800d254:	6033      	strmi	r3, [r6, #0]
 800d256:	6825      	ldr	r5, [r4, #0]
 800d258:	f015 0506 	ands.w	r5, r5, #6
 800d25c:	d106      	bne.n	800d26c <_printf_common+0x48>
 800d25e:	f104 0a19 	add.w	sl, r4, #25
 800d262:	68e3      	ldr	r3, [r4, #12]
 800d264:	6832      	ldr	r2, [r6, #0]
 800d266:	1a9b      	subs	r3, r3, r2
 800d268:	42ab      	cmp	r3, r5
 800d26a:	dc26      	bgt.n	800d2ba <_printf_common+0x96>
 800d26c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d270:	1e13      	subs	r3, r2, #0
 800d272:	6822      	ldr	r2, [r4, #0]
 800d274:	bf18      	it	ne
 800d276:	2301      	movne	r3, #1
 800d278:	0692      	lsls	r2, r2, #26
 800d27a:	d42b      	bmi.n	800d2d4 <_printf_common+0xb0>
 800d27c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d280:	4649      	mov	r1, r9
 800d282:	4638      	mov	r0, r7
 800d284:	47c0      	blx	r8
 800d286:	3001      	adds	r0, #1
 800d288:	d01e      	beq.n	800d2c8 <_printf_common+0xa4>
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	68e5      	ldr	r5, [r4, #12]
 800d28e:	6832      	ldr	r2, [r6, #0]
 800d290:	f003 0306 	and.w	r3, r3, #6
 800d294:	2b04      	cmp	r3, #4
 800d296:	bf08      	it	eq
 800d298:	1aad      	subeq	r5, r5, r2
 800d29a:	68a3      	ldr	r3, [r4, #8]
 800d29c:	6922      	ldr	r2, [r4, #16]
 800d29e:	bf0c      	ite	eq
 800d2a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2a4:	2500      	movne	r5, #0
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	bfc4      	itt	gt
 800d2aa:	1a9b      	subgt	r3, r3, r2
 800d2ac:	18ed      	addgt	r5, r5, r3
 800d2ae:	2600      	movs	r6, #0
 800d2b0:	341a      	adds	r4, #26
 800d2b2:	42b5      	cmp	r5, r6
 800d2b4:	d11a      	bne.n	800d2ec <_printf_common+0xc8>
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	e008      	b.n	800d2cc <_printf_common+0xa8>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	4652      	mov	r2, sl
 800d2be:	4649      	mov	r1, r9
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	47c0      	blx	r8
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	d103      	bne.n	800d2d0 <_printf_common+0xac>
 800d2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d0:	3501      	adds	r5, #1
 800d2d2:	e7c6      	b.n	800d262 <_printf_common+0x3e>
 800d2d4:	18e1      	adds	r1, r4, r3
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	2030      	movs	r0, #48	; 0x30
 800d2da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2de:	4422      	add	r2, r4
 800d2e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2e8:	3302      	adds	r3, #2
 800d2ea:	e7c7      	b.n	800d27c <_printf_common+0x58>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	4649      	mov	r1, r9
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	47c0      	blx	r8
 800d2f6:	3001      	adds	r0, #1
 800d2f8:	d0e6      	beq.n	800d2c8 <_printf_common+0xa4>
 800d2fa:	3601      	adds	r6, #1
 800d2fc:	e7d9      	b.n	800d2b2 <_printf_common+0x8e>
	...

0800d300 <_printf_i>:
 800d300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d304:	7e0f      	ldrb	r7, [r1, #24]
 800d306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d308:	2f78      	cmp	r7, #120	; 0x78
 800d30a:	4691      	mov	r9, r2
 800d30c:	4680      	mov	r8, r0
 800d30e:	460c      	mov	r4, r1
 800d310:	469a      	mov	sl, r3
 800d312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d316:	d807      	bhi.n	800d328 <_printf_i+0x28>
 800d318:	2f62      	cmp	r7, #98	; 0x62
 800d31a:	d80a      	bhi.n	800d332 <_printf_i+0x32>
 800d31c:	2f00      	cmp	r7, #0
 800d31e:	f000 80d8 	beq.w	800d4d2 <_printf_i+0x1d2>
 800d322:	2f58      	cmp	r7, #88	; 0x58
 800d324:	f000 80a3 	beq.w	800d46e <_printf_i+0x16e>
 800d328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d32c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d330:	e03a      	b.n	800d3a8 <_printf_i+0xa8>
 800d332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d336:	2b15      	cmp	r3, #21
 800d338:	d8f6      	bhi.n	800d328 <_printf_i+0x28>
 800d33a:	a101      	add	r1, pc, #4	; (adr r1, 800d340 <_printf_i+0x40>)
 800d33c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d340:	0800d399 	.word	0x0800d399
 800d344:	0800d3ad 	.word	0x0800d3ad
 800d348:	0800d329 	.word	0x0800d329
 800d34c:	0800d329 	.word	0x0800d329
 800d350:	0800d329 	.word	0x0800d329
 800d354:	0800d329 	.word	0x0800d329
 800d358:	0800d3ad 	.word	0x0800d3ad
 800d35c:	0800d329 	.word	0x0800d329
 800d360:	0800d329 	.word	0x0800d329
 800d364:	0800d329 	.word	0x0800d329
 800d368:	0800d329 	.word	0x0800d329
 800d36c:	0800d4b9 	.word	0x0800d4b9
 800d370:	0800d3dd 	.word	0x0800d3dd
 800d374:	0800d49b 	.word	0x0800d49b
 800d378:	0800d329 	.word	0x0800d329
 800d37c:	0800d329 	.word	0x0800d329
 800d380:	0800d4db 	.word	0x0800d4db
 800d384:	0800d329 	.word	0x0800d329
 800d388:	0800d3dd 	.word	0x0800d3dd
 800d38c:	0800d329 	.word	0x0800d329
 800d390:	0800d329 	.word	0x0800d329
 800d394:	0800d4a3 	.word	0x0800d4a3
 800d398:	682b      	ldr	r3, [r5, #0]
 800d39a:	1d1a      	adds	r2, r3, #4
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	602a      	str	r2, [r5, #0]
 800d3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e0a3      	b.n	800d4f4 <_printf_i+0x1f4>
 800d3ac:	6820      	ldr	r0, [r4, #0]
 800d3ae:	6829      	ldr	r1, [r5, #0]
 800d3b0:	0606      	lsls	r6, r0, #24
 800d3b2:	f101 0304 	add.w	r3, r1, #4
 800d3b6:	d50a      	bpl.n	800d3ce <_printf_i+0xce>
 800d3b8:	680e      	ldr	r6, [r1, #0]
 800d3ba:	602b      	str	r3, [r5, #0]
 800d3bc:	2e00      	cmp	r6, #0
 800d3be:	da03      	bge.n	800d3c8 <_printf_i+0xc8>
 800d3c0:	232d      	movs	r3, #45	; 0x2d
 800d3c2:	4276      	negs	r6, r6
 800d3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3c8:	485e      	ldr	r0, [pc, #376]	; (800d544 <_printf_i+0x244>)
 800d3ca:	230a      	movs	r3, #10
 800d3cc:	e019      	b.n	800d402 <_printf_i+0x102>
 800d3ce:	680e      	ldr	r6, [r1, #0]
 800d3d0:	602b      	str	r3, [r5, #0]
 800d3d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3d6:	bf18      	it	ne
 800d3d8:	b236      	sxthne	r6, r6
 800d3da:	e7ef      	b.n	800d3bc <_printf_i+0xbc>
 800d3dc:	682b      	ldr	r3, [r5, #0]
 800d3de:	6820      	ldr	r0, [r4, #0]
 800d3e0:	1d19      	adds	r1, r3, #4
 800d3e2:	6029      	str	r1, [r5, #0]
 800d3e4:	0601      	lsls	r1, r0, #24
 800d3e6:	d501      	bpl.n	800d3ec <_printf_i+0xec>
 800d3e8:	681e      	ldr	r6, [r3, #0]
 800d3ea:	e002      	b.n	800d3f2 <_printf_i+0xf2>
 800d3ec:	0646      	lsls	r6, r0, #25
 800d3ee:	d5fb      	bpl.n	800d3e8 <_printf_i+0xe8>
 800d3f0:	881e      	ldrh	r6, [r3, #0]
 800d3f2:	4854      	ldr	r0, [pc, #336]	; (800d544 <_printf_i+0x244>)
 800d3f4:	2f6f      	cmp	r7, #111	; 0x6f
 800d3f6:	bf0c      	ite	eq
 800d3f8:	2308      	moveq	r3, #8
 800d3fa:	230a      	movne	r3, #10
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d402:	6865      	ldr	r5, [r4, #4]
 800d404:	60a5      	str	r5, [r4, #8]
 800d406:	2d00      	cmp	r5, #0
 800d408:	bfa2      	ittt	ge
 800d40a:	6821      	ldrge	r1, [r4, #0]
 800d40c:	f021 0104 	bicge.w	r1, r1, #4
 800d410:	6021      	strge	r1, [r4, #0]
 800d412:	b90e      	cbnz	r6, 800d418 <_printf_i+0x118>
 800d414:	2d00      	cmp	r5, #0
 800d416:	d04d      	beq.n	800d4b4 <_printf_i+0x1b4>
 800d418:	4615      	mov	r5, r2
 800d41a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d41e:	fb03 6711 	mls	r7, r3, r1, r6
 800d422:	5dc7      	ldrb	r7, [r0, r7]
 800d424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d428:	4637      	mov	r7, r6
 800d42a:	42bb      	cmp	r3, r7
 800d42c:	460e      	mov	r6, r1
 800d42e:	d9f4      	bls.n	800d41a <_printf_i+0x11a>
 800d430:	2b08      	cmp	r3, #8
 800d432:	d10b      	bne.n	800d44c <_printf_i+0x14c>
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	07de      	lsls	r6, r3, #31
 800d438:	d508      	bpl.n	800d44c <_printf_i+0x14c>
 800d43a:	6923      	ldr	r3, [r4, #16]
 800d43c:	6861      	ldr	r1, [r4, #4]
 800d43e:	4299      	cmp	r1, r3
 800d440:	bfde      	ittt	le
 800d442:	2330      	movle	r3, #48	; 0x30
 800d444:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d448:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d44c:	1b52      	subs	r2, r2, r5
 800d44e:	6122      	str	r2, [r4, #16]
 800d450:	f8cd a000 	str.w	sl, [sp]
 800d454:	464b      	mov	r3, r9
 800d456:	aa03      	add	r2, sp, #12
 800d458:	4621      	mov	r1, r4
 800d45a:	4640      	mov	r0, r8
 800d45c:	f7ff fee2 	bl	800d224 <_printf_common>
 800d460:	3001      	adds	r0, #1
 800d462:	d14c      	bne.n	800d4fe <_printf_i+0x1fe>
 800d464:	f04f 30ff 	mov.w	r0, #4294967295
 800d468:	b004      	add	sp, #16
 800d46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d46e:	4835      	ldr	r0, [pc, #212]	; (800d544 <_printf_i+0x244>)
 800d470:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d474:	6829      	ldr	r1, [r5, #0]
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	f851 6b04 	ldr.w	r6, [r1], #4
 800d47c:	6029      	str	r1, [r5, #0]
 800d47e:	061d      	lsls	r5, r3, #24
 800d480:	d514      	bpl.n	800d4ac <_printf_i+0x1ac>
 800d482:	07df      	lsls	r7, r3, #31
 800d484:	bf44      	itt	mi
 800d486:	f043 0320 	orrmi.w	r3, r3, #32
 800d48a:	6023      	strmi	r3, [r4, #0]
 800d48c:	b91e      	cbnz	r6, 800d496 <_printf_i+0x196>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	f023 0320 	bic.w	r3, r3, #32
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	2310      	movs	r3, #16
 800d498:	e7b0      	b.n	800d3fc <_printf_i+0xfc>
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	f043 0320 	orr.w	r3, r3, #32
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	2378      	movs	r3, #120	; 0x78
 800d4a4:	4828      	ldr	r0, [pc, #160]	; (800d548 <_printf_i+0x248>)
 800d4a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4aa:	e7e3      	b.n	800d474 <_printf_i+0x174>
 800d4ac:	0659      	lsls	r1, r3, #25
 800d4ae:	bf48      	it	mi
 800d4b0:	b2b6      	uxthmi	r6, r6
 800d4b2:	e7e6      	b.n	800d482 <_printf_i+0x182>
 800d4b4:	4615      	mov	r5, r2
 800d4b6:	e7bb      	b.n	800d430 <_printf_i+0x130>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	6826      	ldr	r6, [r4, #0]
 800d4bc:	6961      	ldr	r1, [r4, #20]
 800d4be:	1d18      	adds	r0, r3, #4
 800d4c0:	6028      	str	r0, [r5, #0]
 800d4c2:	0635      	lsls	r5, r6, #24
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	d501      	bpl.n	800d4cc <_printf_i+0x1cc>
 800d4c8:	6019      	str	r1, [r3, #0]
 800d4ca:	e002      	b.n	800d4d2 <_printf_i+0x1d2>
 800d4cc:	0670      	lsls	r0, r6, #25
 800d4ce:	d5fb      	bpl.n	800d4c8 <_printf_i+0x1c8>
 800d4d0:	8019      	strh	r1, [r3, #0]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	6123      	str	r3, [r4, #16]
 800d4d6:	4615      	mov	r5, r2
 800d4d8:	e7ba      	b.n	800d450 <_printf_i+0x150>
 800d4da:	682b      	ldr	r3, [r5, #0]
 800d4dc:	1d1a      	adds	r2, r3, #4
 800d4de:	602a      	str	r2, [r5, #0]
 800d4e0:	681d      	ldr	r5, [r3, #0]
 800d4e2:	6862      	ldr	r2, [r4, #4]
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7f2 fe7a 	bl	80001e0 <memchr>
 800d4ec:	b108      	cbz	r0, 800d4f2 <_printf_i+0x1f2>
 800d4ee:	1b40      	subs	r0, r0, r5
 800d4f0:	6060      	str	r0, [r4, #4]
 800d4f2:	6863      	ldr	r3, [r4, #4]
 800d4f4:	6123      	str	r3, [r4, #16]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4fc:	e7a8      	b.n	800d450 <_printf_i+0x150>
 800d4fe:	6923      	ldr	r3, [r4, #16]
 800d500:	462a      	mov	r2, r5
 800d502:	4649      	mov	r1, r9
 800d504:	4640      	mov	r0, r8
 800d506:	47d0      	blx	sl
 800d508:	3001      	adds	r0, #1
 800d50a:	d0ab      	beq.n	800d464 <_printf_i+0x164>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	079b      	lsls	r3, r3, #30
 800d510:	d413      	bmi.n	800d53a <_printf_i+0x23a>
 800d512:	68e0      	ldr	r0, [r4, #12]
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	4298      	cmp	r0, r3
 800d518:	bfb8      	it	lt
 800d51a:	4618      	movlt	r0, r3
 800d51c:	e7a4      	b.n	800d468 <_printf_i+0x168>
 800d51e:	2301      	movs	r3, #1
 800d520:	4632      	mov	r2, r6
 800d522:	4649      	mov	r1, r9
 800d524:	4640      	mov	r0, r8
 800d526:	47d0      	blx	sl
 800d528:	3001      	adds	r0, #1
 800d52a:	d09b      	beq.n	800d464 <_printf_i+0x164>
 800d52c:	3501      	adds	r5, #1
 800d52e:	68e3      	ldr	r3, [r4, #12]
 800d530:	9903      	ldr	r1, [sp, #12]
 800d532:	1a5b      	subs	r3, r3, r1
 800d534:	42ab      	cmp	r3, r5
 800d536:	dcf2      	bgt.n	800d51e <_printf_i+0x21e>
 800d538:	e7eb      	b.n	800d512 <_printf_i+0x212>
 800d53a:	2500      	movs	r5, #0
 800d53c:	f104 0619 	add.w	r6, r4, #25
 800d540:	e7f5      	b.n	800d52e <_printf_i+0x22e>
 800d542:	bf00      	nop
 800d544:	0800f85d 	.word	0x0800f85d
 800d548:	0800f86e 	.word	0x0800f86e

0800d54c <_open_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4d07      	ldr	r5, [pc, #28]	; (800d56c <_open_r+0x20>)
 800d550:	4604      	mov	r4, r0
 800d552:	4608      	mov	r0, r1
 800d554:	4611      	mov	r1, r2
 800d556:	2200      	movs	r2, #0
 800d558:	602a      	str	r2, [r5, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	f7f5 fbc7 	bl	8002cee <_open>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	d102      	bne.n	800d56a <_open_r+0x1e>
 800d564:	682b      	ldr	r3, [r5, #0]
 800d566:	b103      	cbz	r3, 800d56a <_open_r+0x1e>
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	bd38      	pop	{r3, r4, r5, pc}
 800d56c:	200063d0 	.word	0x200063d0

0800d570 <iprintf>:
 800d570:	b40f      	push	{r0, r1, r2, r3}
 800d572:	4b0a      	ldr	r3, [pc, #40]	; (800d59c <iprintf+0x2c>)
 800d574:	b513      	push	{r0, r1, r4, lr}
 800d576:	681c      	ldr	r4, [r3, #0]
 800d578:	b124      	cbz	r4, 800d584 <iprintf+0x14>
 800d57a:	69a3      	ldr	r3, [r4, #24]
 800d57c:	b913      	cbnz	r3, 800d584 <iprintf+0x14>
 800d57e:	4620      	mov	r0, r4
 800d580:	f7ff f926 	bl	800c7d0 <__sinit>
 800d584:	ab05      	add	r3, sp, #20
 800d586:	9a04      	ldr	r2, [sp, #16]
 800d588:	68a1      	ldr	r1, [r4, #8]
 800d58a:	9301      	str	r3, [sp, #4]
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7ff fd19 	bl	800cfc4 <_vfiprintf_r>
 800d592:	b002      	add	sp, #8
 800d594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d598:	b004      	add	sp, #16
 800d59a:	4770      	bx	lr
 800d59c:	20000118 	.word	0x20000118

0800d5a0 <_puts_r>:
 800d5a0:	b570      	push	{r4, r5, r6, lr}
 800d5a2:	460e      	mov	r6, r1
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	b118      	cbz	r0, 800d5b0 <_puts_r+0x10>
 800d5a8:	6983      	ldr	r3, [r0, #24]
 800d5aa:	b90b      	cbnz	r3, 800d5b0 <_puts_r+0x10>
 800d5ac:	f7ff f910 	bl	800c7d0 <__sinit>
 800d5b0:	69ab      	ldr	r3, [r5, #24]
 800d5b2:	68ac      	ldr	r4, [r5, #8]
 800d5b4:	b913      	cbnz	r3, 800d5bc <_puts_r+0x1c>
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f7ff f90a 	bl	800c7d0 <__sinit>
 800d5bc:	4b2c      	ldr	r3, [pc, #176]	; (800d670 <_puts_r+0xd0>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	d120      	bne.n	800d604 <_puts_r+0x64>
 800d5c2:	686c      	ldr	r4, [r5, #4]
 800d5c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5c6:	07db      	lsls	r3, r3, #31
 800d5c8:	d405      	bmi.n	800d5d6 <_puts_r+0x36>
 800d5ca:	89a3      	ldrh	r3, [r4, #12]
 800d5cc:	0598      	lsls	r0, r3, #22
 800d5ce:	d402      	bmi.n	800d5d6 <_puts_r+0x36>
 800d5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5d2:	f7ff fb6f 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	0719      	lsls	r1, r3, #28
 800d5da:	d51d      	bpl.n	800d618 <_puts_r+0x78>
 800d5dc:	6923      	ldr	r3, [r4, #16]
 800d5de:	b1db      	cbz	r3, 800d618 <_puts_r+0x78>
 800d5e0:	3e01      	subs	r6, #1
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	60a3      	str	r3, [r4, #8]
 800d5ec:	bb39      	cbnz	r1, 800d63e <_puts_r+0x9e>
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	da38      	bge.n	800d664 <_puts_r+0xc4>
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	210a      	movs	r1, #10
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 fb04 	bl	800dc04 <__swbuf_r>
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	d011      	beq.n	800d624 <_puts_r+0x84>
 800d600:	250a      	movs	r5, #10
 800d602:	e011      	b.n	800d628 <_puts_r+0x88>
 800d604:	4b1b      	ldr	r3, [pc, #108]	; (800d674 <_puts_r+0xd4>)
 800d606:	429c      	cmp	r4, r3
 800d608:	d101      	bne.n	800d60e <_puts_r+0x6e>
 800d60a:	68ac      	ldr	r4, [r5, #8]
 800d60c:	e7da      	b.n	800d5c4 <_puts_r+0x24>
 800d60e:	4b1a      	ldr	r3, [pc, #104]	; (800d678 <_puts_r+0xd8>)
 800d610:	429c      	cmp	r4, r3
 800d612:	bf08      	it	eq
 800d614:	68ec      	ldreq	r4, [r5, #12]
 800d616:	e7d5      	b.n	800d5c4 <_puts_r+0x24>
 800d618:	4621      	mov	r1, r4
 800d61a:	4628      	mov	r0, r5
 800d61c:	f000 fb56 	bl	800dccc <__swsetup_r>
 800d620:	2800      	cmp	r0, #0
 800d622:	d0dd      	beq.n	800d5e0 <_puts_r+0x40>
 800d624:	f04f 35ff 	mov.w	r5, #4294967295
 800d628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d62a:	07da      	lsls	r2, r3, #31
 800d62c:	d405      	bmi.n	800d63a <_puts_r+0x9a>
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	059b      	lsls	r3, r3, #22
 800d632:	d402      	bmi.n	800d63a <_puts_r+0x9a>
 800d634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d636:	f7ff fb3e 	bl	800ccb6 <__retarget_lock_release_recursive>
 800d63a:	4628      	mov	r0, r5
 800d63c:	bd70      	pop	{r4, r5, r6, pc}
 800d63e:	2b00      	cmp	r3, #0
 800d640:	da04      	bge.n	800d64c <_puts_r+0xac>
 800d642:	69a2      	ldr	r2, [r4, #24]
 800d644:	429a      	cmp	r2, r3
 800d646:	dc06      	bgt.n	800d656 <_puts_r+0xb6>
 800d648:	290a      	cmp	r1, #10
 800d64a:	d004      	beq.n	800d656 <_puts_r+0xb6>
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	6022      	str	r2, [r4, #0]
 800d652:	7019      	strb	r1, [r3, #0]
 800d654:	e7c5      	b.n	800d5e2 <_puts_r+0x42>
 800d656:	4622      	mov	r2, r4
 800d658:	4628      	mov	r0, r5
 800d65a:	f000 fad3 	bl	800dc04 <__swbuf_r>
 800d65e:	3001      	adds	r0, #1
 800d660:	d1bf      	bne.n	800d5e2 <_puts_r+0x42>
 800d662:	e7df      	b.n	800d624 <_puts_r+0x84>
 800d664:	6823      	ldr	r3, [r4, #0]
 800d666:	250a      	movs	r5, #10
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	6022      	str	r2, [r4, #0]
 800d66c:	701d      	strb	r5, [r3, #0]
 800d66e:	e7db      	b.n	800d628 <_puts_r+0x88>
 800d670:	0800f808 	.word	0x0800f808
 800d674:	0800f828 	.word	0x0800f828
 800d678:	0800f7e8 	.word	0x0800f7e8

0800d67c <puts>:
 800d67c:	4b02      	ldr	r3, [pc, #8]	; (800d688 <puts+0xc>)
 800d67e:	4601      	mov	r1, r0
 800d680:	6818      	ldr	r0, [r3, #0]
 800d682:	f7ff bf8d 	b.w	800d5a0 <_puts_r>
 800d686:	bf00      	nop
 800d688:	20000118 	.word	0x20000118

0800d68c <cleanup_glue>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	460c      	mov	r4, r1
 800d690:	6809      	ldr	r1, [r1, #0]
 800d692:	4605      	mov	r5, r0
 800d694:	b109      	cbz	r1, 800d69a <cleanup_glue+0xe>
 800d696:	f7ff fff9 	bl	800d68c <cleanup_glue>
 800d69a:	4621      	mov	r1, r4
 800d69c:	4628      	mov	r0, r5
 800d69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6a2:	f7ff bb85 	b.w	800cdb0 <_free_r>
	...

0800d6a8 <_reclaim_reent>:
 800d6a8:	4b2c      	ldr	r3, [pc, #176]	; (800d75c <_reclaim_reent+0xb4>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4283      	cmp	r3, r0
 800d6ae:	b570      	push	{r4, r5, r6, lr}
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	d051      	beq.n	800d758 <_reclaim_reent+0xb0>
 800d6b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6b6:	b143      	cbz	r3, 800d6ca <_reclaim_reent+0x22>
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d14a      	bne.n	800d754 <_reclaim_reent+0xac>
 800d6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c0:	6819      	ldr	r1, [r3, #0]
 800d6c2:	b111      	cbz	r1, 800d6ca <_reclaim_reent+0x22>
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f7ff fb73 	bl	800cdb0 <_free_r>
 800d6ca:	6961      	ldr	r1, [r4, #20]
 800d6cc:	b111      	cbz	r1, 800d6d4 <_reclaim_reent+0x2c>
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f7ff fb6e 	bl	800cdb0 <_free_r>
 800d6d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6d6:	b111      	cbz	r1, 800d6de <_reclaim_reent+0x36>
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f7ff fb69 	bl	800cdb0 <_free_r>
 800d6de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d6e0:	b111      	cbz	r1, 800d6e8 <_reclaim_reent+0x40>
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f7ff fb64 	bl	800cdb0 <_free_r>
 800d6e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d6ea:	b111      	cbz	r1, 800d6f2 <_reclaim_reent+0x4a>
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f7ff fb5f 	bl	800cdb0 <_free_r>
 800d6f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d6f4:	b111      	cbz	r1, 800d6fc <_reclaim_reent+0x54>
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f7ff fb5a 	bl	800cdb0 <_free_r>
 800d6fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d6fe:	b111      	cbz	r1, 800d706 <_reclaim_reent+0x5e>
 800d700:	4620      	mov	r0, r4
 800d702:	f7ff fb55 	bl	800cdb0 <_free_r>
 800d706:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d708:	b111      	cbz	r1, 800d710 <_reclaim_reent+0x68>
 800d70a:	4620      	mov	r0, r4
 800d70c:	f7ff fb50 	bl	800cdb0 <_free_r>
 800d710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d712:	b111      	cbz	r1, 800d71a <_reclaim_reent+0x72>
 800d714:	4620      	mov	r0, r4
 800d716:	f7ff fb4b 	bl	800cdb0 <_free_r>
 800d71a:	69a3      	ldr	r3, [r4, #24]
 800d71c:	b1e3      	cbz	r3, 800d758 <_reclaim_reent+0xb0>
 800d71e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d720:	4620      	mov	r0, r4
 800d722:	4798      	blx	r3
 800d724:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d726:	b1b9      	cbz	r1, 800d758 <_reclaim_reent+0xb0>
 800d728:	4620      	mov	r0, r4
 800d72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d72e:	f7ff bfad 	b.w	800d68c <cleanup_glue>
 800d732:	5949      	ldr	r1, [r1, r5]
 800d734:	b941      	cbnz	r1, 800d748 <_reclaim_reent+0xa0>
 800d736:	3504      	adds	r5, #4
 800d738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d73a:	2d80      	cmp	r5, #128	; 0x80
 800d73c:	68d9      	ldr	r1, [r3, #12]
 800d73e:	d1f8      	bne.n	800d732 <_reclaim_reent+0x8a>
 800d740:	4620      	mov	r0, r4
 800d742:	f7ff fb35 	bl	800cdb0 <_free_r>
 800d746:	e7ba      	b.n	800d6be <_reclaim_reent+0x16>
 800d748:	680e      	ldr	r6, [r1, #0]
 800d74a:	4620      	mov	r0, r4
 800d74c:	f7ff fb30 	bl	800cdb0 <_free_r>
 800d750:	4631      	mov	r1, r6
 800d752:	e7ef      	b.n	800d734 <_reclaim_reent+0x8c>
 800d754:	2500      	movs	r5, #0
 800d756:	e7ef      	b.n	800d738 <_reclaim_reent+0x90>
 800d758:	bd70      	pop	{r4, r5, r6, pc}
 800d75a:	bf00      	nop
 800d75c:	20000118 	.word	0x20000118

0800d760 <lflush>:
 800d760:	8983      	ldrh	r3, [r0, #12]
 800d762:	f003 0309 	and.w	r3, r3, #9
 800d766:	2b09      	cmp	r3, #9
 800d768:	d101      	bne.n	800d76e <lflush+0xe>
 800d76a:	f000 bbef 	b.w	800df4c <fflush>
 800d76e:	2000      	movs	r0, #0
 800d770:	4770      	bx	lr
	...

0800d774 <__srefill_r>:
 800d774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d776:	460c      	mov	r4, r1
 800d778:	4605      	mov	r5, r0
 800d77a:	b118      	cbz	r0, 800d784 <__srefill_r+0x10>
 800d77c:	6983      	ldr	r3, [r0, #24]
 800d77e:	b90b      	cbnz	r3, 800d784 <__srefill_r+0x10>
 800d780:	f7ff f826 	bl	800c7d0 <__sinit>
 800d784:	4b3b      	ldr	r3, [pc, #236]	; (800d874 <__srefill_r+0x100>)
 800d786:	429c      	cmp	r4, r3
 800d788:	d10a      	bne.n	800d7a0 <__srefill_r+0x2c>
 800d78a:	686c      	ldr	r4, [r5, #4]
 800d78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d790:	2300      	movs	r3, #0
 800d792:	6063      	str	r3, [r4, #4]
 800d794:	89a3      	ldrh	r3, [r4, #12]
 800d796:	069e      	lsls	r6, r3, #26
 800d798:	d50c      	bpl.n	800d7b4 <__srefill_r+0x40>
 800d79a:	f04f 30ff 	mov.w	r0, #4294967295
 800d79e:	e066      	b.n	800d86e <__srefill_r+0xfa>
 800d7a0:	4b35      	ldr	r3, [pc, #212]	; (800d878 <__srefill_r+0x104>)
 800d7a2:	429c      	cmp	r4, r3
 800d7a4:	d101      	bne.n	800d7aa <__srefill_r+0x36>
 800d7a6:	68ac      	ldr	r4, [r5, #8]
 800d7a8:	e7f0      	b.n	800d78c <__srefill_r+0x18>
 800d7aa:	4b34      	ldr	r3, [pc, #208]	; (800d87c <__srefill_r+0x108>)
 800d7ac:	429c      	cmp	r4, r3
 800d7ae:	bf08      	it	eq
 800d7b0:	68ec      	ldreq	r4, [r5, #12]
 800d7b2:	e7eb      	b.n	800d78c <__srefill_r+0x18>
 800d7b4:	0758      	lsls	r0, r3, #29
 800d7b6:	d448      	bmi.n	800d84a <__srefill_r+0xd6>
 800d7b8:	06d9      	lsls	r1, r3, #27
 800d7ba:	d405      	bmi.n	800d7c8 <__srefill_r+0x54>
 800d7bc:	2309      	movs	r3, #9
 800d7be:	602b      	str	r3, [r5, #0]
 800d7c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	e7e8      	b.n	800d79a <__srefill_r+0x26>
 800d7c8:	071a      	lsls	r2, r3, #28
 800d7ca:	d50b      	bpl.n	800d7e4 <__srefill_r+0x70>
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f000 fb80 	bl	800ded4 <_fflush_r>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d1e0      	bne.n	800d79a <__srefill_r+0x26>
 800d7d8:	89a3      	ldrh	r3, [r4, #12]
 800d7da:	60a0      	str	r0, [r4, #8]
 800d7dc:	f023 0308 	bic.w	r3, r3, #8
 800d7e0:	81a3      	strh	r3, [r4, #12]
 800d7e2:	61a0      	str	r0, [r4, #24]
 800d7e4:	89a3      	ldrh	r3, [r4, #12]
 800d7e6:	f043 0304 	orr.w	r3, r3, #4
 800d7ea:	81a3      	strh	r3, [r4, #12]
 800d7ec:	6923      	ldr	r3, [r4, #16]
 800d7ee:	b91b      	cbnz	r3, 800d7f8 <__srefill_r+0x84>
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	f7ff fa86 	bl	800cd04 <__smakebuf_r>
 800d7f8:	89a6      	ldrh	r6, [r4, #12]
 800d7fa:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800d7fe:	07b3      	lsls	r3, r6, #30
 800d800:	d00f      	beq.n	800d822 <__srefill_r+0xae>
 800d802:	2301      	movs	r3, #1
 800d804:	81a3      	strh	r3, [r4, #12]
 800d806:	4b1e      	ldr	r3, [pc, #120]	; (800d880 <__srefill_r+0x10c>)
 800d808:	491e      	ldr	r1, [pc, #120]	; (800d884 <__srefill_r+0x110>)
 800d80a:	6818      	ldr	r0, [r3, #0]
 800d80c:	f006 0609 	and.w	r6, r6, #9
 800d810:	f7ff f980 	bl	800cb14 <_fwalk>
 800d814:	2e09      	cmp	r6, #9
 800d816:	81a7      	strh	r7, [r4, #12]
 800d818:	d103      	bne.n	800d822 <__srefill_r+0xae>
 800d81a:	4621      	mov	r1, r4
 800d81c:	4628      	mov	r0, r5
 800d81e:	f000 fad3 	bl	800ddc8 <__sflush_r>
 800d822:	6922      	ldr	r2, [r4, #16]
 800d824:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d826:	6963      	ldr	r3, [r4, #20]
 800d828:	6a21      	ldr	r1, [r4, #32]
 800d82a:	6022      	str	r2, [r4, #0]
 800d82c:	4628      	mov	r0, r5
 800d82e:	47b0      	blx	r6
 800d830:	2800      	cmp	r0, #0
 800d832:	6060      	str	r0, [r4, #4]
 800d834:	dc1c      	bgt.n	800d870 <__srefill_r+0xfc>
 800d836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d83a:	bf17      	itett	ne
 800d83c:	2200      	movne	r2, #0
 800d83e:	f043 0320 	orreq.w	r3, r3, #32
 800d842:	6062      	strne	r2, [r4, #4]
 800d844:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800d848:	e7bc      	b.n	800d7c4 <__srefill_r+0x50>
 800d84a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d84c:	2900      	cmp	r1, #0
 800d84e:	d0cd      	beq.n	800d7ec <__srefill_r+0x78>
 800d850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d854:	4299      	cmp	r1, r3
 800d856:	d002      	beq.n	800d85e <__srefill_r+0xea>
 800d858:	4628      	mov	r0, r5
 800d85a:	f7ff faa9 	bl	800cdb0 <_free_r>
 800d85e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d860:	6063      	str	r3, [r4, #4]
 800d862:	2000      	movs	r0, #0
 800d864:	6360      	str	r0, [r4, #52]	; 0x34
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0c0      	beq.n	800d7ec <__srefill_r+0x78>
 800d86a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d870:	2000      	movs	r0, #0
 800d872:	e7fc      	b.n	800d86e <__srefill_r+0xfa>
 800d874:	0800f808 	.word	0x0800f808
 800d878:	0800f828 	.word	0x0800f828
 800d87c:	0800f7e8 	.word	0x0800f7e8
 800d880:	0800f848 	.word	0x0800f848
 800d884:	0800d761 	.word	0x0800d761

0800d888 <_sbrk_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	4d06      	ldr	r5, [pc, #24]	; (800d8a4 <_sbrk_r+0x1c>)
 800d88c:	2300      	movs	r3, #0
 800d88e:	4604      	mov	r4, r0
 800d890:	4608      	mov	r0, r1
 800d892:	602b      	str	r3, [r5, #0]
 800d894:	f7f5 fa3a 	bl	8002d0c <_sbrk>
 800d898:	1c43      	adds	r3, r0, #1
 800d89a:	d102      	bne.n	800d8a2 <_sbrk_r+0x1a>
 800d89c:	682b      	ldr	r3, [r5, #0]
 800d89e:	b103      	cbz	r3, 800d8a2 <_sbrk_r+0x1a>
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	bd38      	pop	{r3, r4, r5, pc}
 800d8a4:	200063d0 	.word	0x200063d0

0800d8a8 <setvbuf>:
 800d8a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8ac:	461d      	mov	r5, r3
 800d8ae:	4b5d      	ldr	r3, [pc, #372]	; (800da24 <setvbuf+0x17c>)
 800d8b0:	681f      	ldr	r7, [r3, #0]
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	460e      	mov	r6, r1
 800d8b6:	4690      	mov	r8, r2
 800d8b8:	b127      	cbz	r7, 800d8c4 <setvbuf+0x1c>
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	b913      	cbnz	r3, 800d8c4 <setvbuf+0x1c>
 800d8be:	4638      	mov	r0, r7
 800d8c0:	f7fe ff86 	bl	800c7d0 <__sinit>
 800d8c4:	4b58      	ldr	r3, [pc, #352]	; (800da28 <setvbuf+0x180>)
 800d8c6:	429c      	cmp	r4, r3
 800d8c8:	d167      	bne.n	800d99a <setvbuf+0xf2>
 800d8ca:	687c      	ldr	r4, [r7, #4]
 800d8cc:	f1b8 0f02 	cmp.w	r8, #2
 800d8d0:	d006      	beq.n	800d8e0 <setvbuf+0x38>
 800d8d2:	f1b8 0f01 	cmp.w	r8, #1
 800d8d6:	f200 809f 	bhi.w	800da18 <setvbuf+0x170>
 800d8da:	2d00      	cmp	r5, #0
 800d8dc:	f2c0 809c 	blt.w	800da18 <setvbuf+0x170>
 800d8e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8e2:	07db      	lsls	r3, r3, #31
 800d8e4:	d405      	bmi.n	800d8f2 <setvbuf+0x4a>
 800d8e6:	89a3      	ldrh	r3, [r4, #12]
 800d8e8:	0598      	lsls	r0, r3, #22
 800d8ea:	d402      	bmi.n	800d8f2 <setvbuf+0x4a>
 800d8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8ee:	f7ff f9e1 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800d8f2:	4621      	mov	r1, r4
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	f000 faed 	bl	800ded4 <_fflush_r>
 800d8fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8fc:	b141      	cbz	r1, 800d910 <setvbuf+0x68>
 800d8fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d902:	4299      	cmp	r1, r3
 800d904:	d002      	beq.n	800d90c <setvbuf+0x64>
 800d906:	4638      	mov	r0, r7
 800d908:	f7ff fa52 	bl	800cdb0 <_free_r>
 800d90c:	2300      	movs	r3, #0
 800d90e:	6363      	str	r3, [r4, #52]	; 0x34
 800d910:	2300      	movs	r3, #0
 800d912:	61a3      	str	r3, [r4, #24]
 800d914:	6063      	str	r3, [r4, #4]
 800d916:	89a3      	ldrh	r3, [r4, #12]
 800d918:	0619      	lsls	r1, r3, #24
 800d91a:	d503      	bpl.n	800d924 <setvbuf+0x7c>
 800d91c:	6921      	ldr	r1, [r4, #16]
 800d91e:	4638      	mov	r0, r7
 800d920:	f7ff fa46 	bl	800cdb0 <_free_r>
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d92a:	f023 0303 	bic.w	r3, r3, #3
 800d92e:	f1b8 0f02 	cmp.w	r8, #2
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	d06c      	beq.n	800da10 <setvbuf+0x168>
 800d936:	ab01      	add	r3, sp, #4
 800d938:	466a      	mov	r2, sp
 800d93a:	4621      	mov	r1, r4
 800d93c:	4638      	mov	r0, r7
 800d93e:	f7ff f9bb 	bl	800ccb8 <__swhatbuf_r>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	4318      	orrs	r0, r3
 800d946:	81a0      	strh	r0, [r4, #12]
 800d948:	2d00      	cmp	r5, #0
 800d94a:	d130      	bne.n	800d9ae <setvbuf+0x106>
 800d94c:	9d00      	ldr	r5, [sp, #0]
 800d94e:	4628      	mov	r0, r5
 800d950:	f000 fb78 	bl	800e044 <malloc>
 800d954:	4606      	mov	r6, r0
 800d956:	2800      	cmp	r0, #0
 800d958:	d155      	bne.n	800da06 <setvbuf+0x15e>
 800d95a:	f8dd 9000 	ldr.w	r9, [sp]
 800d95e:	45a9      	cmp	r9, r5
 800d960:	d14a      	bne.n	800d9f8 <setvbuf+0x150>
 800d962:	f04f 35ff 	mov.w	r5, #4294967295
 800d966:	2200      	movs	r2, #0
 800d968:	60a2      	str	r2, [r4, #8]
 800d96a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d96e:	6022      	str	r2, [r4, #0]
 800d970:	6122      	str	r2, [r4, #16]
 800d972:	2201      	movs	r2, #1
 800d974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d978:	6162      	str	r2, [r4, #20]
 800d97a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d97c:	f043 0302 	orr.w	r3, r3, #2
 800d980:	07d2      	lsls	r2, r2, #31
 800d982:	81a3      	strh	r3, [r4, #12]
 800d984:	d405      	bmi.n	800d992 <setvbuf+0xea>
 800d986:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d98a:	d102      	bne.n	800d992 <setvbuf+0xea>
 800d98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d98e:	f7ff f992 	bl	800ccb6 <__retarget_lock_release_recursive>
 800d992:	4628      	mov	r0, r5
 800d994:	b003      	add	sp, #12
 800d996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d99a:	4b24      	ldr	r3, [pc, #144]	; (800da2c <setvbuf+0x184>)
 800d99c:	429c      	cmp	r4, r3
 800d99e:	d101      	bne.n	800d9a4 <setvbuf+0xfc>
 800d9a0:	68bc      	ldr	r4, [r7, #8]
 800d9a2:	e793      	b.n	800d8cc <setvbuf+0x24>
 800d9a4:	4b22      	ldr	r3, [pc, #136]	; (800da30 <setvbuf+0x188>)
 800d9a6:	429c      	cmp	r4, r3
 800d9a8:	bf08      	it	eq
 800d9aa:	68fc      	ldreq	r4, [r7, #12]
 800d9ac:	e78e      	b.n	800d8cc <setvbuf+0x24>
 800d9ae:	2e00      	cmp	r6, #0
 800d9b0:	d0cd      	beq.n	800d94e <setvbuf+0xa6>
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	b913      	cbnz	r3, 800d9bc <setvbuf+0x114>
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f7fe ff0a 	bl	800c7d0 <__sinit>
 800d9bc:	f1b8 0f01 	cmp.w	r8, #1
 800d9c0:	bf08      	it	eq
 800d9c2:	89a3      	ldrheq	r3, [r4, #12]
 800d9c4:	6026      	str	r6, [r4, #0]
 800d9c6:	bf04      	itt	eq
 800d9c8:	f043 0301 	orreq.w	r3, r3, #1
 800d9cc:	81a3      	strheq	r3, [r4, #12]
 800d9ce:	89a2      	ldrh	r2, [r4, #12]
 800d9d0:	f012 0308 	ands.w	r3, r2, #8
 800d9d4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d9d8:	d01c      	beq.n	800da14 <setvbuf+0x16c>
 800d9da:	07d3      	lsls	r3, r2, #31
 800d9dc:	bf41      	itttt	mi
 800d9de:	2300      	movmi	r3, #0
 800d9e0:	426d      	negmi	r5, r5
 800d9e2:	60a3      	strmi	r3, [r4, #8]
 800d9e4:	61a5      	strmi	r5, [r4, #24]
 800d9e6:	bf58      	it	pl
 800d9e8:	60a5      	strpl	r5, [r4, #8]
 800d9ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d9ec:	f015 0501 	ands.w	r5, r5, #1
 800d9f0:	d115      	bne.n	800da1e <setvbuf+0x176>
 800d9f2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d9f6:	e7c8      	b.n	800d98a <setvbuf+0xe2>
 800d9f8:	4648      	mov	r0, r9
 800d9fa:	f000 fb23 	bl	800e044 <malloc>
 800d9fe:	4606      	mov	r6, r0
 800da00:	2800      	cmp	r0, #0
 800da02:	d0ae      	beq.n	800d962 <setvbuf+0xba>
 800da04:	464d      	mov	r5, r9
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da0c:	81a3      	strh	r3, [r4, #12]
 800da0e:	e7d0      	b.n	800d9b2 <setvbuf+0x10a>
 800da10:	2500      	movs	r5, #0
 800da12:	e7a8      	b.n	800d966 <setvbuf+0xbe>
 800da14:	60a3      	str	r3, [r4, #8]
 800da16:	e7e8      	b.n	800d9ea <setvbuf+0x142>
 800da18:	f04f 35ff 	mov.w	r5, #4294967295
 800da1c:	e7b9      	b.n	800d992 <setvbuf+0xea>
 800da1e:	2500      	movs	r5, #0
 800da20:	e7b7      	b.n	800d992 <setvbuf+0xea>
 800da22:	bf00      	nop
 800da24:	20000118 	.word	0x20000118
 800da28:	0800f808 	.word	0x0800f808
 800da2c:	0800f828 	.word	0x0800f828
 800da30:	0800f7e8 	.word	0x0800f7e8

0800da34 <siprintf>:
 800da34:	b40e      	push	{r1, r2, r3}
 800da36:	b500      	push	{lr}
 800da38:	b09c      	sub	sp, #112	; 0x70
 800da3a:	ab1d      	add	r3, sp, #116	; 0x74
 800da3c:	9002      	str	r0, [sp, #8]
 800da3e:	9006      	str	r0, [sp, #24]
 800da40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da44:	4809      	ldr	r0, [pc, #36]	; (800da6c <siprintf+0x38>)
 800da46:	9107      	str	r1, [sp, #28]
 800da48:	9104      	str	r1, [sp, #16]
 800da4a:	4909      	ldr	r1, [pc, #36]	; (800da70 <siprintf+0x3c>)
 800da4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da50:	9105      	str	r1, [sp, #20]
 800da52:	6800      	ldr	r0, [r0, #0]
 800da54:	9301      	str	r3, [sp, #4]
 800da56:	a902      	add	r1, sp, #8
 800da58:	f000 fbac 	bl	800e1b4 <_svfiprintf_r>
 800da5c:	9b02      	ldr	r3, [sp, #8]
 800da5e:	2200      	movs	r2, #0
 800da60:	701a      	strb	r2, [r3, #0]
 800da62:	b01c      	add	sp, #112	; 0x70
 800da64:	f85d eb04 	ldr.w	lr, [sp], #4
 800da68:	b003      	add	sp, #12
 800da6a:	4770      	bx	lr
 800da6c:	20000118 	.word	0x20000118
 800da70:	ffff0208 	.word	0xffff0208

0800da74 <siscanf>:
 800da74:	b40e      	push	{r1, r2, r3}
 800da76:	b510      	push	{r4, lr}
 800da78:	b09f      	sub	sp, #124	; 0x7c
 800da7a:	ac21      	add	r4, sp, #132	; 0x84
 800da7c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800da80:	f854 2b04 	ldr.w	r2, [r4], #4
 800da84:	9201      	str	r2, [sp, #4]
 800da86:	f8ad 101c 	strh.w	r1, [sp, #28]
 800da8a:	9004      	str	r0, [sp, #16]
 800da8c:	9008      	str	r0, [sp, #32]
 800da8e:	f7f2 fbf7 	bl	8000280 <strlen>
 800da92:	4b0c      	ldr	r3, [pc, #48]	; (800dac4 <siscanf+0x50>)
 800da94:	9005      	str	r0, [sp, #20]
 800da96:	9009      	str	r0, [sp, #36]	; 0x24
 800da98:	930d      	str	r3, [sp, #52]	; 0x34
 800da9a:	480b      	ldr	r0, [pc, #44]	; (800dac8 <siscanf+0x54>)
 800da9c:	9a01      	ldr	r2, [sp, #4]
 800da9e:	6800      	ldr	r0, [r0, #0]
 800daa0:	9403      	str	r4, [sp, #12]
 800daa2:	2300      	movs	r3, #0
 800daa4:	9311      	str	r3, [sp, #68]	; 0x44
 800daa6:	9316      	str	r3, [sp, #88]	; 0x58
 800daa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800daac:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dab0:	a904      	add	r1, sp, #16
 800dab2:	4623      	mov	r3, r4
 800dab4:	f000 fcd8 	bl	800e468 <__ssvfiscanf_r>
 800dab8:	b01f      	add	sp, #124	; 0x7c
 800daba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dabe:	b003      	add	sp, #12
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	0800daef 	.word	0x0800daef
 800dac8:	20000118 	.word	0x20000118

0800dacc <__sread>:
 800dacc:	b510      	push	{r4, lr}
 800dace:	460c      	mov	r4, r1
 800dad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad4:	f000 ff92 	bl	800e9fc <_read_r>
 800dad8:	2800      	cmp	r0, #0
 800dada:	bfab      	itete	ge
 800dadc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dade:	89a3      	ldrhlt	r3, [r4, #12]
 800dae0:	181b      	addge	r3, r3, r0
 800dae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dae6:	bfac      	ite	ge
 800dae8:	6563      	strge	r3, [r4, #84]	; 0x54
 800daea:	81a3      	strhlt	r3, [r4, #12]
 800daec:	bd10      	pop	{r4, pc}

0800daee <__seofread>:
 800daee:	2000      	movs	r0, #0
 800daf0:	4770      	bx	lr

0800daf2 <__swrite>:
 800daf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf6:	461f      	mov	r7, r3
 800daf8:	898b      	ldrh	r3, [r1, #12]
 800dafa:	05db      	lsls	r3, r3, #23
 800dafc:	4605      	mov	r5, r0
 800dafe:	460c      	mov	r4, r1
 800db00:	4616      	mov	r6, r2
 800db02:	d505      	bpl.n	800db10 <__swrite+0x1e>
 800db04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db08:	2302      	movs	r3, #2
 800db0a:	2200      	movs	r2, #0
 800db0c:	f000 fa88 	bl	800e020 <_lseek_r>
 800db10:	89a3      	ldrh	r3, [r4, #12]
 800db12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db1a:	81a3      	strh	r3, [r4, #12]
 800db1c:	4632      	mov	r2, r6
 800db1e:	463b      	mov	r3, r7
 800db20:	4628      	mov	r0, r5
 800db22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db26:	f000 b8bf 	b.w	800dca8 <_write_r>

0800db2a <__sseek>:
 800db2a:	b510      	push	{r4, lr}
 800db2c:	460c      	mov	r4, r1
 800db2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db32:	f000 fa75 	bl	800e020 <_lseek_r>
 800db36:	1c43      	adds	r3, r0, #1
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	bf15      	itete	ne
 800db3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800db3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db46:	81a3      	strheq	r3, [r4, #12]
 800db48:	bf18      	it	ne
 800db4a:	81a3      	strhne	r3, [r4, #12]
 800db4c:	bd10      	pop	{r4, pc}

0800db4e <__sclose>:
 800db4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db52:	f000 b929 	b.w	800dda8 <_close_r>

0800db56 <strncmp>:
 800db56:	b510      	push	{r4, lr}
 800db58:	b17a      	cbz	r2, 800db7a <strncmp+0x24>
 800db5a:	4603      	mov	r3, r0
 800db5c:	3901      	subs	r1, #1
 800db5e:	1884      	adds	r4, r0, r2
 800db60:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db68:	4290      	cmp	r0, r2
 800db6a:	d101      	bne.n	800db70 <strncmp+0x1a>
 800db6c:	42a3      	cmp	r3, r4
 800db6e:	d101      	bne.n	800db74 <strncmp+0x1e>
 800db70:	1a80      	subs	r0, r0, r2
 800db72:	bd10      	pop	{r4, pc}
 800db74:	2800      	cmp	r0, #0
 800db76:	d1f3      	bne.n	800db60 <strncmp+0xa>
 800db78:	e7fa      	b.n	800db70 <strncmp+0x1a>
 800db7a:	4610      	mov	r0, r2
 800db7c:	e7f9      	b.n	800db72 <strncmp+0x1c>

0800db7e <strnlen>:
 800db7e:	b510      	push	{r4, lr}
 800db80:	4602      	mov	r2, r0
 800db82:	4401      	add	r1, r0
 800db84:	428a      	cmp	r2, r1
 800db86:	4613      	mov	r3, r2
 800db88:	d003      	beq.n	800db92 <strnlen+0x14>
 800db8a:	781c      	ldrb	r4, [r3, #0]
 800db8c:	3201      	adds	r2, #1
 800db8e:	2c00      	cmp	r4, #0
 800db90:	d1f8      	bne.n	800db84 <strnlen+0x6>
 800db92:	1a18      	subs	r0, r3, r0
 800db94:	bd10      	pop	{r4, pc}

0800db96 <strstr>:
 800db96:	780a      	ldrb	r2, [r1, #0]
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	b96a      	cbnz	r2, 800dbb8 <strstr+0x22>
 800db9c:	bd70      	pop	{r4, r5, r6, pc}
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d109      	bne.n	800dbb6 <strstr+0x20>
 800dba2:	460c      	mov	r4, r1
 800dba4:	4605      	mov	r5, r0
 800dba6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0f6      	beq.n	800db9c <strstr+0x6>
 800dbae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dbb2:	429e      	cmp	r6, r3
 800dbb4:	d0f7      	beq.n	800dba6 <strstr+0x10>
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	7803      	ldrb	r3, [r0, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1ef      	bne.n	800db9e <strstr+0x8>
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	e7ec      	b.n	800db9c <strstr+0x6>
	...

0800dbc4 <_vsiprintf_r>:
 800dbc4:	b500      	push	{lr}
 800dbc6:	b09b      	sub	sp, #108	; 0x6c
 800dbc8:	9100      	str	r1, [sp, #0]
 800dbca:	9104      	str	r1, [sp, #16]
 800dbcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbd0:	9105      	str	r1, [sp, #20]
 800dbd2:	9102      	str	r1, [sp, #8]
 800dbd4:	4905      	ldr	r1, [pc, #20]	; (800dbec <_vsiprintf_r+0x28>)
 800dbd6:	9103      	str	r1, [sp, #12]
 800dbd8:	4669      	mov	r1, sp
 800dbda:	f000 faeb 	bl	800e1b4 <_svfiprintf_r>
 800dbde:	9b00      	ldr	r3, [sp, #0]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	701a      	strb	r2, [r3, #0]
 800dbe4:	b01b      	add	sp, #108	; 0x6c
 800dbe6:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbea:	bf00      	nop
 800dbec:	ffff0208 	.word	0xffff0208

0800dbf0 <vsiprintf>:
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	460a      	mov	r2, r1
 800dbf4:	4601      	mov	r1, r0
 800dbf6:	4802      	ldr	r0, [pc, #8]	; (800dc00 <vsiprintf+0x10>)
 800dbf8:	6800      	ldr	r0, [r0, #0]
 800dbfa:	f7ff bfe3 	b.w	800dbc4 <_vsiprintf_r>
 800dbfe:	bf00      	nop
 800dc00:	20000118 	.word	0x20000118

0800dc04 <__swbuf_r>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	460e      	mov	r6, r1
 800dc08:	4614      	mov	r4, r2
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	b118      	cbz	r0, 800dc16 <__swbuf_r+0x12>
 800dc0e:	6983      	ldr	r3, [r0, #24]
 800dc10:	b90b      	cbnz	r3, 800dc16 <__swbuf_r+0x12>
 800dc12:	f7fe fddd 	bl	800c7d0 <__sinit>
 800dc16:	4b21      	ldr	r3, [pc, #132]	; (800dc9c <__swbuf_r+0x98>)
 800dc18:	429c      	cmp	r4, r3
 800dc1a:	d12b      	bne.n	800dc74 <__swbuf_r+0x70>
 800dc1c:	686c      	ldr	r4, [r5, #4]
 800dc1e:	69a3      	ldr	r3, [r4, #24]
 800dc20:	60a3      	str	r3, [r4, #8]
 800dc22:	89a3      	ldrh	r3, [r4, #12]
 800dc24:	071a      	lsls	r2, r3, #28
 800dc26:	d52f      	bpl.n	800dc88 <__swbuf_r+0x84>
 800dc28:	6923      	ldr	r3, [r4, #16]
 800dc2a:	b36b      	cbz	r3, 800dc88 <__swbuf_r+0x84>
 800dc2c:	6923      	ldr	r3, [r4, #16]
 800dc2e:	6820      	ldr	r0, [r4, #0]
 800dc30:	1ac0      	subs	r0, r0, r3
 800dc32:	6963      	ldr	r3, [r4, #20]
 800dc34:	b2f6      	uxtb	r6, r6
 800dc36:	4283      	cmp	r3, r0
 800dc38:	4637      	mov	r7, r6
 800dc3a:	dc04      	bgt.n	800dc46 <__swbuf_r+0x42>
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f000 f948 	bl	800ded4 <_fflush_r>
 800dc44:	bb30      	cbnz	r0, 800dc94 <__swbuf_r+0x90>
 800dc46:	68a3      	ldr	r3, [r4, #8]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	60a3      	str	r3, [r4, #8]
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	1c5a      	adds	r2, r3, #1
 800dc50:	6022      	str	r2, [r4, #0]
 800dc52:	701e      	strb	r6, [r3, #0]
 800dc54:	6963      	ldr	r3, [r4, #20]
 800dc56:	3001      	adds	r0, #1
 800dc58:	4283      	cmp	r3, r0
 800dc5a:	d004      	beq.n	800dc66 <__swbuf_r+0x62>
 800dc5c:	89a3      	ldrh	r3, [r4, #12]
 800dc5e:	07db      	lsls	r3, r3, #31
 800dc60:	d506      	bpl.n	800dc70 <__swbuf_r+0x6c>
 800dc62:	2e0a      	cmp	r6, #10
 800dc64:	d104      	bne.n	800dc70 <__swbuf_r+0x6c>
 800dc66:	4621      	mov	r1, r4
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f000 f933 	bl	800ded4 <_fflush_r>
 800dc6e:	b988      	cbnz	r0, 800dc94 <__swbuf_r+0x90>
 800dc70:	4638      	mov	r0, r7
 800dc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc74:	4b0a      	ldr	r3, [pc, #40]	; (800dca0 <__swbuf_r+0x9c>)
 800dc76:	429c      	cmp	r4, r3
 800dc78:	d101      	bne.n	800dc7e <__swbuf_r+0x7a>
 800dc7a:	68ac      	ldr	r4, [r5, #8]
 800dc7c:	e7cf      	b.n	800dc1e <__swbuf_r+0x1a>
 800dc7e:	4b09      	ldr	r3, [pc, #36]	; (800dca4 <__swbuf_r+0xa0>)
 800dc80:	429c      	cmp	r4, r3
 800dc82:	bf08      	it	eq
 800dc84:	68ec      	ldreq	r4, [r5, #12]
 800dc86:	e7ca      	b.n	800dc1e <__swbuf_r+0x1a>
 800dc88:	4621      	mov	r1, r4
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f000 f81e 	bl	800dccc <__swsetup_r>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d0cb      	beq.n	800dc2c <__swbuf_r+0x28>
 800dc94:	f04f 37ff 	mov.w	r7, #4294967295
 800dc98:	e7ea      	b.n	800dc70 <__swbuf_r+0x6c>
 800dc9a:	bf00      	nop
 800dc9c:	0800f808 	.word	0x0800f808
 800dca0:	0800f828 	.word	0x0800f828
 800dca4:	0800f7e8 	.word	0x0800f7e8

0800dca8 <_write_r>:
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4d07      	ldr	r5, [pc, #28]	; (800dcc8 <_write_r+0x20>)
 800dcac:	4604      	mov	r4, r0
 800dcae:	4608      	mov	r0, r1
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	602a      	str	r2, [r5, #0]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	f7f4 ffc9 	bl	8002c4e <_write>
 800dcbc:	1c43      	adds	r3, r0, #1
 800dcbe:	d102      	bne.n	800dcc6 <_write_r+0x1e>
 800dcc0:	682b      	ldr	r3, [r5, #0]
 800dcc2:	b103      	cbz	r3, 800dcc6 <_write_r+0x1e>
 800dcc4:	6023      	str	r3, [r4, #0]
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	200063d0 	.word	0x200063d0

0800dccc <__swsetup_r>:
 800dccc:	4b32      	ldr	r3, [pc, #200]	; (800dd98 <__swsetup_r+0xcc>)
 800dcce:	b570      	push	{r4, r5, r6, lr}
 800dcd0:	681d      	ldr	r5, [r3, #0]
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	b125      	cbz	r5, 800dce2 <__swsetup_r+0x16>
 800dcd8:	69ab      	ldr	r3, [r5, #24]
 800dcda:	b913      	cbnz	r3, 800dce2 <__swsetup_r+0x16>
 800dcdc:	4628      	mov	r0, r5
 800dcde:	f7fe fd77 	bl	800c7d0 <__sinit>
 800dce2:	4b2e      	ldr	r3, [pc, #184]	; (800dd9c <__swsetup_r+0xd0>)
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d10f      	bne.n	800dd08 <__swsetup_r+0x3c>
 800dce8:	686c      	ldr	r4, [r5, #4]
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcf0:	0719      	lsls	r1, r3, #28
 800dcf2:	d42c      	bmi.n	800dd4e <__swsetup_r+0x82>
 800dcf4:	06dd      	lsls	r5, r3, #27
 800dcf6:	d411      	bmi.n	800dd1c <__swsetup_r+0x50>
 800dcf8:	2309      	movs	r3, #9
 800dcfa:	6033      	str	r3, [r6, #0]
 800dcfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd00:	81a3      	strh	r3, [r4, #12]
 800dd02:	f04f 30ff 	mov.w	r0, #4294967295
 800dd06:	e03e      	b.n	800dd86 <__swsetup_r+0xba>
 800dd08:	4b25      	ldr	r3, [pc, #148]	; (800dda0 <__swsetup_r+0xd4>)
 800dd0a:	429c      	cmp	r4, r3
 800dd0c:	d101      	bne.n	800dd12 <__swsetup_r+0x46>
 800dd0e:	68ac      	ldr	r4, [r5, #8]
 800dd10:	e7eb      	b.n	800dcea <__swsetup_r+0x1e>
 800dd12:	4b24      	ldr	r3, [pc, #144]	; (800dda4 <__swsetup_r+0xd8>)
 800dd14:	429c      	cmp	r4, r3
 800dd16:	bf08      	it	eq
 800dd18:	68ec      	ldreq	r4, [r5, #12]
 800dd1a:	e7e6      	b.n	800dcea <__swsetup_r+0x1e>
 800dd1c:	0758      	lsls	r0, r3, #29
 800dd1e:	d512      	bpl.n	800dd46 <__swsetup_r+0x7a>
 800dd20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd22:	b141      	cbz	r1, 800dd36 <__swsetup_r+0x6a>
 800dd24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	d002      	beq.n	800dd32 <__swsetup_r+0x66>
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	f7ff f83f 	bl	800cdb0 <_free_r>
 800dd32:	2300      	movs	r3, #0
 800dd34:	6363      	str	r3, [r4, #52]	; 0x34
 800dd36:	89a3      	ldrh	r3, [r4, #12]
 800dd38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd3c:	81a3      	strh	r3, [r4, #12]
 800dd3e:	2300      	movs	r3, #0
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	6923      	ldr	r3, [r4, #16]
 800dd44:	6023      	str	r3, [r4, #0]
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	f043 0308 	orr.w	r3, r3, #8
 800dd4c:	81a3      	strh	r3, [r4, #12]
 800dd4e:	6923      	ldr	r3, [r4, #16]
 800dd50:	b94b      	cbnz	r3, 800dd66 <__swsetup_r+0x9a>
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd5c:	d003      	beq.n	800dd66 <__swsetup_r+0x9a>
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4630      	mov	r0, r6
 800dd62:	f7fe ffcf 	bl	800cd04 <__smakebuf_r>
 800dd66:	89a0      	ldrh	r0, [r4, #12]
 800dd68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd6c:	f010 0301 	ands.w	r3, r0, #1
 800dd70:	d00a      	beq.n	800dd88 <__swsetup_r+0xbc>
 800dd72:	2300      	movs	r3, #0
 800dd74:	60a3      	str	r3, [r4, #8]
 800dd76:	6963      	ldr	r3, [r4, #20]
 800dd78:	425b      	negs	r3, r3
 800dd7a:	61a3      	str	r3, [r4, #24]
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	b943      	cbnz	r3, 800dd92 <__swsetup_r+0xc6>
 800dd80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd84:	d1ba      	bne.n	800dcfc <__swsetup_r+0x30>
 800dd86:	bd70      	pop	{r4, r5, r6, pc}
 800dd88:	0781      	lsls	r1, r0, #30
 800dd8a:	bf58      	it	pl
 800dd8c:	6963      	ldrpl	r3, [r4, #20]
 800dd8e:	60a3      	str	r3, [r4, #8]
 800dd90:	e7f4      	b.n	800dd7c <__swsetup_r+0xb0>
 800dd92:	2000      	movs	r0, #0
 800dd94:	e7f7      	b.n	800dd86 <__swsetup_r+0xba>
 800dd96:	bf00      	nop
 800dd98:	20000118 	.word	0x20000118
 800dd9c:	0800f808 	.word	0x0800f808
 800dda0:	0800f828 	.word	0x0800f828
 800dda4:	0800f7e8 	.word	0x0800f7e8

0800dda8 <_close_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4d06      	ldr	r5, [pc, #24]	; (800ddc4 <_close_r+0x1c>)
 800ddac:	2300      	movs	r3, #0
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4608      	mov	r0, r1
 800ddb2:	602b      	str	r3, [r5, #0]
 800ddb4:	f7f4 ff67 	bl	8002c86 <_close>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_close_r+0x1a>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_close_r+0x1a>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	200063d0 	.word	0x200063d0

0800ddc8 <__sflush_r>:
 800ddc8:	898a      	ldrh	r2, [r1, #12]
 800ddca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddce:	4605      	mov	r5, r0
 800ddd0:	0710      	lsls	r0, r2, #28
 800ddd2:	460c      	mov	r4, r1
 800ddd4:	d458      	bmi.n	800de88 <__sflush_r+0xc0>
 800ddd6:	684b      	ldr	r3, [r1, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	dc05      	bgt.n	800dde8 <__sflush_r+0x20>
 800dddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dc02      	bgt.n	800dde8 <__sflush_r+0x20>
 800dde2:	2000      	movs	r0, #0
 800dde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddea:	2e00      	cmp	r6, #0
 800ddec:	d0f9      	beq.n	800dde2 <__sflush_r+0x1a>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddf4:	682f      	ldr	r7, [r5, #0]
 800ddf6:	602b      	str	r3, [r5, #0]
 800ddf8:	d032      	beq.n	800de60 <__sflush_r+0x98>
 800ddfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	075a      	lsls	r2, r3, #29
 800de00:	d505      	bpl.n	800de0e <__sflush_r+0x46>
 800de02:	6863      	ldr	r3, [r4, #4]
 800de04:	1ac0      	subs	r0, r0, r3
 800de06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de08:	b10b      	cbz	r3, 800de0e <__sflush_r+0x46>
 800de0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de0c:	1ac0      	subs	r0, r0, r3
 800de0e:	2300      	movs	r3, #0
 800de10:	4602      	mov	r2, r0
 800de12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de14:	6a21      	ldr	r1, [r4, #32]
 800de16:	4628      	mov	r0, r5
 800de18:	47b0      	blx	r6
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	d106      	bne.n	800de2e <__sflush_r+0x66>
 800de20:	6829      	ldr	r1, [r5, #0]
 800de22:	291d      	cmp	r1, #29
 800de24:	d82c      	bhi.n	800de80 <__sflush_r+0xb8>
 800de26:	4a2a      	ldr	r2, [pc, #168]	; (800ded0 <__sflush_r+0x108>)
 800de28:	40ca      	lsrs	r2, r1
 800de2a:	07d6      	lsls	r6, r2, #31
 800de2c:	d528      	bpl.n	800de80 <__sflush_r+0xb8>
 800de2e:	2200      	movs	r2, #0
 800de30:	6062      	str	r2, [r4, #4]
 800de32:	04d9      	lsls	r1, r3, #19
 800de34:	6922      	ldr	r2, [r4, #16]
 800de36:	6022      	str	r2, [r4, #0]
 800de38:	d504      	bpl.n	800de44 <__sflush_r+0x7c>
 800de3a:	1c42      	adds	r2, r0, #1
 800de3c:	d101      	bne.n	800de42 <__sflush_r+0x7a>
 800de3e:	682b      	ldr	r3, [r5, #0]
 800de40:	b903      	cbnz	r3, 800de44 <__sflush_r+0x7c>
 800de42:	6560      	str	r0, [r4, #84]	; 0x54
 800de44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de46:	602f      	str	r7, [r5, #0]
 800de48:	2900      	cmp	r1, #0
 800de4a:	d0ca      	beq.n	800dde2 <__sflush_r+0x1a>
 800de4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de50:	4299      	cmp	r1, r3
 800de52:	d002      	beq.n	800de5a <__sflush_r+0x92>
 800de54:	4628      	mov	r0, r5
 800de56:	f7fe ffab 	bl	800cdb0 <_free_r>
 800de5a:	2000      	movs	r0, #0
 800de5c:	6360      	str	r0, [r4, #52]	; 0x34
 800de5e:	e7c1      	b.n	800dde4 <__sflush_r+0x1c>
 800de60:	6a21      	ldr	r1, [r4, #32]
 800de62:	2301      	movs	r3, #1
 800de64:	4628      	mov	r0, r5
 800de66:	47b0      	blx	r6
 800de68:	1c41      	adds	r1, r0, #1
 800de6a:	d1c7      	bne.n	800ddfc <__sflush_r+0x34>
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d0c4      	beq.n	800ddfc <__sflush_r+0x34>
 800de72:	2b1d      	cmp	r3, #29
 800de74:	d001      	beq.n	800de7a <__sflush_r+0xb2>
 800de76:	2b16      	cmp	r3, #22
 800de78:	d101      	bne.n	800de7e <__sflush_r+0xb6>
 800de7a:	602f      	str	r7, [r5, #0]
 800de7c:	e7b1      	b.n	800dde2 <__sflush_r+0x1a>
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de84:	81a3      	strh	r3, [r4, #12]
 800de86:	e7ad      	b.n	800dde4 <__sflush_r+0x1c>
 800de88:	690f      	ldr	r7, [r1, #16]
 800de8a:	2f00      	cmp	r7, #0
 800de8c:	d0a9      	beq.n	800dde2 <__sflush_r+0x1a>
 800de8e:	0793      	lsls	r3, r2, #30
 800de90:	680e      	ldr	r6, [r1, #0]
 800de92:	bf08      	it	eq
 800de94:	694b      	ldreq	r3, [r1, #20]
 800de96:	600f      	str	r7, [r1, #0]
 800de98:	bf18      	it	ne
 800de9a:	2300      	movne	r3, #0
 800de9c:	eba6 0807 	sub.w	r8, r6, r7
 800dea0:	608b      	str	r3, [r1, #8]
 800dea2:	f1b8 0f00 	cmp.w	r8, #0
 800dea6:	dd9c      	ble.n	800dde2 <__sflush_r+0x1a>
 800dea8:	6a21      	ldr	r1, [r4, #32]
 800deaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800deac:	4643      	mov	r3, r8
 800deae:	463a      	mov	r2, r7
 800deb0:	4628      	mov	r0, r5
 800deb2:	47b0      	blx	r6
 800deb4:	2800      	cmp	r0, #0
 800deb6:	dc06      	bgt.n	800dec6 <__sflush_r+0xfe>
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800debe:	81a3      	strh	r3, [r4, #12]
 800dec0:	f04f 30ff 	mov.w	r0, #4294967295
 800dec4:	e78e      	b.n	800dde4 <__sflush_r+0x1c>
 800dec6:	4407      	add	r7, r0
 800dec8:	eba8 0800 	sub.w	r8, r8, r0
 800decc:	e7e9      	b.n	800dea2 <__sflush_r+0xda>
 800dece:	bf00      	nop
 800ded0:	20400001 	.word	0x20400001

0800ded4 <_fflush_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	690b      	ldr	r3, [r1, #16]
 800ded8:	4605      	mov	r5, r0
 800deda:	460c      	mov	r4, r1
 800dedc:	b913      	cbnz	r3, 800dee4 <_fflush_r+0x10>
 800dede:	2500      	movs	r5, #0
 800dee0:	4628      	mov	r0, r5
 800dee2:	bd38      	pop	{r3, r4, r5, pc}
 800dee4:	b118      	cbz	r0, 800deee <_fflush_r+0x1a>
 800dee6:	6983      	ldr	r3, [r0, #24]
 800dee8:	b90b      	cbnz	r3, 800deee <_fflush_r+0x1a>
 800deea:	f7fe fc71 	bl	800c7d0 <__sinit>
 800deee:	4b14      	ldr	r3, [pc, #80]	; (800df40 <_fflush_r+0x6c>)
 800def0:	429c      	cmp	r4, r3
 800def2:	d11b      	bne.n	800df2c <_fflush_r+0x58>
 800def4:	686c      	ldr	r4, [r5, #4]
 800def6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d0ef      	beq.n	800dede <_fflush_r+0xa>
 800defe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df00:	07d0      	lsls	r0, r2, #31
 800df02:	d404      	bmi.n	800df0e <_fflush_r+0x3a>
 800df04:	0599      	lsls	r1, r3, #22
 800df06:	d402      	bmi.n	800df0e <_fflush_r+0x3a>
 800df08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df0a:	f7fe fed3 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800df0e:	4628      	mov	r0, r5
 800df10:	4621      	mov	r1, r4
 800df12:	f7ff ff59 	bl	800ddc8 <__sflush_r>
 800df16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df18:	07da      	lsls	r2, r3, #31
 800df1a:	4605      	mov	r5, r0
 800df1c:	d4e0      	bmi.n	800dee0 <_fflush_r+0xc>
 800df1e:	89a3      	ldrh	r3, [r4, #12]
 800df20:	059b      	lsls	r3, r3, #22
 800df22:	d4dd      	bmi.n	800dee0 <_fflush_r+0xc>
 800df24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df26:	f7fe fec6 	bl	800ccb6 <__retarget_lock_release_recursive>
 800df2a:	e7d9      	b.n	800dee0 <_fflush_r+0xc>
 800df2c:	4b05      	ldr	r3, [pc, #20]	; (800df44 <_fflush_r+0x70>)
 800df2e:	429c      	cmp	r4, r3
 800df30:	d101      	bne.n	800df36 <_fflush_r+0x62>
 800df32:	68ac      	ldr	r4, [r5, #8]
 800df34:	e7df      	b.n	800def6 <_fflush_r+0x22>
 800df36:	4b04      	ldr	r3, [pc, #16]	; (800df48 <_fflush_r+0x74>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	bf08      	it	eq
 800df3c:	68ec      	ldreq	r4, [r5, #12]
 800df3e:	e7da      	b.n	800def6 <_fflush_r+0x22>
 800df40:	0800f808 	.word	0x0800f808
 800df44:	0800f828 	.word	0x0800f828
 800df48:	0800f7e8 	.word	0x0800f7e8

0800df4c <fflush>:
 800df4c:	4601      	mov	r1, r0
 800df4e:	b920      	cbnz	r0, 800df5a <fflush+0xe>
 800df50:	4b04      	ldr	r3, [pc, #16]	; (800df64 <fflush+0x18>)
 800df52:	4905      	ldr	r1, [pc, #20]	; (800df68 <fflush+0x1c>)
 800df54:	6818      	ldr	r0, [r3, #0]
 800df56:	f7fe bdfa 	b.w	800cb4e <_fwalk_reent>
 800df5a:	4b04      	ldr	r3, [pc, #16]	; (800df6c <fflush+0x20>)
 800df5c:	6818      	ldr	r0, [r3, #0]
 800df5e:	f7ff bfb9 	b.w	800ded4 <_fflush_r>
 800df62:	bf00      	nop
 800df64:	0800f848 	.word	0x0800f848
 800df68:	0800ded5 	.word	0x0800ded5
 800df6c:	20000118 	.word	0x20000118

0800df70 <__sflags>:
 800df70:	780b      	ldrb	r3, [r1, #0]
 800df72:	2b72      	cmp	r3, #114	; 0x72
 800df74:	b530      	push	{r4, r5, lr}
 800df76:	d022      	beq.n	800dfbe <__sflags+0x4e>
 800df78:	2b77      	cmp	r3, #119	; 0x77
 800df7a:	d024      	beq.n	800dfc6 <__sflags+0x56>
 800df7c:	2b61      	cmp	r3, #97	; 0x61
 800df7e:	d027      	beq.n	800dfd0 <__sflags+0x60>
 800df80:	2316      	movs	r3, #22
 800df82:	6003      	str	r3, [r0, #0]
 800df84:	2000      	movs	r0, #0
 800df86:	bd30      	pop	{r4, r5, pc}
 800df88:	2d62      	cmp	r5, #98	; 0x62
 800df8a:	d012      	beq.n	800dfb2 <__sflags+0x42>
 800df8c:	2d78      	cmp	r5, #120	; 0x78
 800df8e:	d013      	beq.n	800dfb8 <__sflags+0x48>
 800df90:	2d2b      	cmp	r5, #43	; 0x2b
 800df92:	d107      	bne.n	800dfa4 <__sflags+0x34>
 800df94:	f020 001c 	bic.w	r0, r0, #28
 800df98:	f023 0303 	bic.w	r3, r3, #3
 800df9c:	f040 0010 	orr.w	r0, r0, #16
 800dfa0:	f043 0302 	orr.w	r3, r3, #2
 800dfa4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800dfa8:	2d00      	cmp	r5, #0
 800dfaa:	d1ed      	bne.n	800df88 <__sflags+0x18>
 800dfac:	4323      	orrs	r3, r4
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	e7e9      	b.n	800df86 <__sflags+0x16>
 800dfb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfb6:	e7f5      	b.n	800dfa4 <__sflags+0x34>
 800dfb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dfbc:	e7f2      	b.n	800dfa4 <__sflags+0x34>
 800dfbe:	2400      	movs	r4, #0
 800dfc0:	4623      	mov	r3, r4
 800dfc2:	2004      	movs	r0, #4
 800dfc4:	e7ee      	b.n	800dfa4 <__sflags+0x34>
 800dfc6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800dfca:	2301      	movs	r3, #1
 800dfcc:	2008      	movs	r0, #8
 800dfce:	e7e9      	b.n	800dfa4 <__sflags+0x34>
 800dfd0:	f44f 7402 	mov.w	r4, #520	; 0x208
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	f44f 7084 	mov.w	r0, #264	; 0x108
 800dfda:	e7e3      	b.n	800dfa4 <__sflags+0x34>

0800dfdc <_fstat_r>:
 800dfdc:	b538      	push	{r3, r4, r5, lr}
 800dfde:	4d07      	ldr	r5, [pc, #28]	; (800dffc <_fstat_r+0x20>)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	602b      	str	r3, [r5, #0]
 800dfea:	f7f4 fe58 	bl	8002c9e <_fstat>
 800dfee:	1c43      	adds	r3, r0, #1
 800dff0:	d102      	bne.n	800dff8 <_fstat_r+0x1c>
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	b103      	cbz	r3, 800dff8 <_fstat_r+0x1c>
 800dff6:	6023      	str	r3, [r4, #0]
 800dff8:	bd38      	pop	{r3, r4, r5, pc}
 800dffa:	bf00      	nop
 800dffc:	200063d0 	.word	0x200063d0

0800e000 <_isatty_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d06      	ldr	r5, [pc, #24]	; (800e01c <_isatty_r+0x1c>)
 800e004:	2300      	movs	r3, #0
 800e006:	4604      	mov	r4, r0
 800e008:	4608      	mov	r0, r1
 800e00a:	602b      	str	r3, [r5, #0]
 800e00c:	f7f4 fe57 	bl	8002cbe <_isatty>
 800e010:	1c43      	adds	r3, r0, #1
 800e012:	d102      	bne.n	800e01a <_isatty_r+0x1a>
 800e014:	682b      	ldr	r3, [r5, #0]
 800e016:	b103      	cbz	r3, 800e01a <_isatty_r+0x1a>
 800e018:	6023      	str	r3, [r4, #0]
 800e01a:	bd38      	pop	{r3, r4, r5, pc}
 800e01c:	200063d0 	.word	0x200063d0

0800e020 <_lseek_r>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	4d07      	ldr	r5, [pc, #28]	; (800e040 <_lseek_r+0x20>)
 800e024:	4604      	mov	r4, r0
 800e026:	4608      	mov	r0, r1
 800e028:	4611      	mov	r1, r2
 800e02a:	2200      	movs	r2, #0
 800e02c:	602a      	str	r2, [r5, #0]
 800e02e:	461a      	mov	r2, r3
 800e030:	f7f4 fe50 	bl	8002cd4 <_lseek>
 800e034:	1c43      	adds	r3, r0, #1
 800e036:	d102      	bne.n	800e03e <_lseek_r+0x1e>
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	b103      	cbz	r3, 800e03e <_lseek_r+0x1e>
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	bd38      	pop	{r3, r4, r5, pc}
 800e040:	200063d0 	.word	0x200063d0

0800e044 <malloc>:
 800e044:	4b02      	ldr	r3, [pc, #8]	; (800e050 <malloc+0xc>)
 800e046:	4601      	mov	r1, r0
 800e048:	6818      	ldr	r0, [r3, #0]
 800e04a:	f7fe bf1d 	b.w	800ce88 <_malloc_r>
 800e04e:	bf00      	nop
 800e050:	20000118 	.word	0x20000118

0800e054 <memmove>:
 800e054:	4288      	cmp	r0, r1
 800e056:	b510      	push	{r4, lr}
 800e058:	eb01 0402 	add.w	r4, r1, r2
 800e05c:	d902      	bls.n	800e064 <memmove+0x10>
 800e05e:	4284      	cmp	r4, r0
 800e060:	4623      	mov	r3, r4
 800e062:	d807      	bhi.n	800e074 <memmove+0x20>
 800e064:	1e43      	subs	r3, r0, #1
 800e066:	42a1      	cmp	r1, r4
 800e068:	d008      	beq.n	800e07c <memmove+0x28>
 800e06a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e06e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e072:	e7f8      	b.n	800e066 <memmove+0x12>
 800e074:	4402      	add	r2, r0
 800e076:	4601      	mov	r1, r0
 800e078:	428a      	cmp	r2, r1
 800e07a:	d100      	bne.n	800e07e <memmove+0x2a>
 800e07c:	bd10      	pop	{r4, pc}
 800e07e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e086:	e7f7      	b.n	800e078 <memmove+0x24>

0800e088 <__malloc_lock>:
 800e088:	4801      	ldr	r0, [pc, #4]	; (800e090 <__malloc_lock+0x8>)
 800e08a:	f7fe be13 	b.w	800ccb4 <__retarget_lock_acquire_recursive>
 800e08e:	bf00      	nop
 800e090:	200063c4 	.word	0x200063c4

0800e094 <__malloc_unlock>:
 800e094:	4801      	ldr	r0, [pc, #4]	; (800e09c <__malloc_unlock+0x8>)
 800e096:	f7fe be0e 	b.w	800ccb6 <__retarget_lock_release_recursive>
 800e09a:	bf00      	nop
 800e09c:	200063c4 	.word	0x200063c4

0800e0a0 <_realloc_r>:
 800e0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	4614      	mov	r4, r2
 800e0a8:	460e      	mov	r6, r1
 800e0aa:	b921      	cbnz	r1, 800e0b6 <_realloc_r+0x16>
 800e0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	f7fe bee9 	b.w	800ce88 <_malloc_r>
 800e0b6:	b92a      	cbnz	r2, 800e0c4 <_realloc_r+0x24>
 800e0b8:	f7fe fe7a 	bl	800cdb0 <_free_r>
 800e0bc:	4625      	mov	r5, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c4:	f000 fe16 	bl	800ecf4 <_malloc_usable_size_r>
 800e0c8:	4284      	cmp	r4, r0
 800e0ca:	4607      	mov	r7, r0
 800e0cc:	d802      	bhi.n	800e0d4 <_realloc_r+0x34>
 800e0ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0d2:	d812      	bhi.n	800e0fa <_realloc_r+0x5a>
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	4640      	mov	r0, r8
 800e0d8:	f7fe fed6 	bl	800ce88 <_malloc_r>
 800e0dc:	4605      	mov	r5, r0
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d0ed      	beq.n	800e0be <_realloc_r+0x1e>
 800e0e2:	42bc      	cmp	r4, r7
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	bf28      	it	cs
 800e0ea:	463a      	movcs	r2, r7
 800e0ec:	f7fe fe4a 	bl	800cd84 <memcpy>
 800e0f0:	4631      	mov	r1, r6
 800e0f2:	4640      	mov	r0, r8
 800e0f4:	f7fe fe5c 	bl	800cdb0 <_free_r>
 800e0f8:	e7e1      	b.n	800e0be <_realloc_r+0x1e>
 800e0fa:	4635      	mov	r5, r6
 800e0fc:	e7df      	b.n	800e0be <_realloc_r+0x1e>

0800e0fe <__ssputs_r>:
 800e0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e102:	688e      	ldr	r6, [r1, #8]
 800e104:	429e      	cmp	r6, r3
 800e106:	4682      	mov	sl, r0
 800e108:	460c      	mov	r4, r1
 800e10a:	4690      	mov	r8, r2
 800e10c:	461f      	mov	r7, r3
 800e10e:	d838      	bhi.n	800e182 <__ssputs_r+0x84>
 800e110:	898a      	ldrh	r2, [r1, #12]
 800e112:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e116:	d032      	beq.n	800e17e <__ssputs_r+0x80>
 800e118:	6825      	ldr	r5, [r4, #0]
 800e11a:	6909      	ldr	r1, [r1, #16]
 800e11c:	eba5 0901 	sub.w	r9, r5, r1
 800e120:	6965      	ldr	r5, [r4, #20]
 800e122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e12a:	3301      	adds	r3, #1
 800e12c:	444b      	add	r3, r9
 800e12e:	106d      	asrs	r5, r5, #1
 800e130:	429d      	cmp	r5, r3
 800e132:	bf38      	it	cc
 800e134:	461d      	movcc	r5, r3
 800e136:	0553      	lsls	r3, r2, #21
 800e138:	d531      	bpl.n	800e19e <__ssputs_r+0xa0>
 800e13a:	4629      	mov	r1, r5
 800e13c:	f7fe fea4 	bl	800ce88 <_malloc_r>
 800e140:	4606      	mov	r6, r0
 800e142:	b950      	cbnz	r0, 800e15a <__ssputs_r+0x5c>
 800e144:	230c      	movs	r3, #12
 800e146:	f8ca 3000 	str.w	r3, [sl]
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	f04f 30ff 	mov.w	r0, #4294967295
 800e156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15a:	6921      	ldr	r1, [r4, #16]
 800e15c:	464a      	mov	r2, r9
 800e15e:	f7fe fe11 	bl	800cd84 <memcpy>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e16c:	81a3      	strh	r3, [r4, #12]
 800e16e:	6126      	str	r6, [r4, #16]
 800e170:	6165      	str	r5, [r4, #20]
 800e172:	444e      	add	r6, r9
 800e174:	eba5 0509 	sub.w	r5, r5, r9
 800e178:	6026      	str	r6, [r4, #0]
 800e17a:	60a5      	str	r5, [r4, #8]
 800e17c:	463e      	mov	r6, r7
 800e17e:	42be      	cmp	r6, r7
 800e180:	d900      	bls.n	800e184 <__ssputs_r+0x86>
 800e182:	463e      	mov	r6, r7
 800e184:	6820      	ldr	r0, [r4, #0]
 800e186:	4632      	mov	r2, r6
 800e188:	4641      	mov	r1, r8
 800e18a:	f7ff ff63 	bl	800e054 <memmove>
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	1b9b      	subs	r3, r3, r6
 800e192:	60a3      	str	r3, [r4, #8]
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	4433      	add	r3, r6
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	2000      	movs	r0, #0
 800e19c:	e7db      	b.n	800e156 <__ssputs_r+0x58>
 800e19e:	462a      	mov	r2, r5
 800e1a0:	f7ff ff7e 	bl	800e0a0 <_realloc_r>
 800e1a4:	4606      	mov	r6, r0
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d1e1      	bne.n	800e16e <__ssputs_r+0x70>
 800e1aa:	6921      	ldr	r1, [r4, #16]
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	f7fe fdff 	bl	800cdb0 <_free_r>
 800e1b2:	e7c7      	b.n	800e144 <__ssputs_r+0x46>

0800e1b4 <_svfiprintf_r>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	4698      	mov	r8, r3
 800e1ba:	898b      	ldrh	r3, [r1, #12]
 800e1bc:	061b      	lsls	r3, r3, #24
 800e1be:	b09d      	sub	sp, #116	; 0x74
 800e1c0:	4607      	mov	r7, r0
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	d50e      	bpl.n	800e1e6 <_svfiprintf_r+0x32>
 800e1c8:	690b      	ldr	r3, [r1, #16]
 800e1ca:	b963      	cbnz	r3, 800e1e6 <_svfiprintf_r+0x32>
 800e1cc:	2140      	movs	r1, #64	; 0x40
 800e1ce:	f7fe fe5b 	bl	800ce88 <_malloc_r>
 800e1d2:	6028      	str	r0, [r5, #0]
 800e1d4:	6128      	str	r0, [r5, #16]
 800e1d6:	b920      	cbnz	r0, 800e1e2 <_svfiprintf_r+0x2e>
 800e1d8:	230c      	movs	r3, #12
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e0:	e0d1      	b.n	800e386 <_svfiprintf_r+0x1d2>
 800e1e2:	2340      	movs	r3, #64	; 0x40
 800e1e4:	616b      	str	r3, [r5, #20]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ea:	2320      	movs	r3, #32
 800e1ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1f4:	2330      	movs	r3, #48	; 0x30
 800e1f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3a0 <_svfiprintf_r+0x1ec>
 800e1fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1fe:	f04f 0901 	mov.w	r9, #1
 800e202:	4623      	mov	r3, r4
 800e204:	469a      	mov	sl, r3
 800e206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e20a:	b10a      	cbz	r2, 800e210 <_svfiprintf_r+0x5c>
 800e20c:	2a25      	cmp	r2, #37	; 0x25
 800e20e:	d1f9      	bne.n	800e204 <_svfiprintf_r+0x50>
 800e210:	ebba 0b04 	subs.w	fp, sl, r4
 800e214:	d00b      	beq.n	800e22e <_svfiprintf_r+0x7a>
 800e216:	465b      	mov	r3, fp
 800e218:	4622      	mov	r2, r4
 800e21a:	4629      	mov	r1, r5
 800e21c:	4638      	mov	r0, r7
 800e21e:	f7ff ff6e 	bl	800e0fe <__ssputs_r>
 800e222:	3001      	adds	r0, #1
 800e224:	f000 80aa 	beq.w	800e37c <_svfiprintf_r+0x1c8>
 800e228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e22a:	445a      	add	r2, fp
 800e22c:	9209      	str	r2, [sp, #36]	; 0x24
 800e22e:	f89a 3000 	ldrb.w	r3, [sl]
 800e232:	2b00      	cmp	r3, #0
 800e234:	f000 80a2 	beq.w	800e37c <_svfiprintf_r+0x1c8>
 800e238:	2300      	movs	r3, #0
 800e23a:	f04f 32ff 	mov.w	r2, #4294967295
 800e23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e242:	f10a 0a01 	add.w	sl, sl, #1
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	9307      	str	r3, [sp, #28]
 800e24a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e24e:	931a      	str	r3, [sp, #104]	; 0x68
 800e250:	4654      	mov	r4, sl
 800e252:	2205      	movs	r2, #5
 800e254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e258:	4851      	ldr	r0, [pc, #324]	; (800e3a0 <_svfiprintf_r+0x1ec>)
 800e25a:	f7f1 ffc1 	bl	80001e0 <memchr>
 800e25e:	9a04      	ldr	r2, [sp, #16]
 800e260:	b9d8      	cbnz	r0, 800e29a <_svfiprintf_r+0xe6>
 800e262:	06d0      	lsls	r0, r2, #27
 800e264:	bf44      	itt	mi
 800e266:	2320      	movmi	r3, #32
 800e268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e26c:	0711      	lsls	r1, r2, #28
 800e26e:	bf44      	itt	mi
 800e270:	232b      	movmi	r3, #43	; 0x2b
 800e272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e276:	f89a 3000 	ldrb.w	r3, [sl]
 800e27a:	2b2a      	cmp	r3, #42	; 0x2a
 800e27c:	d015      	beq.n	800e2aa <_svfiprintf_r+0xf6>
 800e27e:	9a07      	ldr	r2, [sp, #28]
 800e280:	4654      	mov	r4, sl
 800e282:	2000      	movs	r0, #0
 800e284:	f04f 0c0a 	mov.w	ip, #10
 800e288:	4621      	mov	r1, r4
 800e28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e28e:	3b30      	subs	r3, #48	; 0x30
 800e290:	2b09      	cmp	r3, #9
 800e292:	d94e      	bls.n	800e332 <_svfiprintf_r+0x17e>
 800e294:	b1b0      	cbz	r0, 800e2c4 <_svfiprintf_r+0x110>
 800e296:	9207      	str	r2, [sp, #28]
 800e298:	e014      	b.n	800e2c4 <_svfiprintf_r+0x110>
 800e29a:	eba0 0308 	sub.w	r3, r0, r8
 800e29e:	fa09 f303 	lsl.w	r3, r9, r3
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	46a2      	mov	sl, r4
 800e2a8:	e7d2      	b.n	800e250 <_svfiprintf_r+0x9c>
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	1d19      	adds	r1, r3, #4
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	9103      	str	r1, [sp, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	bfbb      	ittet	lt
 800e2b6:	425b      	neglt	r3, r3
 800e2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800e2bc:	9307      	strge	r3, [sp, #28]
 800e2be:	9307      	strlt	r3, [sp, #28]
 800e2c0:	bfb8      	it	lt
 800e2c2:	9204      	strlt	r2, [sp, #16]
 800e2c4:	7823      	ldrb	r3, [r4, #0]
 800e2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e2c8:	d10c      	bne.n	800e2e4 <_svfiprintf_r+0x130>
 800e2ca:	7863      	ldrb	r3, [r4, #1]
 800e2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ce:	d135      	bne.n	800e33c <_svfiprintf_r+0x188>
 800e2d0:	9b03      	ldr	r3, [sp, #12]
 800e2d2:	1d1a      	adds	r2, r3, #4
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	9203      	str	r2, [sp, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	bfb8      	it	lt
 800e2dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2e0:	3402      	adds	r4, #2
 800e2e2:	9305      	str	r3, [sp, #20]
 800e2e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3b0 <_svfiprintf_r+0x1fc>
 800e2e8:	7821      	ldrb	r1, [r4, #0]
 800e2ea:	2203      	movs	r2, #3
 800e2ec:	4650      	mov	r0, sl
 800e2ee:	f7f1 ff77 	bl	80001e0 <memchr>
 800e2f2:	b140      	cbz	r0, 800e306 <_svfiprintf_r+0x152>
 800e2f4:	2340      	movs	r3, #64	; 0x40
 800e2f6:	eba0 000a 	sub.w	r0, r0, sl
 800e2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e2fe:	9b04      	ldr	r3, [sp, #16]
 800e300:	4303      	orrs	r3, r0
 800e302:	3401      	adds	r4, #1
 800e304:	9304      	str	r3, [sp, #16]
 800e306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e30a:	4826      	ldr	r0, [pc, #152]	; (800e3a4 <_svfiprintf_r+0x1f0>)
 800e30c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e310:	2206      	movs	r2, #6
 800e312:	f7f1 ff65 	bl	80001e0 <memchr>
 800e316:	2800      	cmp	r0, #0
 800e318:	d038      	beq.n	800e38c <_svfiprintf_r+0x1d8>
 800e31a:	4b23      	ldr	r3, [pc, #140]	; (800e3a8 <_svfiprintf_r+0x1f4>)
 800e31c:	bb1b      	cbnz	r3, 800e366 <_svfiprintf_r+0x1b2>
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	3307      	adds	r3, #7
 800e322:	f023 0307 	bic.w	r3, r3, #7
 800e326:	3308      	adds	r3, #8
 800e328:	9303      	str	r3, [sp, #12]
 800e32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32c:	4433      	add	r3, r6
 800e32e:	9309      	str	r3, [sp, #36]	; 0x24
 800e330:	e767      	b.n	800e202 <_svfiprintf_r+0x4e>
 800e332:	fb0c 3202 	mla	r2, ip, r2, r3
 800e336:	460c      	mov	r4, r1
 800e338:	2001      	movs	r0, #1
 800e33a:	e7a5      	b.n	800e288 <_svfiprintf_r+0xd4>
 800e33c:	2300      	movs	r3, #0
 800e33e:	3401      	adds	r4, #1
 800e340:	9305      	str	r3, [sp, #20]
 800e342:	4619      	mov	r1, r3
 800e344:	f04f 0c0a 	mov.w	ip, #10
 800e348:	4620      	mov	r0, r4
 800e34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e34e:	3a30      	subs	r2, #48	; 0x30
 800e350:	2a09      	cmp	r2, #9
 800e352:	d903      	bls.n	800e35c <_svfiprintf_r+0x1a8>
 800e354:	2b00      	cmp	r3, #0
 800e356:	d0c5      	beq.n	800e2e4 <_svfiprintf_r+0x130>
 800e358:	9105      	str	r1, [sp, #20]
 800e35a:	e7c3      	b.n	800e2e4 <_svfiprintf_r+0x130>
 800e35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e360:	4604      	mov	r4, r0
 800e362:	2301      	movs	r3, #1
 800e364:	e7f0      	b.n	800e348 <_svfiprintf_r+0x194>
 800e366:	ab03      	add	r3, sp, #12
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	462a      	mov	r2, r5
 800e36c:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <_svfiprintf_r+0x1f8>)
 800e36e:	a904      	add	r1, sp, #16
 800e370:	4638      	mov	r0, r7
 800e372:	f3af 8000 	nop.w
 800e376:	1c42      	adds	r2, r0, #1
 800e378:	4606      	mov	r6, r0
 800e37a:	d1d6      	bne.n	800e32a <_svfiprintf_r+0x176>
 800e37c:	89ab      	ldrh	r3, [r5, #12]
 800e37e:	065b      	lsls	r3, r3, #25
 800e380:	f53f af2c 	bmi.w	800e1dc <_svfiprintf_r+0x28>
 800e384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e386:	b01d      	add	sp, #116	; 0x74
 800e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e38c:	ab03      	add	r3, sp, #12
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	462a      	mov	r2, r5
 800e392:	4b06      	ldr	r3, [pc, #24]	; (800e3ac <_svfiprintf_r+0x1f8>)
 800e394:	a904      	add	r1, sp, #16
 800e396:	4638      	mov	r0, r7
 800e398:	f7fe ffb2 	bl	800d300 <_printf_i>
 800e39c:	e7eb      	b.n	800e376 <_svfiprintf_r+0x1c2>
 800e39e:	bf00      	nop
 800e3a0:	0800f84c 	.word	0x0800f84c
 800e3a4:	0800f856 	.word	0x0800f856
 800e3a8:	00000000 	.word	0x00000000
 800e3ac:	0800e0ff 	.word	0x0800e0ff
 800e3b0:	0800f852 	.word	0x0800f852

0800e3b4 <_sungetc_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	1c4b      	adds	r3, r1, #1
 800e3b8:	4614      	mov	r4, r2
 800e3ba:	d103      	bne.n	800e3c4 <_sungetc_r+0x10>
 800e3bc:	f04f 35ff 	mov.w	r5, #4294967295
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}
 800e3c4:	8993      	ldrh	r3, [r2, #12]
 800e3c6:	f023 0320 	bic.w	r3, r3, #32
 800e3ca:	8193      	strh	r3, [r2, #12]
 800e3cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3ce:	6852      	ldr	r2, [r2, #4]
 800e3d0:	b2cd      	uxtb	r5, r1
 800e3d2:	b18b      	cbz	r3, 800e3f8 <_sungetc_r+0x44>
 800e3d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	dd08      	ble.n	800e3ec <_sungetc_r+0x38>
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	1e5a      	subs	r2, r3, #1
 800e3de:	6022      	str	r2, [r4, #0]
 800e3e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e3e4:	6863      	ldr	r3, [r4, #4]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	6063      	str	r3, [r4, #4]
 800e3ea:	e7e9      	b.n	800e3c0 <_sungetc_r+0xc>
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	f000 fc47 	bl	800ec80 <__submore>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d0f1      	beq.n	800e3da <_sungetc_r+0x26>
 800e3f6:	e7e1      	b.n	800e3bc <_sungetc_r+0x8>
 800e3f8:	6921      	ldr	r1, [r4, #16]
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	b151      	cbz	r1, 800e414 <_sungetc_r+0x60>
 800e3fe:	4299      	cmp	r1, r3
 800e400:	d208      	bcs.n	800e414 <_sungetc_r+0x60>
 800e402:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e406:	42a9      	cmp	r1, r5
 800e408:	d104      	bne.n	800e414 <_sungetc_r+0x60>
 800e40a:	3b01      	subs	r3, #1
 800e40c:	3201      	adds	r2, #1
 800e40e:	6023      	str	r3, [r4, #0]
 800e410:	6062      	str	r2, [r4, #4]
 800e412:	e7d5      	b.n	800e3c0 <_sungetc_r+0xc>
 800e414:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e41c:	6363      	str	r3, [r4, #52]	; 0x34
 800e41e:	2303      	movs	r3, #3
 800e420:	63a3      	str	r3, [r4, #56]	; 0x38
 800e422:	4623      	mov	r3, r4
 800e424:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	2301      	movs	r3, #1
 800e42c:	e7dc      	b.n	800e3e8 <_sungetc_r+0x34>

0800e42e <__ssrefill_r>:
 800e42e:	b510      	push	{r4, lr}
 800e430:	460c      	mov	r4, r1
 800e432:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e434:	b169      	cbz	r1, 800e452 <__ssrefill_r+0x24>
 800e436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e43a:	4299      	cmp	r1, r3
 800e43c:	d001      	beq.n	800e442 <__ssrefill_r+0x14>
 800e43e:	f7fe fcb7 	bl	800cdb0 <_free_r>
 800e442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e444:	6063      	str	r3, [r4, #4]
 800e446:	2000      	movs	r0, #0
 800e448:	6360      	str	r0, [r4, #52]	; 0x34
 800e44a:	b113      	cbz	r3, 800e452 <__ssrefill_r+0x24>
 800e44c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e44e:	6023      	str	r3, [r4, #0]
 800e450:	bd10      	pop	{r4, pc}
 800e452:	6923      	ldr	r3, [r4, #16]
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	2300      	movs	r3, #0
 800e458:	6063      	str	r3, [r4, #4]
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f043 0320 	orr.w	r3, r3, #32
 800e460:	81a3      	strh	r3, [r4, #12]
 800e462:	f04f 30ff 	mov.w	r0, #4294967295
 800e466:	e7f3      	b.n	800e450 <__ssrefill_r+0x22>

0800e468 <__ssvfiscanf_r>:
 800e468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e46c:	460c      	mov	r4, r1
 800e46e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e472:	2100      	movs	r1, #0
 800e474:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e478:	49a6      	ldr	r1, [pc, #664]	; (800e714 <__ssvfiscanf_r+0x2ac>)
 800e47a:	91a0      	str	r1, [sp, #640]	; 0x280
 800e47c:	f10d 0804 	add.w	r8, sp, #4
 800e480:	49a5      	ldr	r1, [pc, #660]	; (800e718 <__ssvfiscanf_r+0x2b0>)
 800e482:	4fa6      	ldr	r7, [pc, #664]	; (800e71c <__ssvfiscanf_r+0x2b4>)
 800e484:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e720 <__ssvfiscanf_r+0x2b8>
 800e488:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e48c:	4606      	mov	r6, r0
 800e48e:	91a1      	str	r1, [sp, #644]	; 0x284
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	7813      	ldrb	r3, [r2, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	f000 815a 	beq.w	800e74e <__ssvfiscanf_r+0x2e6>
 800e49a:	5dd9      	ldrb	r1, [r3, r7]
 800e49c:	f011 0108 	ands.w	r1, r1, #8
 800e4a0:	f102 0501 	add.w	r5, r2, #1
 800e4a4:	d019      	beq.n	800e4da <__ssvfiscanf_r+0x72>
 800e4a6:	6863      	ldr	r3, [r4, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dd0f      	ble.n	800e4cc <__ssvfiscanf_r+0x64>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	781a      	ldrb	r2, [r3, #0]
 800e4b0:	5cba      	ldrb	r2, [r7, r2]
 800e4b2:	0712      	lsls	r2, r2, #28
 800e4b4:	d401      	bmi.n	800e4ba <__ssvfiscanf_r+0x52>
 800e4b6:	462a      	mov	r2, r5
 800e4b8:	e7eb      	b.n	800e492 <__ssvfiscanf_r+0x2a>
 800e4ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e4bc:	3201      	adds	r2, #1
 800e4be:	9245      	str	r2, [sp, #276]	; 0x114
 800e4c0:	6862      	ldr	r2, [r4, #4]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	3a01      	subs	r2, #1
 800e4c6:	6062      	str	r2, [r4, #4]
 800e4c8:	6023      	str	r3, [r4, #0]
 800e4ca:	e7ec      	b.n	800e4a6 <__ssvfiscanf_r+0x3e>
 800e4cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	4798      	blx	r3
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d0e9      	beq.n	800e4ac <__ssvfiscanf_r+0x44>
 800e4d8:	e7ed      	b.n	800e4b6 <__ssvfiscanf_r+0x4e>
 800e4da:	2b25      	cmp	r3, #37	; 0x25
 800e4dc:	d012      	beq.n	800e504 <__ssvfiscanf_r+0x9c>
 800e4de:	469a      	mov	sl, r3
 800e4e0:	6863      	ldr	r3, [r4, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f340 8091 	ble.w	800e60a <__ssvfiscanf_r+0x1a2>
 800e4e8:	6822      	ldr	r2, [r4, #0]
 800e4ea:	7813      	ldrb	r3, [r2, #0]
 800e4ec:	4553      	cmp	r3, sl
 800e4ee:	f040 812e 	bne.w	800e74e <__ssvfiscanf_r+0x2e6>
 800e4f2:	6863      	ldr	r3, [r4, #4]
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	6063      	str	r3, [r4, #4]
 800e4f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e4fa:	3201      	adds	r2, #1
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	6022      	str	r2, [r4, #0]
 800e500:	9345      	str	r3, [sp, #276]	; 0x114
 800e502:	e7d8      	b.n	800e4b6 <__ssvfiscanf_r+0x4e>
 800e504:	9141      	str	r1, [sp, #260]	; 0x104
 800e506:	9143      	str	r1, [sp, #268]	; 0x10c
 800e508:	7853      	ldrb	r3, [r2, #1]
 800e50a:	2b2a      	cmp	r3, #42	; 0x2a
 800e50c:	bf02      	ittt	eq
 800e50e:	2310      	moveq	r3, #16
 800e510:	1c95      	addeq	r5, r2, #2
 800e512:	9341      	streq	r3, [sp, #260]	; 0x104
 800e514:	220a      	movs	r2, #10
 800e516:	46aa      	mov	sl, r5
 800e518:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e51c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e520:	2b09      	cmp	r3, #9
 800e522:	d91d      	bls.n	800e560 <__ssvfiscanf_r+0xf8>
 800e524:	487e      	ldr	r0, [pc, #504]	; (800e720 <__ssvfiscanf_r+0x2b8>)
 800e526:	2203      	movs	r2, #3
 800e528:	f7f1 fe5a 	bl	80001e0 <memchr>
 800e52c:	b140      	cbz	r0, 800e540 <__ssvfiscanf_r+0xd8>
 800e52e:	2301      	movs	r3, #1
 800e530:	eba0 0009 	sub.w	r0, r0, r9
 800e534:	fa03 f000 	lsl.w	r0, r3, r0
 800e538:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e53a:	4318      	orrs	r0, r3
 800e53c:	9041      	str	r0, [sp, #260]	; 0x104
 800e53e:	4655      	mov	r5, sl
 800e540:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e544:	2b78      	cmp	r3, #120	; 0x78
 800e546:	d806      	bhi.n	800e556 <__ssvfiscanf_r+0xee>
 800e548:	2b57      	cmp	r3, #87	; 0x57
 800e54a:	d810      	bhi.n	800e56e <__ssvfiscanf_r+0x106>
 800e54c:	2b25      	cmp	r3, #37	; 0x25
 800e54e:	d0c6      	beq.n	800e4de <__ssvfiscanf_r+0x76>
 800e550:	d856      	bhi.n	800e600 <__ssvfiscanf_r+0x198>
 800e552:	2b00      	cmp	r3, #0
 800e554:	d064      	beq.n	800e620 <__ssvfiscanf_r+0x1b8>
 800e556:	2303      	movs	r3, #3
 800e558:	9347      	str	r3, [sp, #284]	; 0x11c
 800e55a:	230a      	movs	r3, #10
 800e55c:	9342      	str	r3, [sp, #264]	; 0x108
 800e55e:	e071      	b.n	800e644 <__ssvfiscanf_r+0x1dc>
 800e560:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e562:	fb02 1103 	mla	r1, r2, r3, r1
 800e566:	3930      	subs	r1, #48	; 0x30
 800e568:	9143      	str	r1, [sp, #268]	; 0x10c
 800e56a:	4655      	mov	r5, sl
 800e56c:	e7d3      	b.n	800e516 <__ssvfiscanf_r+0xae>
 800e56e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e572:	2a20      	cmp	r2, #32
 800e574:	d8ef      	bhi.n	800e556 <__ssvfiscanf_r+0xee>
 800e576:	a101      	add	r1, pc, #4	; (adr r1, 800e57c <__ssvfiscanf_r+0x114>)
 800e578:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e57c:	0800e62f 	.word	0x0800e62f
 800e580:	0800e557 	.word	0x0800e557
 800e584:	0800e557 	.word	0x0800e557
 800e588:	0800e68d 	.word	0x0800e68d
 800e58c:	0800e557 	.word	0x0800e557
 800e590:	0800e557 	.word	0x0800e557
 800e594:	0800e557 	.word	0x0800e557
 800e598:	0800e557 	.word	0x0800e557
 800e59c:	0800e557 	.word	0x0800e557
 800e5a0:	0800e557 	.word	0x0800e557
 800e5a4:	0800e557 	.word	0x0800e557
 800e5a8:	0800e6a3 	.word	0x0800e6a3
 800e5ac:	0800e679 	.word	0x0800e679
 800e5b0:	0800e607 	.word	0x0800e607
 800e5b4:	0800e607 	.word	0x0800e607
 800e5b8:	0800e607 	.word	0x0800e607
 800e5bc:	0800e557 	.word	0x0800e557
 800e5c0:	0800e67d 	.word	0x0800e67d
 800e5c4:	0800e557 	.word	0x0800e557
 800e5c8:	0800e557 	.word	0x0800e557
 800e5cc:	0800e557 	.word	0x0800e557
 800e5d0:	0800e557 	.word	0x0800e557
 800e5d4:	0800e6b3 	.word	0x0800e6b3
 800e5d8:	0800e685 	.word	0x0800e685
 800e5dc:	0800e627 	.word	0x0800e627
 800e5e0:	0800e557 	.word	0x0800e557
 800e5e4:	0800e557 	.word	0x0800e557
 800e5e8:	0800e6af 	.word	0x0800e6af
 800e5ec:	0800e557 	.word	0x0800e557
 800e5f0:	0800e679 	.word	0x0800e679
 800e5f4:	0800e557 	.word	0x0800e557
 800e5f8:	0800e557 	.word	0x0800e557
 800e5fc:	0800e62f 	.word	0x0800e62f
 800e600:	3b45      	subs	r3, #69	; 0x45
 800e602:	2b02      	cmp	r3, #2
 800e604:	d8a7      	bhi.n	800e556 <__ssvfiscanf_r+0xee>
 800e606:	2305      	movs	r3, #5
 800e608:	e01b      	b.n	800e642 <__ssvfiscanf_r+0x1da>
 800e60a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e60c:	4621      	mov	r1, r4
 800e60e:	4630      	mov	r0, r6
 800e610:	4798      	blx	r3
 800e612:	2800      	cmp	r0, #0
 800e614:	f43f af68 	beq.w	800e4e8 <__ssvfiscanf_r+0x80>
 800e618:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e61a:	2800      	cmp	r0, #0
 800e61c:	f040 808d 	bne.w	800e73a <__ssvfiscanf_r+0x2d2>
 800e620:	f04f 30ff 	mov.w	r0, #4294967295
 800e624:	e08f      	b.n	800e746 <__ssvfiscanf_r+0x2de>
 800e626:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e628:	f042 0220 	orr.w	r2, r2, #32
 800e62c:	9241      	str	r2, [sp, #260]	; 0x104
 800e62e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e634:	9241      	str	r2, [sp, #260]	; 0x104
 800e636:	2210      	movs	r2, #16
 800e638:	2b6f      	cmp	r3, #111	; 0x6f
 800e63a:	9242      	str	r2, [sp, #264]	; 0x108
 800e63c:	bf34      	ite	cc
 800e63e:	2303      	movcc	r3, #3
 800e640:	2304      	movcs	r3, #4
 800e642:	9347      	str	r3, [sp, #284]	; 0x11c
 800e644:	6863      	ldr	r3, [r4, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	dd42      	ble.n	800e6d0 <__ssvfiscanf_r+0x268>
 800e64a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e64c:	0659      	lsls	r1, r3, #25
 800e64e:	d404      	bmi.n	800e65a <__ssvfiscanf_r+0x1f2>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	781a      	ldrb	r2, [r3, #0]
 800e654:	5cba      	ldrb	r2, [r7, r2]
 800e656:	0712      	lsls	r2, r2, #28
 800e658:	d441      	bmi.n	800e6de <__ssvfiscanf_r+0x276>
 800e65a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	dc50      	bgt.n	800e702 <__ssvfiscanf_r+0x29a>
 800e660:	466b      	mov	r3, sp
 800e662:	4622      	mov	r2, r4
 800e664:	a941      	add	r1, sp, #260	; 0x104
 800e666:	4630      	mov	r0, r6
 800e668:	f000 f876 	bl	800e758 <_scanf_chars>
 800e66c:	2801      	cmp	r0, #1
 800e66e:	d06e      	beq.n	800e74e <__ssvfiscanf_r+0x2e6>
 800e670:	2802      	cmp	r0, #2
 800e672:	f47f af20 	bne.w	800e4b6 <__ssvfiscanf_r+0x4e>
 800e676:	e7cf      	b.n	800e618 <__ssvfiscanf_r+0x1b0>
 800e678:	220a      	movs	r2, #10
 800e67a:	e7dd      	b.n	800e638 <__ssvfiscanf_r+0x1d0>
 800e67c:	2300      	movs	r3, #0
 800e67e:	9342      	str	r3, [sp, #264]	; 0x108
 800e680:	2303      	movs	r3, #3
 800e682:	e7de      	b.n	800e642 <__ssvfiscanf_r+0x1da>
 800e684:	2308      	movs	r3, #8
 800e686:	9342      	str	r3, [sp, #264]	; 0x108
 800e688:	2304      	movs	r3, #4
 800e68a:	e7da      	b.n	800e642 <__ssvfiscanf_r+0x1da>
 800e68c:	4629      	mov	r1, r5
 800e68e:	4640      	mov	r0, r8
 800e690:	f000 f9c6 	bl	800ea20 <__sccl>
 800e694:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e69a:	9341      	str	r3, [sp, #260]	; 0x104
 800e69c:	4605      	mov	r5, r0
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e7cf      	b.n	800e642 <__ssvfiscanf_r+0x1da>
 800e6a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6a8:	9341      	str	r3, [sp, #260]	; 0x104
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e7c9      	b.n	800e642 <__ssvfiscanf_r+0x1da>
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	e7c7      	b.n	800e642 <__ssvfiscanf_r+0x1da>
 800e6b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e6b4:	06c3      	lsls	r3, r0, #27
 800e6b6:	f53f aefe 	bmi.w	800e4b6 <__ssvfiscanf_r+0x4e>
 800e6ba:	9b00      	ldr	r3, [sp, #0]
 800e6bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e6be:	1d19      	adds	r1, r3, #4
 800e6c0:	9100      	str	r1, [sp, #0]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f010 0f01 	tst.w	r0, #1
 800e6c8:	bf14      	ite	ne
 800e6ca:	801a      	strhne	r2, [r3, #0]
 800e6cc:	601a      	streq	r2, [r3, #0]
 800e6ce:	e6f2      	b.n	800e4b6 <__ssvfiscanf_r+0x4e>
 800e6d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	4798      	blx	r3
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d0b6      	beq.n	800e64a <__ssvfiscanf_r+0x1e2>
 800e6dc:	e79c      	b.n	800e618 <__ssvfiscanf_r+0x1b0>
 800e6de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e6e0:	3201      	adds	r2, #1
 800e6e2:	9245      	str	r2, [sp, #276]	; 0x114
 800e6e4:	6862      	ldr	r2, [r4, #4]
 800e6e6:	3a01      	subs	r2, #1
 800e6e8:	2a00      	cmp	r2, #0
 800e6ea:	6062      	str	r2, [r4, #4]
 800e6ec:	dd02      	ble.n	800e6f4 <__ssvfiscanf_r+0x28c>
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	6023      	str	r3, [r4, #0]
 800e6f2:	e7ad      	b.n	800e650 <__ssvfiscanf_r+0x1e8>
 800e6f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	4798      	blx	r3
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d0a7      	beq.n	800e650 <__ssvfiscanf_r+0x1e8>
 800e700:	e78a      	b.n	800e618 <__ssvfiscanf_r+0x1b0>
 800e702:	2b04      	cmp	r3, #4
 800e704:	dc0e      	bgt.n	800e724 <__ssvfiscanf_r+0x2bc>
 800e706:	466b      	mov	r3, sp
 800e708:	4622      	mov	r2, r4
 800e70a:	a941      	add	r1, sp, #260	; 0x104
 800e70c:	4630      	mov	r0, r6
 800e70e:	f000 f87d 	bl	800e80c <_scanf_i>
 800e712:	e7ab      	b.n	800e66c <__ssvfiscanf_r+0x204>
 800e714:	0800e3b5 	.word	0x0800e3b5
 800e718:	0800e42f 	.word	0x0800e42f
 800e71c:	0800f89b 	.word	0x0800f89b
 800e720:	0800f852 	.word	0x0800f852
 800e724:	4b0b      	ldr	r3, [pc, #44]	; (800e754 <__ssvfiscanf_r+0x2ec>)
 800e726:	2b00      	cmp	r3, #0
 800e728:	f43f aec5 	beq.w	800e4b6 <__ssvfiscanf_r+0x4e>
 800e72c:	466b      	mov	r3, sp
 800e72e:	4622      	mov	r2, r4
 800e730:	a941      	add	r1, sp, #260	; 0x104
 800e732:	4630      	mov	r0, r6
 800e734:	f3af 8000 	nop.w
 800e738:	e798      	b.n	800e66c <__ssvfiscanf_r+0x204>
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e740:	bf18      	it	ne
 800e742:	f04f 30ff 	movne.w	r0, #4294967295
 800e746:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e74e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e750:	e7f9      	b.n	800e746 <__ssvfiscanf_r+0x2de>
 800e752:	bf00      	nop
 800e754:	00000000 	.word	0x00000000

0800e758 <_scanf_chars>:
 800e758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e75c:	4615      	mov	r5, r2
 800e75e:	688a      	ldr	r2, [r1, #8]
 800e760:	4680      	mov	r8, r0
 800e762:	460c      	mov	r4, r1
 800e764:	b932      	cbnz	r2, 800e774 <_scanf_chars+0x1c>
 800e766:	698a      	ldr	r2, [r1, #24]
 800e768:	2a00      	cmp	r2, #0
 800e76a:	bf0c      	ite	eq
 800e76c:	2201      	moveq	r2, #1
 800e76e:	f04f 32ff 	movne.w	r2, #4294967295
 800e772:	608a      	str	r2, [r1, #8]
 800e774:	6822      	ldr	r2, [r4, #0]
 800e776:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e808 <_scanf_chars+0xb0>
 800e77a:	06d1      	lsls	r1, r2, #27
 800e77c:	bf5f      	itttt	pl
 800e77e:	681a      	ldrpl	r2, [r3, #0]
 800e780:	1d11      	addpl	r1, r2, #4
 800e782:	6019      	strpl	r1, [r3, #0]
 800e784:	6816      	ldrpl	r6, [r2, #0]
 800e786:	2700      	movs	r7, #0
 800e788:	69a0      	ldr	r0, [r4, #24]
 800e78a:	b188      	cbz	r0, 800e7b0 <_scanf_chars+0x58>
 800e78c:	2801      	cmp	r0, #1
 800e78e:	d107      	bne.n	800e7a0 <_scanf_chars+0x48>
 800e790:	682a      	ldr	r2, [r5, #0]
 800e792:	7811      	ldrb	r1, [r2, #0]
 800e794:	6962      	ldr	r2, [r4, #20]
 800e796:	5c52      	ldrb	r2, [r2, r1]
 800e798:	b952      	cbnz	r2, 800e7b0 <_scanf_chars+0x58>
 800e79a:	2f00      	cmp	r7, #0
 800e79c:	d031      	beq.n	800e802 <_scanf_chars+0xaa>
 800e79e:	e022      	b.n	800e7e6 <_scanf_chars+0x8e>
 800e7a0:	2802      	cmp	r0, #2
 800e7a2:	d120      	bne.n	800e7e6 <_scanf_chars+0x8e>
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e7ac:	071b      	lsls	r3, r3, #28
 800e7ae:	d41a      	bmi.n	800e7e6 <_scanf_chars+0x8e>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	06da      	lsls	r2, r3, #27
 800e7b4:	bf5e      	ittt	pl
 800e7b6:	682b      	ldrpl	r3, [r5, #0]
 800e7b8:	781b      	ldrbpl	r3, [r3, #0]
 800e7ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e7be:	682a      	ldr	r2, [r5, #0]
 800e7c0:	686b      	ldr	r3, [r5, #4]
 800e7c2:	3201      	adds	r2, #1
 800e7c4:	602a      	str	r2, [r5, #0]
 800e7c6:	68a2      	ldr	r2, [r4, #8]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	3a01      	subs	r2, #1
 800e7cc:	606b      	str	r3, [r5, #4]
 800e7ce:	3701      	adds	r7, #1
 800e7d0:	60a2      	str	r2, [r4, #8]
 800e7d2:	b142      	cbz	r2, 800e7e6 <_scanf_chars+0x8e>
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	dcd7      	bgt.n	800e788 <_scanf_chars+0x30>
 800e7d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4640      	mov	r0, r8
 800e7e0:	4798      	blx	r3
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d0d0      	beq.n	800e788 <_scanf_chars+0x30>
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	f013 0310 	ands.w	r3, r3, #16
 800e7ec:	d105      	bne.n	800e7fa <_scanf_chars+0xa2>
 800e7ee:	68e2      	ldr	r2, [r4, #12]
 800e7f0:	3201      	adds	r2, #1
 800e7f2:	60e2      	str	r2, [r4, #12]
 800e7f4:	69a2      	ldr	r2, [r4, #24]
 800e7f6:	b102      	cbz	r2, 800e7fa <_scanf_chars+0xa2>
 800e7f8:	7033      	strb	r3, [r6, #0]
 800e7fa:	6923      	ldr	r3, [r4, #16]
 800e7fc:	443b      	add	r3, r7
 800e7fe:	6123      	str	r3, [r4, #16]
 800e800:	2000      	movs	r0, #0
 800e802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e806:	bf00      	nop
 800e808:	0800f89b 	.word	0x0800f89b

0800e80c <_scanf_i>:
 800e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e810:	4698      	mov	r8, r3
 800e812:	4b76      	ldr	r3, [pc, #472]	; (800e9ec <_scanf_i+0x1e0>)
 800e814:	460c      	mov	r4, r1
 800e816:	4682      	mov	sl, r0
 800e818:	4616      	mov	r6, r2
 800e81a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e81e:	b087      	sub	sp, #28
 800e820:	ab03      	add	r3, sp, #12
 800e822:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e826:	4b72      	ldr	r3, [pc, #456]	; (800e9f0 <_scanf_i+0x1e4>)
 800e828:	69a1      	ldr	r1, [r4, #24]
 800e82a:	4a72      	ldr	r2, [pc, #456]	; (800e9f4 <_scanf_i+0x1e8>)
 800e82c:	2903      	cmp	r1, #3
 800e82e:	bf18      	it	ne
 800e830:	461a      	movne	r2, r3
 800e832:	68a3      	ldr	r3, [r4, #8]
 800e834:	9201      	str	r2, [sp, #4]
 800e836:	1e5a      	subs	r2, r3, #1
 800e838:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e83c:	bf88      	it	hi
 800e83e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e842:	4627      	mov	r7, r4
 800e844:	bf82      	ittt	hi
 800e846:	eb03 0905 	addhi.w	r9, r3, r5
 800e84a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e84e:	60a3      	strhi	r3, [r4, #8]
 800e850:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e854:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e858:	bf98      	it	ls
 800e85a:	f04f 0900 	movls.w	r9, #0
 800e85e:	6023      	str	r3, [r4, #0]
 800e860:	463d      	mov	r5, r7
 800e862:	f04f 0b00 	mov.w	fp, #0
 800e866:	6831      	ldr	r1, [r6, #0]
 800e868:	ab03      	add	r3, sp, #12
 800e86a:	7809      	ldrb	r1, [r1, #0]
 800e86c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e870:	2202      	movs	r2, #2
 800e872:	f7f1 fcb5 	bl	80001e0 <memchr>
 800e876:	b328      	cbz	r0, 800e8c4 <_scanf_i+0xb8>
 800e878:	f1bb 0f01 	cmp.w	fp, #1
 800e87c:	d159      	bne.n	800e932 <_scanf_i+0x126>
 800e87e:	6862      	ldr	r2, [r4, #4]
 800e880:	b92a      	cbnz	r2, 800e88e <_scanf_i+0x82>
 800e882:	6822      	ldr	r2, [r4, #0]
 800e884:	2308      	movs	r3, #8
 800e886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e88a:	6063      	str	r3, [r4, #4]
 800e88c:	6022      	str	r2, [r4, #0]
 800e88e:	6822      	ldr	r2, [r4, #0]
 800e890:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e894:	6022      	str	r2, [r4, #0]
 800e896:	68a2      	ldr	r2, [r4, #8]
 800e898:	1e51      	subs	r1, r2, #1
 800e89a:	60a1      	str	r1, [r4, #8]
 800e89c:	b192      	cbz	r2, 800e8c4 <_scanf_i+0xb8>
 800e89e:	6832      	ldr	r2, [r6, #0]
 800e8a0:	1c51      	adds	r1, r2, #1
 800e8a2:	6031      	str	r1, [r6, #0]
 800e8a4:	7812      	ldrb	r2, [r2, #0]
 800e8a6:	f805 2b01 	strb.w	r2, [r5], #1
 800e8aa:	6872      	ldr	r2, [r6, #4]
 800e8ac:	3a01      	subs	r2, #1
 800e8ae:	2a00      	cmp	r2, #0
 800e8b0:	6072      	str	r2, [r6, #4]
 800e8b2:	dc07      	bgt.n	800e8c4 <_scanf_i+0xb8>
 800e8b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e8b8:	4631      	mov	r1, r6
 800e8ba:	4650      	mov	r0, sl
 800e8bc:	4790      	blx	r2
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f040 8085 	bne.w	800e9ce <_scanf_i+0x1c2>
 800e8c4:	f10b 0b01 	add.w	fp, fp, #1
 800e8c8:	f1bb 0f03 	cmp.w	fp, #3
 800e8cc:	d1cb      	bne.n	800e866 <_scanf_i+0x5a>
 800e8ce:	6863      	ldr	r3, [r4, #4]
 800e8d0:	b90b      	cbnz	r3, 800e8d6 <_scanf_i+0xca>
 800e8d2:	230a      	movs	r3, #10
 800e8d4:	6063      	str	r3, [r4, #4]
 800e8d6:	6863      	ldr	r3, [r4, #4]
 800e8d8:	4947      	ldr	r1, [pc, #284]	; (800e9f8 <_scanf_i+0x1ec>)
 800e8da:	6960      	ldr	r0, [r4, #20]
 800e8dc:	1ac9      	subs	r1, r1, r3
 800e8de:	f000 f89f 	bl	800ea20 <__sccl>
 800e8e2:	f04f 0b00 	mov.w	fp, #0
 800e8e6:	68a3      	ldr	r3, [r4, #8]
 800e8e8:	6822      	ldr	r2, [r4, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d03d      	beq.n	800e96a <_scanf_i+0x15e>
 800e8ee:	6831      	ldr	r1, [r6, #0]
 800e8f0:	6960      	ldr	r0, [r4, #20]
 800e8f2:	f891 c000 	ldrb.w	ip, [r1]
 800e8f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d035      	beq.n	800e96a <_scanf_i+0x15e>
 800e8fe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e902:	d124      	bne.n	800e94e <_scanf_i+0x142>
 800e904:	0510      	lsls	r0, r2, #20
 800e906:	d522      	bpl.n	800e94e <_scanf_i+0x142>
 800e908:	f10b 0b01 	add.w	fp, fp, #1
 800e90c:	f1b9 0f00 	cmp.w	r9, #0
 800e910:	d003      	beq.n	800e91a <_scanf_i+0x10e>
 800e912:	3301      	adds	r3, #1
 800e914:	f109 39ff 	add.w	r9, r9, #4294967295
 800e918:	60a3      	str	r3, [r4, #8]
 800e91a:	6873      	ldr	r3, [r6, #4]
 800e91c:	3b01      	subs	r3, #1
 800e91e:	2b00      	cmp	r3, #0
 800e920:	6073      	str	r3, [r6, #4]
 800e922:	dd1b      	ble.n	800e95c <_scanf_i+0x150>
 800e924:	6833      	ldr	r3, [r6, #0]
 800e926:	3301      	adds	r3, #1
 800e928:	6033      	str	r3, [r6, #0]
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	60a3      	str	r3, [r4, #8]
 800e930:	e7d9      	b.n	800e8e6 <_scanf_i+0xda>
 800e932:	f1bb 0f02 	cmp.w	fp, #2
 800e936:	d1ae      	bne.n	800e896 <_scanf_i+0x8a>
 800e938:	6822      	ldr	r2, [r4, #0]
 800e93a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e93e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e942:	d1bf      	bne.n	800e8c4 <_scanf_i+0xb8>
 800e944:	2310      	movs	r3, #16
 800e946:	6063      	str	r3, [r4, #4]
 800e948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e94c:	e7a2      	b.n	800e894 <_scanf_i+0x88>
 800e94e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e952:	6022      	str	r2, [r4, #0]
 800e954:	780b      	ldrb	r3, [r1, #0]
 800e956:	f805 3b01 	strb.w	r3, [r5], #1
 800e95a:	e7de      	b.n	800e91a <_scanf_i+0x10e>
 800e95c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e960:	4631      	mov	r1, r6
 800e962:	4650      	mov	r0, sl
 800e964:	4798      	blx	r3
 800e966:	2800      	cmp	r0, #0
 800e968:	d0df      	beq.n	800e92a <_scanf_i+0x11e>
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	05db      	lsls	r3, r3, #23
 800e96e:	d50d      	bpl.n	800e98c <_scanf_i+0x180>
 800e970:	42bd      	cmp	r5, r7
 800e972:	d909      	bls.n	800e988 <_scanf_i+0x17c>
 800e974:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e978:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e97c:	4632      	mov	r2, r6
 800e97e:	4650      	mov	r0, sl
 800e980:	4798      	blx	r3
 800e982:	f105 39ff 	add.w	r9, r5, #4294967295
 800e986:	464d      	mov	r5, r9
 800e988:	42bd      	cmp	r5, r7
 800e98a:	d02d      	beq.n	800e9e8 <_scanf_i+0x1dc>
 800e98c:	6822      	ldr	r2, [r4, #0]
 800e98e:	f012 0210 	ands.w	r2, r2, #16
 800e992:	d113      	bne.n	800e9bc <_scanf_i+0x1b0>
 800e994:	702a      	strb	r2, [r5, #0]
 800e996:	6863      	ldr	r3, [r4, #4]
 800e998:	9e01      	ldr	r6, [sp, #4]
 800e99a:	4639      	mov	r1, r7
 800e99c:	4650      	mov	r0, sl
 800e99e:	47b0      	blx	r6
 800e9a0:	6821      	ldr	r1, [r4, #0]
 800e9a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e9a6:	f011 0f20 	tst.w	r1, #32
 800e9aa:	d013      	beq.n	800e9d4 <_scanf_i+0x1c8>
 800e9ac:	1d1a      	adds	r2, r3, #4
 800e9ae:	f8c8 2000 	str.w	r2, [r8]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	6018      	str	r0, [r3, #0]
 800e9b6:	68e3      	ldr	r3, [r4, #12]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	60e3      	str	r3, [r4, #12]
 800e9bc:	1bed      	subs	r5, r5, r7
 800e9be:	44ab      	add	fp, r5
 800e9c0:	6925      	ldr	r5, [r4, #16]
 800e9c2:	445d      	add	r5, fp
 800e9c4:	6125      	str	r5, [r4, #16]
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	b007      	add	sp, #28
 800e9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ce:	f04f 0b00 	mov.w	fp, #0
 800e9d2:	e7ca      	b.n	800e96a <_scanf_i+0x15e>
 800e9d4:	1d1a      	adds	r2, r3, #4
 800e9d6:	f8c8 2000 	str.w	r2, [r8]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f011 0f01 	tst.w	r1, #1
 800e9e0:	bf14      	ite	ne
 800e9e2:	8018      	strhne	r0, [r3, #0]
 800e9e4:	6018      	streq	r0, [r3, #0]
 800e9e6:	e7e6      	b.n	800e9b6 <_scanf_i+0x1aa>
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	e7ed      	b.n	800e9c8 <_scanf_i+0x1bc>
 800e9ec:	0800f108 	.word	0x0800f108
 800e9f0:	0800ec7d 	.word	0x0800ec7d
 800e9f4:	0800eb95 	.word	0x0800eb95
 800e9f8:	0800f898 	.word	0x0800f898

0800e9fc <_read_r>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	4d07      	ldr	r5, [pc, #28]	; (800ea1c <_read_r+0x20>)
 800ea00:	4604      	mov	r4, r0
 800ea02:	4608      	mov	r0, r1
 800ea04:	4611      	mov	r1, r2
 800ea06:	2200      	movs	r2, #0
 800ea08:	602a      	str	r2, [r5, #0]
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	f7f4 f902 	bl	8002c14 <_read>
 800ea10:	1c43      	adds	r3, r0, #1
 800ea12:	d102      	bne.n	800ea1a <_read_r+0x1e>
 800ea14:	682b      	ldr	r3, [r5, #0]
 800ea16:	b103      	cbz	r3, 800ea1a <_read_r+0x1e>
 800ea18:	6023      	str	r3, [r4, #0]
 800ea1a:	bd38      	pop	{r3, r4, r5, pc}
 800ea1c:	200063d0 	.word	0x200063d0

0800ea20 <__sccl>:
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	780b      	ldrb	r3, [r1, #0]
 800ea24:	4604      	mov	r4, r0
 800ea26:	2b5e      	cmp	r3, #94	; 0x5e
 800ea28:	bf0b      	itete	eq
 800ea2a:	784b      	ldrbeq	r3, [r1, #1]
 800ea2c:	1c48      	addne	r0, r1, #1
 800ea2e:	1c88      	addeq	r0, r1, #2
 800ea30:	2200      	movne	r2, #0
 800ea32:	bf08      	it	eq
 800ea34:	2201      	moveq	r2, #1
 800ea36:	1e61      	subs	r1, r4, #1
 800ea38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ea3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ea40:	42a9      	cmp	r1, r5
 800ea42:	d1fb      	bne.n	800ea3c <__sccl+0x1c>
 800ea44:	b90b      	cbnz	r3, 800ea4a <__sccl+0x2a>
 800ea46:	3801      	subs	r0, #1
 800ea48:	bd70      	pop	{r4, r5, r6, pc}
 800ea4a:	f082 0201 	eor.w	r2, r2, #1
 800ea4e:	54e2      	strb	r2, [r4, r3]
 800ea50:	4605      	mov	r5, r0
 800ea52:	4628      	mov	r0, r5
 800ea54:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ea58:	292d      	cmp	r1, #45	; 0x2d
 800ea5a:	d006      	beq.n	800ea6a <__sccl+0x4a>
 800ea5c:	295d      	cmp	r1, #93	; 0x5d
 800ea5e:	d0f3      	beq.n	800ea48 <__sccl+0x28>
 800ea60:	b909      	cbnz	r1, 800ea66 <__sccl+0x46>
 800ea62:	4628      	mov	r0, r5
 800ea64:	e7f0      	b.n	800ea48 <__sccl+0x28>
 800ea66:	460b      	mov	r3, r1
 800ea68:	e7f1      	b.n	800ea4e <__sccl+0x2e>
 800ea6a:	786e      	ldrb	r6, [r5, #1]
 800ea6c:	2e5d      	cmp	r6, #93	; 0x5d
 800ea6e:	d0fa      	beq.n	800ea66 <__sccl+0x46>
 800ea70:	42b3      	cmp	r3, r6
 800ea72:	dcf8      	bgt.n	800ea66 <__sccl+0x46>
 800ea74:	3502      	adds	r5, #2
 800ea76:	4619      	mov	r1, r3
 800ea78:	3101      	adds	r1, #1
 800ea7a:	428e      	cmp	r6, r1
 800ea7c:	5462      	strb	r2, [r4, r1]
 800ea7e:	dcfb      	bgt.n	800ea78 <__sccl+0x58>
 800ea80:	1af1      	subs	r1, r6, r3
 800ea82:	3901      	subs	r1, #1
 800ea84:	1c58      	adds	r0, r3, #1
 800ea86:	42b3      	cmp	r3, r6
 800ea88:	bfa8      	it	ge
 800ea8a:	2100      	movge	r1, #0
 800ea8c:	1843      	adds	r3, r0, r1
 800ea8e:	e7e0      	b.n	800ea52 <__sccl+0x32>

0800ea90 <_strtol_l.constprop.0>:
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea96:	d001      	beq.n	800ea9c <_strtol_l.constprop.0+0xc>
 800ea98:	2b24      	cmp	r3, #36	; 0x24
 800ea9a:	d906      	bls.n	800eaaa <_strtol_l.constprop.0+0x1a>
 800ea9c:	f7fd fdb6 	bl	800c60c <__errno>
 800eaa0:	2316      	movs	r3, #22
 800eaa2:	6003      	str	r3, [r0, #0]
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eb90 <_strtol_l.constprop.0+0x100>
 800eaae:	460d      	mov	r5, r1
 800eab0:	462e      	mov	r6, r5
 800eab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eab6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800eaba:	f017 0708 	ands.w	r7, r7, #8
 800eabe:	d1f7      	bne.n	800eab0 <_strtol_l.constprop.0+0x20>
 800eac0:	2c2d      	cmp	r4, #45	; 0x2d
 800eac2:	d132      	bne.n	800eb2a <_strtol_l.constprop.0+0x9a>
 800eac4:	782c      	ldrb	r4, [r5, #0]
 800eac6:	2701      	movs	r7, #1
 800eac8:	1cb5      	adds	r5, r6, #2
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d05b      	beq.n	800eb86 <_strtol_l.constprop.0+0xf6>
 800eace:	2b10      	cmp	r3, #16
 800ead0:	d109      	bne.n	800eae6 <_strtol_l.constprop.0+0x56>
 800ead2:	2c30      	cmp	r4, #48	; 0x30
 800ead4:	d107      	bne.n	800eae6 <_strtol_l.constprop.0+0x56>
 800ead6:	782c      	ldrb	r4, [r5, #0]
 800ead8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eadc:	2c58      	cmp	r4, #88	; 0x58
 800eade:	d14d      	bne.n	800eb7c <_strtol_l.constprop.0+0xec>
 800eae0:	786c      	ldrb	r4, [r5, #1]
 800eae2:	2310      	movs	r3, #16
 800eae4:	3502      	adds	r5, #2
 800eae6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eaea:	f108 38ff 	add.w	r8, r8, #4294967295
 800eaee:	f04f 0c00 	mov.w	ip, #0
 800eaf2:	fbb8 f9f3 	udiv	r9, r8, r3
 800eaf6:	4666      	mov	r6, ip
 800eaf8:	fb03 8a19 	mls	sl, r3, r9, r8
 800eafc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800eb00:	f1be 0f09 	cmp.w	lr, #9
 800eb04:	d816      	bhi.n	800eb34 <_strtol_l.constprop.0+0xa4>
 800eb06:	4674      	mov	r4, lr
 800eb08:	42a3      	cmp	r3, r4
 800eb0a:	dd24      	ble.n	800eb56 <_strtol_l.constprop.0+0xc6>
 800eb0c:	f1bc 0f00 	cmp.w	ip, #0
 800eb10:	db1e      	blt.n	800eb50 <_strtol_l.constprop.0+0xc0>
 800eb12:	45b1      	cmp	r9, r6
 800eb14:	d31c      	bcc.n	800eb50 <_strtol_l.constprop.0+0xc0>
 800eb16:	d101      	bne.n	800eb1c <_strtol_l.constprop.0+0x8c>
 800eb18:	45a2      	cmp	sl, r4
 800eb1a:	db19      	blt.n	800eb50 <_strtol_l.constprop.0+0xc0>
 800eb1c:	fb06 4603 	mla	r6, r6, r3, r4
 800eb20:	f04f 0c01 	mov.w	ip, #1
 800eb24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb28:	e7e8      	b.n	800eafc <_strtol_l.constprop.0+0x6c>
 800eb2a:	2c2b      	cmp	r4, #43	; 0x2b
 800eb2c:	bf04      	itt	eq
 800eb2e:	782c      	ldrbeq	r4, [r5, #0]
 800eb30:	1cb5      	addeq	r5, r6, #2
 800eb32:	e7ca      	b.n	800eaca <_strtol_l.constprop.0+0x3a>
 800eb34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800eb38:	f1be 0f19 	cmp.w	lr, #25
 800eb3c:	d801      	bhi.n	800eb42 <_strtol_l.constprop.0+0xb2>
 800eb3e:	3c37      	subs	r4, #55	; 0x37
 800eb40:	e7e2      	b.n	800eb08 <_strtol_l.constprop.0+0x78>
 800eb42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800eb46:	f1be 0f19 	cmp.w	lr, #25
 800eb4a:	d804      	bhi.n	800eb56 <_strtol_l.constprop.0+0xc6>
 800eb4c:	3c57      	subs	r4, #87	; 0x57
 800eb4e:	e7db      	b.n	800eb08 <_strtol_l.constprop.0+0x78>
 800eb50:	f04f 3cff 	mov.w	ip, #4294967295
 800eb54:	e7e6      	b.n	800eb24 <_strtol_l.constprop.0+0x94>
 800eb56:	f1bc 0f00 	cmp.w	ip, #0
 800eb5a:	da05      	bge.n	800eb68 <_strtol_l.constprop.0+0xd8>
 800eb5c:	2322      	movs	r3, #34	; 0x22
 800eb5e:	6003      	str	r3, [r0, #0]
 800eb60:	4646      	mov	r6, r8
 800eb62:	b942      	cbnz	r2, 800eb76 <_strtol_l.constprop.0+0xe6>
 800eb64:	4630      	mov	r0, r6
 800eb66:	e79e      	b.n	800eaa6 <_strtol_l.constprop.0+0x16>
 800eb68:	b107      	cbz	r7, 800eb6c <_strtol_l.constprop.0+0xdc>
 800eb6a:	4276      	negs	r6, r6
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	d0f9      	beq.n	800eb64 <_strtol_l.constprop.0+0xd4>
 800eb70:	f1bc 0f00 	cmp.w	ip, #0
 800eb74:	d000      	beq.n	800eb78 <_strtol_l.constprop.0+0xe8>
 800eb76:	1e69      	subs	r1, r5, #1
 800eb78:	6011      	str	r1, [r2, #0]
 800eb7a:	e7f3      	b.n	800eb64 <_strtol_l.constprop.0+0xd4>
 800eb7c:	2430      	movs	r4, #48	; 0x30
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1b1      	bne.n	800eae6 <_strtol_l.constprop.0+0x56>
 800eb82:	2308      	movs	r3, #8
 800eb84:	e7af      	b.n	800eae6 <_strtol_l.constprop.0+0x56>
 800eb86:	2c30      	cmp	r4, #48	; 0x30
 800eb88:	d0a5      	beq.n	800ead6 <_strtol_l.constprop.0+0x46>
 800eb8a:	230a      	movs	r3, #10
 800eb8c:	e7ab      	b.n	800eae6 <_strtol_l.constprop.0+0x56>
 800eb8e:	bf00      	nop
 800eb90:	0800f89b 	.word	0x0800f89b

0800eb94 <_strtol_r>:
 800eb94:	f7ff bf7c 	b.w	800ea90 <_strtol_l.constprop.0>

0800eb98 <_strtoul_l.constprop.0>:
 800eb98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb9c:	4f36      	ldr	r7, [pc, #216]	; (800ec78 <_strtoul_l.constprop.0+0xe0>)
 800eb9e:	4686      	mov	lr, r0
 800eba0:	460d      	mov	r5, r1
 800eba2:	4628      	mov	r0, r5
 800eba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eba8:	5de6      	ldrb	r6, [r4, r7]
 800ebaa:	f016 0608 	ands.w	r6, r6, #8
 800ebae:	d1f8      	bne.n	800eba2 <_strtoul_l.constprop.0+0xa>
 800ebb0:	2c2d      	cmp	r4, #45	; 0x2d
 800ebb2:	d12f      	bne.n	800ec14 <_strtoul_l.constprop.0+0x7c>
 800ebb4:	782c      	ldrb	r4, [r5, #0]
 800ebb6:	2601      	movs	r6, #1
 800ebb8:	1c85      	adds	r5, r0, #2
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d057      	beq.n	800ec6e <_strtoul_l.constprop.0+0xd6>
 800ebbe:	2b10      	cmp	r3, #16
 800ebc0:	d109      	bne.n	800ebd6 <_strtoul_l.constprop.0+0x3e>
 800ebc2:	2c30      	cmp	r4, #48	; 0x30
 800ebc4:	d107      	bne.n	800ebd6 <_strtoul_l.constprop.0+0x3e>
 800ebc6:	7828      	ldrb	r0, [r5, #0]
 800ebc8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ebcc:	2858      	cmp	r0, #88	; 0x58
 800ebce:	d149      	bne.n	800ec64 <_strtoul_l.constprop.0+0xcc>
 800ebd0:	786c      	ldrb	r4, [r5, #1]
 800ebd2:	2310      	movs	r3, #16
 800ebd4:	3502      	adds	r5, #2
 800ebd6:	f04f 38ff 	mov.w	r8, #4294967295
 800ebda:	2700      	movs	r7, #0
 800ebdc:	fbb8 f8f3 	udiv	r8, r8, r3
 800ebe0:	fb03 f908 	mul.w	r9, r3, r8
 800ebe4:	ea6f 0909 	mvn.w	r9, r9
 800ebe8:	4638      	mov	r0, r7
 800ebea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ebee:	f1bc 0f09 	cmp.w	ip, #9
 800ebf2:	d814      	bhi.n	800ec1e <_strtoul_l.constprop.0+0x86>
 800ebf4:	4664      	mov	r4, ip
 800ebf6:	42a3      	cmp	r3, r4
 800ebf8:	dd22      	ble.n	800ec40 <_strtoul_l.constprop.0+0xa8>
 800ebfa:	2f00      	cmp	r7, #0
 800ebfc:	db1d      	blt.n	800ec3a <_strtoul_l.constprop.0+0xa2>
 800ebfe:	4580      	cmp	r8, r0
 800ec00:	d31b      	bcc.n	800ec3a <_strtoul_l.constprop.0+0xa2>
 800ec02:	d101      	bne.n	800ec08 <_strtoul_l.constprop.0+0x70>
 800ec04:	45a1      	cmp	r9, r4
 800ec06:	db18      	blt.n	800ec3a <_strtoul_l.constprop.0+0xa2>
 800ec08:	fb00 4003 	mla	r0, r0, r3, r4
 800ec0c:	2701      	movs	r7, #1
 800ec0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec12:	e7ea      	b.n	800ebea <_strtoul_l.constprop.0+0x52>
 800ec14:	2c2b      	cmp	r4, #43	; 0x2b
 800ec16:	bf04      	itt	eq
 800ec18:	782c      	ldrbeq	r4, [r5, #0]
 800ec1a:	1c85      	addeq	r5, r0, #2
 800ec1c:	e7cd      	b.n	800ebba <_strtoul_l.constprop.0+0x22>
 800ec1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ec22:	f1bc 0f19 	cmp.w	ip, #25
 800ec26:	d801      	bhi.n	800ec2c <_strtoul_l.constprop.0+0x94>
 800ec28:	3c37      	subs	r4, #55	; 0x37
 800ec2a:	e7e4      	b.n	800ebf6 <_strtoul_l.constprop.0+0x5e>
 800ec2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ec30:	f1bc 0f19 	cmp.w	ip, #25
 800ec34:	d804      	bhi.n	800ec40 <_strtoul_l.constprop.0+0xa8>
 800ec36:	3c57      	subs	r4, #87	; 0x57
 800ec38:	e7dd      	b.n	800ebf6 <_strtoul_l.constprop.0+0x5e>
 800ec3a:	f04f 37ff 	mov.w	r7, #4294967295
 800ec3e:	e7e6      	b.n	800ec0e <_strtoul_l.constprop.0+0x76>
 800ec40:	2f00      	cmp	r7, #0
 800ec42:	da07      	bge.n	800ec54 <_strtoul_l.constprop.0+0xbc>
 800ec44:	2322      	movs	r3, #34	; 0x22
 800ec46:	f8ce 3000 	str.w	r3, [lr]
 800ec4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4e:	b932      	cbnz	r2, 800ec5e <_strtoul_l.constprop.0+0xc6>
 800ec50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec54:	b106      	cbz	r6, 800ec58 <_strtoul_l.constprop.0+0xc0>
 800ec56:	4240      	negs	r0, r0
 800ec58:	2a00      	cmp	r2, #0
 800ec5a:	d0f9      	beq.n	800ec50 <_strtoul_l.constprop.0+0xb8>
 800ec5c:	b107      	cbz	r7, 800ec60 <_strtoul_l.constprop.0+0xc8>
 800ec5e:	1e69      	subs	r1, r5, #1
 800ec60:	6011      	str	r1, [r2, #0]
 800ec62:	e7f5      	b.n	800ec50 <_strtoul_l.constprop.0+0xb8>
 800ec64:	2430      	movs	r4, #48	; 0x30
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1b5      	bne.n	800ebd6 <_strtoul_l.constprop.0+0x3e>
 800ec6a:	2308      	movs	r3, #8
 800ec6c:	e7b3      	b.n	800ebd6 <_strtoul_l.constprop.0+0x3e>
 800ec6e:	2c30      	cmp	r4, #48	; 0x30
 800ec70:	d0a9      	beq.n	800ebc6 <_strtoul_l.constprop.0+0x2e>
 800ec72:	230a      	movs	r3, #10
 800ec74:	e7af      	b.n	800ebd6 <_strtoul_l.constprop.0+0x3e>
 800ec76:	bf00      	nop
 800ec78:	0800f89b 	.word	0x0800f89b

0800ec7c <_strtoul_r>:
 800ec7c:	f7ff bf8c 	b.w	800eb98 <_strtoul_l.constprop.0>

0800ec80 <__submore>:
 800ec80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec84:	460c      	mov	r4, r1
 800ec86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ec88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec8c:	4299      	cmp	r1, r3
 800ec8e:	d11d      	bne.n	800eccc <__submore+0x4c>
 800ec90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ec94:	f7fe f8f8 	bl	800ce88 <_malloc_r>
 800ec98:	b918      	cbnz	r0, 800eca2 <__submore+0x22>
 800ec9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eca6:	63a3      	str	r3, [r4, #56]	; 0x38
 800eca8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ecac:	6360      	str	r0, [r4, #52]	; 0x34
 800ecae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ecb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ecb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ecba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ecbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ecc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ecc6:	6020      	str	r0, [r4, #0]
 800ecc8:	2000      	movs	r0, #0
 800ecca:	e7e8      	b.n	800ec9e <__submore+0x1e>
 800eccc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ecce:	0077      	lsls	r7, r6, #1
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	f7ff f9e5 	bl	800e0a0 <_realloc_r>
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d0de      	beq.n	800ec9a <__submore+0x1a>
 800ecdc:	eb00 0806 	add.w	r8, r0, r6
 800ece0:	4601      	mov	r1, r0
 800ece2:	4632      	mov	r2, r6
 800ece4:	4640      	mov	r0, r8
 800ece6:	f7fe f84d 	bl	800cd84 <memcpy>
 800ecea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ecee:	f8c4 8000 	str.w	r8, [r4]
 800ecf2:	e7e9      	b.n	800ecc8 <__submore+0x48>

0800ecf4 <_malloc_usable_size_r>:
 800ecf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecf8:	1f18      	subs	r0, r3, #4
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	bfbc      	itt	lt
 800ecfe:	580b      	ldrlt	r3, [r1, r0]
 800ed00:	18c0      	addlt	r0, r0, r3
 800ed02:	4770      	bx	lr

0800ed04 <_init>:
 800ed04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed06:	bf00      	nop
 800ed08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed0a:	bc08      	pop	{r3}
 800ed0c:	469e      	mov	lr, r3
 800ed0e:	4770      	bx	lr

0800ed10 <_fini>:
 800ed10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed12:	bf00      	nop
 800ed14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed16:	bc08      	pop	{r3}
 800ed18:	469e      	mov	lr, r3
 800ed1a:	4770      	bx	lr
