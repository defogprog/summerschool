
summerschool_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800ced8  0800ced8  0001ced8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d430  0800d430  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d430  0800d430  0001d430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d438  0800d438  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d438  0800d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d43c  0800d43c  0001d43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e08  20000074  0800d4b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e7c  0800d4b4  00024e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002118a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f5c  00000000  00000000  0004122e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  00045190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a50  00000000  00000000  00046d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b394  00000000  00000000  00048790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5ef  00000000  00000000  00063b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaf87  00000000  00000000  00083113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e09a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008664  00000000  00000000  0012e0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cebc 	.word	0x0800cebc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800cebc 	.word	0x0800cebc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_ldivmod>:
 8000b8c:	b97b      	cbnz	r3, 8000bae <__aeabi_ldivmod+0x22>
 8000b8e:	b972      	cbnz	r2, 8000bae <__aeabi_ldivmod+0x22>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bfbe      	ittt	lt
 8000b94:	2000      	movlt	r0, #0
 8000b96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b9a:	e006      	blt.n	8000baa <__aeabi_ldivmod+0x1e>
 8000b9c:	bf08      	it	eq
 8000b9e:	2800      	cmpeq	r0, #0
 8000ba0:	bf1c      	itt	ne
 8000ba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba6:	f04f 30ff 	movne.w	r0, #4294967295
 8000baa:	f000 b9bf 	b.w	8000f2c <__aeabi_idiv0>
 8000bae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	db09      	blt.n	8000bce <__aeabi_ldivmod+0x42>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db1a      	blt.n	8000bf4 <__aeabi_ldivmod+0x68>
 8000bbe:	f000 f84d 	bl	8000c5c <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db1b      	blt.n	8000c10 <__aeabi_ldivmod+0x84>
 8000bd8:	f000 f840 	bl	8000c5c <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	4252      	negs	r2, r2
 8000bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf2:	4770      	bx	lr
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	f000 f82f 	bl	8000c5c <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4240      	negs	r0, r0
 8000c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f821 	bl	8000c5c <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b974 	b.w	8000f2c <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9d08      	ldr	r5, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	468e      	mov	lr, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d14d      	bne.n	8000d06 <__udivmoddi4+0xaa>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	4694      	mov	ip, r2
 8000c6e:	d969      	bls.n	8000d44 <__udivmoddi4+0xe8>
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	b152      	cbz	r2, 8000c8c <__udivmoddi4+0x30>
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	f1c2 0120 	rsb	r1, r2, #32
 8000c7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c86:	ea41 0e03 	orr.w	lr, r1, r3
 8000c8a:	4094      	lsls	r4, r2
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	0c21      	lsrs	r1, r4, #16
 8000c92:	fbbe f6f8 	udiv	r6, lr, r8
 8000c96:	fa1f f78c 	uxth.w	r7, ip
 8000c9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ca2:	fb06 f107 	mul.w	r1, r6, r7
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x64>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb2:	f080 811f 	bcs.w	8000ef4 <__udivmoddi4+0x298>
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	f240 811c 	bls.w	8000ef4 <__udivmoddi4+0x298>
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb00 f707 	mul.w	r7, r0, r7
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x92>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce0:	f080 810a 	bcs.w	8000ef8 <__udivmoddi4+0x29c>
 8000ce4:	42a7      	cmp	r7, r4
 8000ce6:	f240 8107 	bls.w	8000ef8 <__udivmoddi4+0x29c>
 8000cea:	4464      	add	r4, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf2:	1be4      	subs	r4, r4, r7
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	b11d      	cbz	r5, 8000d00 <__udivmoddi4+0xa4>
 8000cf8:	40d4      	lsrs	r4, r2
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d909      	bls.n	8000d1e <__udivmoddi4+0xc2>
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	f000 80ef 	beq.w	8000eee <__udivmoddi4+0x292>
 8000d10:	2600      	movs	r6, #0
 8000d12:	e9c5 0100 	strd	r0, r1, [r5]
 8000d16:	4630      	mov	r0, r6
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	fab3 f683 	clz	r6, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d14a      	bne.n	8000dbc <__udivmoddi4+0x160>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0xd4>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 80f9 	bhi.w	8000f22 <__udivmoddi4+0x2c6>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb61 0303 	sbc.w	r3, r1, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	469e      	mov	lr, r3
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0e0      	beq.n	8000d00 <__udivmoddi4+0xa4>
 8000d3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d42:	e7dd      	b.n	8000d00 <__udivmoddi4+0xa4>
 8000d44:	b902      	cbnz	r2, 8000d48 <__udivmoddi4+0xec>
 8000d46:	deff      	udf	#255	; 0xff
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	2a00      	cmp	r2, #0
 8000d4e:	f040 8092 	bne.w	8000e76 <__udivmoddi4+0x21a>
 8000d52:	eba1 010c 	sub.w	r1, r1, ip
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f fe8c 	uxth.w	lr, ip
 8000d5e:	2601      	movs	r6, #1
 8000d60:	0c20      	lsrs	r0, r4, #16
 8000d62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d66:	fb07 1113 	mls	r1, r7, r3, r1
 8000d6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6e:	fb0e f003 	mul.w	r0, lr, r3
 8000d72:	4288      	cmp	r0, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x12c>
 8000d76:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x12a>
 8000d80:	4288      	cmp	r0, r1
 8000d82:	f200 80cb 	bhi.w	8000f1c <__udivmoddi4+0x2c0>
 8000d86:	4643      	mov	r3, r8
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d90:	fb07 1110 	mls	r1, r7, r0, r1
 8000d94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d98:	fb0e fe00 	mul.w	lr, lr, r0
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x156>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da8:	d202      	bcs.n	8000db0 <__udivmoddi4+0x154>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f200 80bb 	bhi.w	8000f26 <__udivmoddi4+0x2ca>
 8000db0:	4608      	mov	r0, r1
 8000db2:	eba4 040e 	sub.w	r4, r4, lr
 8000db6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dba:	e79c      	b.n	8000cf6 <__udivmoddi4+0x9a>
 8000dbc:	f1c6 0720 	rsb	r7, r6, #32
 8000dc0:	40b3      	lsls	r3, r6
 8000dc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dca:	fa20 f407 	lsr.w	r4, r0, r7
 8000dce:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd2:	431c      	orrs	r4, r3
 8000dd4:	40f9      	lsrs	r1, r7
 8000dd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dda:	fa00 f306 	lsl.w	r3, r0, r6
 8000dde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000de2:	0c20      	lsrs	r0, r4, #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df0:	fb08 f00e 	mul.w	r0, r8, lr
 8000df4:	4288      	cmp	r0, r1
 8000df6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dfa:	d90b      	bls.n	8000e14 <__udivmoddi4+0x1b8>
 8000dfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000e00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e04:	f080 8088 	bcs.w	8000f18 <__udivmoddi4+0x2bc>
 8000e08:	4288      	cmp	r0, r1
 8000e0a:	f240 8085 	bls.w	8000f18 <__udivmoddi4+0x2bc>
 8000e0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e28:	458e      	cmp	lr, r1
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x1e2>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e34:	d26c      	bcs.n	8000f10 <__udivmoddi4+0x2b4>
 8000e36:	458e      	cmp	lr, r1
 8000e38:	d96a      	bls.n	8000f10 <__udivmoddi4+0x2b4>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4461      	add	r1, ip
 8000e3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e42:	fba0 9402 	umull	r9, r4, r0, r2
 8000e46:	eba1 010e 	sub.w	r1, r1, lr
 8000e4a:	42a1      	cmp	r1, r4
 8000e4c:	46c8      	mov	r8, r9
 8000e4e:	46a6      	mov	lr, r4
 8000e50:	d356      	bcc.n	8000f00 <__udivmoddi4+0x2a4>
 8000e52:	d053      	beq.n	8000efc <__udivmoddi4+0x2a0>
 8000e54:	b15d      	cbz	r5, 8000e6e <__udivmoddi4+0x212>
 8000e56:	ebb3 0208 	subs.w	r2, r3, r8
 8000e5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e62:	fa22 f306 	lsr.w	r3, r2, r6
 8000e66:	40f1      	lsrs	r1, r6
 8000e68:	431f      	orrs	r7, r3
 8000e6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6e:	2600      	movs	r6, #0
 8000e70:	4631      	mov	r1, r6
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e76:	f1c2 0320 	rsb	r3, r2, #32
 8000e7a:	40d8      	lsrs	r0, r3
 8000e7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e80:	fa21 f303 	lsr.w	r3, r1, r3
 8000e84:	4091      	lsls	r1, r2
 8000e86:	4301      	orrs	r1, r0
 8000e88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8c:	fa1f fe8c 	uxth.w	lr, ip
 8000e90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e94:	fb07 3610 	mls	r6, r7, r0, r3
 8000e98:	0c0b      	lsrs	r3, r1, #16
 8000e9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ea2:	429e      	cmp	r6, r3
 8000ea4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x260>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb2:	d22f      	bcs.n	8000f14 <__udivmoddi4+0x2b8>
 8000eb4:	429e      	cmp	r6, r3
 8000eb6:	d92d      	bls.n	8000f14 <__udivmoddi4+0x2b8>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4463      	add	r3, ip
 8000ebc:	1b9b      	subs	r3, r3, r6
 8000ebe:	b289      	uxth	r1, r1
 8000ec0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ecc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x28a>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000edc:	d216      	bcs.n	8000f0c <__udivmoddi4+0x2b0>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d914      	bls.n	8000f0c <__udivmoddi4+0x2b0>
 8000ee2:	3e02      	subs	r6, #2
 8000ee4:	4461      	add	r1, ip
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eec:	e738      	b.n	8000d60 <__udivmoddi4+0x104>
 8000eee:	462e      	mov	r6, r5
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	e705      	b.n	8000d00 <__udivmoddi4+0xa4>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	e6e3      	b.n	8000cc0 <__udivmoddi4+0x64>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6f8      	b.n	8000cee <__udivmoddi4+0x92>
 8000efc:	454b      	cmp	r3, r9
 8000efe:	d2a9      	bcs.n	8000e54 <__udivmoddi4+0x1f8>
 8000f00:	ebb9 0802 	subs.w	r8, r9, r2
 8000f04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f08:	3801      	subs	r0, #1
 8000f0a:	e7a3      	b.n	8000e54 <__udivmoddi4+0x1f8>
 8000f0c:	4646      	mov	r6, r8
 8000f0e:	e7ea      	b.n	8000ee6 <__udivmoddi4+0x28a>
 8000f10:	4620      	mov	r0, r4
 8000f12:	e794      	b.n	8000e3e <__udivmoddi4+0x1e2>
 8000f14:	4640      	mov	r0, r8
 8000f16:	e7d1      	b.n	8000ebc <__udivmoddi4+0x260>
 8000f18:	46d0      	mov	r8, sl
 8000f1a:	e77b      	b.n	8000e14 <__udivmoddi4+0x1b8>
 8000f1c:	3b02      	subs	r3, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	e732      	b.n	8000d88 <__udivmoddi4+0x12c>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e709      	b.n	8000d3a <__udivmoddi4+0xde>
 8000f26:	4464      	add	r4, ip
 8000f28:	3802      	subs	r0, #2
 8000f2a:	e742      	b.n	8000db2 <__udivmoddi4+0x156>

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <baro_init>:
static int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
static int32_t t_fine;
static _Bool inited = false;
static uint8_t data[25];

baro_stat_t baro_init(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Check barometer on I2C bus
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_ID, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <baro_init+0x1d0>)
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	22d0      	movs	r2, #208	; 0xd0
 8000f48:	21ec      	movs	r1, #236	; 0xec
 8000f4a:	486e      	ldr	r0, [pc, #440]	; (8001104 <baro_init+0x1d4>)
 8000f4c:	f003 fa90 	bl	8004470 <HAL_I2C_Mem_Read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <baro_init+0x38>
		if (status == HAL_TIMEOUT)
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d101      	bne.n	8000f64 <baro_init+0x34>
			return BARO_ERR_TIMEOUT;
 8000f60:	2302      	movs	r3, #2
 8000f62:	e0c9      	b.n	80010f8 <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e0c7      	b.n	80010f8 <baro_init+0x1c8>
	}

	if (data[0] != BARO_ID_VALUE) {
 8000f68:	4b65      	ldr	r3, [pc, #404]	; (8001100 <baro_init+0x1d0>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b58      	cmp	r3, #88	; 0x58
 8000f6e:	d001      	beq.n	8000f74 <baro_init+0x44>
		return BARO_ERR_GENERAL;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e0c1      	b.n	80010f8 <baro_init+0x1c8>
	}

	// Config barometer
	// T and P oversampling - 16, Normal mode
	// SPI 3 wire Off, Filter 2x, Standby duration - 62.5 ms
	data[0] = BARO_MODE_NORMAL | BARO_OSRS_T_1 | BARO_OSRS_P_1;
 8000f74:	4b62      	ldr	r3, [pc, #392]	; (8001100 <baro_init+0x1d0>)
 8000f76:	2227      	movs	r2, #39	; 0x27
 8000f78:	701a      	strb	r2, [r3, #0]
	data[1] = BARO_SPI3W_OFF | BARO_FILTER_OFF | BARO_T_SB_0_5;
 8000f7a:	4b61      	ldr	r3, [pc, #388]	; (8001100 <baro_init+0x1d0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Mem_Write(&hi2c1, BARO_I2C_ADDR, BARO_REG_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, data, 2, 1000);
 8000f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2302      	movs	r3, #2
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4b5d      	ldr	r3, [pc, #372]	; (8001100 <baro_init+0x1d0>)
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	22f4      	movs	r2, #244	; 0xf4
 8000f92:	21ec      	movs	r1, #236	; 0xec
 8000f94:	485b      	ldr	r0, [pc, #364]	; (8001104 <baro_init+0x1d4>)
 8000f96:	f003 f971 	bl	800427c <HAL_I2C_Mem_Write>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <baro_init+0x82>
		if (status == HAL_TIMEOUT)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d101      	bne.n	8000fae <baro_init+0x7e>
			return BARO_ERR_TIMEOUT;
 8000faa:	2302      	movs	r3, #2
 8000fac:	e0a4      	b.n	80010f8 <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0a2      	b.n	80010f8 <baro_init+0x1c8>
	}

	// Readout compensation values
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_CALIB00, I2C_MEMADD_SIZE_8BIT, data, 25, 1000);
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2319      	movs	r3, #25
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <baro_init+0x1d0>)
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	2288      	movs	r2, #136	; 0x88
 8000fc4:	21ec      	movs	r1, #236	; 0xec
 8000fc6:	484f      	ldr	r0, [pc, #316]	; (8001104 <baro_init+0x1d4>)
 8000fc8:	f003 fa52 	bl	8004470 <HAL_I2C_Mem_Read>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <baro_init+0xb4>
		if (status == HAL_TIMEOUT)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d101      	bne.n	8000fe0 <baro_init+0xb0>
			return BARO_ERR_TIMEOUT;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e08b      	b.n	80010f8 <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e089      	b.n	80010f8 <baro_init+0x1c8>
	}
	dig_T1 = (uint16_t)data [1] << 8 | (uint16_t)data [0];
 8000fe4:	4b46      	ldr	r3, [pc, #280]	; (8001100 <baro_init+0x1d0>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b44      	ldr	r3, [pc, #272]	; (8001100 <baro_init+0x1d0>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <baro_init+0x1d8>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	dig_T2 =  (int16_t)data [3] << 8 |  (int16_t)data [2];
 8000ffc:	4b40      	ldr	r3, [pc, #256]	; (8001100 <baro_init+0x1d0>)
 8000ffe:	78db      	ldrb	r3, [r3, #3]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <baro_init+0x1d0>)
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <baro_init+0x1dc>)
 8001010:	801a      	strh	r2, [r3, #0]
	dig_T3 =  (int16_t)data [5] << 8 |  (int16_t)data [4];
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <baro_init+0x1d0>)
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <baro_init+0x1d0>)
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <baro_init+0x1e0>)
 8001026:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)data [7] << 8 | (uint16_t)data [6];
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <baro_init+0x1d0>)
 800102a:	79db      	ldrb	r3, [r3, #7]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <baro_init+0x1d0>)
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <baro_init+0x1e4>)
 800103e:	801a      	strh	r2, [r3, #0]
	dig_P2 =  (int16_t)data [9] << 8 |  (int16_t)data [8];
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <baro_init+0x1d0>)
 8001042:	7a5b      	ldrb	r3, [r3, #9]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <baro_init+0x1d0>)
 800104a:	7a1b      	ldrb	r3, [r3, #8]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <baro_init+0x1e8>)
 8001054:	801a      	strh	r2, [r3, #0]
	dig_P3 =  (int16_t)data[11] << 8 |  (int16_t)data[10];
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <baro_init+0x1d0>)
 8001058:	7adb      	ldrb	r3, [r3, #11]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <baro_init+0x1d0>)
 8001060:	7a9b      	ldrb	r3, [r3, #10]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <baro_init+0x1ec>)
 800106a:	801a      	strh	r2, [r3, #0]
	dig_P4 =  (int16_t)data[13] << 8 |  (int16_t)data[12];
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <baro_init+0x1d0>)
 800106e:	7b5b      	ldrb	r3, [r3, #13]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <baro_init+0x1d0>)
 8001076:	7b1b      	ldrb	r3, [r3, #12]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <baro_init+0x1f0>)
 8001080:	801a      	strh	r2, [r3, #0]
	dig_P5 =  (int16_t)data[15] << 8 |  (int16_t)data[14];
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <baro_init+0x1d0>)
 8001084:	7bdb      	ldrb	r3, [r3, #15]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <baro_init+0x1d0>)
 800108c:	7b9b      	ldrb	r3, [r3, #14]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <baro_init+0x1f4>)
 8001096:	801a      	strh	r2, [r3, #0]
	dig_P6 =  (int16_t)data[17] << 8 |  (int16_t)data[16];
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <baro_init+0x1d0>)
 800109a:	7c5b      	ldrb	r3, [r3, #17]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <baro_init+0x1d0>)
 80010a2:	7c1b      	ldrb	r3, [r3, #16]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <baro_init+0x1f8>)
 80010ac:	801a      	strh	r2, [r3, #0]
	dig_P7 =  (int16_t)data[19] << 8 |  (int16_t)data[18];
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <baro_init+0x1d0>)
 80010b0:	7cdb      	ldrb	r3, [r3, #19]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <baro_init+0x1d0>)
 80010b8:	7c9b      	ldrb	r3, [r3, #18]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <baro_init+0x1fc>)
 80010c2:	801a      	strh	r2, [r3, #0]
	dig_P8 =  (int16_t)data[21] << 8 |  (int16_t)data[20];
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <baro_init+0x1d0>)
 80010c6:	7d5b      	ldrb	r3, [r3, #21]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <baro_init+0x1d0>)
 80010ce:	7d1b      	ldrb	r3, [r3, #20]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <baro_init+0x200>)
 80010d8:	801a      	strh	r2, [r3, #0]
	dig_P9 =  (int16_t)data[23] << 8 |  (int16_t)data[22];
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <baro_init+0x1d0>)
 80010dc:	7ddb      	ldrb	r3, [r3, #23]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <baro_init+0x1d0>)
 80010e4:	7d9b      	ldrb	r3, [r3, #22]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <baro_init+0x204>)
 80010ee:	801a      	strh	r2, [r3, #0]

	inited = true;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <baro_init+0x208>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]

	return BARO_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000b0 	.word	0x200000b0
 8001104:	2000011c 	.word	0x2000011c
 8001108:	20000090 	.word	0x20000090
 800110c:	20000094 	.word	0x20000094
 8001110:	20000096 	.word	0x20000096
 8001114:	20000092 	.word	0x20000092
 8001118:	20000098 	.word	0x20000098
 800111c:	2000009a 	.word	0x2000009a
 8001120:	2000009c 	.word	0x2000009c
 8001124:	2000009e 	.word	0x2000009e
 8001128:	200000a0 	.word	0x200000a0
 800112c:	200000a2 	.word	0x200000a2
 8001130:	200000a4 	.word	0x200000a4
 8001134:	200000a6 	.word	0x200000a6
 8001138:	200000ac 	.word	0x200000ac

0800113c <baro_read_temp>:

int32_t baro_read_temp(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af04      	add	r7, sp, #16
	int32_t var1, var2, temp;

	if (!inited)
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <baro_read_temp+0xc4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <baro_read_temp+0x1a>
		return INT32_MAX;
 8001150:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001154:	e050      	b.n	80011f8 <baro_read_temp+0xbc>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2303      	movs	r3, #3
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <baro_read_temp+0xc8>)
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	22fa      	movs	r2, #250	; 0xfa
 8001168:	21ec      	movs	r1, #236	; 0xec
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <baro_read_temp+0xcc>)
 800116c:	f003 f980 	bl	8004470 <HAL_I2C_Mem_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <baro_read_temp+0x44>
		return INT32_MAX;
 800117a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800117e:	e03b      	b.n	80011f8 <baro_read_temp+0xbc>
	}
	int32_t adc_T = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <baro_read_temp+0xc8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	031a      	lsls	r2, r3, #12
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <baro_read_temp+0xc8>)
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4313      	orrs	r3, r2
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <baro_read_temp+0xc8>)
 8001190:	7892      	ldrb	r2, [r2, #2]
 8001192:	0912      	lsrs	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]

	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	10da      	asrs	r2, r3, #3
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <baro_read_temp+0xd0>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1ad3      	subs	r3, r2, r3
		   ((int32_t)dig_T2)) >> 11;
 80011a6:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <baro_read_temp+0xd4>)
 80011a8:	f9b2 2000 	ldrsh.w	r2, [r2]
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	12db      	asrs	r3, r3, #11
 80011b2:	60fb      	str	r3, [r7, #12]

	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	111b      	asrs	r3, r3, #4
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <baro_read_temp+0xd0>)
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	1112      	asrs	r2, r2, #4
 80011c2:	4912      	ldr	r1, [pc, #72]	; (800120c <baro_read_temp+0xd0>)
 80011c4:	8809      	ldrh	r1, [r1, #0]
 80011c6:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80011cc:	131b      	asrs	r3, r3, #12
		      ((int32_t)dig_T3)) >> 14;
 80011ce:	4a11      	ldr	r2, [pc, #68]	; (8001214 <baro_read_temp+0xd8>)
 80011d0:	f9b2 2000 	ldrsh.w	r2, [r2]
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80011d8:	139b      	asrs	r3, r3, #14
 80011da:	60bb      	str	r3, [r7, #8]

	t_fine = var1 + var2;
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <baro_read_temp+0xdc>)
 80011e4:	6013      	str	r3, [r2, #0]

	temp = (t_fine * 5 + 128) >> 8;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <baro_read_temp+0xdc>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3380      	adds	r3, #128	; 0x80
 80011f2:	121b      	asrs	r3, r3, #8
 80011f4:	607b      	str	r3, [r7, #4]

	return temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000ac 	.word	0x200000ac
 8001204:	200000b0 	.word	0x200000b0
 8001208:	2000011c 	.word	0x2000011c
 800120c:	20000090 	.word	0x20000090
 8001210:	20000094 	.word	0x20000094
 8001214:	20000096 	.word	0x20000096
 8001218:	200000a8 	.word	0x200000a8

0800121c <baro_read_press>:

uint32_t baro_read_press(void) {
 800121c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001220:	b0d0      	sub	sp, #320	; 0x140
 8001222:	af04      	add	r7, sp, #16
	int64_t var1, var2, p;

	if (!inited)
 8001224:	4bc6      	ldr	r3, [pc, #792]	; (8001540 <baro_read_press+0x324>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <baro_read_press+0x1c>
		return INT32_MAX;
 8001232:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001236:	e2f6      	b.n	8001826 <baro_read_press+0x60a>

	if (baro_read_temp() == INT32_MAX)
 8001238:	f7ff ff80 	bl	800113c <baro_read_temp>
 800123c:	4602      	mov	r2, r0
 800123e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001242:	429a      	cmp	r2, r3
 8001244:	d102      	bne.n	800124c <baro_read_press+0x30>
		return UINT32_MAX;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e2ec      	b.n	8001826 <baro_read_press+0x60a>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2303      	movs	r3, #3
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	4bbb      	ldr	r3, [pc, #748]	; (8001544 <baro_read_press+0x328>)
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	22f7      	movs	r2, #247	; 0xf7
 800125e:	21ec      	movs	r1, #236	; 0xec
 8001260:	48b9      	ldr	r0, [pc, #740]	; (8001548 <baro_read_press+0x32c>)
 8001262:	f003 f905 	bl	8004470 <HAL_I2C_Mem_Read>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (status != HAL_OK) {
 800126c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <baro_read_press+0x5e>
		return INT32_MAX;
 8001274:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001278:	e2d5      	b.n	8001826 <baro_read_press+0x60a>
	}
	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800127a:	4bb2      	ldr	r3, [pc, #712]	; (8001544 <baro_read_press+0x328>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	031a      	lsls	r2, r3, #12
 8001280:	4bb0      	ldr	r3, [pc, #704]	; (8001544 <baro_read_press+0x328>)
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	431a      	orrs	r2, r3
 8001288:	4bae      	ldr	r3, [pc, #696]	; (8001544 <baro_read_press+0x328>)
 800128a:	789b      	ldrb	r3, [r3, #2]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	var1 = ((int64_t)t_fine) - 128000;
 8001296:	4bad      	ldr	r3, [pc, #692]	; (800154c <baro_read_press+0x330>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	17da      	asrs	r2, r3, #31
 800129c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80012a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80012a4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80012a8:	460b      	mov	r3, r1
 80012aa:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80012ae:	653b      	str	r3, [r7, #80]	; 0x50
 80012b0:	4613      	mov	r3, r2
 80012b2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80012b6:	657b      	str	r3, [r7, #84]	; 0x54
 80012b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012bc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80012c0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012c8:	fb03 f102 	mul.w	r1, r3, r2
 80012cc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	18ca      	adds	r2, r1, r3
 80012da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012de:	fba3 4503 	umull	r4, r5, r3, r3
 80012e2:	1953      	adds	r3, r2, r5
 80012e4:	461d      	mov	r5, r3
 80012e6:	4b9a      	ldr	r3, [pc, #616]	; (8001550 <baro_read_press+0x334>)
 80012e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	17da      	asrs	r2, r3, #31
 80012f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80012f4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80012f8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80012fc:	4603      	mov	r3, r0
 80012fe:	fb03 f205 	mul.w	r2, r3, r5
 8001302:	460b      	mov	r3, r1
 8001304:	fb04 f303 	mul.w	r3, r4, r3
 8001308:	4413      	add	r3, r2
 800130a:	4602      	mov	r2, r0
 800130c:	fba4 8902 	umull	r8, r9, r4, r2
 8001310:	444b      	add	r3, r9
 8001312:	4699      	mov	r9, r3
 8001314:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8001318:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 800131c:	4b8d      	ldr	r3, [pc, #564]	; (8001554 <baro_read_press+0x338>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	b21b      	sxth	r3, r3
 8001324:	17da      	asrs	r2, r3, #31
 8001326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800132a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800132e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001332:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001336:	462a      	mov	r2, r5
 8001338:	fb02 f203 	mul.w	r2, r2, r3
 800133c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001340:	4621      	mov	r1, r4
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	441a      	add	r2, r3
 8001348:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800134c:	4621      	mov	r1, r4
 800134e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001352:	eb02 030b 	add.w	r3, r2, fp
 8001356:	469b      	mov	fp, r3
 8001358:	f04f 0000 	mov.w	r0, #0
 800135c:	f04f 0100 	mov.w	r1, #0
 8001360:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001364:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001368:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800136c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001370:	1814      	adds	r4, r2, r0
 8001372:	64bc      	str	r4, [r7, #72]	; 0x48
 8001374:	414b      	adcs	r3, r1
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001378:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800137c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8001380:	4b75      	ldr	r3, [pc, #468]	; (8001558 <baro_read_press+0x33c>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	b21b      	sxth	r3, r3
 8001388:	17da      	asrs	r2, r3, #31
 800138a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800138e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001392:	f04f 0000 	mov.w	r0, #0
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800139e:	00d9      	lsls	r1, r3, #3
 80013a0:	2000      	movs	r0, #0
 80013a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80013a6:	1814      	adds	r4, r2, r0
 80013a8:	643c      	str	r4, [r7, #64]	; 0x40
 80013aa:	414b      	adcs	r3, r1
 80013ac:	647b      	str	r3, [r7, #68]	; 0x44
 80013ae:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80013b2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 80013b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013be:	fb03 f102 	mul.w	r1, r3, r2
 80013c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	18ca      	adds	r2, r1, r3
 80013d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013d4:	fba3 1303 	umull	r1, r3, r3, r3
 80013d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013dc:	460b      	mov	r3, r1
 80013de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80013e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013e6:	18d3      	adds	r3, r2, r3
 80013e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013ec:	4b5b      	ldr	r3, [pc, #364]	; (800155c <baro_read_press+0x340>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	17da      	asrs	r2, r3, #31
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80013fa:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80013fe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001402:	462b      	mov	r3, r5
 8001404:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8001408:	4642      	mov	r2, r8
 800140a:	fb02 f203 	mul.w	r2, r2, r3
 800140e:	464b      	mov	r3, r9
 8001410:	4621      	mov	r1, r4
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	4622      	mov	r2, r4
 800141a:	4641      	mov	r1, r8
 800141c:	fba2 1201 	umull	r1, r2, r2, r1
 8001420:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001424:	460a      	mov	r2, r1
 8001426:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800142a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800142e:	4413      	add	r3, r2
 8001430:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001434:	f04f 0000 	mov.w	r0, #0
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001440:	4623      	mov	r3, r4
 8001442:	0a18      	lsrs	r0, r3, #8
 8001444:	462b      	mov	r3, r5
 8001446:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800144a:	462b      	mov	r3, r5
 800144c:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)dig_P2) << 12);
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <baro_read_press+0x344>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	b21b      	sxth	r3, r3
 8001456:	17da      	asrs	r2, r3, #31
 8001458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800145c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001460:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001464:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001468:	464a      	mov	r2, r9
 800146a:	fb02 f203 	mul.w	r2, r2, r3
 800146e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001472:	4644      	mov	r4, r8
 8001474:	fb04 f303 	mul.w	r3, r4, r3
 8001478:	441a      	add	r2, r3
 800147a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800147e:	4644      	mov	r4, r8
 8001480:	fba3 4304 	umull	r4, r3, r3, r4
 8001484:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001488:	4623      	mov	r3, r4
 800148a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800148e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80014a4:	464c      	mov	r4, r9
 80014a6:	0323      	lsls	r3, r4, #12
 80014a8:	4644      	mov	r4, r8
 80014aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80014ae:	4644      	mov	r4, r8
 80014b0:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 80014b2:	1884      	adds	r4, r0, r2
 80014b4:	63bc      	str	r4, [r7, #56]	; 0x38
 80014b6:	eb41 0303 	adc.w	r3, r1, r3
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014bc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80014c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 80014c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014c8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80014cc:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80014d0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <baro_read_press+0x348>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014e4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80014e8:	462b      	mov	r3, r5
 80014ea:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80014ee:	4642      	mov	r2, r8
 80014f0:	fb02 f203 	mul.w	r2, r2, r3
 80014f4:	464b      	mov	r3, r9
 80014f6:	4621      	mov	r1, r4
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	4622      	mov	r2, r4
 8001500:	4641      	mov	r1, r8
 8001502:	fba2 1201 	umull	r1, r2, r2, r1
 8001506:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800150a:	460a      	mov	r2, r1
 800150c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001510:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001514:	4413      	add	r3, r2
 8001516:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001526:	4629      	mov	r1, r5
 8001528:	104a      	asrs	r2, r1, #1
 800152a:	4629      	mov	r1, r5
 800152c:	17cb      	asrs	r3, r1, #31
 800152e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0) {
 8001532:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001536:	4313      	orrs	r3, r2
 8001538:	d116      	bne.n	8001568 <baro_read_press+0x34c>
		return 0; // avoid exception caused by division by zero
 800153a:	2300      	movs	r3, #0
 800153c:	e173      	b.n	8001826 <baro_read_press+0x60a>
 800153e:	bf00      	nop
 8001540:	200000ac 	.word	0x200000ac
 8001544:	200000b0 	.word	0x200000b0
 8001548:	2000011c 	.word	0x2000011c
 800154c:	200000a8 	.word	0x200000a8
 8001550:	200000a0 	.word	0x200000a0
 8001554:	2000009e 	.word	0x2000009e
 8001558:	2000009c 	.word	0x2000009c
 800155c:	2000009a 	.word	0x2000009a
 8001560:	20000098 	.word	0x20000098
 8001564:	20000092 	.word	0x20000092
	}
	p = 1048576 - adc_P;
 8001568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800156c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001570:	17da      	asrs	r2, r3, #31
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
 8001574:	637a      	str	r2, [r7, #52]	; 0x34
 8001576:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800157a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 800157e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001582:	105b      	asrs	r3, r3, #1
 8001584:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001588:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800158c:	07db      	lsls	r3, r3, #31
 800158e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001592:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800159a:	4621      	mov	r1, r4
 800159c:	1a89      	subs	r1, r1, r2
 800159e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80015a2:	4629      	mov	r1, r5
 80015a4:	eb61 0303 	sbc.w	r3, r1, r3
 80015a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ac:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80015b0:	4622      	mov	r2, r4
 80015b2:	462b      	mov	r3, r5
 80015b4:	1891      	adds	r1, r2, r2
 80015b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80015b8:	415b      	adcs	r3, r3
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015c0:	4621      	mov	r1, r4
 80015c2:	1851      	adds	r1, r2, r1
 80015c4:	6239      	str	r1, [r7, #32]
 80015c6:	4629      	mov	r1, r5
 80015c8:	414b      	adcs	r3, r1
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015d8:	4649      	mov	r1, r9
 80015da:	018b      	lsls	r3, r1, #6
 80015dc:	4641      	mov	r1, r8
 80015de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015e2:	4641      	mov	r1, r8
 80015e4:	018a      	lsls	r2, r1, #6
 80015e6:	4641      	mov	r1, r8
 80015e8:	1889      	adds	r1, r1, r2
 80015ea:	61b9      	str	r1, [r7, #24]
 80015ec:	4649      	mov	r1, r9
 80015ee:	eb43 0101 	adc.w	r1, r3, r1
 80015f2:	61f9      	str	r1, [r7, #28]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001600:	4649      	mov	r1, r9
 8001602:	008b      	lsls	r3, r1, #2
 8001604:	4641      	mov	r1, r8
 8001606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800160a:	4641      	mov	r1, r8
 800160c:	008a      	lsls	r2, r1, #2
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	4603      	mov	r3, r0
 8001614:	4622      	mov	r2, r4
 8001616:	189b      	adds	r3, r3, r2
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	460b      	mov	r3, r1
 800161c:	462a      	mov	r2, r5
 800161e:	eb42 0303 	adc.w	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001630:	4649      	mov	r1, r9
 8001632:	008b      	lsls	r3, r1, #2
 8001634:	4641      	mov	r1, r8
 8001636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800163a:	4641      	mov	r1, r8
 800163c:	008a      	lsls	r2, r1, #2
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	4603      	mov	r3, r0
 8001644:	4622      	mov	r2, r4
 8001646:	189b      	adds	r3, r3, r2
 8001648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800164c:	462b      	mov	r3, r5
 800164e:	460a      	mov	r2, r1
 8001650:	eb42 0303 	adc.w	r3, r2, r3
 8001654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001658:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800165c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001660:	f7ff fa94 	bl	8000b8c <__aeabi_ldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800166c:	4b71      	ldr	r3, [pc, #452]	; (8001834 <baro_read_press+0x618>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	b21b      	sxth	r3, r3
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	67bb      	str	r3, [r7, #120]	; 0x78
 8001678:	67fa      	str	r2, [r7, #124]	; 0x7c
 800167a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800167e:	f04f 0000 	mov.w	r0, #0
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	0b50      	lsrs	r0, r2, #13
 8001688:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800168c:	1359      	asrs	r1, r3, #13
 800168e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001692:	462b      	mov	r3, r5
 8001694:	fb00 f203 	mul.w	r2, r0, r3
 8001698:	4623      	mov	r3, r4
 800169a:	fb03 f301 	mul.w	r3, r3, r1
 800169e:	4413      	add	r3, r2
 80016a0:	4622      	mov	r2, r4
 80016a2:	fba2 1200 	umull	r1, r2, r2, r0
 80016a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016aa:	460a      	mov	r2, r1
 80016ac:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80016b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80016b4:	4413      	add	r3, r2
 80016b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016ba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0b50      	lsrs	r0, r2, #13
 80016c8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016cc:	1359      	asrs	r1, r3, #13
 80016ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80016d2:	462b      	mov	r3, r5
 80016d4:	fb00 f203 	mul.w	r2, r0, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	fb03 f301 	mul.w	r3, r3, r1
 80016de:	4413      	add	r3, r2
 80016e0:	4622      	mov	r2, r4
 80016e2:	fba2 1200 	umull	r1, r2, r2, r0
 80016e6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80016ea:	460a      	mov	r2, r1
 80016ec:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80016f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016f4:	4413      	add	r3, r2
 80016f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001706:	4621      	mov	r1, r4
 8001708:	0e4a      	lsrs	r2, r1, #25
 800170a:	4629      	mov	r1, r5
 800170c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001710:	4629      	mov	r1, r5
 8001712:	164b      	asrs	r3, r1, #25
 8001714:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <baro_read_press+0x61c>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	b21b      	sxth	r3, r3
 8001720:	17da      	asrs	r2, r3, #31
 8001722:	673b      	str	r3, [r7, #112]	; 0x70
 8001724:	677a      	str	r2, [r7, #116]	; 0x74
 8001726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800172a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800172e:	462a      	mov	r2, r5
 8001730:	fb02 f203 	mul.w	r2, r2, r3
 8001734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	441a      	add	r2, r3
 8001740:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001744:	4621      	mov	r1, r4
 8001746:	fba3 1301 	umull	r1, r3, r3, r1
 800174a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800174e:	460b      	mov	r3, r1
 8001750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001758:	18d3      	adds	r3, r2, r3
 800175a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800176a:	4621      	mov	r1, r4
 800176c:	0cca      	lsrs	r2, r1, #19
 800176e:	4629      	mov	r1, r5
 8001770:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001774:	4629      	mov	r1, r5
 8001776:	14cb      	asrs	r3, r1, #19
 8001778:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 800177c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001780:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001784:	1884      	adds	r4, r0, r2
 8001786:	66bc      	str	r4, [r7, #104]	; 0x68
 8001788:	eb41 0303 	adc.w	r3, r1, r3
 800178c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800178e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001792:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001796:	4621      	mov	r1, r4
 8001798:	1889      	adds	r1, r1, r2
 800179a:	6639      	str	r1, [r7, #96]	; 0x60
 800179c:	4629      	mov	r1, r5
 800179e:	eb43 0101 	adc.w	r1, r3, r1
 80017a2:	6679      	str	r1, [r7, #100]	; 0x64
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017b0:	4623      	mov	r3, r4
 80017b2:	0a18      	lsrs	r0, r3, #8
 80017b4:	462b      	mov	r3, r5
 80017b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017ba:	462b      	mov	r3, r5
 80017bc:	1219      	asrs	r1, r3, #8
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <baro_read_press+0x620>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	17da      	asrs	r2, r3, #31
 80017c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80017d8:	464c      	mov	r4, r9
 80017da:	0123      	lsls	r3, r4, #4
 80017dc:	4644      	mov	r4, r8
 80017de:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017e2:	4644      	mov	r4, r8
 80017e4:	0122      	lsls	r2, r4, #4
 80017e6:	1884      	adds	r4, r0, r2
 80017e8:	60bc      	str	r4, [r7, #8]
 80017ea:	eb41 0303 	adc.w	r3, r1, r3
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017f4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return p / 256;
 80017f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da07      	bge.n	8001810 <baro_read_press+0x5f4>
 8001800:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	f143 0300 	adc.w	r3, r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	0a10      	lsrs	r0, r2, #8
 800181a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800181e:	1219      	asrs	r1, r3, #8
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4613      	mov	r3, r2

}
 8001826:	4618      	mov	r0, r3
 8001828:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800182c:	46bd      	mov	sp, r7
 800182e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001832:	bf00      	nop
 8001834:	200000a6 	.word	0x200000a6
 8001838:	200000a4 	.word	0x200000a4
 800183c:	200000a2 	.word	0x200000a2

08001840 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2110      	movs	r1, #16
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <lcd_start_write+0x14>)
 800184a:	f002 fb87 	bl	8003f5c <HAL_GPIO_WritePin>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020000 	.word	0x40020000

08001858 <lcd_end_write>:

static void lcd_end_write(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	2110      	movs	r1, #16
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <lcd_end_write+0x14>)
 8001862:	f002 fb7b 	bl	8003f5c <HAL_GPIO_WritePin>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40020000 	.word	0x40020000

08001870 <lcd_start_command>:

static void lcd_start_command(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <lcd_start_command+0x14>)
 800187a:	f002 fb6f 	bl	8003f5c <HAL_GPIO_WritePin>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020000 	.word	0x40020000

08001888 <lcd_start_data>:

static void lcd_start_data(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <lcd_start_data+0x14>)
 8001892:	f002 fb63 	bl	8003f5c <HAL_GPIO_WritePin>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020000 	.word	0x40020000

080018a0 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 80018aa:	f7ff ffe1 	bl	8001870 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80018ae:	1df9      	adds	r1, r7, #7
 80018b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b4:	2201      	movs	r2, #1
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <lcd_spi_send_com+0x30>)
 80018b8:	f004 f83d 	bl	8005936 <HAL_SPI_Transmit>
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d000      	beq.n	80018c8 <lcd_spi_send_com+0x28>
		while (1) {}
 80018c6:	e7fe      	b.n	80018c6 <lcd_spi_send_com+0x26>
	}
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000170 	.word	0x20000170

080018d4 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00f      	beq.n	8001904 <lcd_spi_send_data+0x30>
		lcd_start_data();
 80018e4:	f7ff ffd0 	bl	8001888 <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <lcd_spi_send_data+0x38>)
 80018f4:	f004 f81f 	bl	8005936 <HAL_SPI_Transmit>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d000      	beq.n	8001904 <lcd_spi_send_data+0x30>
			while (1) {}
 8001902:	e7fe      	b.n	8001902 <lcd_spi_send_data+0x2e>
		}
	}
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000170 	.word	0x20000170

08001910 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	4604      	mov	r4, r0
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4623      	mov	r3, r4
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	4603      	mov	r3, r0
 8001924:	80bb      	strh	r3, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <lcd_set_window+0xc4>)
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	4413      	add	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <lcd_set_window+0xc8>)
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	733b      	strb	r3, [r7, #12]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	737b      	strb	r3, [r7, #13]
 8001952:	88fa      	ldrh	r2, [r7, #6]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4413      	add	r3, r2
 8001958:	3b01      	subs	r3, #1
 800195a:	121b      	asrs	r3, r3, #8
 800195c:	b2db      	uxtb	r3, r3
 800195e:	73bb      	strb	r3, [r7, #14]
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4413      	add	r3, r2
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	723b      	strb	r3, [r7, #8]
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	727b      	strb	r3, [r7, #9]
 8001982:	88ba      	ldrh	r2, [r7, #4]
 8001984:	883b      	ldrh	r3, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	3b01      	subs	r3, #1
 800198a:	121b      	asrs	r3, r3, #8
 800198c:	b2db      	uxtb	r3, r3
 800198e:	72bb      	strb	r3, [r7, #10]
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	883b      	ldrh	r3, [r7, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4413      	add	r3, r2
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3b01      	subs	r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 80019a2:	202a      	movs	r0, #42	; 0x2a
 80019a4:	f7ff ff7c 	bl	80018a0 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2104      	movs	r1, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff90 	bl	80018d4 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80019b4:	202b      	movs	r0, #43	; 0x2b
 80019b6:	f7ff ff73 	bl	80018a0 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2104      	movs	r1, #4
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff87 	bl	80018d4 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 80019c6:	202c      	movs	r0, #44	; 0x2c
 80019c8:	f7ff ff6a 	bl	80018a0 <lcd_spi_send_com>
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	200000ca 	.word	0x200000ca
 80019d8:	200000cc 	.word	0x200000cc

080019dc <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <lcd_init+0xd4>)
 80019e4:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2108      	movs	r1, #8
 80019ea:	4832      	ldr	r0, [pc, #200]	; (8001ab4 <lcd_init+0xd8>)
 80019ec:	f002 fab6 	bl	8003f5c <HAL_GPIO_WritePin>
	osDelay(100);
 80019f0:	2064      	movs	r0, #100	; 0x64
 80019f2:	f005 fa51 	bl	8006e98 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2108      	movs	r1, #8
 80019fa:	482e      	ldr	r0, [pc, #184]	; (8001ab4 <lcd_init+0xd8>)
 80019fc:	f002 faae 	bl	8003f5c <HAL_GPIO_WritePin>
	osDelay(100);
 8001a00:	2064      	movs	r0, #100	; 0x64
 8001a02:	f005 fa49 	bl	8006e98 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	2108      	movs	r1, #8
 8001a0a:	482a      	ldr	r0, [pc, #168]	; (8001ab4 <lcd_init+0xd8>)
 8001a0c:	f002 faa6 	bl	8003f5c <HAL_GPIO_WritePin>
	osDelay(100);
 8001a10:	2064      	movs	r0, #100	; 0x64
 8001a12:	f005 fa41 	bl	8006e98 <osDelay>

	numCommands = *ptr++;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8001a20:	e035      	b.n	8001a8e <lcd_init+0xb2>
		cmd = *ptr++;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a46:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 8001a48:	f7ff fefa 	bl	8001840 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff26 	bl	80018a0 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	4619      	mov	r1, r3
 8001a58:	68b8      	ldr	r0, [r7, #8]
 8001a5a:	f7ff ff3b 	bl	80018d4 <lcd_spi_send_data>
		lcd_end_write();
 8001a5e:	f7ff fefb 	bl	8001858 <lcd_end_write>
		ptr += numArgs;
 8001a62:	79bb      	ldrb	r3, [r7, #6]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	4413      	add	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]

		if (ms) {
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <lcd_init+0xb2>
			ms = *ptr++;
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	2bff      	cmp	r3, #255	; 0xff
 8001a7e:	d102      	bne.n	8001a86 <lcd_init+0xaa>
				ms = 500;
 8001a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a84:	81bb      	strh	r3, [r7, #12]
			osDelay(ms);
 8001a86:	89bb      	ldrh	r3, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f005 fa05 	bl	8006e98 <osDelay>
	while (numCommands--) {
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	73fa      	strb	r2, [r7, #15]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1c4      	bne.n	8001a22 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 8001a98:	f7ff fed2 	bl	8001840 <lcd_start_write>
	lcd_set_rotation(2);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f000 f80b 	bl	8001ab8 <lcd_set_rotation>
	lcd_end_write();
 8001aa2:	f7ff fed9 	bl	8001858 <lcd_end_write>

	return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	0800cf94 	.word	0x0800cf94
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <lcd_set_rotation+0xec>)
 8001ad0:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <lcd_set_rotation+0xec>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d856      	bhi.n	8001b88 <lcd_set_rotation+0xd0>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <lcd_set_rotation+0x28>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001af1 	.word	0x08001af1
 8001ae4:	08001b17 	.word	0x08001b17
 8001ae8:	08001b3d 	.word	0x08001b3d
 8001aec:	08001b63 	.word	0x08001b63
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8001af0:	23c0      	movs	r3, #192	; 0xc0
 8001af2:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8001af4:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <lcd_set_rotation+0xf0>)
 8001af6:	22a0      	movs	r2, #160	; 0xa0
 8001af8:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <lcd_set_rotation+0xf4>)
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <lcd_set_rotation+0xf8>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <lcd_set_rotation+0xfc>)
 8001b08:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <lcd_set_rotation+0x100>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <lcd_set_rotation+0x104>)
 8001b12:	801a      	strh	r2, [r3, #0]
		break;
 8001b14:	e038      	b.n	8001b88 <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8001b16:	23a0      	movs	r3, #160	; 0xa0
 8001b18:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <lcd_set_rotation+0xf4>)
 8001b1c:	22a0      	movs	r2, #160	; 0xa0
 8001b1e:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <lcd_set_rotation+0xf0>)
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <lcd_set_rotation+0xf8>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <lcd_set_rotation+0x104>)
 8001b2e:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <lcd_set_rotation+0x100>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <lcd_set_rotation+0xfc>)
 8001b38:	801a      	strh	r2, [r3, #0]
		break;
 8001b3a:	e025      	b.n	8001b88 <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <lcd_set_rotation+0xf0>)
 8001b42:	22a0      	movs	r2, #160	; 0xa0
 8001b44:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <lcd_set_rotation+0xf4>)
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <lcd_set_rotation+0xf8>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <lcd_set_rotation+0xfc>)
 8001b54:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <lcd_set_rotation+0x100>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <lcd_set_rotation+0x104>)
 8001b5e:	801a      	strh	r2, [r3, #0]
		break;
 8001b60:	e012      	b.n	8001b88 <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8001b62:	2368      	movs	r3, #104	; 0x68
 8001b64:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <lcd_set_rotation+0xf4>)
 8001b68:	22a0      	movs	r2, #160	; 0xa0
 8001b6a:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <lcd_set_rotation+0xf0>)
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <lcd_set_rotation+0xf8>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <lcd_set_rotation+0x104>)
 8001b7a:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <lcd_set_rotation+0x100>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <lcd_set_rotation+0xfc>)
 8001b84:	801a      	strh	r2, [r3, #0]
		break;
 8001b86:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 8001b88:	2036      	movs	r0, #54	; 0x36
 8001b8a:	f7ff fe89 	bl	80018a0 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 8001b8e:	f107 030f 	add.w	r3, r7, #15
 8001b92:	2101      	movs	r1, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fe9d 	bl	80018d4 <lcd_spi_send_data>
	return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000c9 	.word	0x200000c9
 8001ba8:	200000d0 	.word	0x200000d0
 8001bac:	200000ce 	.word	0x200000ce
 8001bb0:	200000d2 	.word	0x200000d2
 8001bb4:	200000ca 	.word	0x200000ca
 8001bb8:	200000d3 	.word	0x200000d3
 8001bbc:	200000cc 	.word	0x200000cc

08001bc0 <lcd_vline>:
		lcd_spi_send_data(c, 2);
		lcd_end_write();
	}
}

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80bb      	strh	r3, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8001bde:	f7ff fe2f 	bl	8001840 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	88b9      	ldrh	r1, [r7, #4]
 8001be6:	88f8      	ldrh	r0, [r7, #6]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f7ff fe91 	bl	8001910 <lcd_set_window>
	lcd_start_data();
 8001bee:	f7ff fe4b 	bl	8001888 <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 8001bf2:	883b      	ldrh	r3, [r7, #0]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	733b      	strb	r3, [r7, #12]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2102      	movs	r1, #2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fe63 	bl	80018d4 <lcd_spi_send_data>
	while (h--);
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	807a      	strh	r2, [r7, #2]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f4      	bne.n	8001c02 <lcd_vline+0x42>
	lcd_end_write();
 8001c18:	f7ff fe1e 	bl	8001858 <lcd_end_write>
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}

08001c24 <lcd_fill_rect>:
	lcd_vline(x+w, y, h, color);
	lcd_hline(x, y, w, color);
	lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	4603      	mov	r3, r0
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	807b      	strh	r3, [r7, #2]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	803b      	strh	r3, [r7, #0]
	if (x < 0) x = 0;
 8001c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da01      	bge.n	8001c4e <lcd_fill_rect+0x2a>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	80fb      	strh	r3, [r7, #6]
	if (y < 0) y = 0;
 8001c4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da01      	bge.n	8001c5a <lcd_fill_rect+0x36>
 8001c56:	2300      	movs	r3, #0
 8001c58:	80bb      	strh	r3, [r7, #4]
	if (x + w > _width) w = _width - x;
 8001c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <lcd_fill_rect+0xc4>)
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	dd05      	ble.n	8001c78 <lcd_fill_rect+0x54>
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <lcd_fill_rect+0xc4>)
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	807b      	strh	r3, [r7, #2]
	if (y + h > _height) h = _height - y;
 8001c78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <lcd_fill_rect+0xc8>)
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	dd05      	ble.n	8001c96 <lcd_fill_rect+0x72>
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <lcd_fill_rect+0xc8>)
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8001c96:	f7ff fdd3 	bl	8001840 <lcd_start_write>
	lcd_set_window(x, y, w, h);
 8001c9a:	88f8      	ldrh	r0, [r7, #6]
 8001c9c:	88b9      	ldrh	r1, [r7, #4]
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	883b      	ldrh	r3, [r7, #0]
 8001ca2:	f7ff fe35 	bl	8001910 <lcd_set_window>
	uint8_t c[2] = { color >> 8, color};
 8001ca6:	8c3b      	ldrh	r3, [r7, #32]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	723b      	strb	r3, [r7, #8]
 8001cb0:	8c3b      	ldrh	r3, [r7, #32]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	727b      	strb	r3, [r7, #9]
	uint32_t cnt = w * h;
 8001cb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
	while (cnt--)
 8001cc4:	e005      	b.n	8001cd2 <lcd_fill_rect+0xae>
		lcd_spi_send_data(c, 2);
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fe01 	bl	80018d4 <lcd_spi_send_data>
	while (cnt--)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	60fa      	str	r2, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f4      	bne.n	8001cc6 <lcd_fill_rect+0xa2>
	lcd_end_write();
 8001cdc:	f7ff fdbc 	bl	8001858 <lcd_end_write>
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	200000ce 	.word	0x200000ce
 8001cec:	200000d0 	.word	0x200000d0

08001cf0 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
	lcd_fill_rect(0, 0, _width, _height, color);
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <lcd_fill+0x2c>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <lcd_fill+0x30>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b219      	sxth	r1, r3
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff ff88 	bl	8001c24 <lcd_fill_rect>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200000ce 	.word	0x200000ce
 8001d20:	200000d0 	.word	0x200000d0

08001d24 <lcd_fill_circle>:
    lcd_pixel(x0 - y, y0 - x, color);
  }
  lcd_end_write();
}

void lcd_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	80fb      	strh	r3, [r7, #6]
 8001d36:	4603      	mov	r3, r0
 8001d38:	80bb      	strh	r3, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	807b      	strh	r3, [r7, #2]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	f1c3 0301 	rsb	r3, r3, #1
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	461a      	mov	r2, r3
 8001d54:	03d2      	lsls	r2, r2, #15
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	81fb      	strh	r3, [r7, #14]
	int16_t px = x;
 8001d66:	8a3b      	ldrh	r3, [r7, #16]
 8001d68:	81bb      	strh	r3, [r7, #12]
	int16_t py = y;
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
 8001d6c:	817b      	strh	r3, [r7, #10]

	while (x < y) {
 8001d6e:	e071      	b.n	8001e54 <lcd_fill_circle+0x130>
		if (f >= 0) {
 8001d70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0e      	blt.n	8001d96 <lcd_fill_circle+0x72>
			y--;
 8001d78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001d84:	8a7b      	ldrh	r3, [r7, #18]
 8001d86:	3302      	adds	r3, #2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001d8c:	8afa      	ldrh	r2, [r7, #22]
 8001d8e:	8a7b      	ldrh	r3, [r7, #18]
 8001d90:	4413      	add	r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001d96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001da2:	8abb      	ldrh	r3, [r7, #20]
 8001da4:	3302      	adds	r3, #2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001daa:	8afa      	ldrh	r2, [r7, #22]
 8001dac:	8abb      	ldrh	r3, [r7, #20]
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	82fb      	strh	r3, [r7, #22]
		if (x < (y + 1)) {
 8001db4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001db8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	db1f      	blt.n	8001e00 <lcd_fill_circle+0xdc>
			lcd_vline(x0 + x, y0 - y, 2 * y + 1, color);
 8001dc0:	88fa      	ldrh	r2, [r7, #6]
 8001dc2:	8a3b      	ldrh	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	88ba      	ldrh	r2, [r7, #4]
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	b299      	uxth	r1, r3
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	883b      	ldrh	r3, [r7, #0]
 8001ddc:	f7ff fef0 	bl	8001bc0 <lcd_vline>
			lcd_vline(x0 - x, y0 - y, 2 * y + 1, color);
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	8a3b      	ldrh	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	b298      	uxth	r0, r3
 8001de8:	88ba      	ldrh	r2, [r7, #4]
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	b299      	uxth	r1, r3
 8001df0:	89fb      	ldrh	r3, [r7, #14]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	f7ff fee0 	bl	8001bc0 <lcd_vline>
		}
		if (y != py) {
 8001e00:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d021      	beq.n	8001e50 <lcd_fill_circle+0x12c>
			lcd_vline(x0 + py, y0 - px, 2 * px + 1, color);
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	4413      	add	r3, r2
 8001e12:	b298      	uxth	r0, r3
 8001e14:	88ba      	ldrh	r2, [r7, #4]
 8001e16:	89bb      	ldrh	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	89bb      	ldrh	r3, [r7, #12]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	883b      	ldrh	r3, [r7, #0]
 8001e28:	f7ff feca 	bl	8001bc0 <lcd_vline>
			lcd_vline(x0 - py, y0 - px, 2 * px + 1, color);
 8001e2c:	88fa      	ldrh	r2, [r7, #6]
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b298      	uxth	r0, r3
 8001e34:	88ba      	ldrh	r2, [r7, #4]
 8001e36:	89bb      	ldrh	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	89bb      	ldrh	r3, [r7, #12]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	883b      	ldrh	r3, [r7, #0]
 8001e48:	f7ff feba 	bl	8001bc0 <lcd_vline>
			py = y;
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
 8001e4e:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 8001e50:	8a3b      	ldrh	r3, [r7, #16]
 8001e52:	81bb      	strh	r3, [r7, #12]
	while (x < y) {
 8001e54:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	db87      	blt.n	8001d70 <lcd_fill_circle+0x4c>
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
 8001e60:	88f8      	ldrh	r0, [r7, #6]
 8001e62:	88ba      	ldrh	r2, [r7, #4]
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	883b      	ldrh	r3, [r7, #0]
 8001e76:	f7ff fea3 	bl	8001bc0 <lcd_vline>
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
	...

08001e84 <filter>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char text[100];

#define MAX_SAMPLES  50
static int32_t filter(int32_t sample) {
 8001e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  static int32_t arr[MAX_SAMPLES] = {0};
  static uint32_t runner = 0;
  static uint32_t filled = 0;

  arr[runner] = sample;
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <filter+0xac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4928      	ldr	r1, [pc, #160]	; (8001f34 <filter+0xb0>)
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  if (filled < MAX_SAMPLES)
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <filter+0xb4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b31      	cmp	r3, #49	; 0x31
 8001ea0:	d805      	bhi.n	8001eae <filter+0x2a>
    ++filled;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <filter+0xb4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <filter+0xb4>)
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e00b      	b.n	8001ec6 <filter+0x42>
  else {
    if (++runner == MAX_SAMPLES)
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <filter+0xac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <filter+0xac>)
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <filter+0xac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b32      	cmp	r3, #50	; 0x32
 8001ebe:	d102      	bne.n	8001ec6 <filter+0x42>
      runner = 0;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <filter+0xac>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  int64_t avg = 0;
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (uint32_t i = 0; i < filled; i++) {
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	e011      	b.n	8001efc <filter+0x78>
    avg += arr[i];
 8001ed8:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <filter+0xb0>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	17da      	asrs	r2, r3, #31
 8001ee2:	461c      	mov	r4, r3
 8001ee4:	4615      	mov	r5, r2
 8001ee6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eea:	eb12 0804 	adds.w	r8, r2, r4
 8001eee:	eb43 0905 	adc.w	r9, r3, r5
 8001ef2:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for (uint32_t i = 0; i < filled; i++) {
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <filter+0xb4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3e8      	bcc.n	8001ed8 <filter+0x54>
  }
  avg /= filled;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <filter+0xb4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	469a      	mov	sl, r3
 8001f0e:	4693      	mov	fp, r2
 8001f10:	4652      	mov	r2, sl
 8001f12:	465b      	mov	r3, fp
 8001f14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f18:	f7fe fe38 	bl	8000b8c <__aeabi_ldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	e9c7 2304 	strd	r2, r3, [r7, #16]

  return (int32_t)avg;
 8001f24:	693b      	ldr	r3, [r7, #16]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f30:	20000384 	.word	0x20000384
 8001f34:	20000388 	.word	0x20000388
 8001f38:	20000450 	.word	0x20000450
 8001f3c:	00000000 	.word	0x00000000

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint32_t cnt = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4a:	f000 ff8f 	bl	8002e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f4e:	f000 f901 	bl	8002154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f52:	f000 fac7 	bl	80024e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f56:	f000 faa5 	bl	80024a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f5a:	f000 f965 	bl	8002228 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001f5e:	f000 fa19 	bl	8002394 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001f62:	f000 fa51 	bl	8002408 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001f66:	f000 fa73 	bl	8002450 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f6a:	f000 f9af 	bl	80022cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f6e:	f000 f9db 	bl	8002328 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8001f72:	485b      	ldr	r0, [pc, #364]	; (80020e0 <main+0x1a0>)
 8001f74:	f003 ff36 	bl	8005de4 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8001f78:	f7ff fd30 	bl	80019dc <lcd_init>
  lcd_fill(ST7735_BLACK);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff feb7 	bl	8001cf0 <lcd_fill>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f82:	f004 fead 	bl	8006ce0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART */
  muxUARTHandle = osMutexNew(&muxUART_attributes);
 8001f86:	4857      	ldr	r0, [pc, #348]	; (80020e4 <main+0x1a4>)
 8001f88:	f004 ffa1 	bl	8006ece <osMutexNew>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a56      	ldr	r2, [pc, #344]	; (80020e8 <main+0x1a8>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* creation of muxLcd */
  muxLcdHandle = osMutexNew(&muxLcd_attributes);
 8001f92:	4856      	ldr	r0, [pc, #344]	; (80020ec <main+0x1ac>)
 8001f94:	f004 ff9b 	bl	8006ece <osMutexNew>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <main+0x1b0>)
 8001f9c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semButtonPressed */
  semButtonPressedHandle = osSemaphoreNew(1, 1, &semButtonPressed_attributes);
 8001f9e:	4a55      	ldr	r2, [pc, #340]	; (80020f4 <main+0x1b4>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f005 f8a1 	bl	80070ea <osSemaphoreNew>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <main+0x1b8>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* creation of semDMACplt */
  semDMACpltHandle = osSemaphoreNew(1, 1, &semDMACplt_attributes);
 8001fae:	4a53      	ldr	r2, [pc, #332]	; (80020fc <main+0x1bc>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f005 f899 	bl	80070ea <osSemaphoreNew>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4a51      	ldr	r2, [pc, #324]	; (8002100 <main+0x1c0>)
 8001fbc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of baroQueue */
  baroQueueHandle = osMessageQueueNew (128, sizeof(uint16_t), &baroQueue_attributes);
 8001fbe:	4a51      	ldr	r2, [pc, #324]	; (8002104 <main+0x1c4>)
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	2080      	movs	r0, #128	; 0x80
 8001fc4:	f005 f9b0 	bl	8007328 <osMessageQueueNew>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <main+0x1c8>)
 8001fcc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskLEDBlink */
  taskLEDBlinkHandle = osThreadNew(StartTaskLEDBlink, NULL, &taskLEDBlink_attributes);
 8001fce:	4a4f      	ldr	r2, [pc, #316]	; (800210c <main+0x1cc>)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	484f      	ldr	r0, [pc, #316]	; (8002110 <main+0x1d0>)
 8001fd4:	f004 fece 	bl	8006d74 <osThreadNew>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a4e      	ldr	r2, [pc, #312]	; (8002114 <main+0x1d4>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* creation of taskButtonRead */
  taskButtonReadHandle = osThreadNew(StartTaskButtonRead, NULL, &taskButtonRead_attributes);
 8001fde:	4a4e      	ldr	r2, [pc, #312]	; (8002118 <main+0x1d8>)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	484e      	ldr	r0, [pc, #312]	; (800211c <main+0x1dc>)
 8001fe4:	f004 fec6 	bl	8006d74 <osThreadNew>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4a4d      	ldr	r2, [pc, #308]	; (8002120 <main+0x1e0>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* creation of taskBaroRead */
  taskBaroReadHandle = osThreadNew(StartTaskBaroRead, NULL, &taskBaroRead_attributes);
 8001fee:	4a4d      	ldr	r2, [pc, #308]	; (8002124 <main+0x1e4>)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	484d      	ldr	r0, [pc, #308]	; (8002128 <main+0x1e8>)
 8001ff4:	f004 febe 	bl	8006d74 <osThreadNew>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a4c      	ldr	r2, [pc, #304]	; (800212c <main+0x1ec>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* creation of taskUARTWrite */
  taskUARTWriteHandle = osThreadNew(StartTaskUARTWrite, NULL, &taskUARTWrite_attributes);
 8001ffe:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <main+0x1f0>)
 8002000:	2100      	movs	r1, #0
 8002002:	484c      	ldr	r0, [pc, #304]	; (8002134 <main+0x1f4>)
 8002004:	f004 feb6 	bl	8006d74 <osThreadNew>
 8002008:	4603      	mov	r3, r0
 800200a:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <main+0x1f8>)
 800200c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800200e:	f004 fe8b 	bl	8006d28 <osKernelStart>
  //char text[100] = {0};
  //uint8_t cnt = 0;

  while (1)
  {
    int32_t signal = sin((3.14 * cnt) / 1000.0) * 50 + 50;
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7fe fa7e 	bl	8000514 <__aeabi_ui2d>
 8002018:	a32f      	add	r3, pc, #188	; (adr r3, 80020d8 <main+0x198>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe faf3 	bl	8000608 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <main+0x1fc>)
 8002030:	f7fe fc14 	bl	800085c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b17 	vmov	d7, r2, r3
 800203c:	eeb0 0a47 	vmov.f32	s0, s14
 8002040:	eef0 0a67 	vmov.f32	s1, s15
 8002044:	f009 fef0 	bl	800be28 <sin>
 8002048:	ec51 0b10 	vmov	r0, r1, d0
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <main+0x200>)
 8002052:	f7fe fad9 	bl	8000608 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <main+0x200>)
 8002064:	f7fe f91a 	bl	800029c <__adddf3>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fd64 	bl	8000b3c <__aeabi_d2iz>
 8002074:	4603      	mov	r3, r0
 8002076:	60bb      	str	r3, [r7, #8]
    int32_t signal_noised = signal + (rand() % 20) - 10;
 8002078:	f008 fdbe 	bl	800abf8 <rand>
 800207c:	4601      	mov	r1, r0
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <main+0x204>)
 8002080:	fb83 2301 	smull	r2, r3, r3, r1
 8002084:	10da      	asrs	r2, r3, #3
 8002086:	17cb      	asrs	r3, r1, #31
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	1aca      	subs	r2, r1, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4413      	add	r3, r2
 8002098:	3b0a      	subs	r3, #10
 800209a:	607b      	str	r3, [r7, #4]
    int32_t signal_filtered = filter(signal_noised);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fef1 	bl	8001e84 <filter>
 80020a2:	6038      	str	r0, [r7, #0]

    sprintf(text, "/*%ld,%ld,%ld*/\n", signal, signal_noised, signal_filtered);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4926      	ldr	r1, [pc, #152]	; (8002148 <main+0x208>)
 80020ae:	4827      	ldr	r0, [pc, #156]	; (800214c <main+0x20c>)
 80020b0:	f008 fe8e 	bl	800add0 <siprintf>
    cnt++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t*)text, strlen(text), 1000);
 80020ba:	4824      	ldr	r0, [pc, #144]	; (800214c <main+0x20c>)
 80020bc:	f7fe f890 	bl	80001e0 <strlen>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c8:	4920      	ldr	r1, [pc, #128]	; (800214c <main+0x20c>)
 80020ca:	4821      	ldr	r0, [pc, #132]	; (8002150 <main+0x210>)
 80020cc:	f004 fa5f 	bl	800658e <HAL_UART_Transmit>
    HAL_Delay(25);
 80020d0:	2019      	movs	r0, #25
 80020d2:	f000 ff3d 	bl	8002f50 <HAL_Delay>
  {
 80020d6:	e79c      	b.n	8002012 <main+0xd2>
 80020d8:	51eb851f 	.word	0x51eb851f
 80020dc:	40091eb8 	.word	0x40091eb8
 80020e0:	20000228 	.word	0x20000228
 80020e4:	0800d0b0 	.word	0x0800d0b0
 80020e8:	20000310 	.word	0x20000310
 80020ec:	0800d0c0 	.word	0x0800d0c0
 80020f0:	20000314 	.word	0x20000314
 80020f4:	0800d0d0 	.word	0x0800d0d0
 80020f8:	20000318 	.word	0x20000318
 80020fc:	0800d0e0 	.word	0x0800d0e0
 8002100:	2000031c 	.word	0x2000031c
 8002104:	0800d098 	.word	0x0800d098
 8002108:	2000030c 	.word	0x2000030c
 800210c:	0800d008 	.word	0x0800d008
 8002110:	08002675 	.word	0x08002675
 8002114:	200002fc 	.word	0x200002fc
 8002118:	0800d02c 	.word	0x0800d02c
 800211c:	080026f1 	.word	0x080026f1
 8002120:	20000300 	.word	0x20000300
 8002124:	0800d050 	.word	0x0800d050
 8002128:	0800276d 	.word	0x0800276d
 800212c:	20000304 	.word	0x20000304
 8002130:	0800d074 	.word	0x0800d074
 8002134:	080027dd 	.word	0x080027dd
 8002138:	20000308 	.word	0x20000308
 800213c:	408f4000 	.word	0x408f4000
 8002140:	40490000 	.word	0x40490000
 8002144:	66666667 	.word	0x66666667
 8002148:	0800cf54 	.word	0x0800cf54
 800214c:	20000320 	.word	0x20000320
 8002150:	200002b8 	.word	0x200002b8

08002154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b094      	sub	sp, #80	; 0x50
 8002158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800215a:	f107 0320 	add.w	r3, r7, #32
 800215e:	2230      	movs	r2, #48	; 0x30
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f008 fcab 	bl	800aabe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <SystemClock_Config+0xcc>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <SystemClock_Config+0xcc>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	6413      	str	r3, [r2, #64]	; 0x40
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <SystemClock_Config+0xcc>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <SystemClock_Config+0xd0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <SystemClock_Config+0xd0>)
 80021a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <SystemClock_Config+0xd0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021be:	2302      	movs	r3, #2
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80021c8:	2319      	movs	r3, #25
 80021ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021cc:	23a8      	movs	r3, #168	; 0xa8
 80021ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d0:	2302      	movs	r3, #2
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021d4:	2304      	movs	r3, #4
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d8:	f107 0320 	add.w	r3, r7, #32
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 fec9 	bl	8004f74 <HAL_RCC_OscConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021e8:	f000 fb20 	bl	800282c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ec:	230f      	movs	r3, #15
 80021ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f0:	2302      	movs	r3, #2
 80021f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	2102      	movs	r1, #2
 8002208:	4618      	mov	r0, r3
 800220a:	f003 f92b 	bl	8005464 <HAL_RCC_ClockConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002214:	f000 fb0a 	bl	800282c <Error_Handler>
  }
}
 8002218:	bf00      	nop
 800221a:	3750      	adds	r7, #80	; 0x50
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800222e:	463b      	mov	r3, r7
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <MX_ADC1_Init+0x98>)
 800223c:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <MX_ADC1_Init+0x9c>)
 800223e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002246:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_ADC1_Init+0x98>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002256:	2201      	movs	r2, #1
 8002258:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <MX_ADC1_Init+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002264:	2200      	movs	r2, #0
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_ADC1_Init+0x98>)
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <MX_ADC1_Init+0xa0>)
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002276:	2201      	movs	r2, #1
 8002278:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_ADC1_Init+0x98>)
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_ADC1_Init+0x98>)
 8002284:	2201      	movs	r2, #1
 8002286:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002288:	480d      	ldr	r0, [pc, #52]	; (80022c0 <MX_ADC1_Init+0x98>)
 800228a:	f000 fe85 	bl	8002f98 <HAL_ADC_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002294:	f000 faca 	bl	800282c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002298:	2300      	movs	r3, #0
 800229a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_ADC1_Init+0x98>)
 80022aa:	f000 feb9 	bl	8003020 <HAL_ADC_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80022b4:	f000 faba 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200000d4 	.word	0x200000d4
 80022c4:	40012000 	.word	0x40012000
 80022c8:	0f000001 	.word	0x0f000001

080022cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_I2C1_Init+0x50>)
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <MX_I2C1_Init+0x54>)
 80022d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_I2C1_Init+0x50>)
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <MX_I2C1_Init+0x58>)
 80022da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_I2C1_Init+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_I2C1_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_I2C1_Init+0x50>)
 80022ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <MX_I2C1_Init+0x50>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_I2C1_Init+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <MX_I2C1_Init+0x50>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_I2C1_Init+0x50>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <MX_I2C1_Init+0x50>)
 800230a:	f001 fe73 	bl	8003ff4 <HAL_I2C_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002314:	f000 fa8a 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000011c 	.word	0x2000011c
 8002320:	40005400 	.word	0x40005400
 8002324:	000186a0 	.word	0x000186a0

08002328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_SPI1_Init+0x64>)
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <MX_SPI1_Init+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <MX_SPI1_Init+0x64>)
 8002334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_SPI1_Init+0x64>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <MX_SPI1_Init+0x64>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_SPI1_Init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_SPI1_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <MX_SPI1_Init+0x64>)
 8002354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_SPI1_Init+0x64>)
 800235c:	2200      	movs	r2, #0
 800235e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <MX_SPI1_Init+0x64>)
 8002362:	2200      	movs	r2, #0
 8002364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_SPI1_Init+0x64>)
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <MX_SPI1_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <MX_SPI1_Init+0x64>)
 8002374:	220a      	movs	r2, #10
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <MX_SPI1_Init+0x64>)
 800237a:	f003 fa53 	bl	8005824 <HAL_SPI_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002384:	f000 fa52 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000170 	.word	0x20000170
 8002390:	40013000 	.word	0x40013000

08002394 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239a:	463b      	mov	r3, r7
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023a8:	4a16      	ldr	r2, [pc, #88]	; (8002404 <MX_TIM9_Init+0x70>)
 80023aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023ae:	f240 3247 	movw	r2, #839	; 0x347
 80023b2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 49999;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023bc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80023c0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023d0:	f003 fcb8 	bl	8005d44 <HAL_TIM_Base_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80023da:	f000 fa27 	bl	800282c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_TIM9_Init+0x6c>)
 80023ea:	f003 fe65 	bl	80060b8 <HAL_TIM_ConfigClockSource>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80023f4:	f000 fa1a 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000228 	.word	0x20000228
 8002404:	40014000 	.word	0x40014000

08002408 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_TIM10_Init+0x40>)
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <MX_TIM10_Init+0x44>)
 8002410:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 839;
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <MX_TIM10_Init+0x40>)
 8002414:	f240 3247 	movw	r2, #839	; 0x347
 8002418:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <MX_TIM10_Init+0x40>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_TIM10_Init+0x40>)
 8002422:	f242 720f 	movw	r2, #9999	; 0x270f
 8002426:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <MX_TIM10_Init+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_TIM10_Init+0x40>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <MX_TIM10_Init+0x40>)
 8002436:	f003 fc85 	bl	8005d44 <HAL_TIM_Base_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002440:	f000 f9f4 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000270 	.word	0x20000270
 800244c:	40014400 	.word	0x40014400

08002450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <MX_USART1_UART_Init+0x50>)
 8002458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_USART1_UART_Init+0x4c>)
 800245c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_USART1_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_USART1_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_USART1_UART_Init+0x4c>)
 8002488:	f004 f834 	bl	80064f4 <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002492:	f000 f9cb 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200002b8 	.word	0x200002b8
 80024a0:	40011000 	.word	0x40011000

080024a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_DMA_Init+0x3c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <MX_DMA_Init+0x3c>)
 80024b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_DMA_Init+0x3c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	203b      	movs	r0, #59	; 0x3b
 80024cc:	f001 f8a1 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80024d0:	203b      	movs	r0, #59	; 0x3b
 80024d2:	f001 f8ba 	bl	800364a <HAL_NVIC_EnableIRQ>

}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <MX_GPIO_Init+0x134>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a45      	ldr	r2, [pc, #276]	; (8002618 <MX_GPIO_Init+0x134>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <MX_GPIO_Init+0x134>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <MX_GPIO_Init+0x134>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a3e      	ldr	r2, [pc, #248]	; (8002618 <MX_GPIO_Init+0x134>)
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <MX_GPIO_Init+0x134>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <MX_GPIO_Init+0x134>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a37      	ldr	r2, [pc, #220]	; (8002618 <MX_GPIO_Init+0x134>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <MX_GPIO_Init+0x134>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <MX_GPIO_Init+0x134>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a30      	ldr	r2, [pc, #192]	; (8002618 <MX_GPIO_Init+0x134>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <MX_GPIO_Init+0x134>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800256a:	2201      	movs	r2, #1
 800256c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002570:	482a      	ldr	r0, [pc, #168]	; (800261c <MX_GPIO_Init+0x138>)
 8002572:	f001 fcf3 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 8002576:	2201      	movs	r2, #1
 8002578:	2158      	movs	r1, #88	; 0x58
 800257a:	4829      	ldr	r0, [pc, #164]	; (8002620 <MX_GPIO_Init+0x13c>)
 800257c:	f001 fcee 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin|GREEN_SMALL_LED_Pin
 8002580:	2201      	movs	r2, #1
 8002582:	f247 0118 	movw	r1, #28696	; 0x7018
 8002586:	4827      	ldr	r0, [pc, #156]	; (8002624 <MX_GPIO_Init+0x140>)
 8002588:	f001 fce8 	bl	8003f5c <HAL_GPIO_WritePin>
                          |RED_SMALL_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800258c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	481d      	ldr	r0, [pc, #116]	; (800261c <MX_GPIO_Init+0x138>)
 80025a6:	f001 fb55 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin;
 80025aa:	2358      	movs	r3, #88	; 0x58
 80025ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4817      	ldr	r0, [pc, #92]	; (8002620 <MX_GPIO_Init+0x13c>)
 80025c2:	f001 fb47 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80025c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4811      	ldr	r0, [pc, #68]	; (8002624 <MX_GPIO_Init+0x140>)
 80025de:	f001 fb39 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin YELLOW_LED_Pin RED_LED_Pin GREEN_SMALL_LED_Pin
                           RED_SMALL_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin|GREEN_SMALL_LED_Pin
 80025e2:	f247 0318 	movw	r3, #28696	; 0x7018
 80025e6:	617b      	str	r3, [r7, #20]
                          |RED_SMALL_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	480a      	ldr	r0, [pc, #40]	; (8002624 <MX_GPIO_Init+0x140>)
 80025fc:	f001 fb2a 	bl	8003c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2105      	movs	r1, #5
 8002604:	2028      	movs	r0, #40	; 0x28
 8002606:	f001 f804 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800260a:	2028      	movs	r0, #40	; 0x28
 800260c:	f001 f81d 	bl	800364a <HAL_NVIC_EnableIRQ>

}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	40020800 	.word	0x40020800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400

08002628 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	}
}*/


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if (htim == &htim9) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a06      	ldr	r2, [pc, #24]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d104      	bne.n	8002642 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800263c:	4804      	ldr	r0, [pc, #16]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800263e:	f001 fca6 	bl	8003f8e <HAL_GPIO_TogglePin>
  }
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000228 	.word	0x20000228
 8002650:	40020800 	.word	0x40020800

08002654 <HAL_GPIO_EXTI_Callback>:
    }
  }
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
  osSemaphoreRelease(semButtonPressedHandle);
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fe1c 	bl	80072a0 <osSemaphoreRelease>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000318 	.word	0x20000318

08002674 <StartTaskLEDBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLEDBlink */
void StartTaskLEDBlink(void *argument)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osSemaphoreAcquire(semButtonPressedHandle, osWaitForever);
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <StartTaskLEDBlink+0x74>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fdb9 	bl	80071fc <osSemaphoreAcquire>
  /* Infinite loop */
  for(;;)
  {
    osMutexAcquire(muxLcdHandle, osWaitForever);
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <StartTaskLEDBlink+0x78>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 31ff 	mov.w	r1, #4294967295
 8002692:	4618      	mov	r0, r3
 8002694:	f004 fca1 	bl	8006fda <osMutexAcquire>
    lcd_fill_circle(80, 80, 30, ST77XX_GREEN);
 8002698:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800269c:	221e      	movs	r2, #30
 800269e:	2150      	movs	r1, #80	; 0x50
 80026a0:	2050      	movs	r0, #80	; 0x50
 80026a2:	f7ff fb3f 	bl	8001d24 <lcd_fill_circle>
    osMutexRelease(muxLcdHandle);
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <StartTaskLEDBlink+0x78>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 fce0 	bl	8007070 <osMutexRelease>
    osDelay(300);
 80026b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026b4:	f004 fbf0 	bl	8006e98 <osDelay>

    osMutexAcquire(muxLcdHandle, osWaitForever);
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <StartTaskLEDBlink+0x78>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	4618      	mov	r0, r3
 80026c2:	f004 fc8a 	bl	8006fda <osMutexAcquire>
    lcd_fill_circle(80, 80, 30, ST77XX_ORANGE);
 80026c6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80026ca:	221e      	movs	r2, #30
 80026cc:	2150      	movs	r1, #80	; 0x50
 80026ce:	2050      	movs	r0, #80	; 0x50
 80026d0:	f7ff fb28 	bl	8001d24 <lcd_fill_circle>
    osMutexRelease(muxLcdHandle);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <StartTaskLEDBlink+0x78>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 fcc9 	bl	8007070 <osMutexRelease>
    osDelay(300);
 80026de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026e2:	f004 fbd9 	bl	8006e98 <osDelay>
    osMutexAcquire(muxLcdHandle, osWaitForever);
 80026e6:	e7d0      	b.n	800268a <StartTaskLEDBlink+0x16>
 80026e8:	20000318 	.word	0x20000318
 80026ec:	20000314 	.word	0x20000314

080026f0 <StartTaskButtonRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskButtonRead */
void StartTaskButtonRead(void *argument)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskButtonRead */
    lcd_init();
 80026f8:	f7ff f970 	bl	80019dc <lcd_init>
    lcd_fill(ST7735_BLACK);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff faf7 	bl	8001cf0 <lcd_fill>
    osSemaphoreRelease(semButtonPressedHandle);
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <StartTaskButtonRead+0x74>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fdca 	bl	80072a0 <osSemaphoreRelease>
  /* Infinite loop */
  for(;;)
  {
    osMutexAcquire(muxLcdHandle, osWaitForever);
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <StartTaskButtonRead+0x78>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	4618      	mov	r0, r3
 8002716:	f004 fc60 	bl	8006fda <osMutexAcquire>
    lcd_fill_circle(30, 30, 25, ST77XX_BLACK);
 800271a:	2300      	movs	r3, #0
 800271c:	2219      	movs	r2, #25
 800271e:	211e      	movs	r1, #30
 8002720:	201e      	movs	r0, #30
 8002722:	f7ff faff 	bl	8001d24 <lcd_fill_circle>
    osMutexRelease(muxLcdHandle);
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <StartTaskButtonRead+0x78>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fca0 	bl	8007070 <osMutexRelease>
    osDelay(200);
 8002730:	20c8      	movs	r0, #200	; 0xc8
 8002732:	f004 fbb1 	bl	8006e98 <osDelay>

    osMutexAcquire(muxLcdHandle, osWaitForever);
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <StartTaskButtonRead+0x78>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f04f 31ff 	mov.w	r1, #4294967295
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fc4b 	bl	8006fda <osMutexAcquire>
    lcd_fill_circle(30, 30, 25, ST77XX_YELLOW);
 8002744:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002748:	2219      	movs	r2, #25
 800274a:	211e      	movs	r1, #30
 800274c:	201e      	movs	r0, #30
 800274e:	f7ff fae9 	bl	8001d24 <lcd_fill_circle>
    osMutexRelease(muxLcdHandle);
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <StartTaskButtonRead+0x78>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fc8a 	bl	8007070 <osMutexRelease>
    osDelay(200);
 800275c:	20c8      	movs	r0, #200	; 0xc8
 800275e:	f004 fb9b 	bl	8006e98 <osDelay>
    osMutexAcquire(muxLcdHandle, osWaitForever);
 8002762:	e7d3      	b.n	800270c <StartTaskButtonRead+0x1c>
 8002764:	20000318 	.word	0x20000318
 8002768:	20000314 	.word	0x20000314

0800276c <StartTaskBaroRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBaroRead */
void StartTaskBaroRead(void *argument)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBaroRead */
  /* Infinite loop */
  baro_init();
 8002774:	f7fe fbdc 	bl	8000f30 <baro_init>
  for(;;)
  {
	int32_t pres = baro_read_press();
 8002778:	f7fe fd50 	bl	800121c <baro_read_press>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
    snprintf(text, sizeof(text)/sizeof(text[0]), "/*%ld.%02ld*/\n", pres/100, pres%100);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <StartTaskBaroRead+0x60>)
 8002784:	fb82 1203 	smull	r1, r2, r2, r3
 8002788:	1152      	asrs	r2, r2, #5
 800278a:	17db      	asrs	r3, r3, #31
 800278c:	1ad0      	subs	r0, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <StartTaskBaroRead+0x60>)
 8002792:	fb83 1302 	smull	r1, r3, r3, r2
 8002796:	1159      	asrs	r1, r3, #5
 8002798:	17d3      	asrs	r3, r2, #31
 800279a:	1acb      	subs	r3, r1, r3
 800279c:	2164      	movs	r1, #100	; 0x64
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <StartTaskBaroRead+0x64>)
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	4809      	ldr	r0, [pc, #36]	; (80027d4 <StartTaskBaroRead+0x68>)
 80027ae:	f008 fadb 	bl	800ad68 <sniprintf>
	osMessageQueuePut(baroQueueHandle, text, 0, HAL_MAX_DELAY);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <StartTaskBaroRead+0x6c>)
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	2200      	movs	r2, #0
 80027bc:	4905      	ldr	r1, [pc, #20]	; (80027d4 <StartTaskBaroRead+0x68>)
 80027be:	f004 fe27 	bl	8007410 <osMessageQueuePut>
	osDelay(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f004 fb68 	bl	8006e98 <osDelay>
  {
 80027c8:	e7d6      	b.n	8002778 <StartTaskBaroRead+0xc>
 80027ca:	bf00      	nop
 80027cc:	51eb851f 	.word	0x51eb851f
 80027d0:	0800cf68 	.word	0x0800cf68
 80027d4:	20000320 	.word	0x20000320
 80027d8:	2000030c 	.word	0x2000030c

080027dc <StartTaskUARTWrite>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUARTWrite */
void StartTaskUARTWrite(void *argument)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUARTWrite */
  /* Infinite loop */
  for(;;)
  {
	sprintf(text, "0");
 80027e4:	490d      	ldr	r1, [pc, #52]	; (800281c <StartTaskUARTWrite+0x40>)
 80027e6:	480e      	ldr	r0, [pc, #56]	; (8002820 <StartTaskUARTWrite+0x44>)
 80027e8:	f008 faf2 	bl	800add0 <siprintf>
	osMessageQueueGet(baroQueueHandle, text, NULL, HAL_MAX_DELAY);
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <StartTaskUARTWrite+0x48>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
 80027f4:	2200      	movs	r2, #0
 80027f6:	490a      	ldr	r1, [pc, #40]	; (8002820 <StartTaskUARTWrite+0x44>)
 80027f8:	f004 fe6a 	bl	80074d0 <osMessageQueueGet>
	HAL_UART_Transmit(&huart1, (uint8_t*) text, strlen(text), HAL_MAX_DELAY);
 80027fc:	4808      	ldr	r0, [pc, #32]	; (8002820 <StartTaskUARTWrite+0x44>)
 80027fe:	f7fd fcef 	bl	80001e0 <strlen>
 8002802:	4603      	mov	r3, r0
 8002804:	b29a      	uxth	r2, r3
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	4905      	ldr	r1, [pc, #20]	; (8002820 <StartTaskUARTWrite+0x44>)
 800280c:	4806      	ldr	r0, [pc, #24]	; (8002828 <StartTaskUARTWrite+0x4c>)
 800280e:	f003 febe 	bl	800658e <HAL_UART_Transmit>
    osDelay(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f004 fb40 	bl	8006e98 <osDelay>
	sprintf(text, "0");
 8002818:	e7e4      	b.n	80027e4 <StartTaskUARTWrite+0x8>
 800281a:	bf00      	nop
 800281c:	0800cf78 	.word	0x0800cf78
 8002820:	20000320 	.word	0x20000320
 8002824:	2000030c 	.word	0x2000030c
 8002828:	200002b8 	.word	0x200002b8

0800282c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002830:	b672      	cpsid	i
}
 8002832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002834:	e7fe      	b.n	8002834 <Error_Handler+0x8>
	...

08002838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_MspInit+0x54>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_MspInit+0x54>)
 8002848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284c:	6453      	str	r3, [r2, #68]	; 0x44
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_MspInit+0x54>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_MspInit+0x54>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_MspInit+0x54>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_MspInit+0x54>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	210f      	movs	r1, #15
 800287a:	f06f 0001 	mvn.w	r0, #1
 800287e:	f000 fec8 	bl	8003612 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a17      	ldr	r2, [pc, #92]	; (800290c <HAL_ADC_MspInit+0x7c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d127      	bne.n	8002902 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_ADC_MspInit+0x80>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <HAL_ADC_MspInit+0x80>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_ADC_MspInit+0x80>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_ADC_MspInit+0x80>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <HAL_ADC_MspInit+0x80>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_ADC_MspInit+0x80>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 80028ea:	2301      	movs	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ee:	2303      	movs	r3, #3
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <HAL_ADC_MspInit+0x84>)
 80028fe:	f001 f9a9 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002902:	bf00      	nop
 8002904:	3728      	adds	r7, #40	; 0x28
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40012000 	.word	0x40012000
 8002910:	40023800 	.word	0x40023800
 8002914:	40020000 	.word	0x40020000

08002918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_I2C_MspInit+0x84>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d12c      	bne.n	8002994 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_I2C_MspInit+0x88>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_I2C_MspInit+0x88>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_I2C_MspInit+0x88>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800295a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295c:	2312      	movs	r3, #18
 800295e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002960:	2301      	movs	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002968:	2304      	movs	r3, #4
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	480c      	ldr	r0, [pc, #48]	; (80029a4 <HAL_I2C_MspInit+0x8c>)
 8002974:	f001 f96e 	bl	8003c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_I2C_MspInit+0x88>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_I2C_MspInit+0x88>)
 8002982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_I2C_MspInit+0x88>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002994:	bf00      	nop
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40005400 	.word	0x40005400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020400 	.word	0x40020400

080029a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3f      	ldr	r2, [pc, #252]	; (8002ac4 <HAL_SPI_MspInit+0x11c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d177      	bne.n	8002aba <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a3d      	ldr	r2, [pc, #244]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 80029d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a36      	ldr	r2, [pc, #216]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_SPI_MspInit+0x120>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a2e:	2305      	movs	r3, #5
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	4824      	ldr	r0, [pc, #144]	; (8002acc <HAL_SPI_MspInit+0x124>)
 8002a3a:	f001 f90b 	bl	8003c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a4e:	2305      	movs	r3, #5
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	481d      	ldr	r0, [pc, #116]	; (8002ad0 <HAL_SPI_MspInit+0x128>)
 8002a5a:	f001 f8fb 	bl	8003c54 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a60:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_SPI_MspInit+0x130>)
 8002a62:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a66:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002a6a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a9e:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002aa0:	f000 fdee 	bl	8003680 <HAL_DMA_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002aaa:	f7ff febf 	bl	800282c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002ab2:	649a      	str	r2, [r3, #72]	; 0x48
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_SPI_MspInit+0x12c>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40013000 	.word	0x40013000
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	200001c8 	.word	0x200001c8
 8002ad8:	40026458 	.word	0x40026458

08002adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_TIM_Base_MspInit+0x70>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d116      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	2018      	movs	r0, #24
 8002b10:	f000 fd7f 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b14:	2018      	movs	r0, #24
 8002b16:	f000 fd98 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002b1a:	e012      	b.n	8002b42 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_TIM_Base_MspInit+0x78>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10d      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_TIM_Base_MspInit+0x74>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40014000 	.word	0x40014000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40014400 	.word	0x40014400

08002b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <HAL_UART_MspInit+0x84>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d12b      	bne.n	8002bd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_UART_MspInit+0x88>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <HAL_UART_MspInit+0x88>)
 8002b84:	f043 0310 	orr.w	r3, r3, #16
 8002b88:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_UART_MspInit+0x88>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_UART_MspInit+0x88>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_UART_MspInit+0x88>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_UART_MspInit+0x88>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb2:	23c0      	movs	r3, #192	; 0xc0
 8002bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4805      	ldr	r0, [pc, #20]	; (8002be4 <HAL_UART_MspInit+0x8c>)
 8002bce:	f001 f841 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bd2:	bf00      	nop
 8002bd4:	3728      	adds	r7, #40	; 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020400 	.word	0x40020400

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <NMI_Handler+0x4>

08002bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <HardFault_Handler+0x4>

08002bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <MemManage_Handler+0x4>

08002bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <BusFault_Handler+0x4>

08002c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <UsageFault_Handler+0x4>

08002c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c18:	f000 f97a 	bl	8002f10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c1c:	f006 fcba 	bl	8009594 <xTaskGetSchedulerState>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c26:	f007 fb9f 	bl	800a368 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002c36:	f003 f937 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000228 	.word	0x20000228

08002c44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002c48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c4c:	f001 f9ba 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <DMA2_Stream3_IRQHandler+0x10>)
 8002c5a:	f000 fdbf 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200001c8 	.word	0x200001c8

08002c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
	return 1;
 8002c6c:	2301      	movs	r3, #1
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_kill>:

int _kill(int pid, int sig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c82:	f007 fdeb 	bl	800a85c <__errno>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2216      	movs	r2, #22
 8002c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_exit>:

void _exit (int status)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ffe7 	bl	8002c78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002caa:	e7fe      	b.n	8002caa <_exit+0x12>

08002cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e00a      	b.n	8002cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cbe:	f3af 8000 	nop.w
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	60ba      	str	r2, [r7, #8]
 8002cca:	b2ca      	uxtb	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	dbf0      	blt.n	8002cbe <_read+0x12>
	}

return len;
 8002cdc:	687b      	ldr	r3, [r7, #4]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e009      	b.n	8002d0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	60ba      	str	r2, [r7, #8]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	dbf1      	blt.n	8002cf8 <_write+0x12>
	}
	return len;
 8002d14:	687b      	ldr	r3, [r7, #4]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_close>:

int _close(int file)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	return -1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d46:	605a      	str	r2, [r3, #4]
	return 0;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <_isatty>:

int _isatty(int file)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
	return 0;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <_sbrk+0x5c>)
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <_sbrk+0x60>)
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <_sbrk+0x64>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <_sbrk+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <_sbrk+0x64>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db8:	f007 fd50 	bl	800a85c <__errno>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e009      	b.n	8002ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <_sbrk+0x64>)
 8002dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20010000 	.word	0x20010000
 8002de8:	00000400 	.word	0x00000400
 8002dec:	20000454 	.word	0x20000454
 8002df0:	20004e80 	.word	0x20004e80

08002df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <SystemInit+0x20>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <SystemInit+0x20>)
 8002e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1e:	490e      	ldr	r1, [pc, #56]	; (8002e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e34:	4c0b      	ldr	r4, [pc, #44]	; (8002e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e42:	f7ff ffd7 	bl	8002df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f007 fe05 	bl	800aa54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7ff f879 	bl	8001f40 <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002e5c:	0800d440 	.word	0x0800d440
  ldr r2, =_sbss
 8002e60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002e64:	20004e7c 	.word	0x20004e7c

08002e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC_IRQHandler>
	...

08002e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_Init+0x40>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_Init+0x40>)
 8002e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_Init+0x40>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 fbb1 	bl	80035fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9a:	200f      	movs	r0, #15
 8002e9c:	f000 f808 	bl	8002eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea0:	f7ff fcca 	bl	8002838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_InitTick+0x54>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x58>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fbc9 	bl	8003666 <HAL_SYSTICK_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00e      	b.n	8002efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0f      	cmp	r3, #15
 8002ee2:	d80a      	bhi.n	8002efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f000 fb91 	bl	8003612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef0:	4a06      	ldr	r2, [pc, #24]	; (8002f0c <HAL_InitTick+0x5c>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000000 	.word	0x20000000
 8002f08:	20000008 	.word	0x20000008
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_IncTick+0x20>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x24>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <HAL_IncTick+0x24>)
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000008 	.word	0x20000008
 8002f34:	20000458 	.word	0x20000458

08002f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_GetTick+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000458 	.word	0x20000458

08002f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff ffee 	bl	8002f38 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d005      	beq.n	8002f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_Delay+0x44>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f76:	bf00      	nop
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d8f7      	bhi.n	8002f78 <HAL_Delay+0x28>
  {
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000008 	.word	0x20000008

08002f98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e033      	b.n	8003016 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fc6a 	bl	8002890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f93a 	bl	8003264 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
 8003006:	e001      	b.n	800300c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1c>
 8003038:	2302      	movs	r3, #2
 800303a:	e105      	b.n	8003248 <HAL_ADC_ConfigChannel+0x228>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b09      	cmp	r3, #9
 800304a:	d925      	bls.n	8003098 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68d9      	ldr	r1, [r3, #12]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	3b1e      	subs	r3, #30
 8003062:	2207      	movs	r2, #7
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43da      	mvns	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	400a      	ands	r2, r1
 8003070:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68d9      	ldr	r1, [r3, #12]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	4603      	mov	r3, r0
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4403      	add	r3, r0
 800308a:	3b1e      	subs	r3, #30
 800308c:	409a      	lsls	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	e022      	b.n	80030de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6919      	ldr	r1, [r3, #16]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	2207      	movs	r2, #7
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	400a      	ands	r2, r1
 80030ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6919      	ldr	r1, [r3, #16]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4403      	add	r3, r0
 80030d4:	409a      	lsls	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d824      	bhi.n	8003130 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	3b05      	subs	r3, #5
 80030f8:	221f      	movs	r2, #31
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	400a      	ands	r2, r1
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	3b05      	subs	r3, #5
 8003122:	fa00 f203 	lsl.w	r2, r0, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	635a      	str	r2, [r3, #52]	; 0x34
 800312e:	e04c      	b.n	80031ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d824      	bhi.n	8003182 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	3b23      	subs	r3, #35	; 0x23
 800314a:	221f      	movs	r2, #31
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43da      	mvns	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	400a      	ands	r2, r1
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	4618      	mov	r0, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b23      	subs	r3, #35	; 0x23
 8003174:	fa00 f203 	lsl.w	r2, r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
 8003180:	e023      	b.n	80031ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	3b41      	subs	r3, #65	; 0x41
 8003194:	221f      	movs	r2, #31
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	400a      	ands	r2, r1
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4618      	mov	r0, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	3b41      	subs	r3, #65	; 0x41
 80031be:	fa00 f203 	lsl.w	r2, r0, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_ADC_ConfigChannel+0x234>)
 80031cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a21      	ldr	r2, [pc, #132]	; (8003258 <HAL_ADC_ConfigChannel+0x238>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d109      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1cc>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b12      	cmp	r3, #18
 80031de:	d105      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_ADC_ConfigChannel+0x238>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d123      	bne.n	800323e <HAL_ADC_ConfigChannel+0x21e>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d003      	beq.n	8003206 <HAL_ADC_ConfigChannel+0x1e6>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b11      	cmp	r3, #17
 8003204:	d11b      	bne.n	800323e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b10      	cmp	r3, #16
 8003218:	d111      	bne.n	800323e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_ADC_ConfigChannel+0x23c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a10      	ldr	r2, [pc, #64]	; (8003260 <HAL_ADC_ConfigChannel+0x240>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	0c9a      	lsrs	r2, r3, #18
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003230:	e002      	b.n	8003238 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3b01      	subs	r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f9      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40012300 	.word	0x40012300
 8003258:	40012000 	.word	0x40012000
 800325c:	20000000 	.word	0x20000000
 8003260:	431bde83 	.word	0x431bde83

08003264 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800326c:	4b79      	ldr	r3, [pc, #484]	; (8003454 <ADC_Init+0x1f0>)
 800326e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	021a      	lsls	r2, r3, #8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	4a58      	ldr	r2, [pc, #352]	; (8003458 <ADC_Init+0x1f4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800330a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6899      	ldr	r1, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800332c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6899      	ldr	r1, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	e00f      	b.n	8003362 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003360:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0202 	bic.w	r2, r2, #2
 8003370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6899      	ldr	r1, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7e1b      	ldrb	r3, [r3, #24]
 800337c:	005a      	lsls	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800339e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	3b01      	subs	r3, #1
 80033bc:	035a      	lsls	r2, r3, #13
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	e007      	b.n	80033d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	051a      	lsls	r2, r3, #20
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800340c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6899      	ldr	r1, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800341a:	025a      	lsls	r2, r3, #9
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6899      	ldr	r1, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	029a      	lsls	r2, r3, #10
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40012300 	.word	0x40012300
 8003458:	0f000001 	.word	0x0f000001

0800345c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003478:	4013      	ands	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348e:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	60d3      	str	r3, [r2, #12]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <__NVIC_GetPriorityGrouping+0x18>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 0307 	and.w	r3, r3, #7
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db0b      	blt.n	80034ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4907      	ldr	r1, [pc, #28]	; (80034f8 <__NVIC_EnableIRQ+0x38>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000e100 	.word	0xe000e100

080034fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	db0a      	blt.n	8003526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	490c      	ldr	r1, [pc, #48]	; (8003548 <__NVIC_SetPriority+0x4c>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	440b      	add	r3, r1
 8003520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003524:	e00a      	b.n	800353c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4908      	ldr	r1, [pc, #32]	; (800354c <__NVIC_SetPriority+0x50>)
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3b04      	subs	r3, #4
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	440b      	add	r3, r1
 800353a:	761a      	strb	r2, [r3, #24]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000e100 	.word	0xe000e100
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f1c3 0307 	rsb	r3, r3, #7
 800356a:	2b04      	cmp	r3, #4
 800356c:	bf28      	it	cs
 800356e:	2304      	movcs	r3, #4
 8003570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3304      	adds	r3, #4
 8003576:	2b06      	cmp	r3, #6
 8003578:	d902      	bls.n	8003580 <NVIC_EncodePriority+0x30>
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3b03      	subs	r3, #3
 800357e:	e000      	b.n	8003582 <NVIC_EncodePriority+0x32>
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	401a      	ands	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003598:	f04f 31ff 	mov.w	r1, #4294967295
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43d9      	mvns	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	4313      	orrs	r3, r2
         );
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c8:	d301      	bcc.n	80035ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00f      	b.n	80035ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <SysTick_Config+0x40>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d6:	210f      	movs	r1, #15
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	f7ff ff8e 	bl	80034fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <SysTick_Config+0x40>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <SysTick_Config+0x40>)
 80035e8:	2207      	movs	r2, #7
 80035ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	e000e010 	.word	0xe000e010

080035fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff29 	bl	800345c <__NVIC_SetPriorityGrouping>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003624:	f7ff ff3e 	bl	80034a4 <__NVIC_GetPriorityGrouping>
 8003628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f7ff ff8e 	bl	8003550 <NVIC_EncodePriority>
 8003634:	4602      	mov	r2, r0
 8003636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff5d 	bl	80034fc <__NVIC_SetPriority>
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff31 	bl	80034c0 <__NVIC_EnableIRQ>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ffa2 	bl	80035b8 <SysTick_Config>
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7ff fc54 	bl	8002f38 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e099      	b.n	80037d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036bc:	e00f      	b.n	80036de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036be:	f7ff fc3b 	bl	8002f38 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d908      	bls.n	80036de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2203      	movs	r2, #3
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e078      	b.n	80037d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e8      	bne.n	80036be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <HAL_DMA_Init+0x158>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b04      	cmp	r3, #4
 8003736:	d107      	bne.n	8003748 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	4313      	orrs	r3, r2
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b04      	cmp	r3, #4
 8003770:	d117      	bne.n	80037a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f9e9 	bl	8003b5c <DMA_CheckFifoParam>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2240      	movs	r2, #64	; 0x40
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800379e:	2301      	movs	r3, #1
 80037a0:	e016      	b.n	80037d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9a0 	bl	8003af0 <DMA_CalcBaseAndBitshift>
 80037b0:	4603      	mov	r3, r0
 80037b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	223f      	movs	r2, #63	; 0x3f
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	f010803f 	.word	0xf010803f

080037dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037e8:	4b8e      	ldr	r3, [pc, #568]	; (8003a24 <HAL_DMA_IRQHandler+0x248>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a8e      	ldr	r2, [pc, #568]	; (8003a28 <HAL_DMA_IRQHandler+0x24c>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	2208      	movs	r2, #8
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01a      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2208      	movs	r2, #8
 8003836:	409a      	lsls	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f043 0201 	orr.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	2201      	movs	r2, #1
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	2201      	movs	r2, #1
 800386c:	409a      	lsls	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	2204      	movs	r2, #4
 8003884:	409a      	lsls	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d012      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2204      	movs	r2, #4
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2210      	movs	r2, #16
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d043      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d03c      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2210      	movs	r2, #16
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d024      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
 800390a:	e01f      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
 800391c:	e016      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0208 	bic.w	r2, r2, #8
 800393a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	2220      	movs	r2, #32
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 808f 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8087 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	2220      	movs	r2, #32
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b05      	cmp	r3, #5
 8003984:	d136      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0216 	bic.w	r2, r2, #22
 8003994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x1da>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0208 	bic.w	r2, r2, #8
 80039c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	223f      	movs	r2, #63	; 0x3f
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d07e      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
        }
        return;
 80039f2:	e079      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d031      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
 8003a20:	e02c      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000
 8003a28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e01e      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0210 	bic.w	r2, r2, #16
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d032      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2205      	movs	r2, #5
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d307      	bcc.n	8003ac4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f2      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x2cc>
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ac4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e000      	b.n	8003aea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ae8:	bf00      	nop
    }
  }
}
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	3b10      	subs	r3, #16
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <DMA_CalcBaseAndBitshift+0x64>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b0a:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <DMA_CalcBaseAndBitshift+0x68>)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d909      	bls.n	8003b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	1d1a      	adds	r2, r3, #4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b30:	e007      	b.n	8003b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	aaaaaaab 	.word	0xaaaaaaab
 8003b58:	0800d108 	.word	0x0800d108

08003b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11f      	bne.n	8003bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d856      	bhi.n	8003c2a <DMA_CheckFifoParam+0xce>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <DMA_CheckFifoParam+0x28>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba7 	.word	0x08003ba7
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003c2b 	.word	0x08003c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d046      	beq.n	8003c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba4:	e043      	b.n	8003c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bae:	d140      	bne.n	8003c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e03d      	b.n	8003c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	d121      	bne.n	8003c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d837      	bhi.n	8003c36 <DMA_CheckFifoParam+0xda>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <DMA_CheckFifoParam+0x70>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003be3 	.word	0x08003be3
 8003bd4:	08003bdd 	.word	0x08003bdd
 8003bd8:	08003bf5 	.word	0x08003bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e030      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d025      	beq.n	8003c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf2:	e022      	b.n	8003c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bfc:	d11f      	bne.n	8003c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c02:	e01c      	b.n	8003c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d903      	bls.n	8003c12 <DMA_CheckFifoParam+0xb6>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d003      	beq.n	8003c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c10:	e018      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
      break;
 8003c16:	e015      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
      break;
 8003c28:	e00b      	b.n	8003c42 <DMA_CheckFifoParam+0xe6>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e00a      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e008      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e006      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e004      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
    }
  } 
  
  return status; 
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop

08003c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	e159      	b.n	8003f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c70:	2201      	movs	r2, #1
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	f040 8148 	bne.w	8003f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d005      	beq.n	8003ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d130      	bne.n	8003d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cdc:	2201      	movs	r2, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 0201 	and.w	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d017      	beq.n	8003d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2203      	movs	r2, #3
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d123      	bne.n	8003d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	08da      	lsrs	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3208      	adds	r2, #8
 8003d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	220f      	movs	r2, #15
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	08da      	lsrs	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3208      	adds	r2, #8
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	2203      	movs	r2, #3
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0203 	and.w	r2, r3, #3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a2 	beq.w	8003f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <HAL_GPIO_Init+0x2e8>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	4a56      	ldr	r2, [pc, #344]	; (8003f3c <HAL_GPIO_Init+0x2e8>)
 8003de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dea:	4b54      	ldr	r3, [pc, #336]	; (8003f3c <HAL_GPIO_Init+0x2e8>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003df6:	4a52      	ldr	r2, [pc, #328]	; (8003f40 <HAL_GPIO_Init+0x2ec>)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	220f      	movs	r2, #15
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a49      	ldr	r2, [pc, #292]	; (8003f44 <HAL_GPIO_Init+0x2f0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d019      	beq.n	8003e56 <HAL_GPIO_Init+0x202>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a48      	ldr	r2, [pc, #288]	; (8003f48 <HAL_GPIO_Init+0x2f4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_GPIO_Init+0x1fe>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a47      	ldr	r2, [pc, #284]	; (8003f4c <HAL_GPIO_Init+0x2f8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00d      	beq.n	8003e4e <HAL_GPIO_Init+0x1fa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a46      	ldr	r2, [pc, #280]	; (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <HAL_GPIO_Init+0x1f6>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a45      	ldr	r2, [pc, #276]	; (8003f54 <HAL_GPIO_Init+0x300>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_GPIO_Init+0x1f2>
 8003e42:	2304      	movs	r3, #4
 8003e44:	e008      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e46:	2307      	movs	r3, #7
 8003e48:	e006      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e004      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e002      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e56:	2300      	movs	r3, #0
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	f002 0203 	and.w	r2, r2, #3
 8003e5e:	0092      	lsls	r2, r2, #2
 8003e60:	4093      	lsls	r3, r2
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e68:	4935      	ldr	r1, [pc, #212]	; (8003f40 <HAL_GPIO_Init+0x2ec>)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	3302      	adds	r3, #2
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e76:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eca:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ef4:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f18:	4a0f      	ldr	r2, [pc, #60]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b0f      	cmp	r3, #15
 8003f28:	f67f aea2 	bls.w	8003c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	3724      	adds	r7, #36	; 0x24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40013800 	.word	0x40013800
 8003f44:	40020000 	.word	0x40020000
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	40020800 	.word	0x40020800
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40013c00 	.word	0x40013c00

08003f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	807b      	strh	r3, [r7, #2]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f6c:	787b      	ldrb	r3, [r7, #1]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f78:	e003      	b.n	8003f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	041a      	lsls	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	619a      	str	r2, [r3, #24]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fa0:	887a      	ldrh	r2, [r7, #2]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	041a      	lsls	r2, r3, #16
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	400b      	ands	r3, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fda:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fb36 	bl	8002654 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e12b      	b.n	800425e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe fc7c 	bl	8002918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	; 0x24
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004058:	f001 fbbc 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 800405c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4a81      	ldr	r2, [pc, #516]	; (8004268 <HAL_I2C_Init+0x274>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d807      	bhi.n	8004078 <HAL_I2C_Init+0x84>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a80      	ldr	r2, [pc, #512]	; (800426c <HAL_I2C_Init+0x278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e006      	b.n	8004086 <HAL_I2C_Init+0x92>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a7d      	ldr	r2, [pc, #500]	; (8004270 <HAL_I2C_Init+0x27c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	bf94      	ite	ls
 8004080:	2301      	movls	r3, #1
 8004082:	2300      	movhi	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0e7      	b.n	800425e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a78      	ldr	r2, [pc, #480]	; (8004274 <HAL_I2C_Init+0x280>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0c9b      	lsrs	r3, r3, #18
 8004098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <HAL_I2C_Init+0x274>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <HAL_I2C_Init+0xd4>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3301      	adds	r3, #1
 80040c6:	e009      	b.n	80040dc <HAL_I2C_Init+0xe8>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	4a69      	ldr	r2, [pc, #420]	; (8004278 <HAL_I2C_Init+0x284>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	3301      	adds	r3, #1
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	495c      	ldr	r1, [pc, #368]	; (8004268 <HAL_I2C_Init+0x274>)
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d819      	bhi.n	8004130 <HAL_I2C_Init+0x13c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e59      	subs	r1, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fbb1 f3f3 	udiv	r3, r1, r3
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004110:	400b      	ands	r3, r1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_I2C_Init+0x138>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e59      	subs	r1, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fbb1 f3f3 	udiv	r3, r1, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412a:	e051      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800412c:	2304      	movs	r3, #4
 800412e:	e04f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d111      	bne.n	800415c <HAL_I2C_Init+0x168>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e58      	subs	r0, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e012      	b.n	8004182 <HAL_I2C_Init+0x18e>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e58      	subs	r0, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	0099      	lsls	r1, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Init+0x196>
 8004186:	2301      	movs	r3, #1
 8004188:	e022      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_I2C_Init+0x1bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1e58      	subs	r0, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	440b      	add	r3, r1
 80041a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	e00f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e58      	subs	r0, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	0099      	lsls	r1, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c6:	3301      	adds	r3, #1
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	6809      	ldr	r1, [r1, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6911      	ldr	r1, [r2, #16]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68d2      	ldr	r2, [r2, #12]
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	000186a0 	.word	0x000186a0
 800426c:	001e847f 	.word	0x001e847f
 8004270:	003d08ff 	.word	0x003d08ff
 8004274:	431bde83 	.word	0x431bde83
 8004278:	10624dd3 	.word	0x10624dd3

0800427c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4603      	mov	r3, r0
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	460b      	mov	r3, r1
 8004290:	813b      	strh	r3, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004296:	f7fe fe4f 	bl	8002f38 <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	f040 80d9 	bne.w	800445c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2319      	movs	r3, #25
 80042b0:	2201      	movs	r2, #1
 80042b2:	496d      	ldr	r1, [pc, #436]	; (8004468 <HAL_I2C_Mem_Write+0x1ec>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fc7f 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
 80042c2:	e0cc      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Mem_Write+0x56>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0c5      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d007      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2221      	movs	r2, #33	; 0x21
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	; 0x40
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a4d      	ldr	r2, [pc, #308]	; (800446c <HAL_I2C_Mem_Write+0x1f0>)
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800433a:	88f8      	ldrh	r0, [r7, #6]
 800433c:	893a      	ldrh	r2, [r7, #8]
 800433e:	8979      	ldrh	r1, [r7, #10]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4603      	mov	r3, r0
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fab6 	bl	80048bc <I2C_RequestMemoryWrite>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d052      	beq.n	80043fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e081      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fd00 	bl	8004d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b04      	cmp	r3, #4
 8004370:	d107      	bne.n	8004382 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004380:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06b      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d11b      	bne.n	80043fc <HAL_I2C_Mem_Write+0x180>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d017      	beq.n	80043fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1aa      	bne.n	800435a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fcec 	bl	8004de6 <I2C_WaitOnBTFFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b04      	cmp	r3, #4
 800441a:	d107      	bne.n	800442c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e016      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	00100002 	.word	0x00100002
 800446c:	ffff0000 	.word	0xffff0000

08004470 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08c      	sub	sp, #48	; 0x30
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	4608      	mov	r0, r1
 800447a:	4611      	mov	r1, r2
 800447c:	461a      	mov	r2, r3
 800447e:	4603      	mov	r3, r0
 8004480:	817b      	strh	r3, [r7, #10]
 8004482:	460b      	mov	r3, r1
 8004484:	813b      	strh	r3, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800448a:	f7fe fd55 	bl	8002f38 <HAL_GetTick>
 800448e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b20      	cmp	r3, #32
 800449a:	f040 8208 	bne.w	80048ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	2319      	movs	r3, #25
 80044a4:	2201      	movs	r2, #1
 80044a6:	497b      	ldr	r1, [pc, #492]	; (8004694 <HAL_I2C_Mem_Read+0x224>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fb85 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
 80044b6:	e1fb      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_I2C_Mem_Read+0x56>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e1f4      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d007      	beq.n	80044ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2222      	movs	r2, #34	; 0x22
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2240      	movs	r2, #64	; 0x40
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800451c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a5b      	ldr	r2, [pc, #364]	; (8004698 <HAL_I2C_Mem_Read+0x228>)
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800452e:	88f8      	ldrh	r0, [r7, #6]
 8004530:	893a      	ldrh	r2, [r7, #8]
 8004532:	8979      	ldrh	r1, [r7, #10]
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	4603      	mov	r3, r0
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa52 	bl	80049e8 <I2C_RequestMemoryRead>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1b0      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d113      	bne.n	800457e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	623b      	str	r3, [r7, #32]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e184      	b.n	8004888 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	2b01      	cmp	r3, #1
 8004584:	d11b      	bne.n	80045be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e164      	b.n	8004888 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d11b      	bne.n	80045fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	e144      	b.n	8004888 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004614:	e138      	b.n	8004888 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461a:	2b03      	cmp	r3, #3
 800461c:	f200 80f1 	bhi.w	8004802 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	2b01      	cmp	r3, #1
 8004626:	d123      	bne.n	8004670 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fc1b 	bl	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e139      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800466e:	e10b      	b.n	8004888 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	2b02      	cmp	r3, #2
 8004676:	d14e      	bne.n	8004716 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	2200      	movs	r2, #0
 8004680:	4906      	ldr	r1, [pc, #24]	; (800469c <HAL_I2C_Mem_Read+0x22c>)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fa98 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e10e      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
 8004692:	bf00      	nop
 8004694:	00100002 	.word	0x00100002
 8004698:	ffff0000 	.word	0xffff0000
 800469c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004714:	e0b8      	b.n	8004888 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	2200      	movs	r2, #0
 800471e:	4966      	ldr	r1, [pc, #408]	; (80048b8 <HAL_I2C_Mem_Read+0x448>)
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fa49 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0bf      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	2200      	movs	r2, #0
 800477a:	494f      	ldr	r1, [pc, #316]	; (80048b8 <HAL_I2C_Mem_Read+0x448>)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fa1b 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e091      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004800:	e042      	b.n	8004888 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fb2e 	bl	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e04c      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b04      	cmp	r3, #4
 8004854:	d118      	bne.n	8004888 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f aec2 	bne.w	8004616 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e000      	b.n	80048b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3728      	adds	r7, #40	; 0x28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	00010004 	.word	0x00010004

080048bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	461a      	mov	r2, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	817b      	strh	r3, [r7, #10]
 80048ce:	460b      	mov	r3, r1
 80048d0:	813b      	strh	r3, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f960 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00d      	beq.n	800491a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490c:	d103      	bne.n	8004916 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e05f      	b.n	80049da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800491a:	897b      	ldrh	r3, [r7, #10]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	492d      	ldr	r1, [pc, #180]	; (80049e4 <I2C_RequestMemoryWrite+0x128>)
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f998 	bl	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e04c      	b.n	80049da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	6a39      	ldr	r1, [r7, #32]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fa02 	bl	8004d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00d      	beq.n	8004982 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b04      	cmp	r3, #4
 800496c:	d107      	bne.n	800497e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e02b      	b.n	80049da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d105      	bne.n	8004994 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004988:	893b      	ldrh	r3, [r7, #8]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	611a      	str	r2, [r3, #16]
 8004992:	e021      	b.n	80049d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004994:	893b      	ldrh	r3, [r7, #8]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	b29b      	uxth	r3, r3
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a4:	6a39      	ldr	r1, [r7, #32]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f9dc 	bl	8004d64 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d107      	bne.n	80049ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e005      	b.n	80049da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ce:	893b      	ldrh	r3, [r7, #8]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	00010002 	.word	0x00010002

080049e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	460b      	mov	r3, r1
 80049fc:	813b      	strh	r3, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f8c2 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a48:	d103      	bne.n	8004a52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0aa      	b.n	8004bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	4952      	ldr	r1, [pc, #328]	; (8004bb4 <I2C_RequestMemoryRead+0x1cc>)
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f8fa 	bl	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e097      	b.n	8004bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	6a39      	ldr	r1, [r7, #32]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f964 	bl	8004d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d107      	bne.n	8004aba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e076      	b.n	8004bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d105      	bne.n	8004ad0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ac4:	893b      	ldrh	r3, [r7, #8]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	611a      	str	r2, [r3, #16]
 8004ace:	e021      	b.n	8004b14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ad0:	893b      	ldrh	r3, [r7, #8]
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	6a39      	ldr	r1, [r7, #32]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f93e 	bl	8004d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d107      	bne.n	8004b06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e050      	b.n	8004bac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0a:	893b      	ldrh	r3, [r7, #8]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	6a39      	ldr	r1, [r7, #32]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f923 	bl	8004d64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d107      	bne.n	8004b3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e035      	b.n	8004bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f82b 	bl	8004bb8 <I2C_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b76:	d103      	bne.n	8004b80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e013      	b.n	8004bac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b84:	897b      	ldrh	r3, [r7, #10]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	4906      	ldr	r1, [pc, #24]	; (8004bb4 <I2C_RequestMemoryRead+0x1cc>)
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f863 	bl	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	00010002 	.word	0x00010002

08004bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc8:	e025      	b.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d021      	beq.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7fe f9b1 	bl	8002f38 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d116      	bne.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e023      	b.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10d      	bne.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	43da      	mvns	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	e00c      	b.n	8004c56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	43da      	mvns	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf0c      	ite	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	2300      	movne	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d0b6      	beq.n	8004bca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c74:	e051      	b.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c84:	d123      	bne.n	8004cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f043 0204 	orr.w	r2, r3, #4
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e046      	b.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d021      	beq.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7fe f92f 	bl	8002f38 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e020      	b.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10c      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e00b      	b.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d18d      	bne.n	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d70:	e02d      	b.n	8004dce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f8ce 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e02d      	b.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d021      	beq.n	8004dce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	f7fe f8d5 	bl	8002f38 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d302      	bcc.n	8004da0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d116      	bne.n	8004dce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e007      	b.n	8004dde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d1ca      	bne.n	8004d72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004df2:	e02d      	b.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f88d 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e02d      	b.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d021      	beq.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fe f894 	bl	8002f38 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d116      	bne.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e007      	b.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d1ca      	bne.n	8004df4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e74:	e042      	b.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d119      	bne.n	8004eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0210 	mvn.w	r2, #16
 8004e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e029      	b.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7fe f83e 	bl	8002f38 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d116      	bne.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e007      	b.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d1b5      	bne.n	8004e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d11b      	bne.n	8004f64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f043 0204 	orr.w	r2, r3, #4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e267      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d075      	beq.n	800507e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f92:	4b88      	ldr	r3, [pc, #544]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9e:	4b85      	ldr	r3, [pc, #532]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d112      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004faa:	4b82      	ldr	r3, [pc, #520]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb6:	d10b      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb8:	4b7e      	ldr	r3, [pc, #504]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d05b      	beq.n	800507c <HAL_RCC_OscConfig+0x108>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d157      	bne.n	800507c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e242      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d106      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x74>
 8004fda:	4b76      	ldr	r3, [pc, #472]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a75      	ldr	r2, [pc, #468]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e01d      	b.n	8005024 <HAL_RCC_OscConfig+0xb0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff0:	d10c      	bne.n	800500c <HAL_RCC_OscConfig+0x98>
 8004ff2:	4b70      	ldr	r3, [pc, #448]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a6f      	ldr	r2, [pc, #444]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	4b6d      	ldr	r3, [pc, #436]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a6c      	ldr	r2, [pc, #432]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	e00b      	b.n	8005024 <HAL_RCC_OscConfig+0xb0>
 800500c:	4b69      	ldr	r3, [pc, #420]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a68      	ldr	r2, [pc, #416]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4b66      	ldr	r3, [pc, #408]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a65      	ldr	r2, [pc, #404]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 800501e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d013      	beq.n	8005054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502c:	f7fd ff84 	bl	8002f38 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005034:	f7fd ff80 	bl	8002f38 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	; 0x64
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e207      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	4b5b      	ldr	r3, [pc, #364]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0xc0>
 8005052:	e014      	b.n	800507e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fd ff70 	bl	8002f38 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800505c:	f7fd ff6c 	bl	8002f38 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e1f3      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0xe8>
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d063      	beq.n	8005152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800508a:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005096:	4b47      	ldr	r3, [pc, #284]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d11c      	bne.n	80050dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a2:	4b44      	ldr	r3, [pc, #272]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d116      	bne.n	80050dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ae:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_RCC_OscConfig+0x152>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d001      	beq.n	80050c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e1c7      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c6:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4937      	ldr	r1, [pc, #220]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050da:	e03a      	b.n	8005152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d020      	beq.n	8005126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e4:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <HAL_RCC_OscConfig+0x244>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7fd ff25 	bl	8002f38 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f2:	f7fd ff21 	bl	8002f38 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e1a8      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005110:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4925      	ldr	r1, [pc, #148]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	e015      	b.n	8005152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <HAL_RCC_OscConfig+0x244>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fd ff04 	bl	8002f38 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005134:	f7fd ff00 	bl	8002f38 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e187      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005146:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d036      	beq.n	80051cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_RCC_OscConfig+0x248>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fd fee4 	bl	8002f38 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005174:	f7fd fee0 	bl	8002f38 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e167      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCC_OscConfig+0x240>)
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0x200>
 8005192:	e01b      	b.n	80051cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_OscConfig+0x248>)
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519a:	f7fd fecd 	bl	8002f38 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a0:	e00e      	b.n	80051c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051a2:	f7fd fec9 	bl	8002f38 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d907      	bls.n	80051c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e150      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
 80051b4:	40023800 	.word	0x40023800
 80051b8:	42470000 	.word	0x42470000
 80051bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	4b88      	ldr	r3, [pc, #544]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80051c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ea      	bne.n	80051a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8097 	beq.w	8005308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051da:	2300      	movs	r3, #0
 80051dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051de:	4b81      	ldr	r3, [pc, #516]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10f      	bne.n	800520a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	4b7d      	ldr	r3, [pc, #500]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4a7c      	ldr	r2, [pc, #496]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6413      	str	r3, [r2, #64]	; 0x40
 80051fa:	4b7a      	ldr	r3, [pc, #488]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	60bb      	str	r3, [r7, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520a:	4b77      	ldr	r3, [pc, #476]	; (80053e8 <HAL_RCC_OscConfig+0x474>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d118      	bne.n	8005248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005216:	4b74      	ldr	r3, [pc, #464]	; (80053e8 <HAL_RCC_OscConfig+0x474>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a73      	ldr	r2, [pc, #460]	; (80053e8 <HAL_RCC_OscConfig+0x474>)
 800521c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005222:	f7fd fe89 	bl	8002f38 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522a:	f7fd fe85 	bl	8002f38 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e10c      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	4b6a      	ldr	r3, [pc, #424]	; (80053e8 <HAL_RCC_OscConfig+0x474>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d106      	bne.n	800525e <HAL_RCC_OscConfig+0x2ea>
 8005250:	4b64      	ldr	r3, [pc, #400]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	4a63      	ldr	r2, [pc, #396]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6713      	str	r3, [r2, #112]	; 0x70
 800525c:	e01c      	b.n	8005298 <HAL_RCC_OscConfig+0x324>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b05      	cmp	r3, #5
 8005264:	d10c      	bne.n	8005280 <HAL_RCC_OscConfig+0x30c>
 8005266:	4b5f      	ldr	r3, [pc, #380]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	4a5e      	ldr	r2, [pc, #376]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 800526c:	f043 0304 	orr.w	r3, r3, #4
 8005270:	6713      	str	r3, [r2, #112]	; 0x70
 8005272:	4b5c      	ldr	r3, [pc, #368]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a5b      	ldr	r2, [pc, #364]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	6713      	str	r3, [r2, #112]	; 0x70
 800527e:	e00b      	b.n	8005298 <HAL_RCC_OscConfig+0x324>
 8005280:	4b58      	ldr	r3, [pc, #352]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	4a57      	ldr	r2, [pc, #348]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	6713      	str	r3, [r2, #112]	; 0x70
 800528c:	4b55      	ldr	r3, [pc, #340]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	4a54      	ldr	r2, [pc, #336]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005292:	f023 0304 	bic.w	r3, r3, #4
 8005296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a0:	f7fd fe4a 	bl	8002f38 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a6:	e00a      	b.n	80052be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a8:	f7fd fe46 	bl	8002f38 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e0cb      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052be:	4b49      	ldr	r3, [pc, #292]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ee      	beq.n	80052a8 <HAL_RCC_OscConfig+0x334>
 80052ca:	e014      	b.n	80052f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052cc:	f7fd fe34 	bl	8002f38 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d2:	e00a      	b.n	80052ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d4:	f7fd fe30 	bl	8002f38 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e0b5      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ea:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ee      	bne.n	80052d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d105      	bne.n	8005308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fc:	4b39      	ldr	r3, [pc, #228]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	4a38      	ldr	r2, [pc, #224]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80a1 	beq.w	8005454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005312:	4b34      	ldr	r3, [pc, #208]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
 800531a:	2b08      	cmp	r3, #8
 800531c:	d05c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d141      	bne.n	80053aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005326:	4b31      	ldr	r3, [pc, #196]	; (80053ec <HAL_RCC_OscConfig+0x478>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532c:	f7fd fe04 	bl	8002f38 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005334:	f7fd fe00 	bl	8002f38 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e087      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f0      	bne.n	8005334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	019b      	lsls	r3, r3, #6
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	3b01      	subs	r3, #1
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	491b      	ldr	r1, [pc, #108]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <HAL_RCC_OscConfig+0x478>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005382:	f7fd fdd9 	bl	8002f38 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538a:	f7fd fdd5 	bl	8002f38 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e05c      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x416>
 80053a8:	e054      	b.n	8005454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <HAL_RCC_OscConfig+0x478>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b0:	f7fd fdc2 	bl	8002f38 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b8:	f7fd fdbe 	bl	8002f38 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e045      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_RCC_OscConfig+0x470>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x444>
 80053d6:	e03d      	b.n	8005454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d107      	bne.n	80053f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e038      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
 80053e4:	40023800 	.word	0x40023800
 80053e8:	40007000 	.word	0x40007000
 80053ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <HAL_RCC_OscConfig+0x4ec>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d028      	beq.n	8005450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d121      	bne.n	8005450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	429a      	cmp	r2, r3
 8005418:	d11a      	bne.n	8005450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005420:	4013      	ands	r3, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005428:	4293      	cmp	r3, r2
 800542a:	d111      	bne.n	8005450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	3b01      	subs	r3, #1
 800543a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543c:	429a      	cmp	r2, r3
 800543e:	d107      	bne.n	8005450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800

08005464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0cc      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005478:	4b68      	ldr	r3, [pc, #416]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d90c      	bls.n	80054a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b65      	ldr	r3, [pc, #404]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b63      	ldr	r3, [pc, #396]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0b8      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b8:	4b59      	ldr	r3, [pc, #356]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a58      	ldr	r2, [pc, #352]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d0:	4b53      	ldr	r3, [pc, #332]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a52      	ldr	r2, [pc, #328]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054dc:	4b50      	ldr	r3, [pc, #320]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	494d      	ldr	r1, [pc, #308]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d044      	beq.n	8005584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005502:	4b47      	ldr	r3, [pc, #284]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d119      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e07f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d003      	beq.n	8005522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551e:	2b03      	cmp	r3, #3
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005522:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e06f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005532:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e067      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005542:	4b37      	ldr	r3, [pc, #220]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f023 0203 	bic.w	r2, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4934      	ldr	r1, [pc, #208]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005554:	f7fd fcf0 	bl	8002f38 <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555a:	e00a      	b.n	8005572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555c:	f7fd fcec 	bl	8002f38 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e04f      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 020c 	and.w	r2, r3, #12
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	429a      	cmp	r2, r3
 8005582:	d1eb      	bne.n	800555c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005584:	4b25      	ldr	r3, [pc, #148]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d20c      	bcs.n	80055ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b20      	ldr	r3, [pc, #128]	; (800561c <HAL_RCC_ClockConfig+0x1b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e032      	b.n	8005612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b8:	4b19      	ldr	r3, [pc, #100]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4916      	ldr	r1, [pc, #88]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	490e      	ldr	r1, [pc, #56]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ea:	f000 f821 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	490a      	ldr	r1, [pc, #40]	; (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 80055fc:	5ccb      	ldrb	r3, [r1, r3]
 80055fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <HAL_RCC_ClockConfig+0x1c8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7fd fc50 	bl	8002eb0 <HAL_InitTick>

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40023c00 	.word	0x40023c00
 8005620:	40023800 	.word	0x40023800
 8005624:	0800d0f0 	.word	0x0800d0f0
 8005628:	20000000 	.word	0x20000000
 800562c:	20000004 	.word	0x20000004

08005630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005634:	b090      	sub	sp, #64	; 0x40
 8005636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
 800563c:	2300      	movs	r3, #0
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005640:	2300      	movs	r3, #0
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005648:	4b59      	ldr	r3, [pc, #356]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d00d      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0x40>
 8005654:	2b08      	cmp	r3, #8
 8005656:	f200 80a1 	bhi.w	800579c <HAL_RCC_GetSysClockFreq+0x16c>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x34>
 800565e:	2b04      	cmp	r3, #4
 8005660:	d003      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x3a>
 8005662:	e09b      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005664:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005668:	e09b      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566a:	4b53      	ldr	r3, [pc, #332]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800566c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800566e:	e098      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005670:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567a:	4b4d      	ldr	r3, [pc, #308]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d028      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005686:	4b4a      	ldr	r3, [pc, #296]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	099b      	lsrs	r3, r3, #6
 800568c:	2200      	movs	r2, #0
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	627a      	str	r2, [r7, #36]	; 0x24
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005698:	2100      	movs	r1, #0
 800569a:	4b47      	ldr	r3, [pc, #284]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800569c:	fb03 f201 	mul.w	r2, r3, r1
 80056a0:	2300      	movs	r3, #0
 80056a2:	fb00 f303 	mul.w	r3, r0, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	4a43      	ldr	r2, [pc, #268]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056aa:	fba0 1202 	umull	r1, r2, r0, r2
 80056ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b0:	460a      	mov	r2, r1
 80056b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80056b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b6:	4413      	add	r3, r2
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	2200      	movs	r2, #0
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	61fa      	str	r2, [r7, #28]
 80056c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056ca:	f7fb faaf 	bl	8000c2c <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4613      	mov	r3, r2
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d6:	e053      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d8:	4b35      	ldr	r3, [pc, #212]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	099b      	lsrs	r3, r3, #6
 80056de:	2200      	movs	r2, #0
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	617a      	str	r2, [r7, #20]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	4652      	mov	r2, sl
 80056f0:	465b      	mov	r3, fp
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	0159      	lsls	r1, r3, #5
 80056fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005700:	0150      	lsls	r0, r2, #5
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	ebb2 080a 	subs.w	r8, r2, sl
 800570a:	eb63 090b 	sbc.w	r9, r3, fp
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800571a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800571e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005722:	ebb2 0408 	subs.w	r4, r2, r8
 8005726:	eb63 0509 	sbc.w	r5, r3, r9
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	00eb      	lsls	r3, r5, #3
 8005734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005738:	00e2      	lsls	r2, r4, #3
 800573a:	4614      	mov	r4, r2
 800573c:	461d      	mov	r5, r3
 800573e:	eb14 030a 	adds.w	r3, r4, sl
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	eb45 030b 	adc.w	r3, r5, fp
 8005748:	607b      	str	r3, [r7, #4]
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005756:	4629      	mov	r1, r5
 8005758:	028b      	lsls	r3, r1, #10
 800575a:	4621      	mov	r1, r4
 800575c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005760:	4621      	mov	r1, r4
 8005762:	028a      	lsls	r2, r1, #10
 8005764:	4610      	mov	r0, r2
 8005766:	4619      	mov	r1, r3
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	2200      	movs	r2, #0
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	60fa      	str	r2, [r7, #12]
 8005770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005774:	f7fb fa5a 	bl	8000c2c <__aeabi_uldivmod>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4613      	mov	r3, r2
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	3301      	adds	r3, #1
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800579a:	e002      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3740      	adds	r7, #64	; 0x40
 80057a8:	46bd      	mov	sp, r7
 80057aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	017d7840 	.word	0x017d7840

080057bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000000 	.word	0x20000000

080057d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057d8:	f7ff fff0 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	0a9b      	lsrs	r3, r3, #10
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4903      	ldr	r1, [pc, #12]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40023800 	.word	0x40023800
 80057f8:	0800d100 	.word	0x0800d100

080057fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005800:	f7ff ffdc 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	0b5b      	lsrs	r3, r3, #13
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	; (8005820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40023800 	.word	0x40023800
 8005820:	0800d100 	.word	0x0800d100

08005824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e07b      	b.n	800592e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d108      	bne.n	8005850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005846:	d009      	beq.n	800585c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	61da      	str	r2, [r3, #28]
 800584e:	e005      	b.n	800585c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd f896 	bl	80029a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e0:	ea42 0103 	orr.w	r1, r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	f003 0104 	and.w	r1, r3, #4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	f003 0210 	and.w	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b088      	sub	sp, #32
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_SPI_Transmit+0x22>
 8005954:	2302      	movs	r3, #2
 8005956:	e126      	b.n	8005ba6 <HAL_SPI_Transmit+0x270>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005960:	f7fd faea 	bl	8002f38 <HAL_GetTick>
 8005964:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d002      	beq.n	800597c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005976:	2302      	movs	r3, #2
 8005978:	77fb      	strb	r3, [r7, #31]
    goto error;
 800597a:	e10b      	b.n	8005b94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_SPI_Transmit+0x52>
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800598c:	e102      	b.n	8005b94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2203      	movs	r2, #3
 8005992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d4:	d10f      	bne.n	80059f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1c:	d14b      	bne.n	8005ab6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0xf6>
 8005a26:	8afb      	ldrh	r3, [r7, #22]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d13e      	bne.n	8005aaa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	1c9a      	adds	r2, r3, #2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a50:	e02b      	b.n	8005aaa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d112      	bne.n	8005a86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a84:	e011      	b.n	8005aaa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a86:	f7fd fa57 	bl	8002f38 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d803      	bhi.n	8005a9e <HAL_SPI_Transmit+0x168>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_Transmit+0x16e>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005aa8:	e074      	b.n	8005b94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1ce      	bne.n	8005a52 <HAL_SPI_Transmit+0x11c>
 8005ab4:	e04c      	b.n	8005b50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_SPI_Transmit+0x18e>
 8005abe:	8afb      	ldrh	r3, [r7, #22]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d140      	bne.n	8005b46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	7812      	ldrb	r2, [r2, #0]
 8005ad0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aea:	e02c      	b.n	8005b46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d113      	bne.n	8005b22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	7812      	ldrb	r2, [r2, #0]
 8005b06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b20:	e011      	b.n	8005b46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b22:	f7fd fa09 	bl	8002f38 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d803      	bhi.n	8005b3a <HAL_SPI_Transmit+0x204>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b38:	d102      	bne.n	8005b40 <HAL_SPI_Transmit+0x20a>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b44:	e026      	b.n	8005b94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1cd      	bne.n	8005aec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f8b3 	bl	8005cc0 <SPI_EndRxTxTransaction>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e000      	b.n	8005b94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ba4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bc0:	f7fd f9ba 	bl	8002f38 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	4413      	add	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bd0:	f7fd f9b2 	bl	8002f38 <HAL_GetTick>
 8005bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bd6:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	015b      	lsls	r3, r3, #5
 8005bdc:	0d1b      	lsrs	r3, r3, #20
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005be6:	e054      	b.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d050      	beq.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bf0:	f7fd f9a2 	bl	8002f38 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d902      	bls.n	8005c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d13d      	bne.n	8005c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1e:	d111      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c28:	d004      	beq.n	8005c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c32:	d107      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4c:	d10f      	bne.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e017      	b.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d19b      	bne.n	8005be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000000 	.word	0x20000000

08005cc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <SPI_EndRxTxTransaction+0x7c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <SPI_EndRxTxTransaction+0x80>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	0d5b      	lsrs	r3, r3, #21
 8005cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cdc:	fb02 f303 	mul.w	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cea:	d112      	bne.n	8005d12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2180      	movs	r1, #128	; 0x80
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff ff5a 	bl	8005bb0 <SPI_WaitFlagStateUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e00f      	b.n	8005d32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d0f2      	beq.n	8005d12 <SPI_EndRxTxTransaction+0x52>
 8005d2c:	e000      	b.n	8005d30 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d2e:	bf00      	nop
  }

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000000 	.word	0x20000000
 8005d40:	165e9f81 	.word	0x165e9f81

08005d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e041      	b.n	8005dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fc feb6 	bl	8002adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f000 fa88 	bl	8006298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d001      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e044      	b.n	8005e86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d018      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d013      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00e      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <HAL_TIM_Base_Start_IT+0xb8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a17      	ldr	r2, [pc, #92]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x6c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d111      	bne.n	8005e74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b06      	cmp	r3, #6
 8005e60:	d010      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0201 	orr.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e72:	e007      	b.n	8005e84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40014000 	.word	0x40014000

08005ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d122      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0202 	mvn.w	r2, #2
 8005ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f9b5 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f9a7 	bl	8006246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f9b8 	bl	800626e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0204 	mvn.w	r2, #4
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f98b 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f97d 	bl	8006246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f98e 	bl	800626e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0208 	mvn.w	r2, #8
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2204      	movs	r2, #4
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f961 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f953 	bl	8006246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f964 	bl	800626e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0310 	and.w	r3, r3, #16
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d122      	bne.n	8006000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0210 	mvn.w	r2, #16
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f937 	bl	800625a <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f929 	bl	8006246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f93a 	bl	800626e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b01      	cmp	r3, #1
 800600c:	d10e      	bne.n	800602c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	d107      	bne.n	800602c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0201 	mvn.w	r2, #1
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fc fafe 	bl	8002628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d10e      	bne.n	8006058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006044:	2b80      	cmp	r3, #128	; 0x80
 8006046:	d107      	bne.n	8006058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa44 	bl	80064e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d10e      	bne.n	8006084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	d107      	bne.n	8006084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8ff 	bl	8006282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b20      	cmp	r3, #32
 8006090:	d10e      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b20      	cmp	r3, #32
 800609e:	d107      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0220 	mvn.w	r2, #32
 80060a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa0e 	bl	80064cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIM_ConfigClockSource+0x1c>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0b4      	b.n	800623e <HAL_TIM_ConfigClockSource+0x186>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610c:	d03e      	beq.n	800618c <HAL_TIM_ConfigClockSource+0xd4>
 800610e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006112:	f200 8087 	bhi.w	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	f000 8086 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x172>
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006122:	d87f      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b70      	cmp	r3, #112	; 0x70
 8006126:	d01a      	beq.n	800615e <HAL_TIM_ConfigClockSource+0xa6>
 8006128:	2b70      	cmp	r3, #112	; 0x70
 800612a:	d87b      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b60      	cmp	r3, #96	; 0x60
 800612e:	d050      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006130:	2b60      	cmp	r3, #96	; 0x60
 8006132:	d877      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b50      	cmp	r3, #80	; 0x50
 8006136:	d03c      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006138:	2b50      	cmp	r3, #80	; 0x50
 800613a:	d873      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b40      	cmp	r3, #64	; 0x40
 800613e:	d058      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d86f      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b30      	cmp	r3, #48	; 0x30
 8006146:	d064      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d86b      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 800614c:	2b20      	cmp	r3, #32
 800614e:	d060      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d867      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d05c      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 8006158:	2b10      	cmp	r3, #16
 800615a:	d05a      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x15a>
 800615c:	e062      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6899      	ldr	r1, [r3, #8]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f000 f98d 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	609a      	str	r2, [r3, #8]
      break;
 800618a:	e04f      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6899      	ldr	r1, [r3, #8]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f000 f976 	bl	800648c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ae:	609a      	str	r2, [r3, #8]
      break;
 80061b0:	e03c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6859      	ldr	r1, [r3, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	461a      	mov	r2, r3
 80061c0:	f000 f8ea 	bl	8006398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2150      	movs	r1, #80	; 0x50
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f943 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 80061d0:	e02c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	461a      	mov	r2, r3
 80061e0:	f000 f909 	bl	80063f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2160      	movs	r1, #96	; 0x60
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f933 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 80061f0:	e01c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	461a      	mov	r2, r3
 8006200:	f000 f8ca 	bl	8006398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f923 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8006210:	e00c      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f000 f91a 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8006222:	e003      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      break;
 8006228:	e000      	b.n	800622c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800622a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a34      	ldr	r2, [pc, #208]	; (800637c <TIM_Base_SetConfig+0xe4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00f      	beq.n	80062d0 <TIM_Base_SetConfig+0x38>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b6:	d00b      	beq.n	80062d0 <TIM_Base_SetConfig+0x38>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a31      	ldr	r2, [pc, #196]	; (8006380 <TIM_Base_SetConfig+0xe8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_Base_SetConfig+0x38>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a30      	ldr	r2, [pc, #192]	; (8006384 <TIM_Base_SetConfig+0xec>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_Base_SetConfig+0x38>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a2f      	ldr	r2, [pc, #188]	; (8006388 <TIM_Base_SetConfig+0xf0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d108      	bne.n	80062e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a25      	ldr	r2, [pc, #148]	; (800637c <TIM_Base_SetConfig+0xe4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01b      	beq.n	8006322 <TIM_Base_SetConfig+0x8a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d017      	beq.n	8006322 <TIM_Base_SetConfig+0x8a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <TIM_Base_SetConfig+0xe8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <TIM_Base_SetConfig+0x8a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a21      	ldr	r2, [pc, #132]	; (8006384 <TIM_Base_SetConfig+0xec>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00f      	beq.n	8006322 <TIM_Base_SetConfig+0x8a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a20      	ldr	r2, [pc, #128]	; (8006388 <TIM_Base_SetConfig+0xf0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00b      	beq.n	8006322 <TIM_Base_SetConfig+0x8a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a1f      	ldr	r2, [pc, #124]	; (800638c <TIM_Base_SetConfig+0xf4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d007      	beq.n	8006322 <TIM_Base_SetConfig+0x8a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <TIM_Base_SetConfig+0xf8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d003      	beq.n	8006322 <TIM_Base_SetConfig+0x8a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <TIM_Base_SetConfig+0xfc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d108      	bne.n	8006334 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a08      	ldr	r2, [pc, #32]	; (800637c <TIM_Base_SetConfig+0xe4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d103      	bne.n	8006368 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	615a      	str	r2, [r3, #20]
}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40014000 	.word	0x40014000
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800

08006398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 030a 	bic.w	r3, r3, #10
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b087      	sub	sp, #28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0210 	bic.w	r2, r3, #16
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	031b      	lsls	r3, r3, #12
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	f043 0307 	orr.w	r3, r3, #7
 8006478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e03f      	b.n	8006586 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fc fb1c 	bl	8002b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2224      	movs	r2, #36	; 0x24
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f929 	bl	8006790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800654c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800655c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800656c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b08a      	sub	sp, #40	; 0x28
 8006592:	af02      	add	r7, sp, #8
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d17c      	bne.n	80066a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <HAL_UART_Transmit+0x2c>
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e075      	b.n	80066aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_UART_Transmit+0x3e>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e06e      	b.n	80066aa <HAL_UART_Transmit+0x11c>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2221      	movs	r2, #33	; 0x21
 80065de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e2:	f7fc fca9 	bl	8002f38 <HAL_GetTick>
 80065e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	88fa      	ldrh	r2, [r7, #6]
 80065ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fc:	d108      	bne.n	8006610 <HAL_UART_Transmit+0x82>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	e003      	b.n	8006618 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006620:	e02a      	b.n	8006678 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	; 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f840 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e036      	b.n	80066aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006650:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	3302      	adds	r3, #2
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	e007      	b.n	800666a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	3301      	adds	r3, #1
 8006668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1cf      	bne.n	8006622 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2200      	movs	r2, #0
 800668a:	2140      	movs	r1, #64	; 0x40
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f810 	bl	80066b2 <UART_WaitOnFlagUntilTimeout>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e006      	b.n	80066aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e000      	b.n	80066aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b090      	sub	sp, #64	; 0x40
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c2:	e050      	b.n	8006766 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	d04c      	beq.n	8006766 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80066d2:	f7fc fc31 	bl	8002f38 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066de:	429a      	cmp	r2, r3
 80066e0:	d241      	bcs.n	8006766 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	330c      	adds	r3, #12
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006702:	637a      	str	r2, [r7, #52]	; 0x34
 8006704:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3314      	adds	r3, #20
 800671c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	613b      	str	r3, [r7, #16]
   return(result);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3314      	adds	r3, #20
 8006734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006736:	623a      	str	r2, [r7, #32]
 8006738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	69f9      	ldr	r1, [r7, #28]
 800673c:	6a3a      	ldr	r2, [r7, #32]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	61bb      	str	r3, [r7, #24]
   return(result);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e00f      	b.n	8006786 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4013      	ands	r3, r2
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	bf0c      	ite	eq
 8006776:	2301      	moveq	r3, #1
 8006778:	2300      	movne	r3, #0
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	429a      	cmp	r2, r3
 8006782:	d09f      	beq.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3740      	adds	r7, #64	; 0x40
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006794:	b0c0      	sub	sp, #256	; 0x100
 8006796:	af00      	add	r7, sp, #0
 8006798:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800679c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	68d9      	ldr	r1, [r3, #12]
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	ea40 0301 	orr.w	r3, r0, r1
 80067b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067e8:	f021 010c 	bic.w	r1, r1, #12
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067f6:	430b      	orrs	r3, r1
 80067f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680a:	6999      	ldr	r1, [r3, #24]
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	ea40 0301 	orr.w	r3, r0, r1
 8006816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b8f      	ldr	r3, [pc, #572]	; (8006a5c <UART_SetConfig+0x2cc>)
 8006820:	429a      	cmp	r2, r3
 8006822:	d005      	beq.n	8006830 <UART_SetConfig+0xa0>
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b8d      	ldr	r3, [pc, #564]	; (8006a60 <UART_SetConfig+0x2d0>)
 800682c:	429a      	cmp	r2, r3
 800682e:	d104      	bne.n	800683a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006830:	f7fe ffe4 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 8006834:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006838:	e003      	b.n	8006842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800683a:	f7fe ffcb 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 800683e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684c:	f040 810c 	bne.w	8006a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006854:	2200      	movs	r2, #0
 8006856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800685a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800685e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006862:	4622      	mov	r2, r4
 8006864:	462b      	mov	r3, r5
 8006866:	1891      	adds	r1, r2, r2
 8006868:	65b9      	str	r1, [r7, #88]	; 0x58
 800686a:	415b      	adcs	r3, r3
 800686c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800686e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006872:	4621      	mov	r1, r4
 8006874:	eb12 0801 	adds.w	r8, r2, r1
 8006878:	4629      	mov	r1, r5
 800687a:	eb43 0901 	adc.w	r9, r3, r1
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800688a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800688e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006892:	4690      	mov	r8, r2
 8006894:	4699      	mov	r9, r3
 8006896:	4623      	mov	r3, r4
 8006898:	eb18 0303 	adds.w	r3, r8, r3
 800689c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068a0:	462b      	mov	r3, r5
 80068a2:	eb49 0303 	adc.w	r3, r9, r3
 80068a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068be:	460b      	mov	r3, r1
 80068c0:	18db      	adds	r3, r3, r3
 80068c2:	653b      	str	r3, [r7, #80]	; 0x50
 80068c4:	4613      	mov	r3, r2
 80068c6:	eb42 0303 	adc.w	r3, r2, r3
 80068ca:	657b      	str	r3, [r7, #84]	; 0x54
 80068cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068d4:	f7fa f9aa 	bl	8000c2c <__aeabi_uldivmod>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4b61      	ldr	r3, [pc, #388]	; (8006a64 <UART_SetConfig+0x2d4>)
 80068de:	fba3 2302 	umull	r2, r3, r3, r2
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	011c      	lsls	r4, r3, #4
 80068e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	1891      	adds	r1, r2, r2
 80068fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006900:	415b      	adcs	r3, r3
 8006902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006908:	4641      	mov	r1, r8
 800690a:	eb12 0a01 	adds.w	sl, r2, r1
 800690e:	4649      	mov	r1, r9
 8006910:	eb43 0b01 	adc.w	fp, r3, r1
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006928:	4692      	mov	sl, r2
 800692a:	469b      	mov	fp, r3
 800692c:	4643      	mov	r3, r8
 800692e:	eb1a 0303 	adds.w	r3, sl, r3
 8006932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006936:	464b      	mov	r3, r9
 8006938:	eb4b 0303 	adc.w	r3, fp, r3
 800693c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800694c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006954:	460b      	mov	r3, r1
 8006956:	18db      	adds	r3, r3, r3
 8006958:	643b      	str	r3, [r7, #64]	; 0x40
 800695a:	4613      	mov	r3, r2
 800695c:	eb42 0303 	adc.w	r3, r2, r3
 8006960:	647b      	str	r3, [r7, #68]	; 0x44
 8006962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800696a:	f7fa f95f 	bl	8000c2c <__aeabi_uldivmod>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4611      	mov	r1, r2
 8006974:	4b3b      	ldr	r3, [pc, #236]	; (8006a64 <UART_SetConfig+0x2d4>)
 8006976:	fba3 2301 	umull	r2, r3, r3, r1
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	2264      	movs	r2, #100	; 0x64
 800697e:	fb02 f303 	mul.w	r3, r2, r3
 8006982:	1acb      	subs	r3, r1, r3
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800698a:	4b36      	ldr	r3, [pc, #216]	; (8006a64 <UART_SetConfig+0x2d4>)
 800698c:	fba3 2302 	umull	r2, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006998:	441c      	add	r4, r3
 800699a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	1891      	adds	r1, r2, r2
 80069b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80069b4:	415b      	adcs	r3, r3
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069bc:	4641      	mov	r1, r8
 80069be:	1851      	adds	r1, r2, r1
 80069c0:	6339      	str	r1, [r7, #48]	; 0x30
 80069c2:	4649      	mov	r1, r9
 80069c4:	414b      	adcs	r3, r1
 80069c6:	637b      	str	r3, [r7, #52]	; 0x34
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069d4:	4659      	mov	r1, fp
 80069d6:	00cb      	lsls	r3, r1, #3
 80069d8:	4651      	mov	r1, sl
 80069da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069de:	4651      	mov	r1, sl
 80069e0:	00ca      	lsls	r2, r1, #3
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	4642      	mov	r2, r8
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069f0:	464b      	mov	r3, r9
 80069f2:	460a      	mov	r2, r1
 80069f4:	eb42 0303 	adc.w	r3, r2, r3
 80069f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a10:	460b      	mov	r3, r1
 8006a12:	18db      	adds	r3, r3, r3
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a16:	4613      	mov	r3, r2
 8006a18:	eb42 0303 	adc.w	r3, r2, r3
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a26:	f7fa f901 	bl	8000c2c <__aeabi_uldivmod>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <UART_SetConfig+0x2d4>)
 8006a30:	fba3 1302 	umull	r1, r3, r3, r2
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	2164      	movs	r1, #100	; 0x64
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	3332      	adds	r3, #50	; 0x32
 8006a42:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <UART_SetConfig+0x2d4>)
 8006a44:	fba2 2303 	umull	r2, r3, r2, r3
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	f003 0207 	and.w	r2, r3, #7
 8006a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4422      	add	r2, r4
 8006a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a58:	e105      	b.n	8006c66 <UART_SetConfig+0x4d6>
 8006a5a:	bf00      	nop
 8006a5c:	40011000 	.word	0x40011000
 8006a60:	40011400 	.word	0x40011400
 8006a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a7a:	4642      	mov	r2, r8
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	1891      	adds	r1, r2, r2
 8006a80:	6239      	str	r1, [r7, #32]
 8006a82:	415b      	adcs	r3, r3
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
 8006a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	1854      	adds	r4, r2, r1
 8006a8e:	4649      	mov	r1, r9
 8006a90:	eb43 0501 	adc.w	r5, r3, r1
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	00eb      	lsls	r3, r5, #3
 8006a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aa2:	00e2      	lsls	r2, r4, #3
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	461d      	mov	r5, r3
 8006aa8:	4643      	mov	r3, r8
 8006aaa:	18e3      	adds	r3, r4, r3
 8006aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	eb45 0303 	adc.w	r3, r5, r3
 8006ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	008b      	lsls	r3, r1, #2
 8006ada:	4621      	mov	r1, r4
 8006adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	008a      	lsls	r2, r1, #2
 8006ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ae8:	f7fa f8a0 	bl	8000c2c <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4b60      	ldr	r3, [pc, #384]	; (8006c74 <UART_SetConfig+0x4e4>)
 8006af2:	fba3 2302 	umull	r2, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	011c      	lsls	r4, r3, #4
 8006afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	1891      	adds	r1, r2, r2
 8006b12:	61b9      	str	r1, [r7, #24]
 8006b14:	415b      	adcs	r3, r3
 8006b16:	61fb      	str	r3, [r7, #28]
 8006b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	1851      	adds	r1, r2, r1
 8006b20:	6139      	str	r1, [r7, #16]
 8006b22:	4649      	mov	r1, r9
 8006b24:	414b      	adcs	r3, r1
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b34:	4659      	mov	r1, fp
 8006b36:	00cb      	lsls	r3, r1, #3
 8006b38:	4651      	mov	r1, sl
 8006b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b3e:	4651      	mov	r1, sl
 8006b40:	00ca      	lsls	r2, r1, #3
 8006b42:	4610      	mov	r0, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	4642      	mov	r2, r8
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b50:	464b      	mov	r3, r9
 8006b52:	460a      	mov	r2, r1
 8006b54:	eb42 0303 	adc.w	r3, r2, r3
 8006b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b74:	4649      	mov	r1, r9
 8006b76:	008b      	lsls	r3, r1, #2
 8006b78:	4641      	mov	r1, r8
 8006b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b7e:	4641      	mov	r1, r8
 8006b80:	008a      	lsls	r2, r1, #2
 8006b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b86:	f7fa f851 	bl	8000c2c <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4b39      	ldr	r3, [pc, #228]	; (8006c74 <UART_SetConfig+0x4e4>)
 8006b90:	fba3 1302 	umull	r1, r3, r3, r2
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	2164      	movs	r1, #100	; 0x64
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	3332      	adds	r3, #50	; 0x32
 8006ba2:	4a34      	ldr	r2, [pc, #208]	; (8006c74 <UART_SetConfig+0x4e4>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bae:	441c      	add	r4, r3
 8006bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	673b      	str	r3, [r7, #112]	; 0x70
 8006bb8:	677a      	str	r2, [r7, #116]	; 0x74
 8006bba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	1891      	adds	r1, r2, r2
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	415b      	adcs	r3, r3
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bce:	4641      	mov	r1, r8
 8006bd0:	1851      	adds	r1, r2, r1
 8006bd2:	6039      	str	r1, [r7, #0]
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	414b      	adcs	r3, r1
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006be6:	4659      	mov	r1, fp
 8006be8:	00cb      	lsls	r3, r1, #3
 8006bea:	4651      	mov	r1, sl
 8006bec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bf0:	4651      	mov	r1, sl
 8006bf2:	00ca      	lsls	r2, r1, #3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	4642      	mov	r2, r8
 8006bfc:	189b      	adds	r3, r3, r2
 8006bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c00:	464b      	mov	r3, r9
 8006c02:	460a      	mov	r2, r1
 8006c04:	eb42 0303 	adc.w	r3, r2, r3
 8006c08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	663b      	str	r3, [r7, #96]	; 0x60
 8006c14:	667a      	str	r2, [r7, #100]	; 0x64
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c22:	4649      	mov	r1, r9
 8006c24:	008b      	lsls	r3, r1, #2
 8006c26:	4641      	mov	r1, r8
 8006c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	008a      	lsls	r2, r1, #2
 8006c30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c34:	f7f9 fffa 	bl	8000c2c <__aeabi_uldivmod>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <UART_SetConfig+0x4e4>)
 8006c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2164      	movs	r1, #100	; 0x64
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	3332      	adds	r3, #50	; 0x32
 8006c50:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <UART_SetConfig+0x4e4>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4422      	add	r2, r4
 8006c64:	609a      	str	r2, [r3, #8]
}
 8006c66:	bf00      	nop
 8006c68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c72:	bf00      	nop
 8006c74:	51eb851f 	.word	0x51eb851f

08006c78 <__NVIC_SetPriority>:
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	6039      	str	r1, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	db0a      	blt.n	8006ca2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	490c      	ldr	r1, [pc, #48]	; (8006cc4 <__NVIC_SetPriority+0x4c>)
 8006c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c96:	0112      	lsls	r2, r2, #4
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ca0:	e00a      	b.n	8006cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	4908      	ldr	r1, [pc, #32]	; (8006cc8 <__NVIC_SetPriority+0x50>)
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	3b04      	subs	r3, #4
 8006cb0:	0112      	lsls	r2, r2, #4
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	761a      	strb	r2, [r3, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	e000e100 	.word	0xe000e100
 8006cc8:	e000ed00 	.word	0xe000ed00

08006ccc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	f06f 0004 	mvn.w	r0, #4
 8006cd6:	f7ff ffcf 	bl	8006c78 <__NVIC_SetPriority>
#endif
}
 8006cda:	bf00      	nop
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ce6:	f3ef 8305 	mrs	r3, IPSR
 8006cea:	603b      	str	r3, [r7, #0]
  return(result);
 8006cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006cf2:	f06f 0305 	mvn.w	r3, #5
 8006cf6:	607b      	str	r3, [r7, #4]
 8006cf8:	e00c      	b.n	8006d14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <osKernelInitialize+0x44>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d02:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <osKernelInitialize+0x44>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	e002      	b.n	8006d14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d14:	687b      	ldr	r3, [r7, #4]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	2000045c 	.word	0x2000045c

08006d28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d2e:	f3ef 8305 	mrs	r3, IPSR
 8006d32:	603b      	str	r3, [r7, #0]
  return(result);
 8006d34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d3a:	f06f 0305 	mvn.w	r3, #5
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	e010      	b.n	8006d64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d42:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <osKernelStart+0x48>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d109      	bne.n	8006d5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d4a:	f7ff ffbf 	bl	8006ccc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <osKernelStart+0x48>)
 8006d50:	2202      	movs	r2, #2
 8006d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d54:	f001 ffb2 	bl	8008cbc <vTaskStartScheduler>
      stat = osOK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	e002      	b.n	8006d64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d64:	687b      	ldr	r3, [r7, #4]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	2000045c 	.word	0x2000045c

08006d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08e      	sub	sp, #56	; 0x38
 8006d78:	af04      	add	r7, sp, #16
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d84:	f3ef 8305 	mrs	r3, IPSR
 8006d88:	617b      	str	r3, [r7, #20]
  return(result);
 8006d8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d17e      	bne.n	8006e8e <osThreadNew+0x11a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d07b      	beq.n	8006e8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d96:	2380      	movs	r3, #128	; 0x80
 8006d98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d9a:	2318      	movs	r3, #24
 8006d9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006da2:	f04f 33ff 	mov.w	r3, #4294967295
 8006da6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d045      	beq.n	8006e3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <osThreadNew+0x48>
        name = attr->name;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <osThreadNew+0x6e>
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b38      	cmp	r3, #56	; 0x38
 8006dd4:	d805      	bhi.n	8006de2 <osThreadNew+0x6e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <osThreadNew+0x72>
        return (NULL);
 8006de2:	2300      	movs	r3, #0
 8006de4:	e054      	b.n	8006e90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	089b      	lsrs	r3, r3, #2
 8006df4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <osThreadNew+0xa8>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2bbb      	cmp	r3, #187	; 0xbb
 8006e04:	d90a      	bls.n	8006e1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d006      	beq.n	8006e1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <osThreadNew+0xa8>
        mem = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e010      	b.n	8006e3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10c      	bne.n	8006e3e <osThreadNew+0xca>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d108      	bne.n	8006e3e <osThreadNew+0xca>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <osThreadNew+0xca>
          mem = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	e001      	b.n	8006e3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d110      	bne.n	8006e66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e4c:	9202      	str	r2, [sp, #8]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6a3a      	ldr	r2, [r7, #32]
 8006e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f001 fd42 	bl	80088e4 <xTaskCreateStatic>
 8006e60:	4603      	mov	r3, r0
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	e013      	b.n	8006e8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d110      	bne.n	8006e8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	f107 0310 	add.w	r3, r7, #16
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f001 fd8d 	bl	800899e <xTaskCreate>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d001      	beq.n	8006e8e <osThreadNew+0x11a>
            hTask = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e8e:	693b      	ldr	r3, [r7, #16]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ea0:	f3ef 8305 	mrs	r3, IPSR
 8006ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <osDelay+0x1c>
    stat = osErrorISR;
 8006eac:	f06f 0305 	mvn.w	r3, #5
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	e007      	b.n	8006ec4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fec8 	bl	8008c54 <vTaskDelay>
    }
  }

  return (stat);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b088      	sub	sp, #32
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eda:	f3ef 8305 	mrs	r3, IPSR
 8006ede:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ee0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d174      	bne.n	8006fd0 <osMutexNew+0x102>
    if (attr != NULL) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	e001      	b.n	8006ef8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <osMutexNew+0x3a>
      rmtx = 1U;
 8006f02:	2301      	movs	r3, #1
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	e001      	b.n	8006f0c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d15c      	bne.n	8006fd0 <osMutexNew+0x102>
      mem = -1;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d015      	beq.n	8006f4e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d006      	beq.n	8006f38 <osMutexNew+0x6a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	2b4f      	cmp	r3, #79	; 0x4f
 8006f30:	d902      	bls.n	8006f38 <osMutexNew+0x6a>
          mem = 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	e00c      	b.n	8006f52 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d108      	bne.n	8006f52 <osMutexNew+0x84>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <osMutexNew+0x84>
            mem = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	e001      	b.n	8006f52 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d112      	bne.n	8006f7e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	4619      	mov	r1, r3
 8006f64:	2004      	movs	r0, #4
 8006f66:	f000 fd68 	bl	8007a3a <xQueueCreateMutexStatic>
 8006f6a:	61f8      	str	r0, [r7, #28]
 8006f6c:	e016      	b.n	8006f9c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	4619      	mov	r1, r3
 8006f74:	2001      	movs	r0, #1
 8006f76:	f000 fd60 	bl	8007a3a <xQueueCreateMutexStatic>
 8006f7a:	61f8      	str	r0, [r7, #28]
 8006f7c:	e00e      	b.n	8006f9c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10b      	bne.n	8006f9c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006f8a:	2004      	movs	r0, #4
 8006f8c:	f000 fd3d 	bl	8007a0a <xQueueCreateMutex>
 8006f90:	61f8      	str	r0, [r7, #28]
 8006f92:	e003      	b.n	8006f9c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006f94:	2001      	movs	r0, #1
 8006f96:	f000 fd38 	bl	8007a0a <xQueueCreateMutex>
 8006f9a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <osMutexNew+0xee>
        if (attr != NULL) {
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <osMutexNew+0xe2>
          name = attr->name;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e001      	b.n	8006fb4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	69f8      	ldr	r0, [r7, #28]
 8006fb8:	f001 fc0c 	bl	80087d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d006      	beq.n	8006fd0 <osMutexNew+0x102>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3720      	adds	r7, #32
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b086      	sub	sp, #24
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff8:	f3ef 8305 	mrs	r3, IPSR
 8006ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ffe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007004:	f06f 0305 	mvn.w	r3, #5
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e02c      	b.n	8007066 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d103      	bne.n	800701a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007012:	f06f 0303 	mvn.w	r3, #3
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e025      	b.n	8007066 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d011      	beq.n	8007044 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6938      	ldr	r0, [r7, #16]
 8007024:	f000 fd58 	bl	8007ad8 <xQueueTakeMutexRecursive>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d01b      	beq.n	8007066 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007034:	f06f 0301 	mvn.w	r3, #1
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e014      	b.n	8007066 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800703c:	f06f 0302 	mvn.w	r3, #2
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e010      	b.n	8007066 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6938      	ldr	r0, [r7, #16]
 8007048:	f001 f8ec 	bl	8008224 <xQueueSemaphoreTake>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d009      	beq.n	8007066 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007058:	f06f 0301 	mvn.w	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	e002      	b.n	8007066 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007060:	f06f 0302 	mvn.w	r3, #2
 8007064:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f023 0301 	bic.w	r3, r3, #1
 800707e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007088:	2300      	movs	r3, #0
 800708a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800708c:	f3ef 8305 	mrs	r3, IPSR
 8007090:	60bb      	str	r3, [r7, #8]
  return(result);
 8007092:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007098:	f06f 0305 	mvn.w	r3, #5
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	e01f      	b.n	80070e0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80070a6:	f06f 0303 	mvn.w	r3, #3
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e018      	b.n	80070e0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d009      	beq.n	80070c8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80070b4:	6938      	ldr	r0, [r7, #16]
 80070b6:	f000 fcdb 	bl	8007a70 <xQueueGiveMutexRecursive>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d00f      	beq.n	80070e0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80070c0:	f06f 0302 	mvn.w	r3, #2
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	e00b      	b.n	80070e0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80070c8:	2300      	movs	r3, #0
 80070ca:	2200      	movs	r2, #0
 80070cc:	2100      	movs	r1, #0
 80070ce:	6938      	ldr	r0, [r7, #16]
 80070d0:	f000 fda2 	bl	8007c18 <xQueueGenericSend>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d002      	beq.n	80070e0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80070da:	f06f 0302 	mvn.w	r3, #2
 80070de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80070e0:	697b      	ldr	r3, [r7, #20]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b08a      	sub	sp, #40	; 0x28
 80070ee:	af02      	add	r7, sp, #8
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070fa:	f3ef 8305 	mrs	r3, IPSR
 80070fe:	613b      	str	r3, [r7, #16]
  return(result);
 8007100:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007102:	2b00      	cmp	r3, #0
 8007104:	d175      	bne.n	80071f2 <osSemaphoreNew+0x108>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d072      	beq.n	80071f2 <osSemaphoreNew+0x108>
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	429a      	cmp	r2, r3
 8007112:	d86e      	bhi.n	80071f2 <osSemaphoreNew+0x108>
    mem = -1;
 8007114:	f04f 33ff 	mov.w	r3, #4294967295
 8007118:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d015      	beq.n	800714c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <osSemaphoreNew+0x4c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b4f      	cmp	r3, #79	; 0x4f
 800712e:	d902      	bls.n	8007136 <osSemaphoreNew+0x4c>
        mem = 1;
 8007130:	2301      	movs	r3, #1
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	e00c      	b.n	8007150 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d108      	bne.n	8007150 <osSemaphoreNew+0x66>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <osSemaphoreNew+0x66>
          mem = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	e001      	b.n	8007150 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d04c      	beq.n	80071f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d128      	bne.n	80071b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d10a      	bne.n	800717a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2203      	movs	r2, #3
 800716a:	9200      	str	r2, [sp, #0]
 800716c:	2200      	movs	r2, #0
 800716e:	2100      	movs	r1, #0
 8007170:	2001      	movs	r0, #1
 8007172:	f000 fb5b 	bl	800782c <xQueueGenericCreateStatic>
 8007176:	61f8      	str	r0, [r7, #28]
 8007178:	e005      	b.n	8007186 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800717a:	2203      	movs	r2, #3
 800717c:	2100      	movs	r1, #0
 800717e:	2001      	movs	r0, #1
 8007180:	f000 fbcc 	bl	800791c <xQueueGenericCreate>
 8007184:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d022      	beq.n	80071d2 <osSemaphoreNew+0xe8>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01f      	beq.n	80071d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007192:	2300      	movs	r3, #0
 8007194:	2200      	movs	r2, #0
 8007196:	2100      	movs	r1, #0
 8007198:	69f8      	ldr	r0, [r7, #28]
 800719a:	f000 fd3d 	bl	8007c18 <xQueueGenericSend>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d016      	beq.n	80071d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80071a4:	69f8      	ldr	r0, [r7, #28]
 80071a6:	f001 f9c9 	bl	800853c <vQueueDelete>
            hSemaphore = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	e010      	b.n	80071d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d108      	bne.n	80071c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	461a      	mov	r2, r3
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fcc0 	bl	8007b44 <xQueueCreateCountingSemaphoreStatic>
 80071c4:	61f8      	str	r0, [r7, #28]
 80071c6:	e004      	b.n	80071d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 fcf1 	bl	8007bb2 <xQueueCreateCountingSemaphore>
 80071d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00c      	beq.n	80071f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	e001      	b.n	80071ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80071ea:	6979      	ldr	r1, [r7, #20]
 80071ec:	69f8      	ldr	r0, [r7, #28]
 80071ee:	f001 faf1 	bl	80087d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80071f2:	69fb      	ldr	r3, [r7, #28]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3720      	adds	r7, #32
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007214:	f06f 0303 	mvn.w	r3, #3
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e039      	b.n	8007290 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800721c:	f3ef 8305 	mrs	r3, IPSR
 8007220:	60fb      	str	r3, [r7, #12]
  return(result);
 8007222:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007224:	2b00      	cmp	r3, #0
 8007226:	d022      	beq.n	800726e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800722e:	f06f 0303 	mvn.w	r3, #3
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	e02c      	b.n	8007290 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800723a:	f107 0308 	add.w	r3, r7, #8
 800723e:	461a      	mov	r2, r3
 8007240:	2100      	movs	r1, #0
 8007242:	6938      	ldr	r0, [r7, #16]
 8007244:	f001 f8fa 	bl	800843c <xQueueReceiveFromISR>
 8007248:	4603      	mov	r3, r0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d003      	beq.n	8007256 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800724e:	f06f 0302 	mvn.w	r3, #2
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e01c      	b.n	8007290 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d019      	beq.n	8007290 <osSemaphoreAcquire+0x94>
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <osSemaphoreAcquire+0xa0>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	e010      	b.n	8007290 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6938      	ldr	r0, [r7, #16]
 8007272:	f000 ffd7 	bl	8008224 <xQueueSemaphoreTake>
 8007276:	4603      	mov	r3, r0
 8007278:	2b01      	cmp	r3, #1
 800727a:	d009      	beq.n	8007290 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007282:	f06f 0301 	mvn.w	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e002      	b.n	8007290 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800728a:	f06f 0302 	mvn.w	r3, #2
 800728e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007290:	697b      	ldr	r3, [r7, #20]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80072b6:	f06f 0303 	mvn.w	r3, #3
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	e02c      	b.n	8007318 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072be:	f3ef 8305 	mrs	r3, IPSR
 80072c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80072c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01a      	beq.n	8007300 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	4619      	mov	r1, r3
 80072d4:	6938      	ldr	r0, [r7, #16]
 80072d6:	f000 fe38 	bl	8007f4a <xQueueGiveFromISR>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d003      	beq.n	80072e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80072e0:	f06f 0302 	mvn.w	r3, #2
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	e017      	b.n	8007318 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d014      	beq.n	8007318 <osSemaphoreRelease+0x78>
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <osSemaphoreRelease+0x84>)
 80072f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	e00b      	b.n	8007318 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007300:	2300      	movs	r3, #0
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	6938      	ldr	r0, [r7, #16]
 8007308:	f000 fc86 	bl	8007c18 <xQueueGenericSend>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d002      	beq.n	8007318 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007312:	f06f 0302 	mvn.w	r3, #2
 8007316:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007318:	697b      	ldr	r3, [r7, #20]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007338:	f3ef 8305 	mrs	r3, IPSR
 800733c:	613b      	str	r3, [r7, #16]
  return(result);
 800733e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007340:	2b00      	cmp	r3, #0
 8007342:	d15f      	bne.n	8007404 <osMessageQueueNew+0xdc>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d05c      	beq.n	8007404 <osMessageQueueNew+0xdc>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d059      	beq.n	8007404 <osMessageQueueNew+0xdc>
    mem = -1;
 8007350:	f04f 33ff 	mov.w	r3, #4294967295
 8007354:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d029      	beq.n	80073b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d012      	beq.n	800738a <osMessageQueueNew+0x62>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	2b4f      	cmp	r3, #79	; 0x4f
 800736a:	d90e      	bls.n	800738a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	429a      	cmp	r2, r3
 8007382:	d302      	bcc.n	800738a <osMessageQueueNew+0x62>
        mem = 1;
 8007384:	2301      	movs	r3, #1
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	e014      	b.n	80073b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d110      	bne.n	80073b4 <osMessageQueueNew+0x8c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10c      	bne.n	80073b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d108      	bne.n	80073b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <osMessageQueueNew+0x8c>
          mem = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	e001      	b.n	80073b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d10b      	bne.n	80073d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2100      	movs	r1, #0
 80073c4:	9100      	str	r1, [sp, #0]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fa2f 	bl	800782c <xQueueGenericCreateStatic>
 80073ce:	61f8      	str	r0, [r7, #28]
 80073d0:	e008      	b.n	80073e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80073d8:	2200      	movs	r2, #0
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fa9d 	bl	800791c <xQueueGenericCreate>
 80073e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	e001      	b.n	80073fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80073f8:	2300      	movs	r3, #0
 80073fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80073fc:	6979      	ldr	r1, [r7, #20]
 80073fe:	69f8      	ldr	r0, [r7, #28]
 8007400:	f001 f9e8 	bl	80087d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007404:	69fb      	ldr	r3, [r7, #28]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	4613      	mov	r3, r2
 800741e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007428:	f3ef 8305 	mrs	r3, IPSR
 800742c:	617b      	str	r3, [r7, #20]
  return(result);
 800742e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007430:	2b00      	cmp	r3, #0
 8007432:	d028      	beq.n	8007486 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <osMessageQueuePut+0x36>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <osMessageQueuePut+0x36>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007446:	f06f 0303 	mvn.w	r3, #3
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	e038      	b.n	80074c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007452:	f107 0210 	add.w	r2, r7, #16
 8007456:	2300      	movs	r3, #0
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	69b8      	ldr	r0, [r7, #24]
 800745c:	f000 fcda 	bl	8007e14 <xQueueGenericSendFromISR>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d003      	beq.n	800746e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007466:	f06f 0302 	mvn.w	r3, #2
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e028      	b.n	80074c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d025      	beq.n	80074c0 <osMessageQueuePut+0xb0>
 8007474:	4b15      	ldr	r3, [pc, #84]	; (80074cc <osMessageQueuePut+0xbc>)
 8007476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	e01c      	b.n	80074c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <osMessageQueuePut+0x82>
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007492:	f06f 0303 	mvn.w	r3, #3
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	e012      	b.n	80074c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800749a:	2300      	movs	r3, #0
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	69b8      	ldr	r0, [r7, #24]
 80074a2:	f000 fbb9 	bl	8007c18 <xQueueGenericSend>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d009      	beq.n	80074c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80074b2:	f06f 0301 	mvn.w	r3, #1
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	e002      	b.n	80074c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80074ba:	f06f 0302 	mvn.w	r3, #2
 80074be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80074c0:	69fb      	ldr	r3, [r7, #28]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074e6:	f3ef 8305 	mrs	r3, IPSR
 80074ea:	617b      	str	r3, [r7, #20]
  return(result);
 80074ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d028      	beq.n	8007544 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <osMessageQueueGet+0x34>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <osMessageQueueGet+0x34>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007504:	f06f 0303 	mvn.w	r3, #3
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	e037      	b.n	800757c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	461a      	mov	r2, r3
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	69b8      	ldr	r0, [r7, #24]
 800751a:	f000 ff8f 	bl	800843c <xQueueReceiveFromISR>
 800751e:	4603      	mov	r3, r0
 8007520:	2b01      	cmp	r3, #1
 8007522:	d003      	beq.n	800752c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007524:	f06f 0302 	mvn.w	r3, #2
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	e027      	b.n	800757c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d024      	beq.n	800757c <osMessageQueueGet+0xac>
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <osMessageQueueGet+0xb8>)
 8007534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	e01b      	b.n	800757c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <osMessageQueueGet+0x80>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007550:	f06f 0303 	mvn.w	r3, #3
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	e011      	b.n	800757c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	69b8      	ldr	r0, [r7, #24]
 800755e:	f000 fd81 	bl	8008064 <xQueueReceive>
 8007562:	4603      	mov	r3, r0
 8007564:	2b01      	cmp	r3, #1
 8007566:	d009      	beq.n	800757c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800756e:	f06f 0301 	mvn.w	r3, #1
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	e002      	b.n	800757c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007576:	f06f 0302 	mvn.w	r3, #2
 800757a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800757c:	69fb      	ldr	r3, [r7, #28]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a07      	ldr	r2, [pc, #28]	; (80075b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800759c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4a06      	ldr	r2, [pc, #24]	; (80075bc <vApplicationGetIdleTaskMemory+0x30>)
 80075a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2280      	movs	r2, #128	; 0x80
 80075a8:	601a      	str	r2, [r3, #0]
}
 80075aa:	bf00      	nop
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000460 	.word	0x20000460
 80075bc:	2000051c 	.word	0x2000051c

080075c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a07      	ldr	r2, [pc, #28]	; (80075ec <vApplicationGetTimerTaskMemory+0x2c>)
 80075d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4a06      	ldr	r2, [pc, #24]	; (80075f0 <vApplicationGetTimerTaskMemory+0x30>)
 80075d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075de:	601a      	str	r2, [r3, #0]
}
 80075e0:	bf00      	nop
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	2000071c 	.word	0x2000071c
 80075f0:	200007d8 	.word	0x200007d8

080075f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f103 0208 	add.w	r2, r3, #8
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
 800760c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f103 0208 	add.w	r2, r3, #8
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f103 0208 	add.w	r2, r3, #8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	601a      	str	r2, [r3, #0]
}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ac:	d103      	bne.n	80076b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e00c      	b.n	80076d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3308      	adds	r3, #8
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	e002      	b.n	80076c4 <vListInsert+0x2e>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d2f6      	bcs.n	80076be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	601a      	str	r2, [r3, #0]
}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6892      	ldr	r2, [r2, #8]
 800771e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6852      	ldr	r2, [r2, #4]
 8007728:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d103      	bne.n	800773c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	1e5a      	subs	r2, r3, #1
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007786:	f002 fd5d 	bl	800a244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	441a      	add	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b6:	3b01      	subs	r3, #1
 80077b8:	68f9      	ldr	r1, [r7, #12]
 80077ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077bc:	fb01 f303 	mul.w	r3, r1, r3
 80077c0:	441a      	add	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	22ff      	movs	r2, #255	; 0xff
 80077ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	22ff      	movs	r2, #255	; 0xff
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d114      	bne.n	8007806 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01a      	beq.n	800781a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3310      	adds	r3, #16
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 fd01 	bl	80091f0 <xTaskRemoveFromEventList>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d012      	beq.n	800781a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077f4:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <xQueueGenericReset+0xcc>)
 80077f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	e009      	b.n	800781a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3310      	adds	r3, #16
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fef2 	bl	80075f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3324      	adds	r3, #36	; 0x24
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff feed 	bl	80075f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800781a:	f002 fd43 	bl	800a2a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800781e:	2301      	movs	r3, #1
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08e      	sub	sp, #56	; 0x38
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <xQueueGenericCreateStatic+0x52>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <xQueueGenericCreateStatic+0x56>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <xQueueGenericCreateStatic+0x58>
 8007882:	2300      	movs	r3, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	623b      	str	r3, [r7, #32]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <xQueueGenericCreateStatic+0x7e>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <xQueueGenericCreateStatic+0x82>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <xQueueGenericCreateStatic+0x84>
 80078ae:	2300      	movs	r3, #0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	61fb      	str	r3, [r7, #28]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80078ca:	2350      	movs	r3, #80	; 0x50
 80078cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b50      	cmp	r3, #80	; 0x50
 80078d2:	d00a      	beq.n	80078ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	61bb      	str	r3, [r7, #24]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00d      	beq.n	8007912 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	4613      	mov	r3, r2
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f83f 	bl	8007990 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007914:	4618      	mov	r0, r3
 8007916:	3730      	adds	r7, #48	; 0x30
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	; 0x28
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	3350      	adds	r3, #80	; 0x50
 8007954:	4618      	mov	r0, r3
 8007956:	f002 fd97 	bl	800a488 <pvPortMalloc>
 800795a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d011      	beq.n	8007986 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	3350      	adds	r3, #80	; 0x50
 800796a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007974:	79fa      	ldrb	r2, [r7, #7]
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	4613      	mov	r3, r2
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f805 	bl	8007990 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007986:	69bb      	ldr	r3, [r7, #24]
	}
 8007988:	4618      	mov	r0, r3
 800798a:	3720      	adds	r7, #32
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e002      	b.n	80079b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079be:	2101      	movs	r1, #1
 80079c0:	69b8      	ldr	r0, [r7, #24]
 80079c2:	f7ff fecb 	bl	800775c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00e      	beq.n	8007a02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80079f6:	2300      	movs	r3, #0
 80079f8:	2200      	movs	r2, #0
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f90b 	bl	8007c18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	4603      	mov	r3, r0
 8007a12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6939      	ldr	r1, [r7, #16]
 8007a22:	6978      	ldr	r0, [r7, #20]
 8007a24:	f7ff ff7a 	bl	800791c <xQueueGenericCreate>
 8007a28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7ff ffd3 	bl	80079d6 <prvInitialiseMutex>

		return xNewQueue;
 8007a30:	68fb      	ldr	r3, [r7, #12]
	}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b088      	sub	sp, #32
 8007a3e:	af02      	add	r7, sp, #8
 8007a40:	4603      	mov	r3, r0
 8007a42:	6039      	str	r1, [r7, #0]
 8007a44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007a46:	2301      	movs	r3, #1
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2200      	movs	r2, #0
 8007a56:	6939      	ldr	r1, [r7, #16]
 8007a58:	6978      	ldr	r0, [r7, #20]
 8007a5a:	f7ff fee7 	bl	800782c <xQueueGenericCreateStatic>
 8007a5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff ffb8 	bl	80079d6 <prvInitialiseMutex>

		return xNewQueue;
 8007a66:	68fb      	ldr	r3, [r7, #12]
	}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007a70:	b590      	push	{r4, r7, lr}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60fb      	str	r3, [r7, #12]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	689c      	ldr	r4, [r3, #8]
 8007a9c:	f001 fd6a 	bl	8009574 <xTaskGetCurrentTaskHandle>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	429c      	cmp	r4, r3
 8007aa4:	d111      	bne.n	8007aca <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	1e5a      	subs	r2, r3, #1
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2200      	movs	r2, #0
 8007abc:	2100      	movs	r1, #0
 8007abe:	6938      	ldr	r0, [r7, #16]
 8007ac0:	f000 f8aa 	bl	8007c18 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e001      	b.n	8007ace <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007ace:	697b      	ldr	r3, [r7, #20]
	}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd90      	pop	{r4, r7, pc}

08007ad8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	689c      	ldr	r4, [r3, #8]
 8007b06:	f001 fd35 	bl	8009574 <xTaskGetCurrentTaskHandle>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	d107      	bne.n	8007b20 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	e00c      	b.n	8007b3a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6938      	ldr	r0, [r7, #16]
 8007b24:	f000 fb7e 	bl	8008224 <xQueueSemaphoreTake>
 8007b28:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007b3a:	697b      	ldr	r3, [r7, #20]
	}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	61bb      	str	r3, [r7, #24]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d90a      	bls.n	8007b8a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	617b      	str	r3, [r7, #20]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	2100      	movs	r1, #0
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f7ff fe49 	bl	800782c <xQueueGenericCreateStatic>
 8007b9a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
	}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b086      	sub	sp, #24
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	613b      	str	r3, [r7, #16]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d90a      	bls.n	8007bf6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	60fb      	str	r3, [r7, #12]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff fe8e 	bl	800791c <xQueueGenericCreate>
 8007c00:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c0e:	697b      	ldr	r3, [r7, #20]
	}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08e      	sub	sp, #56	; 0x38
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c26:	2300      	movs	r3, #0
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <xQueueGenericSend+0x32>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <xQueueGenericSend+0x40>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <xQueueGenericSend+0x44>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <xQueueGenericSend+0x46>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <xQueueGenericSend+0x60>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d103      	bne.n	8007c86 <xQueueGenericSend+0x6e>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <xQueueGenericSend+0x72>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <xQueueGenericSend+0x74>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	623b      	str	r3, [r7, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ca6:	f001 fc75 	bl	8009594 <xTaskGetSchedulerState>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <xQueueGenericSend+0x9e>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <xQueueGenericSend+0xa2>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <xQueueGenericSend+0xa4>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	61fb      	str	r3, [r7, #28]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cd6:	f002 fab5 	bl	800a244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <xQueueGenericSend+0xd4>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d129      	bne.n	8007d40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cf2:	f000 fc5e 	bl	80085b2 <prvCopyDataToQueue>
 8007cf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d010      	beq.n	8007d22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	3324      	adds	r3, #36	; 0x24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 fa73 	bl	80091f0 <xTaskRemoveFromEventList>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d013      	beq.n	8007d38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d10:	4b3f      	ldr	r3, [pc, #252]	; (8007e10 <xQueueGenericSend+0x1f8>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	e00a      	b.n	8007d38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d28:	4b39      	ldr	r3, [pc, #228]	; (8007e10 <xQueueGenericSend+0x1f8>)
 8007d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d38:	f002 fab4 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e063      	b.n	8007e08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d103      	bne.n	8007d4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d46:	f002 faad 	bl	800a2a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e05c      	b.n	8007e08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d54:	f107 0314 	add.w	r3, r7, #20
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 faad 	bl	80092b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d62:	f002 fa9f 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d66:	f001 f819 	bl	8008d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d6a:	f002 fa6b 	bl	800a244 <vPortEnterCritical>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d74:	b25b      	sxtb	r3, r3
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7a:	d103      	bne.n	8007d84 <xQueueGenericSend+0x16c>
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSend+0x182>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d9a:	f002 fa83 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d9e:	1d3a      	adds	r2, r7, #4
 8007da0:	f107 0314 	add.w	r3, r7, #20
 8007da4:	4611      	mov	r1, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 fa9c 	bl	80092e4 <xTaskCheckForTimeOut>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d124      	bne.n	8007dfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007db4:	f000 fcf5 	bl	80087a2 <prvIsQueueFull>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d018      	beq.n	8007df0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f9c2 	bl	8009150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dce:	f000 fc80 	bl	80086d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dd2:	f000 fff1 	bl	8008db8 <xTaskResumeAll>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f47f af7c 	bne.w	8007cd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dde:	4b0c      	ldr	r3, [pc, #48]	; (8007e10 <xQueueGenericSend+0x1f8>)
 8007de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	e772      	b.n	8007cd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df2:	f000 fc6e 	bl	80086d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007df6:	f000 ffdf 	bl	8008db8 <xTaskResumeAll>
 8007dfa:	e76c      	b.n	8007cd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dfe:	f000 fc68 	bl	80086d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e02:	f000 ffd9 	bl	8008db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3738      	adds	r7, #56	; 0x38
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b090      	sub	sp, #64	; 0x40
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d103      	bne.n	8007e50 <xQueueGenericSendFromISR+0x3c>
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <xQueueGenericSendFromISR+0x40>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <xQueueGenericSendFromISR+0x42>
 8007e54:	2300      	movs	r3, #0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10a      	bne.n	8007e70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d103      	bne.n	8007e7e <xQueueGenericSendFromISR+0x6a>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d101      	bne.n	8007e82 <xQueueGenericSendFromISR+0x6e>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <xQueueGenericSendFromISR+0x70>
 8007e82:	2300      	movs	r3, #0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	623b      	str	r3, [r7, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e9e:	f002 fab3 	bl	800a408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	61fa      	str	r2, [r7, #28]
 8007eb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007eba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d302      	bcc.n	8007ed0 <xQueueGenericSendFromISR+0xbc>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d12f      	bne.n	8007f30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ee6:	f000 fb64 	bl	80085b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007eea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d112      	bne.n	8007f1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d016      	beq.n	8007f2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	3324      	adds	r3, #36	; 0x24
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f975 	bl	80091f0 <xTaskRemoveFromEventList>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00e      	beq.n	8007f2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	e007      	b.n	8007f2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f1e:	3301      	adds	r3, #1
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	b25a      	sxtb	r2, r3
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f2e:	e001      	b.n	8007f34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3740      	adds	r7, #64	; 0x40
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b08e      	sub	sp, #56	; 0x38
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	623b      	str	r3, [r7, #32]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	61fb      	str	r3, [r7, #28]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d103      	bne.n	8007fa2 <xQueueGiveFromISR+0x58>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <xQueueGiveFromISR+0x5c>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <xQueueGiveFromISR+0x5e>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	61bb      	str	r3, [r7, #24]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fc2:	f002 fa21 	bl	800a408 <vPortValidateInterruptPriority>
	__asm volatile
 8007fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	617a      	str	r2, [r7, #20]
 8007fdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007fde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d22b      	bcs.n	800804a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800c:	d112      	bne.n	8008034 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b00      	cmp	r3, #0
 8008014:	d016      	beq.n	8008044 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	3324      	adds	r3, #36	; 0x24
 800801a:	4618      	mov	r0, r3
 800801c:	f001 f8e8 	bl	80091f0 <xTaskRemoveFromEventList>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00e      	beq.n	8008044 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e007      	b.n	8008044 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008038:	3301      	adds	r3, #1
 800803a:	b2db      	uxtb	r3, r3
 800803c:	b25a      	sxtb	r2, r3
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008044:	2301      	movs	r3, #1
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
 8008048:	e001      	b.n	800804e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800804a:	2300      	movs	r3, #0
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008050:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f383 8811 	msr	BASEPRI, r3
}
 8008058:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800805c:	4618      	mov	r0, r3
 800805e:	3738      	adds	r7, #56	; 0x38
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08c      	sub	sp, #48	; 0x30
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008070:	2300      	movs	r3, #0
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <xQueueReceive+0x30>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	623b      	str	r3, [r7, #32]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d103      	bne.n	80080a2 <xQueueReceive+0x3e>
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <xQueueReceive+0x42>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <xQueueReceive+0x44>
 80080a6:	2300      	movs	r3, #0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10a      	bne.n	80080c2 <xQueueReceive+0x5e>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	61fb      	str	r3, [r7, #28]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080c2:	f001 fa67 	bl	8009594 <xTaskGetSchedulerState>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <xQueueReceive+0x6e>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <xQueueReceive+0x72>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <xQueueReceive+0x74>
 80080d6:	2300      	movs	r3, #0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <xQueueReceive+0x8e>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	61bb      	str	r3, [r7, #24]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080f2:	f002 f8a7 	bl	800a244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01f      	beq.n	8008142 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008106:	f000 fabe 	bl	8008686 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	1e5a      	subs	r2, r3, #1
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00f      	beq.n	800813a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	3310      	adds	r3, #16
 800811e:	4618      	mov	r0, r3
 8008120:	f001 f866 	bl	80091f0 <xTaskRemoveFromEventList>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800812a:	4b3d      	ldr	r3, [pc, #244]	; (8008220 <xQueueReceive+0x1bc>)
 800812c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800813a:	f002 f8b3 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 800813e:	2301      	movs	r3, #1
 8008140:	e069      	b.n	8008216 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008148:	f002 f8ac 	bl	800a2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800814c:	2300      	movs	r3, #0
 800814e:	e062      	b.n	8008216 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008156:	f107 0310 	add.w	r3, r7, #16
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f8ac 	bl	80092b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008160:	2301      	movs	r3, #1
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008164:	f002 f89e 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008168:	f000 fe18 	bl	8008d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800816c:	f002 f86a 	bl	800a244 <vPortEnterCritical>
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008176:	b25b      	sxtb	r3, r3
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d103      	bne.n	8008186 <xQueueReceive+0x122>
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800818c:	b25b      	sxtb	r3, r3
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d103      	bne.n	800819c <xQueueReceive+0x138>
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800819c:	f002 f882 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081a0:	1d3a      	adds	r2, r7, #4
 80081a2:	f107 0310 	add.w	r3, r7, #16
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f001 f89b 	bl	80092e4 <xTaskCheckForTimeOut>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d123      	bne.n	80081fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b6:	f000 fade 	bl	8008776 <prvIsQueueEmpty>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d017      	beq.n	80081f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	3324      	adds	r3, #36	; 0x24
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	4611      	mov	r1, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 ffc1 	bl	8009150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d0:	f000 fa7f 	bl	80086d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081d4:	f000 fdf0 	bl	8008db8 <xTaskResumeAll>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d189      	bne.n	80080f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081de:	4b10      	ldr	r3, [pc, #64]	; (8008220 <xQueueReceive+0x1bc>)
 80081e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	e780      	b.n	80080f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f2:	f000 fa6e 	bl	80086d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081f6:	f000 fddf 	bl	8008db8 <xTaskResumeAll>
 80081fa:	e77a      	b.n	80080f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fe:	f000 fa68 	bl	80086d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008202:	f000 fdd9 	bl	8008db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008208:	f000 fab5 	bl	8008776 <prvIsQueueEmpty>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	f43f af6f 	beq.w	80080f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008214:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008216:	4618      	mov	r0, r3
 8008218:	3730      	adds	r7, #48	; 0x30
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08e      	sub	sp, #56	; 0x38
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	623b      	str	r3, [r7, #32]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	61fb      	str	r3, [r7, #28]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008274:	f001 f98e 	bl	8009594 <xTaskGetSchedulerState>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <xQueueSemaphoreTake+0x60>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueSemaphoreTake+0x64>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueSemaphoreTake+0x66>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	61bb      	str	r3, [r7, #24]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a4:	f001 ffce 	bl	800a244 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d024      	beq.n	80082fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	1e5a      	subs	r2, r3, #1
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d104      	bne.n	80082ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082c4:	f001 fadc 	bl	8009880 <pvTaskIncrementMutexHeldCount>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00f      	beq.n	80082f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	3310      	adds	r3, #16
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 ff88 	bl	80091f0 <xTaskRemoveFromEventList>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082e6:	4b54      	ldr	r3, [pc, #336]	; (8008438 <xQueueSemaphoreTake+0x214>)
 80082e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082f6:	f001 ffd5 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e097      	b.n	800842e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d111      	bne.n	8008328 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	617b      	str	r3, [r7, #20]
}
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008320:	f001 ffc0 	bl	800a2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008324:	2300      	movs	r3, #0
 8008326:	e082      	b.n	800842e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800832e:	f107 030c 	add.w	r3, r7, #12
 8008332:	4618      	mov	r0, r3
 8008334:	f000 ffc0 	bl	80092b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800833c:	f001 ffb2 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008340:	f000 fd2c 	bl	8008d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008344:	f001 ff7e 	bl	800a244 <vPortEnterCritical>
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800834e:	b25b      	sxtb	r3, r3
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d103      	bne.n	800835e <xQueueSemaphoreTake+0x13a>
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008364:	b25b      	sxtb	r3, r3
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836a:	d103      	bne.n	8008374 <xQueueSemaphoreTake+0x150>
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008374:	f001 ff96 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008378:	463a      	mov	r2, r7
 800837a:	f107 030c 	add.w	r3, r7, #12
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f000 ffaf 	bl	80092e4 <xTaskCheckForTimeOut>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d132      	bne.n	80083f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800838c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800838e:	f000 f9f2 	bl	8008776 <prvIsQueueEmpty>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d026      	beq.n	80083e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80083a0:	f001 ff50 	bl	800a244 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 f911 	bl	80095d0 <xTaskPriorityInherit>
 80083ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083b0:	f001 ff78 	bl	800a2a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fec7 	bl	8009150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083c4:	f000 f985 	bl	80086d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c8:	f000 fcf6 	bl	8008db8 <xTaskResumeAll>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f47f af68 	bne.w	80082a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083d4:	4b18      	ldr	r3, [pc, #96]	; (8008438 <xQueueSemaphoreTake+0x214>)
 80083d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	e75e      	b.n	80082a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e8:	f000 f973 	bl	80086d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ec:	f000 fce4 	bl	8008db8 <xTaskResumeAll>
 80083f0:	e758      	b.n	80082a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083f4:	f000 f96d 	bl	80086d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f8:	f000 fcde 	bl	8008db8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083fe:	f000 f9ba 	bl	8008776 <prvIsQueueEmpty>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	f43f af4d 	beq.w	80082a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00d      	beq.n	800842c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008410:	f001 ff18 	bl	800a244 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008416:	f000 f8b4 	bl	8008582 <prvGetDisinheritPriorityAfterTimeout>
 800841a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008422:	4618      	mov	r0, r3
 8008424:	f001 f9aa 	bl	800977c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008428:	f001 ff3c 	bl	800a2a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800842c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800842e:	4618      	mov	r0, r3
 8008430:	3738      	adds	r7, #56	; 0x38
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08e      	sub	sp, #56	; 0x38
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	623b      	str	r3, [r7, #32]
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <xQueueReceiveFromISR+0x3a>
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <xQueueReceiveFromISR+0x3e>
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <xQueueReceiveFromISR+0x40>
 800847a:	2300      	movs	r3, #0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	61fb      	str	r3, [r7, #28]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008496:	f001 ffb7 	bl	800a408 <vPortValidateInterruptPriority>
	__asm volatile
 800849a:	f3ef 8211 	mrs	r2, BASEPRI
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	61ba      	str	r2, [r7, #24]
 80084b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80084b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d02f      	beq.n	8008522 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084d0:	f000 f8d9 	bl	8008686 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	1e5a      	subs	r2, r3, #1
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d112      	bne.n	800850c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d016      	beq.n	800851c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	3310      	adds	r3, #16
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fe7c 	bl	80091f0 <xTaskRemoveFromEventList>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	e007      	b.n	800851c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800850c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008510:	3301      	adds	r3, #1
 8008512:	b2db      	uxtb	r3, r3
 8008514:	b25a      	sxtb	r2, r3
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800851c:	2301      	movs	r3, #1
 800851e:	637b      	str	r3, [r7, #52]	; 0x34
 8008520:	e001      	b.n	8008526 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008522:	2300      	movs	r3, #0
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	613b      	str	r3, [r7, #16]
	__asm volatile
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f383 8811 	msr	BASEPRI, r3
}
 8008530:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008534:	4618      	mov	r0, r3
 8008536:	3738      	adds	r7, #56	; 0x38
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <vQueueDelete+0x28>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60bb      	str	r3, [r7, #8]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f95f 	bl	8008828 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f002 f853 	bl	800a620 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800857a:	bf00      	nop
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008582:	b480      	push	{r7}
 8008584:	b085      	sub	sp, #20
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	e001      	b.n	80085a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085a0:	2300      	movs	r3, #0
 80085a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085a4:	68fb      	ldr	r3, [r7, #12]
	}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b086      	sub	sp, #24
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10d      	bne.n	80085ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d14d      	bne.n	8008674 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 f85f 	bl	80096a0 <xTaskPriorityDisinherit>
 80085e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	609a      	str	r2, [r3, #8]
 80085ea:	e043      	b.n	8008674 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d119      	bne.n	8008626 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6858      	ldr	r0, [r3, #4]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	461a      	mov	r2, r3
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	f002 fa50 	bl	800aaa2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	441a      	add	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	429a      	cmp	r2, r3
 800861a:	d32b      	bcc.n	8008674 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	605a      	str	r2, [r3, #4]
 8008624:	e026      	b.n	8008674 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	68d8      	ldr	r0, [r3, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	461a      	mov	r2, r3
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	f002 fa36 	bl	800aaa2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	425b      	negs	r3, r3
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d207      	bcs.n	8008662 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	425b      	negs	r3, r3
 800865c:	441a      	add	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d105      	bne.n	8008674 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3b01      	subs	r3, #1
 8008672:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800867c:	697b      	ldr	r3, [r7, #20]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d018      	beq.n	80086ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	441a      	add	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d303      	bcc.n	80086ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68d9      	ldr	r1, [r3, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	461a      	mov	r2, r3
 80086c4:	6838      	ldr	r0, [r7, #0]
 80086c6:	f002 f9ec 	bl	800aaa2 <memcpy>
	}
}
 80086ca:	bf00      	nop
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086da:	f001 fdb3 	bl	800a244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086e6:	e011      	b.n	800870c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d012      	beq.n	8008716 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3324      	adds	r3, #36	; 0x24
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fd7b 	bl	80091f0 <xTaskRemoveFromEventList>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008700:	f000 fe52 	bl	80093a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	3b01      	subs	r3, #1
 8008708:	b2db      	uxtb	r3, r3
 800870a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800870c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008710:	2b00      	cmp	r3, #0
 8008712:	dce9      	bgt.n	80086e8 <prvUnlockQueue+0x16>
 8008714:	e000      	b.n	8008718 <prvUnlockQueue+0x46>
					break;
 8008716:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	22ff      	movs	r2, #255	; 0xff
 800871c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008720:	f001 fdc0 	bl	800a2a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008724:	f001 fd8e 	bl	800a244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800872e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008730:	e011      	b.n	8008756 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d012      	beq.n	8008760 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3310      	adds	r3, #16
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fd56 	bl	80091f0 <xTaskRemoveFromEventList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800874a:	f000 fe2d 	bl	80093a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	3b01      	subs	r3, #1
 8008752:	b2db      	uxtb	r3, r3
 8008754:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800875a:	2b00      	cmp	r3, #0
 800875c:	dce9      	bgt.n	8008732 <prvUnlockQueue+0x60>
 800875e:	e000      	b.n	8008762 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008760:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	22ff      	movs	r2, #255	; 0xff
 8008766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800876a:	f001 fd9b 	bl	800a2a4 <vPortExitCritical>
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800877e:	f001 fd61 	bl	800a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800878a:	2301      	movs	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	e001      	b.n	8008794 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008794:	f001 fd86 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 8008798:	68fb      	ldr	r3, [r7, #12]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087aa:	f001 fd4b 	bl	800a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d102      	bne.n	80087c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087ba:	2301      	movs	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	e001      	b.n	80087c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087c4:	f001 fd6e 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 80087c8:	68fb      	ldr	r3, [r7, #12]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	e014      	b.n	800880e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087e4:	4a0f      	ldr	r2, [pc, #60]	; (8008824 <vQueueAddToRegistry+0x50>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10b      	bne.n	8008808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087f0:	490c      	ldr	r1, [pc, #48]	; (8008824 <vQueueAddToRegistry+0x50>)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087fa:	4a0a      	ldr	r2, [pc, #40]	; (8008824 <vQueueAddToRegistry+0x50>)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	4413      	add	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008806:	e006      	b.n	8008816 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3301      	adds	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b07      	cmp	r3, #7
 8008812:	d9e7      	bls.n	80087e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000bd8 	.word	0x20000bd8

08008828 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e016      	b.n	8008864 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008836:	4a10      	ldr	r2, [pc, #64]	; (8008878 <vQueueUnregisterQueue+0x50>)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	4413      	add	r3, r2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d10b      	bne.n	800885e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008846:	4a0c      	ldr	r2, [pc, #48]	; (8008878 <vQueueUnregisterQueue+0x50>)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2100      	movs	r1, #0
 800884c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008850:	4a09      	ldr	r2, [pc, #36]	; (8008878 <vQueueUnregisterQueue+0x50>)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	4413      	add	r3, r2
 8008858:	2200      	movs	r2, #0
 800885a:	605a      	str	r2, [r3, #4]
				break;
 800885c:	e006      	b.n	800886c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b07      	cmp	r3, #7
 8008868:	d9e5      	bls.n	8008836 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800886a:	bf00      	nop
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000bd8 	.word	0x20000bd8

0800887c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800888c:	f001 fcda 	bl	800a244 <vPortEnterCritical>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008896:	b25b      	sxtb	r3, r3
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d103      	bne.n	80088a6 <vQueueWaitForMessageRestricted+0x2a>
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ac:	b25b      	sxtb	r3, r3
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d103      	bne.n	80088bc <vQueueWaitForMessageRestricted+0x40>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088bc:	f001 fcf2 	bl	800a2a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	3324      	adds	r3, #36	; 0x24
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fc61 	bl	8009198 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f7ff fefb 	bl	80086d2 <prvUnlockQueue>
	}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08e      	sub	sp, #56	; 0x38
 80088e8:	af04      	add	r7, sp, #16
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <xTaskCreateStatic+0x2a>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	623b      	str	r3, [r7, #32]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <xTaskCreateStatic+0x46>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	61fb      	str	r3, [r7, #28]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800892a:	23bc      	movs	r3, #188	; 0xbc
 800892c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2bbc      	cmp	r3, #188	; 0xbc
 8008932:	d00a      	beq.n	800894a <xTaskCreateStatic+0x66>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	61bb      	str	r3, [r7, #24]
}
 8008946:	bf00      	nop
 8008948:	e7fe      	b.n	8008948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800894a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01e      	beq.n	8008990 <xTaskCreateStatic+0xac>
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01b      	beq.n	8008990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	2202      	movs	r2, #2
 8008966:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800896a:	2300      	movs	r3, #0
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	f107 0314 	add.w	r3, r7, #20
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 f850 	bl	8008a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800898a:	f000 f8f3 	bl	8008b74 <prvAddNewTaskToReadyList>
 800898e:	e001      	b.n	8008994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008994:	697b      	ldr	r3, [r7, #20]
	}
 8008996:	4618      	mov	r0, r3
 8008998:	3728      	adds	r7, #40	; 0x28
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b08c      	sub	sp, #48	; 0x30
 80089a2:	af04      	add	r7, sp, #16
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	603b      	str	r3, [r7, #0]
 80089aa:	4613      	mov	r3, r2
 80089ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fd68 	bl	800a488 <pvPortMalloc>
 80089b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00e      	beq.n	80089de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089c0:	20bc      	movs	r0, #188	; 0xbc
 80089c2:	f001 fd61 	bl	800a488 <pvPortMalloc>
 80089c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	631a      	str	r2, [r3, #48]	; 0x30
 80089d4:	e005      	b.n	80089e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	f001 fe22 	bl	800a620 <vPortFree>
 80089dc:	e001      	b.n	80089e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d017      	beq.n	8008a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	2300      	movs	r3, #0
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 f80e 	bl	8008a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a0c:	69f8      	ldr	r0, [r7, #28]
 8008a0e:	f000 f8b1 	bl	8008b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a12:	2301      	movs	r3, #1
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	e002      	b.n	8008a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a18:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3720      	adds	r7, #32
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	461a      	mov	r2, r3
 8008a40:	21a5      	movs	r1, #165	; 0xa5
 8008a42:	f002 f83c 	bl	800aabe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a50:	3b01      	subs	r3, #1
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f023 0307 	bic.w	r3, r3, #7
 8008a5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	617b      	str	r3, [r7, #20]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01f      	beq.n	8008ac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	e012      	b.n	8008ab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	7819      	ldrb	r1, [r3, #0]
 8008a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	4413      	add	r3, r2
 8008a9a:	3334      	adds	r3, #52	; 0x34
 8008a9c:	460a      	mov	r2, r1
 8008a9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d006      	beq.n	8008aba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	2b0f      	cmp	r3, #15
 8008ab6:	d9e9      	bls.n	8008a8c <prvInitialiseNewTask+0x64>
 8008ab8:	e000      	b.n	8008abc <prvInitialiseNewTask+0x94>
			{
				break;
 8008aba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ac4:	e003      	b.n	8008ace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	2b37      	cmp	r3, #55	; 0x37
 8008ad2:	d901      	bls.n	8008ad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ad4:	2337      	movs	r3, #55	; 0x37
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	3304      	adds	r3, #4
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fda0 	bl	8007634 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	3318      	adds	r3, #24
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe fd9b 	bl	8007634 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	3354      	adds	r3, #84	; 0x54
 8008b28:	2260      	movs	r2, #96	; 0x60
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 ffc6 	bl	800aabe <memset>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <prvInitialiseNewTask+0x140>)
 8008b36:	659a      	str	r2, [r3, #88]	; 0x58
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <prvInitialiseNewTask+0x144>)
 8008b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	4a0b      	ldr	r2, [pc, #44]	; (8008b70 <prvInitialiseNewTask+0x148>)
 8008b42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	69b8      	ldr	r0, [r7, #24]
 8008b4a:	f001 fa4f 	bl	8009fec <pxPortInitialiseStack>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b60:	bf00      	nop
 8008b62:	3720      	adds	r7, #32
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	0800d130 	.word	0x0800d130
 8008b6c:	0800d150 	.word	0x0800d150
 8008b70:	0800d110 	.word	0x0800d110

08008b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b7c:	f001 fb62 	bl	800a244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b80:	4b2d      	ldr	r3, [pc, #180]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a2c      	ldr	r2, [pc, #176]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b8a:	4b2c      	ldr	r3, [pc, #176]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b92:	4a2a      	ldr	r2, [pc, #168]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b98:	4b27      	ldr	r3, [pc, #156]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d110      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ba0:	f000 fc26 	bl	80093f0 <prvInitialiseTaskLists>
 8008ba4:	e00d      	b.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ba6:	4b26      	ldr	r3, [pc, #152]	; (8008c40 <prvAddNewTaskToReadyList+0xcc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bae:	4b23      	ldr	r3, [pc, #140]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d802      	bhi.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bbc:	4a1f      	ldr	r2, [pc, #124]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bc2:	4b20      	ldr	r3, [pc, #128]	; (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a1e      	ldr	r2, [pc, #120]	; (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <prvAddNewTaskToReadyList+0xd4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d903      	bls.n	8008be8 <prvAddNewTaskToReadyList+0x74>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <prvAddNewTaskToReadyList+0xd4>)
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <prvAddNewTaskToReadyList+0xd8>)
 8008bf6:	441a      	add	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7fe fd25 	bl	800764e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c04:	f001 fb4e 	bl	800a2a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <prvAddNewTaskToReadyList+0xcc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d207      	bcs.n	8008c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <prvAddNewTaskToReadyList+0xdc>)
 8008c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200010ec 	.word	0x200010ec
 8008c3c:	20000c18 	.word	0x20000c18
 8008c40:	200010f8 	.word	0x200010f8
 8008c44:	20001108 	.word	0x20001108
 8008c48:	200010f4 	.word	0x200010f4
 8008c4c:	20000c1c 	.word	0x20000c1c
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d017      	beq.n	8008c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c66:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <vTaskDelay+0x60>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <vTaskDelay+0x30>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	60bb      	str	r3, [r7, #8]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c84:	f000 f88a 	bl	8008d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c88:	2100      	movs	r1, #0
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fe0c 	bl	80098a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c90:	f000 f892 	bl	8008db8 <xTaskResumeAll>
 8008c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d107      	bne.n	8008cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <vTaskDelay+0x64>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20001114 	.word	0x20001114
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	; 0x28
 8008cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cca:	463a      	mov	r2, r7
 8008ccc:	1d39      	adds	r1, r7, #4
 8008cce:	f107 0308 	add.w	r3, r7, #8
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fc5a 	bl	800758c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	9202      	str	r2, [sp, #8]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	460a      	mov	r2, r1
 8008cea:	4924      	ldr	r1, [pc, #144]	; (8008d7c <vTaskStartScheduler+0xc0>)
 8008cec:	4824      	ldr	r0, [pc, #144]	; (8008d80 <vTaskStartScheduler+0xc4>)
 8008cee:	f7ff fdf9 	bl	80088e4 <xTaskCreateStatic>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	4a23      	ldr	r2, [pc, #140]	; (8008d84 <vTaskStartScheduler+0xc8>)
 8008cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cf8:	4b22      	ldr	r3, [pc, #136]	; (8008d84 <vTaskStartScheduler+0xc8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d00:	2301      	movs	r3, #1
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e001      	b.n	8008d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d102      	bne.n	8008d16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d10:	f000 fe1e 	bl	8009950 <xTimerCreateTimerTask>
 8008d14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d11b      	bne.n	8008d54 <vTaskStartScheduler+0x98>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	613b      	str	r3, [r7, #16]
}
 8008d2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d30:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <vTaskStartScheduler+0xcc>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3354      	adds	r3, #84	; 0x54
 8008d36:	4a15      	ldr	r2, [pc, #84]	; (8008d8c <vTaskStartScheduler+0xd0>)
 8008d38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d3a:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <vTaskStartScheduler+0xd4>)
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d42:	4b14      	ldr	r3, [pc, #80]	; (8008d94 <vTaskStartScheduler+0xd8>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d48:	4b13      	ldr	r3, [pc, #76]	; (8008d98 <vTaskStartScheduler+0xdc>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d4e:	f001 f9d7 	bl	800a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d52:	e00e      	b.n	8008d72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d10a      	bne.n	8008d72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60fb      	str	r3, [r7, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <vTaskStartScheduler+0xb4>
}
 8008d72:	bf00      	nop
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	0800cf7c 	.word	0x0800cf7c
 8008d80:	080093c1 	.word	0x080093c1
 8008d84:	20001110 	.word	0x20001110
 8008d88:	20000c18 	.word	0x20000c18
 8008d8c:	20000010 	.word	0x20000010
 8008d90:	2000110c 	.word	0x2000110c
 8008d94:	200010f8 	.word	0x200010f8
 8008d98:	200010f0 	.word	0x200010f0

08008d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008da0:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <vTaskSuspendAll+0x18>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3301      	adds	r3, #1
 8008da6:	4a03      	ldr	r2, [pc, #12]	; (8008db4 <vTaskSuspendAll+0x18>)
 8008da8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008daa:	bf00      	nop
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	20001114 	.word	0x20001114

08008db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dc6:	4b42      	ldr	r3, [pc, #264]	; (8008ed0 <xTaskResumeAll+0x118>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	603b      	str	r3, [r7, #0]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008de4:	f001 fa2e 	bl	800a244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008de8:	4b39      	ldr	r3, [pc, #228]	; (8008ed0 <xTaskResumeAll+0x118>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4a38      	ldr	r2, [pc, #224]	; (8008ed0 <xTaskResumeAll+0x118>)
 8008df0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008df2:	4b37      	ldr	r3, [pc, #220]	; (8008ed0 <xTaskResumeAll+0x118>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d162      	bne.n	8008ec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dfa:	4b36      	ldr	r3, [pc, #216]	; (8008ed4 <xTaskResumeAll+0x11c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d05e      	beq.n	8008ec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e02:	e02f      	b.n	8008e64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e04:	4b34      	ldr	r3, [pc, #208]	; (8008ed8 <xTaskResumeAll+0x120>)
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3318      	adds	r3, #24
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fc79 	bl	8007708 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fc74 	bl	8007708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e24:	4b2d      	ldr	r3, [pc, #180]	; (8008edc <xTaskResumeAll+0x124>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d903      	bls.n	8008e34 <xTaskResumeAll+0x7c>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	4a2a      	ldr	r2, [pc, #168]	; (8008edc <xTaskResumeAll+0x124>)
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4a27      	ldr	r2, [pc, #156]	; (8008ee0 <xTaskResumeAll+0x128>)
 8008e42:	441a      	add	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f7fe fbff 	bl	800764e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	4b23      	ldr	r3, [pc, #140]	; (8008ee4 <xTaskResumeAll+0x12c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d302      	bcc.n	8008e64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e5e:	4b22      	ldr	r3, [pc, #136]	; (8008ee8 <xTaskResumeAll+0x130>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e64:	4b1c      	ldr	r3, [pc, #112]	; (8008ed8 <xTaskResumeAll+0x120>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1cb      	bne.n	8008e04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e72:	f000 fb5f 	bl	8009534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e76:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <xTaskResumeAll+0x134>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d010      	beq.n	8008ea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e82:	f000 f847 	bl	8008f14 <xTaskIncrementTick>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e8c:	4b16      	ldr	r3, [pc, #88]	; (8008ee8 <xTaskResumeAll+0x130>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1f1      	bne.n	8008e82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <xTaskResumeAll+0x134>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ea4:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <xTaskResumeAll+0x130>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eac:	2301      	movs	r3, #1
 8008eae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008eb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <xTaskResumeAll+0x138>)
 8008eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ec0:	f001 f9f0 	bl	800a2a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20001114 	.word	0x20001114
 8008ed4:	200010ec 	.word	0x200010ec
 8008ed8:	200010ac 	.word	0x200010ac
 8008edc:	200010f4 	.word	0x200010f4
 8008ee0:	20000c1c 	.word	0x20000c1c
 8008ee4:	20000c18 	.word	0x20000c18
 8008ee8:	20001100 	.word	0x20001100
 8008eec:	200010fc 	.word	0x200010fc
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <xTaskGetTickCount+0x1c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f00:	687b      	ldr	r3, [r7, #4]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	200010f0 	.word	0x200010f0

08008f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1e:	4b4f      	ldr	r3, [pc, #316]	; (800905c <xTaskIncrementTick+0x148>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f040 808f 	bne.w	8009046 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f28:	4b4d      	ldr	r3, [pc, #308]	; (8009060 <xTaskIncrementTick+0x14c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f30:	4a4b      	ldr	r2, [pc, #300]	; (8009060 <xTaskIncrementTick+0x14c>)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d120      	bne.n	8008f7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f3c:	4b49      	ldr	r3, [pc, #292]	; (8009064 <xTaskIncrementTick+0x150>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <xTaskIncrementTick+0x48>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	603b      	str	r3, [r7, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <xTaskIncrementTick+0x46>
 8008f5c:	4b41      	ldr	r3, [pc, #260]	; (8009064 <xTaskIncrementTick+0x150>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	4b41      	ldr	r3, [pc, #260]	; (8009068 <xTaskIncrementTick+0x154>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a3f      	ldr	r2, [pc, #252]	; (8009064 <xTaskIncrementTick+0x150>)
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	4a3f      	ldr	r2, [pc, #252]	; (8009068 <xTaskIncrementTick+0x154>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	4b3e      	ldr	r3, [pc, #248]	; (800906c <xTaskIncrementTick+0x158>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	4a3d      	ldr	r2, [pc, #244]	; (800906c <xTaskIncrementTick+0x158>)
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	f000 fadb 	bl	8009534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f7e:	4b3c      	ldr	r3, [pc, #240]	; (8009070 <xTaskIncrementTick+0x15c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d349      	bcc.n	800901c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f88:	4b36      	ldr	r3, [pc, #216]	; (8009064 <xTaskIncrementTick+0x150>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f92:	4b37      	ldr	r3, [pc, #220]	; (8009070 <xTaskIncrementTick+0x15c>)
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295
 8008f98:	601a      	str	r2, [r3, #0]
					break;
 8008f9a:	e03f      	b.n	800901c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9c:	4b31      	ldr	r3, [pc, #196]	; (8009064 <xTaskIncrementTick+0x150>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d203      	bcs.n	8008fbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fb4:	4a2e      	ldr	r2, [pc, #184]	; (8009070 <xTaskIncrementTick+0x15c>)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fba:	e02f      	b.n	800901c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fba1 	bl	8007708 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3318      	adds	r3, #24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fb98 	bl	8007708 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fdc:	4b25      	ldr	r3, [pc, #148]	; (8009074 <xTaskIncrementTick+0x160>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d903      	bls.n	8008fec <xTaskIncrementTick+0xd8>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	4a22      	ldr	r2, [pc, #136]	; (8009074 <xTaskIncrementTick+0x160>)
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4a1f      	ldr	r2, [pc, #124]	; (8009078 <xTaskIncrementTick+0x164>)
 8008ffa:	441a      	add	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	3304      	adds	r3, #4
 8009000:	4619      	mov	r1, r3
 8009002:	4610      	mov	r0, r2
 8009004:	f7fe fb23 	bl	800764e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900c:	4b1b      	ldr	r3, [pc, #108]	; (800907c <xTaskIncrementTick+0x168>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	429a      	cmp	r2, r3
 8009014:	d3b8      	bcc.n	8008f88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009016:	2301      	movs	r3, #1
 8009018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800901a:	e7b5      	b.n	8008f88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800901c:	4b17      	ldr	r3, [pc, #92]	; (800907c <xTaskIncrementTick+0x168>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009022:	4915      	ldr	r1, [pc, #84]	; (8009078 <xTaskIncrementTick+0x164>)
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d901      	bls.n	8009038 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009034:	2301      	movs	r3, #1
 8009036:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009038:	4b11      	ldr	r3, [pc, #68]	; (8009080 <xTaskIncrementTick+0x16c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d007      	beq.n	8009050 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e004      	b.n	8009050 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009046:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <xTaskIncrementTick+0x170>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3301      	adds	r3, #1
 800904c:	4a0d      	ldr	r2, [pc, #52]	; (8009084 <xTaskIncrementTick+0x170>)
 800904e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009050:	697b      	ldr	r3, [r7, #20]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20001114 	.word	0x20001114
 8009060:	200010f0 	.word	0x200010f0
 8009064:	200010a4 	.word	0x200010a4
 8009068:	200010a8 	.word	0x200010a8
 800906c:	20001104 	.word	0x20001104
 8009070:	2000110c 	.word	0x2000110c
 8009074:	200010f4 	.word	0x200010f4
 8009078:	20000c1c 	.word	0x20000c1c
 800907c:	20000c18 	.word	0x20000c18
 8009080:	20001100 	.word	0x20001100
 8009084:	200010fc 	.word	0x200010fc

08009088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800908e:	4b2a      	ldr	r3, [pc, #168]	; (8009138 <vTaskSwitchContext+0xb0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009096:	4b29      	ldr	r3, [pc, #164]	; (800913c <vTaskSwitchContext+0xb4>)
 8009098:	2201      	movs	r2, #1
 800909a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800909c:	e046      	b.n	800912c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800909e:	4b27      	ldr	r3, [pc, #156]	; (800913c <vTaskSwitchContext+0xb4>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a4:	4b26      	ldr	r3, [pc, #152]	; (8009140 <vTaskSwitchContext+0xb8>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e010      	b.n	80090ce <vTaskSwitchContext+0x46>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	607b      	str	r3, [r7, #4]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vTaskSwitchContext+0x3e>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	491d      	ldr	r1, [pc, #116]	; (8009144 <vTaskSwitchContext+0xbc>)
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0e4      	beq.n	80090ac <vTaskSwitchContext+0x24>
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4613      	mov	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4a15      	ldr	r2, [pc, #84]	; (8009144 <vTaskSwitchContext+0xbc>)
 80090ee:	4413      	add	r3, r2
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	3308      	adds	r3, #8
 8009104:	429a      	cmp	r2, r3
 8009106:	d104      	bne.n	8009112 <vTaskSwitchContext+0x8a>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	605a      	str	r2, [r3, #4]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	4a0b      	ldr	r2, [pc, #44]	; (8009148 <vTaskSwitchContext+0xc0>)
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	4a08      	ldr	r2, [pc, #32]	; (8009140 <vTaskSwitchContext+0xb8>)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009122:	4b09      	ldr	r3, [pc, #36]	; (8009148 <vTaskSwitchContext+0xc0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3354      	adds	r3, #84	; 0x54
 8009128:	4a08      	ldr	r2, [pc, #32]	; (800914c <vTaskSwitchContext+0xc4>)
 800912a:	6013      	str	r3, [r2, #0]
}
 800912c:	bf00      	nop
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20001114 	.word	0x20001114
 800913c:	20001100 	.word	0x20001100
 8009140:	200010f4 	.word	0x200010f4
 8009144:	20000c1c 	.word	0x20000c1c
 8009148:	20000c18 	.word	0x20000c18
 800914c:	20000010 	.word	0x20000010

08009150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	60fb      	str	r3, [r7, #12]
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009176:	4b07      	ldr	r3, [pc, #28]	; (8009194 <vTaskPlaceOnEventList+0x44>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3318      	adds	r3, #24
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fe fa89 	bl	8007696 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009184:	2101      	movs	r1, #1
 8009186:	6838      	ldr	r0, [r7, #0]
 8009188:	f000 fb8e 	bl	80098a8 <prvAddCurrentTaskToDelayedList>
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000c18 	.word	0x20000c18

08009198 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	617b      	str	r3, [r7, #20]
}
 80091bc:	bf00      	nop
 80091be:	e7fe      	b.n	80091be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <vTaskPlaceOnEventListRestricted+0x54>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3318      	adds	r3, #24
 80091c6:	4619      	mov	r1, r3
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7fe fa40 	bl	800764e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295
 80091d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	68b8      	ldr	r0, [r7, #8]
 80091de:	f000 fb63 	bl	80098a8 <prvAddCurrentTaskToDelayedList>
	}
 80091e2:	bf00      	nop
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20000c18 	.word	0x20000c18

080091f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60fb      	str	r3, [r7, #12]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	3318      	adds	r3, #24
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fa71 	bl	8007708 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009226:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <xTaskRemoveFromEventList+0xb0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d11d      	bne.n	800926a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	3304      	adds	r3, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fa68 	bl	8007708 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923c:	4b19      	ldr	r3, [pc, #100]	; (80092a4 <xTaskRemoveFromEventList+0xb4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d903      	bls.n	800924c <xTaskRemoveFromEventList+0x5c>
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4a16      	ldr	r2, [pc, #88]	; (80092a4 <xTaskRemoveFromEventList+0xb4>)
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4a13      	ldr	r2, [pc, #76]	; (80092a8 <xTaskRemoveFromEventList+0xb8>)
 800925a:	441a      	add	r2, r3
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7fe f9f3 	bl	800764e <vListInsertEnd>
 8009268:	e005      	b.n	8009276 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	3318      	adds	r3, #24
 800926e:	4619      	mov	r1, r3
 8009270:	480e      	ldr	r0, [pc, #56]	; (80092ac <xTaskRemoveFromEventList+0xbc>)
 8009272:	f7fe f9ec 	bl	800764e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	4b0d      	ldr	r3, [pc, #52]	; (80092b0 <xTaskRemoveFromEventList+0xc0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	429a      	cmp	r2, r3
 8009282:	d905      	bls.n	8009290 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <xTaskRemoveFromEventList+0xc4>)
 800928a:	2201      	movs	r2, #1
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	e001      	b.n	8009294 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009294:	697b      	ldr	r3, [r7, #20]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20001114 	.word	0x20001114
 80092a4:	200010f4 	.word	0x200010f4
 80092a8:	20000c1c 	.word	0x20000c1c
 80092ac:	200010ac 	.word	0x200010ac
 80092b0:	20000c18 	.word	0x20000c18
 80092b4:	20001100 	.word	0x20001100

080092b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <vTaskInternalSetTimeOutState+0x24>)
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <vTaskInternalSetTimeOutState+0x28>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	605a      	str	r2, [r3, #4]
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	20001104 	.word	0x20001104
 80092e0:	200010f0 	.word	0x200010f0

080092e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	613b      	str	r3, [r7, #16]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	60fb      	str	r3, [r7, #12]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009326:	f000 ff8d 	bl	800a244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800932a:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <xTaskCheckForTimeOut+0xbc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d102      	bne.n	800934a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	e023      	b.n	8009392 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <xTaskCheckForTimeOut+0xc0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d007      	beq.n	8009366 <xTaskCheckForTimeOut+0x82>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	429a      	cmp	r2, r3
 800935e:	d302      	bcc.n	8009366 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	61fb      	str	r3, [r7, #28]
 8009364:	e015      	b.n	8009392 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	d20b      	bcs.n	8009388 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	1ad2      	subs	r2, r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff ff9b 	bl	80092b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	e004      	b.n	8009392 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800938e:	2301      	movs	r3, #1
 8009390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009392:	f000 ff87 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 8009396:	69fb      	ldr	r3, [r7, #28]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200010f0 	.word	0x200010f0
 80093a4:	20001104 	.word	0x20001104

080093a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <vTaskMissedYield+0x14>)
 80093ae:	2201      	movs	r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
}
 80093b2:	bf00      	nop
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	20001100 	.word	0x20001100

080093c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093c8:	f000 f852 	bl	8009470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <prvIdleTask+0x28>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d9f9      	bls.n	80093c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <prvIdleTask+0x2c>)
 80093d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093e4:	e7f0      	b.n	80093c8 <prvIdleTask+0x8>
 80093e6:	bf00      	nop
 80093e8:	20000c1c 	.word	0x20000c1c
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093f6:	2300      	movs	r3, #0
 80093f8:	607b      	str	r3, [r7, #4]
 80093fa:	e00c      	b.n	8009416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4a12      	ldr	r2, [pc, #72]	; (8009450 <prvInitialiseTaskLists+0x60>)
 8009408:	4413      	add	r3, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe f8f2 	bl	80075f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3301      	adds	r3, #1
 8009414:	607b      	str	r3, [r7, #4]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b37      	cmp	r3, #55	; 0x37
 800941a:	d9ef      	bls.n	80093fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800941c:	480d      	ldr	r0, [pc, #52]	; (8009454 <prvInitialiseTaskLists+0x64>)
 800941e:	f7fe f8e9 	bl	80075f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009422:	480d      	ldr	r0, [pc, #52]	; (8009458 <prvInitialiseTaskLists+0x68>)
 8009424:	f7fe f8e6 	bl	80075f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009428:	480c      	ldr	r0, [pc, #48]	; (800945c <prvInitialiseTaskLists+0x6c>)
 800942a:	f7fe f8e3 	bl	80075f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800942e:	480c      	ldr	r0, [pc, #48]	; (8009460 <prvInitialiseTaskLists+0x70>)
 8009430:	f7fe f8e0 	bl	80075f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009434:	480b      	ldr	r0, [pc, #44]	; (8009464 <prvInitialiseTaskLists+0x74>)
 8009436:	f7fe f8dd 	bl	80075f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800943a:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <prvInitialiseTaskLists+0x78>)
 800943c:	4a05      	ldr	r2, [pc, #20]	; (8009454 <prvInitialiseTaskLists+0x64>)
 800943e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <prvInitialiseTaskLists+0x7c>)
 8009442:	4a05      	ldr	r2, [pc, #20]	; (8009458 <prvInitialiseTaskLists+0x68>)
 8009444:	601a      	str	r2, [r3, #0]
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	20000c1c 	.word	0x20000c1c
 8009454:	2000107c 	.word	0x2000107c
 8009458:	20001090 	.word	0x20001090
 800945c:	200010ac 	.word	0x200010ac
 8009460:	200010c0 	.word	0x200010c0
 8009464:	200010d8 	.word	0x200010d8
 8009468:	200010a4 	.word	0x200010a4
 800946c:	200010a8 	.word	0x200010a8

08009470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009476:	e019      	b.n	80094ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009478:	f000 fee4 	bl	800a244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800947c:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <prvCheckTasksWaitingTermination+0x50>)
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3304      	adds	r3, #4
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe f93d 	bl	8007708 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800948e:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <prvCheckTasksWaitingTermination+0x54>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3b01      	subs	r3, #1
 8009494:	4a0b      	ldr	r2, [pc, #44]	; (80094c4 <prvCheckTasksWaitingTermination+0x54>)
 8009496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009498:	4b0b      	ldr	r3, [pc, #44]	; (80094c8 <prvCheckTasksWaitingTermination+0x58>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3b01      	subs	r3, #1
 800949e:	4a0a      	ldr	r2, [pc, #40]	; (80094c8 <prvCheckTasksWaitingTermination+0x58>)
 80094a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094a2:	f000 feff 	bl	800a2a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f810 	bl	80094cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094ac:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <prvCheckTasksWaitingTermination+0x58>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e1      	bne.n	8009478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200010c0 	.word	0x200010c0
 80094c4:	200010ec 	.word	0x200010ec
 80094c8:	200010d4 	.word	0x200010d4

080094cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3354      	adds	r3, #84	; 0x54
 80094d8:	4618      	mov	r0, r3
 80094da:	f001 fbd9 	bl	800ac90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d108      	bne.n	80094fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 f897 	bl	800a620 <vPortFree>
				vPortFree( pxTCB );
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f894 	bl	800a620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094f8:	e018      	b.n	800952c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009500:	2b01      	cmp	r3, #1
 8009502:	d103      	bne.n	800950c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 f88b 	bl	800a620 <vPortFree>
	}
 800950a:	e00f      	b.n	800952c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009512:	2b02      	cmp	r3, #2
 8009514:	d00a      	beq.n	800952c <prvDeleteTCB+0x60>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	60fb      	str	r3, [r7, #12]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <prvDeleteTCB+0x5e>
	}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800953a:	4b0c      	ldr	r3, [pc, #48]	; (800956c <prvResetNextTaskUnblockTime+0x38>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <prvResetNextTaskUnblockTime+0x3c>)
 8009546:	f04f 32ff 	mov.w	r2, #4294967295
 800954a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800954c:	e008      	b.n	8009560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800954e:	4b07      	ldr	r3, [pc, #28]	; (800956c <prvResetNextTaskUnblockTime+0x38>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	4a04      	ldr	r2, [pc, #16]	; (8009570 <prvResetNextTaskUnblockTime+0x3c>)
 800955e:	6013      	str	r3, [r2, #0]
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	200010a4 	.word	0x200010a4
 8009570:	2000110c 	.word	0x2000110c

08009574 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800957a:	4b05      	ldr	r3, [pc, #20]	; (8009590 <xTaskGetCurrentTaskHandle+0x1c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009580:	687b      	ldr	r3, [r7, #4]
	}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	20000c18 	.word	0x20000c18

08009594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800959a:	4b0b      	ldr	r3, [pc, #44]	; (80095c8 <xTaskGetSchedulerState+0x34>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095a2:	2301      	movs	r3, #1
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	e008      	b.n	80095ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095a8:	4b08      	ldr	r3, [pc, #32]	; (80095cc <xTaskGetSchedulerState+0x38>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095b0:	2302      	movs	r3, #2
 80095b2:	607b      	str	r3, [r7, #4]
 80095b4:	e001      	b.n	80095ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095b6:	2300      	movs	r3, #0
 80095b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095ba:	687b      	ldr	r3, [r7, #4]
	}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	200010f8 	.word	0x200010f8
 80095cc:	20001114 	.word	0x20001114

080095d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095dc:	2300      	movs	r3, #0
 80095de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d051      	beq.n	800968a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ea:	4b2a      	ldr	r3, [pc, #168]	; (8009694 <xTaskPriorityInherit+0xc4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d241      	bcs.n	8009678 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	db06      	blt.n	800960a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095fc:	4b25      	ldr	r3, [pc, #148]	; (8009694 <xTaskPriorityInherit+0xc4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009602:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	6959      	ldr	r1, [r3, #20]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4a1f      	ldr	r2, [pc, #124]	; (8009698 <xTaskPriorityInherit+0xc8>)
 800961c:	4413      	add	r3, r2
 800961e:	4299      	cmp	r1, r3
 8009620:	d122      	bne.n	8009668 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	3304      	adds	r3, #4
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe f86e 	bl	8007708 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800962c:	4b19      	ldr	r3, [pc, #100]	; (8009694 <xTaskPriorityInherit+0xc4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	4b18      	ldr	r3, [pc, #96]	; (800969c <xTaskPriorityInherit+0xcc>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d903      	bls.n	800964a <xTaskPriorityInherit+0x7a>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009646:	4a15      	ldr	r2, [pc, #84]	; (800969c <xTaskPriorityInherit+0xcc>)
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4a10      	ldr	r2, [pc, #64]	; (8009698 <xTaskPriorityInherit+0xc8>)
 8009658:	441a      	add	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	3304      	adds	r3, #4
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7fd fff4 	bl	800764e <vListInsertEnd>
 8009666:	e004      	b.n	8009672 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009668:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <xTaskPriorityInherit+0xc4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	e008      	b.n	800968a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800967c:	4b05      	ldr	r3, [pc, #20]	; (8009694 <xTaskPriorityInherit+0xc4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	429a      	cmp	r2, r3
 8009684:	d201      	bcs.n	800968a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009686:	2301      	movs	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800968a:	68fb      	ldr	r3, [r7, #12]
	}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20000c18 	.word	0x20000c18
 8009698:	20000c1c 	.word	0x20000c1c
 800969c:	200010f4 	.word	0x200010f4

080096a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d056      	beq.n	8009764 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096b6:	4b2e      	ldr	r3, [pc, #184]	; (8009770 <xTaskPriorityDisinherit+0xd0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d00a      	beq.n	80096d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60bb      	str	r3, [r7, #8]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f8:	1e5a      	subs	r2, r3, #1
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009706:	429a      	cmp	r2, r3
 8009708:	d02c      	beq.n	8009764 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970e:	2b00      	cmp	r3, #0
 8009710:	d128      	bne.n	8009764 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	3304      	adds	r3, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd fff6 	bl	8007708 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009734:	4b0f      	ldr	r3, [pc, #60]	; (8009774 <xTaskPriorityDisinherit+0xd4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	429a      	cmp	r2, r3
 800973a:	d903      	bls.n	8009744 <xTaskPriorityDisinherit+0xa4>
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009740:	4a0c      	ldr	r2, [pc, #48]	; (8009774 <xTaskPriorityDisinherit+0xd4>)
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4a09      	ldr	r2, [pc, #36]	; (8009778 <xTaskPriorityDisinherit+0xd8>)
 8009752:	441a      	add	r2, r3
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	3304      	adds	r3, #4
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f7fd ff77 	bl	800764e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009764:	697b      	ldr	r3, [r7, #20]
	}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000c18 	.word	0x20000c18
 8009774:	200010f4 	.word	0x200010f4
 8009778:	20000c1c 	.word	0x20000c1c

0800977c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800978a:	2301      	movs	r3, #1
 800978c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d06a      	beq.n	800986a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	60fb      	str	r3, [r7, #12]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d902      	bls.n	80097c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	e002      	b.n	80097c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d04b      	beq.n	800986a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d146      	bne.n	800986a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097dc:	4b25      	ldr	r3, [pc, #148]	; (8009874 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d10a      	bne.n	80097fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60bb      	str	r3, [r7, #8]
}
 80097f8:	bf00      	nop
 80097fa:	e7fe      	b.n	80097fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	db04      	blt.n	800981a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	6959      	ldr	r1, [r3, #20]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4613      	mov	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4a13      	ldr	r2, [pc, #76]	; (8009878 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800982a:	4413      	add	r3, r2
 800982c:	4299      	cmp	r1, r3
 800982e:	d11c      	bne.n	800986a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f7fd ff67 	bl	8007708 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983e:	4b0f      	ldr	r3, [pc, #60]	; (800987c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d903      	bls.n	800984e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	4a0c      	ldr	r2, [pc, #48]	; (800987c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4a07      	ldr	r2, [pc, #28]	; (8009878 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800985c:	441a      	add	r2, r3
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fd fef2 	bl	800764e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800986a:	bf00      	nop
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000c18 	.word	0x20000c18
 8009878:	20000c1c 	.word	0x20000c1c
 800987c:	200010f4 	.word	0x200010f4

08009880 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009884:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d004      	beq.n	8009896 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009892:	3201      	adds	r2, #1
 8009894:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009896:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009898:	681b      	ldr	r3, [r3, #0]
	}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	20000c18 	.word	0x20000c18

080098a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098b2:	4b21      	ldr	r3, [pc, #132]	; (8009938 <prvAddCurrentTaskToDelayedList+0x90>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b8:	4b20      	ldr	r3, [pc, #128]	; (800993c <prvAddCurrentTaskToDelayedList+0x94>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3304      	adds	r3, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fd ff22 	bl	8007708 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ca:	d10a      	bne.n	80098e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d2:	4b1a      	ldr	r3, [pc, #104]	; (800993c <prvAddCurrentTaskToDelayedList+0x94>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4619      	mov	r1, r3
 80098da:	4819      	ldr	r0, [pc, #100]	; (8009940 <prvAddCurrentTaskToDelayedList+0x98>)
 80098dc:	f7fd feb7 	bl	800764e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098e0:	e026      	b.n	8009930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4413      	add	r3, r2
 80098e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098ea:	4b14      	ldr	r3, [pc, #80]	; (800993c <prvAddCurrentTaskToDelayedList+0x94>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d209      	bcs.n	800990e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098fa:	4b12      	ldr	r3, [pc, #72]	; (8009944 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	4b0f      	ldr	r3, [pc, #60]	; (800993c <prvAddCurrentTaskToDelayedList+0x94>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7fd fec5 	bl	8007696 <vListInsert>
}
 800990c:	e010      	b.n	8009930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800990e:	4b0e      	ldr	r3, [pc, #56]	; (8009948 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4b0a      	ldr	r3, [pc, #40]	; (800993c <prvAddCurrentTaskToDelayedList+0x94>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3304      	adds	r3, #4
 8009918:	4619      	mov	r1, r3
 800991a:	4610      	mov	r0, r2
 800991c:	f7fd febb 	bl	8007696 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009920:	4b0a      	ldr	r3, [pc, #40]	; (800994c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	429a      	cmp	r2, r3
 8009928:	d202      	bcs.n	8009930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800992a:	4a08      	ldr	r2, [pc, #32]	; (800994c <prvAddCurrentTaskToDelayedList+0xa4>)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	6013      	str	r3, [r2, #0]
}
 8009930:	bf00      	nop
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	200010f0 	.word	0x200010f0
 800993c:	20000c18 	.word	0x20000c18
 8009940:	200010d8 	.word	0x200010d8
 8009944:	200010a8 	.word	0x200010a8
 8009948:	200010a4 	.word	0x200010a4
 800994c:	2000110c 	.word	0x2000110c

08009950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08a      	sub	sp, #40	; 0x28
 8009954:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009956:	2300      	movs	r3, #0
 8009958:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800995a:	f000 fb07 	bl	8009f6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800995e:	4b1c      	ldr	r3, [pc, #112]	; (80099d0 <xTimerCreateTimerTask+0x80>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d021      	beq.n	80099aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800996e:	1d3a      	adds	r2, r7, #4
 8009970:	f107 0108 	add.w	r1, r7, #8
 8009974:	f107 030c 	add.w	r3, r7, #12
 8009978:	4618      	mov	r0, r3
 800997a:	f7fd fe21 	bl	80075c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	9202      	str	r2, [sp, #8]
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	2302      	movs	r3, #2
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	2300      	movs	r3, #0
 800998e:	460a      	mov	r2, r1
 8009990:	4910      	ldr	r1, [pc, #64]	; (80099d4 <xTimerCreateTimerTask+0x84>)
 8009992:	4811      	ldr	r0, [pc, #68]	; (80099d8 <xTimerCreateTimerTask+0x88>)
 8009994:	f7fe ffa6 	bl	80088e4 <xTaskCreateStatic>
 8009998:	4603      	mov	r3, r0
 800999a:	4a10      	ldr	r2, [pc, #64]	; (80099dc <xTimerCreateTimerTask+0x8c>)
 800999c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800999e:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <xTimerCreateTimerTask+0x8c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099a6:	2301      	movs	r3, #1
 80099a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10a      	bne.n	80099c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099c6:	697b      	ldr	r3, [r7, #20]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20001148 	.word	0x20001148
 80099d4:	0800cf84 	.word	0x0800cf84
 80099d8:	08009b15 	.word	0x08009b15
 80099dc:	2000114c 	.word	0x2000114c

080099e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08a      	sub	sp, #40	; 0x28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xTimerGenericCommand+0x2e>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	623b      	str	r3, [r7, #32]
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a0e:	4b1a      	ldr	r3, [pc, #104]	; (8009a78 <xTimerGenericCommand+0x98>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d02a      	beq.n	8009a6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b05      	cmp	r3, #5
 8009a26:	dc18      	bgt.n	8009a5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a28:	f7ff fdb4 	bl	8009594 <xTaskGetSchedulerState>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d109      	bne.n	8009a46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a32:	4b11      	ldr	r3, [pc, #68]	; (8009a78 <xTimerGenericCommand+0x98>)
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	f107 0110 	add.w	r1, r7, #16
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a3e:	f7fe f8eb 	bl	8007c18 <xQueueGenericSend>
 8009a42:	6278      	str	r0, [r7, #36]	; 0x24
 8009a44:	e012      	b.n	8009a6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a46:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <xTimerGenericCommand+0x98>)
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	f107 0110 	add.w	r1, r7, #16
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2200      	movs	r2, #0
 8009a52:	f7fe f8e1 	bl	8007c18 <xQueueGenericSend>
 8009a56:	6278      	str	r0, [r7, #36]	; 0x24
 8009a58:	e008      	b.n	8009a6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a5a:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <xTimerGenericCommand+0x98>)
 8009a5c:	6818      	ldr	r0, [r3, #0]
 8009a5e:	f107 0110 	add.w	r1, r7, #16
 8009a62:	2300      	movs	r3, #0
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	f7fe f9d5 	bl	8007e14 <xQueueGenericSendFromISR>
 8009a6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3728      	adds	r7, #40	; 0x28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20001148 	.word	0x20001148

08009a7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a86:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <prvProcessExpiredTimer+0x94>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fd fe37 	bl	8007708 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d022      	beq.n	8009aee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	699a      	ldr	r2, [r3, #24]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	18d1      	adds	r1, r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	6978      	ldr	r0, [r7, #20]
 8009ab6:	f000 f8d1 	bl	8009c5c <prvInsertTimerInActiveList>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01f      	beq.n	8009b00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	2100      	movs	r1, #0
 8009aca:	6978      	ldr	r0, [r7, #20]
 8009acc:	f7ff ff88 	bl	80099e0 <xTimerGenericCommand>
 8009ad0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d113      	bne.n	8009b00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60fb      	str	r3, [r7, #12]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af4:	f023 0301 	bic.w	r3, r3, #1
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	6978      	ldr	r0, [r7, #20]
 8009b06:	4798      	blx	r3
}
 8009b08:	bf00      	nop
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20001140 	.word	0x20001140

08009b14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b1c:	f107 0308 	add.w	r3, r7, #8
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 f857 	bl	8009bd4 <prvGetNextExpireTime>
 8009b26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 f803 	bl	8009b38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b32:	f000 f8d5 	bl	8009ce0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b36:	e7f1      	b.n	8009b1c <prvTimerTask+0x8>

08009b38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b42:	f7ff f92b 	bl	8008d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b46:	f107 0308 	add.w	r3, r7, #8
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 f866 	bl	8009c1c <prvSampleTimeNow>
 8009b50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d130      	bne.n	8009bba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <prvProcessTimerOrBlockTask+0x3c>
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d806      	bhi.n	8009b74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b66:	f7ff f927 	bl	8008db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff ff85 	bl	8009a7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b72:	e024      	b.n	8009bbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d008      	beq.n	8009b8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b7a:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <prvProcessTimerOrBlockTask+0x90>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <prvProcessTimerOrBlockTask+0x50>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <prvProcessTimerOrBlockTask+0x52>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b8c:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <prvProcessTimerOrBlockTask+0x94>)
 8009b8e:	6818      	ldr	r0, [r3, #0]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	f7fe fe6f 	bl	800887c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b9e:	f7ff f90b 	bl	8008db8 <xTaskResumeAll>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10a      	bne.n	8009bbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ba8:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <prvProcessTimerOrBlockTask+0x98>)
 8009baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	f3bf 8f6f 	isb	sy
}
 8009bb8:	e001      	b.n	8009bbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009bba:	f7ff f8fd 	bl	8008db8 <xTaskResumeAll>
}
 8009bbe:	bf00      	nop
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20001144 	.word	0x20001144
 8009bcc:	20001148 	.word	0x20001148
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bdc:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <prvGetNextExpireTime+0x44>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <prvGetNextExpireTime+0x16>
 8009be6:	2201      	movs	r2, #1
 8009be8:	e000      	b.n	8009bec <prvGetNextExpireTime+0x18>
 8009bea:	2200      	movs	r2, #0
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d105      	bne.n	8009c04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <prvGetNextExpireTime+0x44>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	e001      	b.n	8009c08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20001140 	.word	0x20001140

08009c1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c24:	f7ff f966 	bl	8008ef4 <xTaskGetTickCount>
 8009c28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c2a:	4b0b      	ldr	r3, [pc, #44]	; (8009c58 <prvSampleTimeNow+0x3c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d205      	bcs.n	8009c40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c34:	f000 f936 	bl	8009ea4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	e002      	b.n	8009c46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c46:	4a04      	ldr	r2, [pc, #16]	; (8009c58 <prvSampleTimeNow+0x3c>)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20001150 	.word	0x20001150

08009c5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d812      	bhi.n	8009ca8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	1ad2      	subs	r2, r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d302      	bcc.n	8009c96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	e01b      	b.n	8009cce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c96:	4b10      	ldr	r3, [pc, #64]	; (8009cd8 <prvInsertTimerInActiveList+0x7c>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f7fd fcf8 	bl	8007696 <vListInsert>
 8009ca6:	e012      	b.n	8009cce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d206      	bcs.n	8009cbe <prvInsertTimerInActiveList+0x62>
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d302      	bcc.n	8009cbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e007      	b.n	8009cce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cbe:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <prvInsertTimerInActiveList+0x80>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4610      	mov	r0, r2
 8009cca:	f7fd fce4 	bl	8007696 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cce:	697b      	ldr	r3, [r7, #20]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20001144 	.word	0x20001144
 8009cdc:	20001140 	.word	0x20001140

08009ce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08e      	sub	sp, #56	; 0x38
 8009ce4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ce6:	e0ca      	b.n	8009e7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da18      	bge.n	8009d20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cee:	1d3b      	adds	r3, r7, #4
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	61fb      	str	r3, [r7, #28]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d16:	6850      	ldr	r0, [r2, #4]
 8009d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d1a:	6892      	ldr	r2, [r2, #8]
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f2c0 80aa 	blt.w	8009e7c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d004      	beq.n	8009d3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	3304      	adds	r3, #4
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fd fce5 	bl	8007708 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d3e:	463b      	mov	r3, r7
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff ff6b 	bl	8009c1c <prvSampleTimeNow>
 8009d46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b09      	cmp	r3, #9
 8009d4c:	f200 8097 	bhi.w	8009e7e <prvProcessReceivedCommands+0x19e>
 8009d50:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <prvProcessReceivedCommands+0x78>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009d81 	.word	0x08009d81
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d81 	.word	0x08009d81
 8009d64:	08009df5 	.word	0x08009df5
 8009d68:	08009e09 	.word	0x08009e09
 8009d6c:	08009e53 	.word	0x08009e53
 8009d70:	08009d81 	.word	0x08009d81
 8009d74:	08009d81 	.word	0x08009d81
 8009d78:	08009df5 	.word	0x08009df5
 8009d7c:	08009e09 	.word	0x08009e09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	18d1      	adds	r1, r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da0:	f7ff ff5c 	bl	8009c5c <prvInsertTimerInActiveList>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d069      	beq.n	8009e7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009db8:	f003 0304 	and.w	r3, r3, #4
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d05e      	beq.n	8009e7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	441a      	add	r2, r3
 8009dc8:	2300      	movs	r3, #0
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd2:	f7ff fe05 	bl	80099e0 <xTimerGenericCommand>
 8009dd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d14f      	bne.n	8009e7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	61bb      	str	r3, [r7, #24]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dfa:	f023 0301 	bic.w	r3, r3, #1
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e06:	e03a      	b.n	8009e7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e0e:	f043 0301 	orr.w	r3, r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	617b      	str	r3, [r7, #20]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	699a      	ldr	r2, [r3, #24]
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	18d1      	adds	r1, r2, r3
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e4c:	f7ff ff06 	bl	8009c5c <prvInsertTimerInActiveList>
					break;
 8009e50:	e015      	b.n	8009e7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d103      	bne.n	8009e68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e62:	f000 fbdd 	bl	800a620 <vPortFree>
 8009e66:	e00a      	b.n	8009e7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e6e:	f023 0301 	bic.w	r3, r3, #1
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e7a:	e000      	b.n	8009e7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e7e:	4b08      	ldr	r3, [pc, #32]	; (8009ea0 <prvProcessReceivedCommands+0x1c0>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	1d39      	adds	r1, r7, #4
 8009e84:	2200      	movs	r2, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe f8ec 	bl	8008064 <xQueueReceive>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f47f af2a 	bne.w	8009ce8 <prvProcessReceivedCommands+0x8>
	}
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	3730      	adds	r7, #48	; 0x30
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20001148 	.word	0x20001148

08009ea4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009eaa:	e048      	b.n	8009f3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eac:	4b2d      	ldr	r3, [pc, #180]	; (8009f64 <prvSwitchTimerLists+0xc0>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eb6:	4b2b      	ldr	r3, [pc, #172]	; (8009f64 <prvSwitchTimerLists+0xc0>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fd fc1f 	bl	8007708 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d02e      	beq.n	8009f3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d90e      	bls.n	8009f10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009efe:	4b19      	ldr	r3, [pc, #100]	; (8009f64 <prvSwitchTimerLists+0xc0>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3304      	adds	r3, #4
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f7fd fbc4 	bl	8007696 <vListInsert>
 8009f0e:	e016      	b.n	8009f3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f10:	2300      	movs	r3, #0
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	2100      	movs	r1, #0
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff fd60 	bl	80099e0 <xTimerGenericCommand>
 8009f20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	603b      	str	r3, [r7, #0]
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <prvSwitchTimerLists+0xc0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1b1      	bne.n	8009eac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <prvSwitchTimerLists+0xc0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f4e:	4b06      	ldr	r3, [pc, #24]	; (8009f68 <prvSwitchTimerLists+0xc4>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <prvSwitchTimerLists+0xc0>)
 8009f54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f56:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <prvSwitchTimerLists+0xc4>)
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	6013      	str	r3, [r2, #0]
}
 8009f5c:	bf00      	nop
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20001140 	.word	0x20001140
 8009f68:	20001144 	.word	0x20001144

08009f6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f72:	f000 f967 	bl	800a244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f76:	4b15      	ldr	r3, [pc, #84]	; (8009fcc <prvCheckForValidListAndQueue+0x60>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d120      	bne.n	8009fc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f7e:	4814      	ldr	r0, [pc, #80]	; (8009fd0 <prvCheckForValidListAndQueue+0x64>)
 8009f80:	f7fd fb38 	bl	80075f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f84:	4813      	ldr	r0, [pc, #76]	; (8009fd4 <prvCheckForValidListAndQueue+0x68>)
 8009f86:	f7fd fb35 	bl	80075f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f8a:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <prvCheckForValidListAndQueue+0x6c>)
 8009f8c:	4a10      	ldr	r2, [pc, #64]	; (8009fd0 <prvCheckForValidListAndQueue+0x64>)
 8009f8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f90:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <prvCheckForValidListAndQueue+0x70>)
 8009f92:	4a10      	ldr	r2, [pc, #64]	; (8009fd4 <prvCheckForValidListAndQueue+0x68>)
 8009f94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f96:	2300      	movs	r3, #0
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <prvCheckForValidListAndQueue+0x74>)
 8009f9c:	4a11      	ldr	r2, [pc, #68]	; (8009fe4 <prvCheckForValidListAndQueue+0x78>)
 8009f9e:	2110      	movs	r1, #16
 8009fa0:	200a      	movs	r0, #10
 8009fa2:	f7fd fc43 	bl	800782c <xQueueGenericCreateStatic>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	4a08      	ldr	r2, [pc, #32]	; (8009fcc <prvCheckForValidListAndQueue+0x60>)
 8009faa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fac:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <prvCheckForValidListAndQueue+0x60>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fb4:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <prvCheckForValidListAndQueue+0x60>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	490b      	ldr	r1, [pc, #44]	; (8009fe8 <prvCheckForValidListAndQueue+0x7c>)
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fc0a 	bl	80087d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fc0:	f000 f970 	bl	800a2a4 <vPortExitCritical>
}
 8009fc4:	bf00      	nop
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20001148 	.word	0x20001148
 8009fd0:	20001118 	.word	0x20001118
 8009fd4:	2000112c 	.word	0x2000112c
 8009fd8:	20001140 	.word	0x20001140
 8009fdc:	20001144 	.word	0x20001144
 8009fe0:	200011f4 	.word	0x200011f4
 8009fe4:	20001154 	.word	0x20001154
 8009fe8:	0800cf8c 	.word	0x0800cf8c

08009fec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3b04      	subs	r3, #4
 8009ffc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3b04      	subs	r3, #4
 800a00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f023 0201 	bic.w	r2, r3, #1
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3b04      	subs	r3, #4
 800a01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a01c:	4a0c      	ldr	r2, [pc, #48]	; (800a050 <pxPortInitialiseStack+0x64>)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3b14      	subs	r3, #20
 800a026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3b04      	subs	r3, #4
 800a032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f06f 0202 	mvn.w	r2, #2
 800a03a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3b20      	subs	r3, #32
 800a040:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a042:	68fb      	ldr	r3, [r7, #12]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	0800a055 	.word	0x0800a055

0800a054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a05e:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <prvTaskExitError+0x54>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a066:	d00a      	beq.n	800a07e <prvTaskExitError+0x2a>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	60fb      	str	r3, [r7, #12]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <prvTaskExitError+0x28>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60bb      	str	r3, [r7, #8]
}
 800a090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a092:	bf00      	nop
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0fc      	beq.n	800a094 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	2000000c 	.word	0x2000000c
 800a0ac:	00000000 	.word	0x00000000

0800a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <pxCurrentTCBConst2>)
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f380 8809 	msr	PSP, r0
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8811 	msr	BASEPRI, r0
 800a0ca:	4770      	bx	lr
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst2>:
 800a0d0:	20000c18 	.word	0x20000c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0d8:	4808      	ldr	r0, [pc, #32]	; (800a0fc <prvPortStartFirstTask+0x24>)
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	f380 8808 	msr	MSP, r0
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8814 	msr	CONTROL, r0
 800a0ea:	b662      	cpsie	i
 800a0ec:	b661      	cpsie	f
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	df00      	svc	0
 800a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed08 	.word	0xe000ed08

0800a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a106:	4b46      	ldr	r3, [pc, #280]	; (800a220 <xPortStartScheduler+0x120>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a46      	ldr	r2, [pc, #280]	; (800a224 <xPortStartScheduler+0x124>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10a      	bne.n	800a126 <xPortStartScheduler+0x26>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	613b      	str	r3, [r7, #16]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a126:	4b3e      	ldr	r3, [pc, #248]	; (800a220 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a3f      	ldr	r2, [pc, #252]	; (800a228 <xPortStartScheduler+0x128>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x46>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a146:	4b39      	ldr	r3, [pc, #228]	; (800a22c <xPortStartScheduler+0x12c>)
 800a148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	22ff      	movs	r2, #255	; 0xff
 800a156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	4b31      	ldr	r3, [pc, #196]	; (800a230 <xPortStartScheduler+0x130>)
 800a16c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a16e:	4b31      	ldr	r3, [pc, #196]	; (800a234 <xPortStartScheduler+0x134>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a174:	e009      	b.n	800a18a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a176:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <xPortStartScheduler+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	4a2d      	ldr	r2, [pc, #180]	; (800a234 <xPortStartScheduler+0x134>)
 800a17e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a192:	2b80      	cmp	r3, #128	; 0x80
 800a194:	d0ef      	beq.n	800a176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a196:	4b27      	ldr	r3, [pc, #156]	; (800a234 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1c3 0307 	rsb	r3, r3, #7
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d00a      	beq.n	800a1b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60bb      	str	r3, [r7, #8]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <xPortStartScheduler+0x134>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <xPortStartScheduler+0x134>)
 800a1cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1d6:	4b18      	ldr	r3, [pc, #96]	; (800a238 <xPortStartScheduler+0x138>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a17      	ldr	r2, [pc, #92]	; (800a238 <xPortStartScheduler+0x138>)
 800a1dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a14      	ldr	r2, [pc, #80]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1ee:	f000 f8dd 	bl	800a3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1f2:	4b12      	ldr	r3, [pc, #72]	; (800a23c <xPortStartScheduler+0x13c>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1f8:	f000 f8fc 	bl	800a3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1fc:	4b10      	ldr	r3, [pc, #64]	; (800a240 <xPortStartScheduler+0x140>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0f      	ldr	r2, [pc, #60]	; (800a240 <xPortStartScheduler+0x140>)
 800a202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a208:	f7ff ff66 	bl	800a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a20c:	f7fe ff3c 	bl	8009088 <vTaskSwitchContext>
	prvTaskExitError();
 800a210:	f7ff ff20 	bl	800a054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	e000ed00 	.word	0xe000ed00
 800a224:	410fc271 	.word	0x410fc271
 800a228:	410fc270 	.word	0x410fc270
 800a22c:	e000e400 	.word	0xe000e400
 800a230:	20001244 	.word	0x20001244
 800a234:	20001248 	.word	0x20001248
 800a238:	e000ed20 	.word	0xe000ed20
 800a23c:	2000000c 	.word	0x2000000c
 800a240:	e000ef34 	.word	0xe000ef34

0800a244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	607b      	str	r3, [r7, #4]
}
 800a25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <vPortEnterCritical+0x58>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <vPortEnterCritical+0x58>)
 800a266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a268:	4b0c      	ldr	r3, [pc, #48]	; (800a29c <vPortEnterCritical+0x58>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d10f      	bne.n	800a290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a270:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <vPortEnterCritical+0x5c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <vPortEnterCritical+0x4c>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	603b      	str	r3, [r7, #0]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <vPortEnterCritical+0x4a>
	}
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	2000000c 	.word	0x2000000c
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <vPortExitCritical+0x24>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	607b      	str	r3, [r7, #4]
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4a09      	ldr	r2, [pc, #36]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2d2:	4b08      	ldr	r3, [pc, #32]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <vPortExitCritical+0x42>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	f383 8811 	msr	BASEPRI, r3
}
 800a2e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	2000000c 	.word	0x2000000c
	...

0800a300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a300:	f3ef 8009 	mrs	r0, PSP
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	4b15      	ldr	r3, [pc, #84]	; (800a360 <pxCurrentTCBConst>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	f01e 0f10 	tst.w	lr, #16
 800a310:	bf08      	it	eq
 800a312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31a:	6010      	str	r0, [r2, #0]
 800a31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a320:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a324:	f380 8811 	msr	BASEPRI, r0
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f7fe feaa 	bl	8009088 <vTaskSwitchContext>
 800a334:	f04f 0000 	mov.w	r0, #0
 800a338:	f380 8811 	msr	BASEPRI, r0
 800a33c:	bc09      	pop	{r0, r3}
 800a33e:	6819      	ldr	r1, [r3, #0]
 800a340:	6808      	ldr	r0, [r1, #0]
 800a342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a346:	f01e 0f10 	tst.w	lr, #16
 800a34a:	bf08      	it	eq
 800a34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a350:	f380 8809 	msr	PSP, r0
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	f3af 8000 	nop.w

0800a360 <pxCurrentTCBConst>:
 800a360:	20000c18 	.word	0x20000c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop

0800a368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
}
 800a380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a382:	f7fe fdc7 	bl	8008f14 <xTaskIncrementTick>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <xPortSysTickHandler+0x40>)
 800a38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	2300      	movs	r3, #0
 800a396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f383 8811 	msr	BASEPRI, r3
}
 800a39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3b6:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <vPortSetupTimerInterrupt+0x38>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <vPortSetupTimerInterrupt+0x3c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <vPortSetupTimerInterrupt+0x40>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <vPortSetupTimerInterrupt+0x44>)
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	e000e010 	.word	0xe000e010
 800a3e4:	e000e018 	.word	0xe000e018
 800a3e8:	20000000 	.word	0x20000000
 800a3ec:	10624dd3 	.word	0x10624dd3
 800a3f0:	e000e014 	.word	0xe000e014

0800a3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a404 <vPortEnableVFP+0x10>
 800a3f8:	6801      	ldr	r1, [r0, #0]
 800a3fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3fe:	6001      	str	r1, [r0, #0]
 800a400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a402:	bf00      	nop
 800a404:	e000ed88 	.word	0xe000ed88

0800a408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a40e:	f3ef 8305 	mrs	r3, IPSR
 800a412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b0f      	cmp	r3, #15
 800a418:	d914      	bls.n	800a444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <vPortValidateInterruptPriority+0x70>)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <vPortValidateInterruptPriority+0x74>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	7afa      	ldrb	r2, [r7, #11]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d20a      	bcs.n	800a444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	607b      	str	r3, [r7, #4]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <vPortValidateInterruptPriority+0x78>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <vPortValidateInterruptPriority+0x7c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d90a      	bls.n	800a46a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	603b      	str	r3, [r7, #0]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <vPortValidateInterruptPriority+0x60>
	}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	e000e3f0 	.word	0xe000e3f0
 800a47c:	20001244 	.word	0x20001244
 800a480:	e000ed0c 	.word	0xe000ed0c
 800a484:	20001248 	.word	0x20001248

0800a488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a490:	2300      	movs	r3, #0
 800a492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a494:	f7fe fc82 	bl	8008d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a498:	4b5b      	ldr	r3, [pc, #364]	; (800a608 <pvPortMalloc+0x180>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4a0:	f000 f920 	bl	800a6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4a4:	4b59      	ldr	r3, [pc, #356]	; (800a60c <pvPortMalloc+0x184>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f040 8093 	bne.w	800a5d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d01d      	beq.n	800a4f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4b8:	2208      	movs	r2, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d014      	beq.n	800a4f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f023 0307 	bic.w	r3, r3, #7
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	617b      	str	r3, [r7, #20]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d06e      	beq.n	800a5d8 <pvPortMalloc+0x150>
 800a4fa:	4b45      	ldr	r3, [pc, #276]	; (800a610 <pvPortMalloc+0x188>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d869      	bhi.n	800a5d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a504:	4b43      	ldr	r3, [pc, #268]	; (800a614 <pvPortMalloc+0x18c>)
 800a506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a508:	4b42      	ldr	r3, [pc, #264]	; (800a614 <pvPortMalloc+0x18c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a50e:	e004      	b.n	800a51a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d903      	bls.n	800a52c <pvPortMalloc+0xa4>
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f1      	bne.n	800a510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a52c:	4b36      	ldr	r3, [pc, #216]	; (800a608 <pvPortMalloc+0x180>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a532:	429a      	cmp	r2, r3
 800a534:	d050      	beq.n	800a5d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2208      	movs	r2, #8
 800a53c:	4413      	add	r3, r2
 800a53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	2308      	movs	r3, #8
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	429a      	cmp	r2, r3
 800a556:	d91f      	bls.n	800a598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4413      	add	r3, r2
 800a55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <pvPortMalloc+0xf8>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	613b      	str	r3, [r7, #16]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a592:	69b8      	ldr	r0, [r7, #24]
 800a594:	f000 f908 	bl	800a7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a598:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <pvPortMalloc+0x188>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	4a1b      	ldr	r2, [pc, #108]	; (800a610 <pvPortMalloc+0x188>)
 800a5a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5a6:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <pvPortMalloc+0x188>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <pvPortMalloc+0x190>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d203      	bcs.n	800a5ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5b2:	4b17      	ldr	r3, [pc, #92]	; (800a610 <pvPortMalloc+0x188>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a18      	ldr	r2, [pc, #96]	; (800a618 <pvPortMalloc+0x190>)
 800a5b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	4b13      	ldr	r3, [pc, #76]	; (800a60c <pvPortMalloc+0x184>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ce:	4b13      	ldr	r3, [pc, #76]	; (800a61c <pvPortMalloc+0x194>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	4a11      	ldr	r2, [pc, #68]	; (800a61c <pvPortMalloc+0x194>)
 800a5d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5d8:	f7fe fbee 	bl	8008db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <pvPortMalloc+0x174>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	60fb      	str	r3, [r7, #12]
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <pvPortMalloc+0x172>
	return pvReturn;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3728      	adds	r7, #40	; 0x28
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20004e54 	.word	0x20004e54
 800a60c:	20004e68 	.word	0x20004e68
 800a610:	20004e58 	.word	0x20004e58
 800a614:	20004e4c 	.word	0x20004e4c
 800a618:	20004e5c 	.word	0x20004e5c
 800a61c:	20004e60 	.word	0x20004e60

0800a620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d04d      	beq.n	800a6ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a632:	2308      	movs	r3, #8
 800a634:	425b      	negs	r3, r3
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	4b24      	ldr	r3, [pc, #144]	; (800a6d8 <vPortFree+0xb8>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4013      	ands	r3, r2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <vPortFree+0x44>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	60fb      	str	r3, [r7, #12]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <vPortFree+0x62>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	60bb      	str	r3, [r7, #8]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <vPortFree+0xb8>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4013      	ands	r3, r2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d01e      	beq.n	800a6ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d11a      	bne.n	800a6ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <vPortFree+0xb8>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	43db      	mvns	r3, r3
 800a6a2:	401a      	ands	r2, r3
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6a8:	f7fe fb78 	bl	8008d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <vPortFree+0xbc>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	4a09      	ldr	r2, [pc, #36]	; (800a6dc <vPortFree+0xbc>)
 800a6b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6ba:	6938      	ldr	r0, [r7, #16]
 800a6bc:	f000 f874 	bl	800a7a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <vPortFree+0xc0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	4a06      	ldr	r2, [pc, #24]	; (800a6e0 <vPortFree+0xc0>)
 800a6c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6ca:	f7fe fb75 	bl	8008db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ce:	bf00      	nop
 800a6d0:	3718      	adds	r7, #24
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20004e68 	.word	0x20004e68
 800a6dc:	20004e58 	.word	0x20004e58
 800a6e0:	20004e64 	.word	0x20004e64

0800a6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6f0:	4b27      	ldr	r3, [pc, #156]	; (800a790 <prvHeapInit+0xac>)
 800a6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00c      	beq.n	800a718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3307      	adds	r3, #7
 800a702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	4a1f      	ldr	r2, [pc, #124]	; (800a790 <prvHeapInit+0xac>)
 800a714:	4413      	add	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a71c:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <prvHeapInit+0xb0>)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <prvHeapInit+0xb0>)
 800a724:	2200      	movs	r2, #0
 800a726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	4413      	add	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a730:	2208      	movs	r2, #8
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	1a9b      	subs	r3, r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0307 	bic.w	r3, r3, #7
 800a73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <prvHeapInit+0xb4>)
 800a744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a746:	4b14      	ldr	r3, [pc, #80]	; (800a798 <prvHeapInit+0xb4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2200      	movs	r2, #0
 800a74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a74e:	4b12      	ldr	r3, [pc, #72]	; (800a798 <prvHeapInit+0xb4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvHeapInit+0xb4>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <prvHeapInit+0xb8>)
 800a772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <prvHeapInit+0xbc>)
 800a77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a77c:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <prvHeapInit+0xc0>)
 800a77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	2000124c 	.word	0x2000124c
 800a794:	20004e4c 	.word	0x20004e4c
 800a798:	20004e54 	.word	0x20004e54
 800a79c:	20004e5c 	.word	0x20004e5c
 800a7a0:	20004e58 	.word	0x20004e58
 800a7a4:	20004e68 	.word	0x20004e68

0800a7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7b0:	4b28      	ldr	r3, [pc, #160]	; (800a854 <prvInsertBlockIntoFreeList+0xac>)
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e002      	b.n	800a7bc <prvInsertBlockIntoFreeList+0x14>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d8f7      	bhi.n	800a7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d108      	bne.n	800a7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d118      	bne.n	800a830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d00d      	beq.n	800a826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	441a      	add	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e008      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e003      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d002      	beq.n	800a846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a846:	bf00      	nop
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20004e4c 	.word	0x20004e4c
 800a858:	20004e54 	.word	0x20004e54

0800a85c <__errno>:
 800a85c:	4b01      	ldr	r3, [pc, #4]	; (800a864 <__errno+0x8>)
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	20000010 	.word	0x20000010

0800a868 <std>:
 800a868:	2300      	movs	r3, #0
 800a86a:	b510      	push	{r4, lr}
 800a86c:	4604      	mov	r4, r0
 800a86e:	e9c0 3300 	strd	r3, r3, [r0]
 800a872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a876:	6083      	str	r3, [r0, #8]
 800a878:	8181      	strh	r1, [r0, #12]
 800a87a:	6643      	str	r3, [r0, #100]	; 0x64
 800a87c:	81c2      	strh	r2, [r0, #14]
 800a87e:	6183      	str	r3, [r0, #24]
 800a880:	4619      	mov	r1, r3
 800a882:	2208      	movs	r2, #8
 800a884:	305c      	adds	r0, #92	; 0x5c
 800a886:	f000 f91a 	bl	800aabe <memset>
 800a88a:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <std+0x38>)
 800a88c:	6263      	str	r3, [r4, #36]	; 0x24
 800a88e:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <std+0x3c>)
 800a890:	62a3      	str	r3, [r4, #40]	; 0x28
 800a892:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <std+0x40>)
 800a894:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a896:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <std+0x44>)
 800a898:	6224      	str	r4, [r4, #32]
 800a89a:	6323      	str	r3, [r4, #48]	; 0x30
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	bf00      	nop
 800a8a0:	0800ae11 	.word	0x0800ae11
 800a8a4:	0800ae33 	.word	0x0800ae33
 800a8a8:	0800ae6b 	.word	0x0800ae6b
 800a8ac:	0800ae8f 	.word	0x0800ae8f

0800a8b0 <_cleanup_r>:
 800a8b0:	4901      	ldr	r1, [pc, #4]	; (800a8b8 <_cleanup_r+0x8>)
 800a8b2:	f000 b8af 	b.w	800aa14 <_fwalk_reent>
 800a8b6:	bf00      	nop
 800a8b8:	0800b025 	.word	0x0800b025

0800a8bc <__sfmoreglue>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	2268      	movs	r2, #104	; 0x68
 800a8c0:	1e4d      	subs	r5, r1, #1
 800a8c2:	4355      	muls	r5, r2
 800a8c4:	460e      	mov	r6, r1
 800a8c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8ca:	f000 f921 	bl	800ab10 <_malloc_r>
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	b140      	cbz	r0, 800a8e4 <__sfmoreglue+0x28>
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	e9c0 1600 	strd	r1, r6, [r0]
 800a8d8:	300c      	adds	r0, #12
 800a8da:	60a0      	str	r0, [r4, #8]
 800a8dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8e0:	f000 f8ed 	bl	800aabe <memset>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}

0800a8e8 <__sfp_lock_acquire>:
 800a8e8:	4801      	ldr	r0, [pc, #4]	; (800a8f0 <__sfp_lock_acquire+0x8>)
 800a8ea:	f000 b8d8 	b.w	800aa9e <__retarget_lock_acquire_recursive>
 800a8ee:	bf00      	nop
 800a8f0:	20004e6d 	.word	0x20004e6d

0800a8f4 <__sfp_lock_release>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	; (800a8fc <__sfp_lock_release+0x8>)
 800a8f6:	f000 b8d3 	b.w	800aaa0 <__retarget_lock_release_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	20004e6d 	.word	0x20004e6d

0800a900 <__sinit_lock_acquire>:
 800a900:	4801      	ldr	r0, [pc, #4]	; (800a908 <__sinit_lock_acquire+0x8>)
 800a902:	f000 b8cc 	b.w	800aa9e <__retarget_lock_acquire_recursive>
 800a906:	bf00      	nop
 800a908:	20004e6e 	.word	0x20004e6e

0800a90c <__sinit_lock_release>:
 800a90c:	4801      	ldr	r0, [pc, #4]	; (800a914 <__sinit_lock_release+0x8>)
 800a90e:	f000 b8c7 	b.w	800aaa0 <__retarget_lock_release_recursive>
 800a912:	bf00      	nop
 800a914:	20004e6e 	.word	0x20004e6e

0800a918 <__sinit>:
 800a918:	b510      	push	{r4, lr}
 800a91a:	4604      	mov	r4, r0
 800a91c:	f7ff fff0 	bl	800a900 <__sinit_lock_acquire>
 800a920:	69a3      	ldr	r3, [r4, #24]
 800a922:	b11b      	cbz	r3, 800a92c <__sinit+0x14>
 800a924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a928:	f7ff bff0 	b.w	800a90c <__sinit_lock_release>
 800a92c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a930:	6523      	str	r3, [r4, #80]	; 0x50
 800a932:	4b13      	ldr	r3, [pc, #76]	; (800a980 <__sinit+0x68>)
 800a934:	4a13      	ldr	r2, [pc, #76]	; (800a984 <__sinit+0x6c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	62a2      	str	r2, [r4, #40]	; 0x28
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	bf04      	itt	eq
 800a93e:	2301      	moveq	r3, #1
 800a940:	61a3      	streq	r3, [r4, #24]
 800a942:	4620      	mov	r0, r4
 800a944:	f000 f820 	bl	800a988 <__sfp>
 800a948:	6060      	str	r0, [r4, #4]
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 f81c 	bl	800a988 <__sfp>
 800a950:	60a0      	str	r0, [r4, #8]
 800a952:	4620      	mov	r0, r4
 800a954:	f000 f818 	bl	800a988 <__sfp>
 800a958:	2200      	movs	r2, #0
 800a95a:	60e0      	str	r0, [r4, #12]
 800a95c:	2104      	movs	r1, #4
 800a95e:	6860      	ldr	r0, [r4, #4]
 800a960:	f7ff ff82 	bl	800a868 <std>
 800a964:	68a0      	ldr	r0, [r4, #8]
 800a966:	2201      	movs	r2, #1
 800a968:	2109      	movs	r1, #9
 800a96a:	f7ff ff7d 	bl	800a868 <std>
 800a96e:	68e0      	ldr	r0, [r4, #12]
 800a970:	2202      	movs	r2, #2
 800a972:	2112      	movs	r1, #18
 800a974:	f7ff ff78 	bl	800a868 <std>
 800a978:	2301      	movs	r3, #1
 800a97a:	61a3      	str	r3, [r4, #24]
 800a97c:	e7d2      	b.n	800a924 <__sinit+0xc>
 800a97e:	bf00      	nop
 800a980:	0800d170 	.word	0x0800d170
 800a984:	0800a8b1 	.word	0x0800a8b1

0800a988 <__sfp>:
 800a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98a:	4607      	mov	r7, r0
 800a98c:	f7ff ffac 	bl	800a8e8 <__sfp_lock_acquire>
 800a990:	4b1e      	ldr	r3, [pc, #120]	; (800aa0c <__sfp+0x84>)
 800a992:	681e      	ldr	r6, [r3, #0]
 800a994:	69b3      	ldr	r3, [r6, #24]
 800a996:	b913      	cbnz	r3, 800a99e <__sfp+0x16>
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff ffbd 	bl	800a918 <__sinit>
 800a99e:	3648      	adds	r6, #72	; 0x48
 800a9a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	d503      	bpl.n	800a9b0 <__sfp+0x28>
 800a9a8:	6833      	ldr	r3, [r6, #0]
 800a9aa:	b30b      	cbz	r3, 800a9f0 <__sfp+0x68>
 800a9ac:	6836      	ldr	r6, [r6, #0]
 800a9ae:	e7f7      	b.n	800a9a0 <__sfp+0x18>
 800a9b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9b4:	b9d5      	cbnz	r5, 800a9ec <__sfp+0x64>
 800a9b6:	4b16      	ldr	r3, [pc, #88]	; (800aa10 <__sfp+0x88>)
 800a9b8:	60e3      	str	r3, [r4, #12]
 800a9ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9be:	6665      	str	r5, [r4, #100]	; 0x64
 800a9c0:	f000 f86c 	bl	800aa9c <__retarget_lock_init_recursive>
 800a9c4:	f7ff ff96 	bl	800a8f4 <__sfp_lock_release>
 800a9c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9d0:	6025      	str	r5, [r4, #0]
 800a9d2:	61a5      	str	r5, [r4, #24]
 800a9d4:	2208      	movs	r2, #8
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9dc:	f000 f86f 	bl	800aabe <memset>
 800a9e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ec:	3468      	adds	r4, #104	; 0x68
 800a9ee:	e7d9      	b.n	800a9a4 <__sfp+0x1c>
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	f7ff ff62 	bl	800a8bc <__sfmoreglue>
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	6030      	str	r0, [r6, #0]
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d1d5      	bne.n	800a9ac <__sfp+0x24>
 800aa00:	f7ff ff78 	bl	800a8f4 <__sfp_lock_release>
 800aa04:	230c      	movs	r3, #12
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	e7ee      	b.n	800a9e8 <__sfp+0x60>
 800aa0a:	bf00      	nop
 800aa0c:	0800d170 	.word	0x0800d170
 800aa10:	ffff0001 	.word	0xffff0001

0800aa14 <_fwalk_reent>:
 800aa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	4606      	mov	r6, r0
 800aa1a:	4688      	mov	r8, r1
 800aa1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa20:	2700      	movs	r7, #0
 800aa22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa26:	f1b9 0901 	subs.w	r9, r9, #1
 800aa2a:	d505      	bpl.n	800aa38 <_fwalk_reent+0x24>
 800aa2c:	6824      	ldr	r4, [r4, #0]
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d1f7      	bne.n	800aa22 <_fwalk_reent+0xe>
 800aa32:	4638      	mov	r0, r7
 800aa34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa38:	89ab      	ldrh	r3, [r5, #12]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d907      	bls.n	800aa4e <_fwalk_reent+0x3a>
 800aa3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa42:	3301      	adds	r3, #1
 800aa44:	d003      	beq.n	800aa4e <_fwalk_reent+0x3a>
 800aa46:	4629      	mov	r1, r5
 800aa48:	4630      	mov	r0, r6
 800aa4a:	47c0      	blx	r8
 800aa4c:	4307      	orrs	r7, r0
 800aa4e:	3568      	adds	r5, #104	; 0x68
 800aa50:	e7e9      	b.n	800aa26 <_fwalk_reent+0x12>
	...

0800aa54 <__libc_init_array>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	4d0d      	ldr	r5, [pc, #52]	; (800aa8c <__libc_init_array+0x38>)
 800aa58:	4c0d      	ldr	r4, [pc, #52]	; (800aa90 <__libc_init_array+0x3c>)
 800aa5a:	1b64      	subs	r4, r4, r5
 800aa5c:	10a4      	asrs	r4, r4, #2
 800aa5e:	2600      	movs	r6, #0
 800aa60:	42a6      	cmp	r6, r4
 800aa62:	d109      	bne.n	800aa78 <__libc_init_array+0x24>
 800aa64:	4d0b      	ldr	r5, [pc, #44]	; (800aa94 <__libc_init_array+0x40>)
 800aa66:	4c0c      	ldr	r4, [pc, #48]	; (800aa98 <__libc_init_array+0x44>)
 800aa68:	f002 fa28 	bl	800cebc <_init>
 800aa6c:	1b64      	subs	r4, r4, r5
 800aa6e:	10a4      	asrs	r4, r4, #2
 800aa70:	2600      	movs	r6, #0
 800aa72:	42a6      	cmp	r6, r4
 800aa74:	d105      	bne.n	800aa82 <__libc_init_array+0x2e>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa7c:	4798      	blx	r3
 800aa7e:	3601      	adds	r6, #1
 800aa80:	e7ee      	b.n	800aa60 <__libc_init_array+0xc>
 800aa82:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa86:	4798      	blx	r3
 800aa88:	3601      	adds	r6, #1
 800aa8a:	e7f2      	b.n	800aa72 <__libc_init_array+0x1e>
 800aa8c:	0800d438 	.word	0x0800d438
 800aa90:	0800d438 	.word	0x0800d438
 800aa94:	0800d438 	.word	0x0800d438
 800aa98:	0800d43c 	.word	0x0800d43c

0800aa9c <__retarget_lock_init_recursive>:
 800aa9c:	4770      	bx	lr

0800aa9e <__retarget_lock_acquire_recursive>:
 800aa9e:	4770      	bx	lr

0800aaa0 <__retarget_lock_release_recursive>:
 800aaa0:	4770      	bx	lr

0800aaa2 <memcpy>:
 800aaa2:	440a      	add	r2, r1
 800aaa4:	4291      	cmp	r1, r2
 800aaa6:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaaa:	d100      	bne.n	800aaae <memcpy+0xc>
 800aaac:	4770      	bx	lr
 800aaae:	b510      	push	{r4, lr}
 800aab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aab8:	4291      	cmp	r1, r2
 800aaba:	d1f9      	bne.n	800aab0 <memcpy+0xe>
 800aabc:	bd10      	pop	{r4, pc}

0800aabe <memset>:
 800aabe:	4402      	add	r2, r0
 800aac0:	4603      	mov	r3, r0
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d100      	bne.n	800aac8 <memset+0xa>
 800aac6:	4770      	bx	lr
 800aac8:	f803 1b01 	strb.w	r1, [r3], #1
 800aacc:	e7f9      	b.n	800aac2 <memset+0x4>
	...

0800aad0 <sbrk_aligned>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	4e0e      	ldr	r6, [pc, #56]	; (800ab0c <sbrk_aligned+0x3c>)
 800aad4:	460c      	mov	r4, r1
 800aad6:	6831      	ldr	r1, [r6, #0]
 800aad8:	4605      	mov	r5, r0
 800aada:	b911      	cbnz	r1, 800aae2 <sbrk_aligned+0x12>
 800aadc:	f000 f934 	bl	800ad48 <_sbrk_r>
 800aae0:	6030      	str	r0, [r6, #0]
 800aae2:	4621      	mov	r1, r4
 800aae4:	4628      	mov	r0, r5
 800aae6:	f000 f92f 	bl	800ad48 <_sbrk_r>
 800aaea:	1c43      	adds	r3, r0, #1
 800aaec:	d00a      	beq.n	800ab04 <sbrk_aligned+0x34>
 800aaee:	1cc4      	adds	r4, r0, #3
 800aaf0:	f024 0403 	bic.w	r4, r4, #3
 800aaf4:	42a0      	cmp	r0, r4
 800aaf6:	d007      	beq.n	800ab08 <sbrk_aligned+0x38>
 800aaf8:	1a21      	subs	r1, r4, r0
 800aafa:	4628      	mov	r0, r5
 800aafc:	f000 f924 	bl	800ad48 <_sbrk_r>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d101      	bne.n	800ab08 <sbrk_aligned+0x38>
 800ab04:	f04f 34ff 	mov.w	r4, #4294967295
 800ab08:	4620      	mov	r0, r4
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	20004e74 	.word	0x20004e74

0800ab10 <_malloc_r>:
 800ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab14:	1ccd      	adds	r5, r1, #3
 800ab16:	f025 0503 	bic.w	r5, r5, #3
 800ab1a:	3508      	adds	r5, #8
 800ab1c:	2d0c      	cmp	r5, #12
 800ab1e:	bf38      	it	cc
 800ab20:	250c      	movcc	r5, #12
 800ab22:	2d00      	cmp	r5, #0
 800ab24:	4607      	mov	r7, r0
 800ab26:	db01      	blt.n	800ab2c <_malloc_r+0x1c>
 800ab28:	42a9      	cmp	r1, r5
 800ab2a:	d905      	bls.n	800ab38 <_malloc_r+0x28>
 800ab2c:	230c      	movs	r3, #12
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	2600      	movs	r6, #0
 800ab32:	4630      	mov	r0, r6
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	4e2e      	ldr	r6, [pc, #184]	; (800abf4 <_malloc_r+0xe4>)
 800ab3a:	f000 fadb 	bl	800b0f4 <__malloc_lock>
 800ab3e:	6833      	ldr	r3, [r6, #0]
 800ab40:	461c      	mov	r4, r3
 800ab42:	bb34      	cbnz	r4, 800ab92 <_malloc_r+0x82>
 800ab44:	4629      	mov	r1, r5
 800ab46:	4638      	mov	r0, r7
 800ab48:	f7ff ffc2 	bl	800aad0 <sbrk_aligned>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	4604      	mov	r4, r0
 800ab50:	d14d      	bne.n	800abee <_malloc_r+0xde>
 800ab52:	6834      	ldr	r4, [r6, #0]
 800ab54:	4626      	mov	r6, r4
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	d140      	bne.n	800abdc <_malloc_r+0xcc>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4638      	mov	r0, r7
 800ab60:	eb04 0803 	add.w	r8, r4, r3
 800ab64:	f000 f8f0 	bl	800ad48 <_sbrk_r>
 800ab68:	4580      	cmp	r8, r0
 800ab6a:	d13a      	bne.n	800abe2 <_malloc_r+0xd2>
 800ab6c:	6821      	ldr	r1, [r4, #0]
 800ab6e:	3503      	adds	r5, #3
 800ab70:	1a6d      	subs	r5, r5, r1
 800ab72:	f025 0503 	bic.w	r5, r5, #3
 800ab76:	3508      	adds	r5, #8
 800ab78:	2d0c      	cmp	r5, #12
 800ab7a:	bf38      	it	cc
 800ab7c:	250c      	movcc	r5, #12
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7ff ffa5 	bl	800aad0 <sbrk_aligned>
 800ab86:	3001      	adds	r0, #1
 800ab88:	d02b      	beq.n	800abe2 <_malloc_r+0xd2>
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	442b      	add	r3, r5
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	e00e      	b.n	800abb0 <_malloc_r+0xa0>
 800ab92:	6822      	ldr	r2, [r4, #0]
 800ab94:	1b52      	subs	r2, r2, r5
 800ab96:	d41e      	bmi.n	800abd6 <_malloc_r+0xc6>
 800ab98:	2a0b      	cmp	r2, #11
 800ab9a:	d916      	bls.n	800abca <_malloc_r+0xba>
 800ab9c:	1961      	adds	r1, r4, r5
 800ab9e:	42a3      	cmp	r3, r4
 800aba0:	6025      	str	r5, [r4, #0]
 800aba2:	bf18      	it	ne
 800aba4:	6059      	strne	r1, [r3, #4]
 800aba6:	6863      	ldr	r3, [r4, #4]
 800aba8:	bf08      	it	eq
 800abaa:	6031      	streq	r1, [r6, #0]
 800abac:	5162      	str	r2, [r4, r5]
 800abae:	604b      	str	r3, [r1, #4]
 800abb0:	4638      	mov	r0, r7
 800abb2:	f104 060b 	add.w	r6, r4, #11
 800abb6:	f000 faa3 	bl	800b100 <__malloc_unlock>
 800abba:	f026 0607 	bic.w	r6, r6, #7
 800abbe:	1d23      	adds	r3, r4, #4
 800abc0:	1af2      	subs	r2, r6, r3
 800abc2:	d0b6      	beq.n	800ab32 <_malloc_r+0x22>
 800abc4:	1b9b      	subs	r3, r3, r6
 800abc6:	50a3      	str	r3, [r4, r2]
 800abc8:	e7b3      	b.n	800ab32 <_malloc_r+0x22>
 800abca:	6862      	ldr	r2, [r4, #4]
 800abcc:	42a3      	cmp	r3, r4
 800abce:	bf0c      	ite	eq
 800abd0:	6032      	streq	r2, [r6, #0]
 800abd2:	605a      	strne	r2, [r3, #4]
 800abd4:	e7ec      	b.n	800abb0 <_malloc_r+0xa0>
 800abd6:	4623      	mov	r3, r4
 800abd8:	6864      	ldr	r4, [r4, #4]
 800abda:	e7b2      	b.n	800ab42 <_malloc_r+0x32>
 800abdc:	4634      	mov	r4, r6
 800abde:	6876      	ldr	r6, [r6, #4]
 800abe0:	e7b9      	b.n	800ab56 <_malloc_r+0x46>
 800abe2:	230c      	movs	r3, #12
 800abe4:	603b      	str	r3, [r7, #0]
 800abe6:	4638      	mov	r0, r7
 800abe8:	f000 fa8a 	bl	800b100 <__malloc_unlock>
 800abec:	e7a1      	b.n	800ab32 <_malloc_r+0x22>
 800abee:	6025      	str	r5, [r4, #0]
 800abf0:	e7de      	b.n	800abb0 <_malloc_r+0xa0>
 800abf2:	bf00      	nop
 800abf4:	20004e70 	.word	0x20004e70

0800abf8 <rand>:
 800abf8:	4b16      	ldr	r3, [pc, #88]	; (800ac54 <rand+0x5c>)
 800abfa:	b510      	push	{r4, lr}
 800abfc:	681c      	ldr	r4, [r3, #0]
 800abfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac00:	b9b3      	cbnz	r3, 800ac30 <rand+0x38>
 800ac02:	2018      	movs	r0, #24
 800ac04:	f000 fa6e 	bl	800b0e4 <malloc>
 800ac08:	63a0      	str	r0, [r4, #56]	; 0x38
 800ac0a:	b928      	cbnz	r0, 800ac18 <rand+0x20>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <rand+0x60>)
 800ac10:	4812      	ldr	r0, [pc, #72]	; (800ac5c <rand+0x64>)
 800ac12:	214e      	movs	r1, #78	; 0x4e
 800ac14:	f000 f952 	bl	800aebc <__assert_func>
 800ac18:	4a11      	ldr	r2, [pc, #68]	; (800ac60 <rand+0x68>)
 800ac1a:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <rand+0x6c>)
 800ac1c:	e9c0 2300 	strd	r2, r3, [r0]
 800ac20:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <rand+0x70>)
 800ac22:	6083      	str	r3, [r0, #8]
 800ac24:	230b      	movs	r3, #11
 800ac26:	8183      	strh	r3, [r0, #12]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ac30:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ac32:	4a0e      	ldr	r2, [pc, #56]	; (800ac6c <rand+0x74>)
 800ac34:	6920      	ldr	r0, [r4, #16]
 800ac36:	6963      	ldr	r3, [r4, #20]
 800ac38:	490d      	ldr	r1, [pc, #52]	; (800ac70 <rand+0x78>)
 800ac3a:	4342      	muls	r2, r0
 800ac3c:	fb01 2203 	mla	r2, r1, r3, r2
 800ac40:	fba0 0101 	umull	r0, r1, r0, r1
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	eb42 0001 	adc.w	r0, r2, r1
 800ac4a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ac4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	20000010 	.word	0x20000010
 800ac58:	0800d174 	.word	0x0800d174
 800ac5c:	0800d18b 	.word	0x0800d18b
 800ac60:	abcd330e 	.word	0xabcd330e
 800ac64:	e66d1234 	.word	0xe66d1234
 800ac68:	0005deec 	.word	0x0005deec
 800ac6c:	5851f42d 	.word	0x5851f42d
 800ac70:	4c957f2d 	.word	0x4c957f2d

0800ac74 <cleanup_glue>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	6809      	ldr	r1, [r1, #0]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	b109      	cbz	r1, 800ac82 <cleanup_glue+0xe>
 800ac7e:	f7ff fff9 	bl	800ac74 <cleanup_glue>
 800ac82:	4621      	mov	r1, r4
 800ac84:	4628      	mov	r0, r5
 800ac86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac8a:	f000 ba3f 	b.w	800b10c <_free_r>
	...

0800ac90 <_reclaim_reent>:
 800ac90:	4b2c      	ldr	r3, [pc, #176]	; (800ad44 <_reclaim_reent+0xb4>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4283      	cmp	r3, r0
 800ac96:	b570      	push	{r4, r5, r6, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	d051      	beq.n	800ad40 <_reclaim_reent+0xb0>
 800ac9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ac9e:	b143      	cbz	r3, 800acb2 <_reclaim_reent+0x22>
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d14a      	bne.n	800ad3c <_reclaim_reent+0xac>
 800aca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aca8:	6819      	ldr	r1, [r3, #0]
 800acaa:	b111      	cbz	r1, 800acb2 <_reclaim_reent+0x22>
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fa2d 	bl	800b10c <_free_r>
 800acb2:	6961      	ldr	r1, [r4, #20]
 800acb4:	b111      	cbz	r1, 800acbc <_reclaim_reent+0x2c>
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 fa28 	bl	800b10c <_free_r>
 800acbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acbe:	b111      	cbz	r1, 800acc6 <_reclaim_reent+0x36>
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 fa23 	bl	800b10c <_free_r>
 800acc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800acc8:	b111      	cbz	r1, 800acd0 <_reclaim_reent+0x40>
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fa1e 	bl	800b10c <_free_r>
 800acd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800acd2:	b111      	cbz	r1, 800acda <_reclaim_reent+0x4a>
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 fa19 	bl	800b10c <_free_r>
 800acda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800acdc:	b111      	cbz	r1, 800ace4 <_reclaim_reent+0x54>
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 fa14 	bl	800b10c <_free_r>
 800ace4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ace6:	b111      	cbz	r1, 800acee <_reclaim_reent+0x5e>
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fa0f 	bl	800b10c <_free_r>
 800acee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800acf0:	b111      	cbz	r1, 800acf8 <_reclaim_reent+0x68>
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 fa0a 	bl	800b10c <_free_r>
 800acf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acfa:	b111      	cbz	r1, 800ad02 <_reclaim_reent+0x72>
 800acfc:	4620      	mov	r0, r4
 800acfe:	f000 fa05 	bl	800b10c <_free_r>
 800ad02:	69a3      	ldr	r3, [r4, #24]
 800ad04:	b1e3      	cbz	r3, 800ad40 <_reclaim_reent+0xb0>
 800ad06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad08:	4620      	mov	r0, r4
 800ad0a:	4798      	blx	r3
 800ad0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad0e:	b1b9      	cbz	r1, 800ad40 <_reclaim_reent+0xb0>
 800ad10:	4620      	mov	r0, r4
 800ad12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad16:	f7ff bfad 	b.w	800ac74 <cleanup_glue>
 800ad1a:	5949      	ldr	r1, [r1, r5]
 800ad1c:	b941      	cbnz	r1, 800ad30 <_reclaim_reent+0xa0>
 800ad1e:	3504      	adds	r5, #4
 800ad20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad22:	2d80      	cmp	r5, #128	; 0x80
 800ad24:	68d9      	ldr	r1, [r3, #12]
 800ad26:	d1f8      	bne.n	800ad1a <_reclaim_reent+0x8a>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 f9ef 	bl	800b10c <_free_r>
 800ad2e:	e7ba      	b.n	800aca6 <_reclaim_reent+0x16>
 800ad30:	680e      	ldr	r6, [r1, #0]
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 f9ea 	bl	800b10c <_free_r>
 800ad38:	4631      	mov	r1, r6
 800ad3a:	e7ef      	b.n	800ad1c <_reclaim_reent+0x8c>
 800ad3c:	2500      	movs	r5, #0
 800ad3e:	e7ef      	b.n	800ad20 <_reclaim_reent+0x90>
 800ad40:	bd70      	pop	{r4, r5, r6, pc}
 800ad42:	bf00      	nop
 800ad44:	20000010 	.word	0x20000010

0800ad48 <_sbrk_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d06      	ldr	r5, [pc, #24]	; (800ad64 <_sbrk_r+0x1c>)
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4608      	mov	r0, r1
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	f7f8 f818 	bl	8002d88 <_sbrk>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_sbrk_r+0x1a>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_sbrk_r+0x1a>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	20004e78 	.word	0x20004e78

0800ad68 <sniprintf>:
 800ad68:	b40c      	push	{r2, r3}
 800ad6a:	b530      	push	{r4, r5, lr}
 800ad6c:	4b17      	ldr	r3, [pc, #92]	; (800adcc <sniprintf+0x64>)
 800ad6e:	1e0c      	subs	r4, r1, #0
 800ad70:	681d      	ldr	r5, [r3, #0]
 800ad72:	b09d      	sub	sp, #116	; 0x74
 800ad74:	da08      	bge.n	800ad88 <sniprintf+0x20>
 800ad76:	238b      	movs	r3, #139	; 0x8b
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7e:	b01d      	add	sp, #116	; 0x74
 800ad80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad84:	b002      	add	sp, #8
 800ad86:	4770      	bx	lr
 800ad88:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad90:	bf14      	ite	ne
 800ad92:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad96:	4623      	moveq	r3, r4
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	9307      	str	r3, [sp, #28]
 800ad9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ada0:	9002      	str	r0, [sp, #8]
 800ada2:	9006      	str	r0, [sp, #24]
 800ada4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ada8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adaa:	ab21      	add	r3, sp, #132	; 0x84
 800adac:	a902      	add	r1, sp, #8
 800adae:	4628      	mov	r0, r5
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	f000 fa53 	bl	800b25c <_svfiprintf_r>
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	bfbc      	itt	lt
 800adba:	238b      	movlt	r3, #139	; 0x8b
 800adbc:	602b      	strlt	r3, [r5, #0]
 800adbe:	2c00      	cmp	r4, #0
 800adc0:	d0dd      	beq.n	800ad7e <sniprintf+0x16>
 800adc2:	9b02      	ldr	r3, [sp, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	701a      	strb	r2, [r3, #0]
 800adc8:	e7d9      	b.n	800ad7e <sniprintf+0x16>
 800adca:	bf00      	nop
 800adcc:	20000010 	.word	0x20000010

0800add0 <siprintf>:
 800add0:	b40e      	push	{r1, r2, r3}
 800add2:	b500      	push	{lr}
 800add4:	b09c      	sub	sp, #112	; 0x70
 800add6:	ab1d      	add	r3, sp, #116	; 0x74
 800add8:	9002      	str	r0, [sp, #8]
 800adda:	9006      	str	r0, [sp, #24]
 800addc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ade0:	4809      	ldr	r0, [pc, #36]	; (800ae08 <siprintf+0x38>)
 800ade2:	9107      	str	r1, [sp, #28]
 800ade4:	9104      	str	r1, [sp, #16]
 800ade6:	4909      	ldr	r1, [pc, #36]	; (800ae0c <siprintf+0x3c>)
 800ade8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adec:	9105      	str	r1, [sp, #20]
 800adee:	6800      	ldr	r0, [r0, #0]
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	a902      	add	r1, sp, #8
 800adf4:	f000 fa32 	bl	800b25c <_svfiprintf_r>
 800adf8:	9b02      	ldr	r3, [sp, #8]
 800adfa:	2200      	movs	r2, #0
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	b01c      	add	sp, #112	; 0x70
 800ae00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae04:	b003      	add	sp, #12
 800ae06:	4770      	bx	lr
 800ae08:	20000010 	.word	0x20000010
 800ae0c:	ffff0208 	.word	0xffff0208

0800ae10 <__sread>:
 800ae10:	b510      	push	{r4, lr}
 800ae12:	460c      	mov	r4, r1
 800ae14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae18:	f000 fe0e 	bl	800ba38 <_read_r>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	bfab      	itete	ge
 800ae20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae22:	89a3      	ldrhlt	r3, [r4, #12]
 800ae24:	181b      	addge	r3, r3, r0
 800ae26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae2a:	bfac      	ite	ge
 800ae2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae2e:	81a3      	strhlt	r3, [r4, #12]
 800ae30:	bd10      	pop	{r4, pc}

0800ae32 <__swrite>:
 800ae32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae36:	461f      	mov	r7, r3
 800ae38:	898b      	ldrh	r3, [r1, #12]
 800ae3a:	05db      	lsls	r3, r3, #23
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	4616      	mov	r6, r2
 800ae42:	d505      	bpl.n	800ae50 <__swrite+0x1e>
 800ae44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae48:	2302      	movs	r3, #2
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f000 f938 	bl	800b0c0 <_lseek_r>
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae5a:	81a3      	strh	r3, [r4, #12]
 800ae5c:	4632      	mov	r2, r6
 800ae5e:	463b      	mov	r3, r7
 800ae60:	4628      	mov	r0, r5
 800ae62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae66:	f000 b817 	b.w	800ae98 <_write_r>

0800ae6a <__sseek>:
 800ae6a:	b510      	push	{r4, lr}
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae72:	f000 f925 	bl	800b0c0 <_lseek_r>
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	bf15      	itete	ne
 800ae7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae86:	81a3      	strheq	r3, [r4, #12]
 800ae88:	bf18      	it	ne
 800ae8a:	81a3      	strhne	r3, [r4, #12]
 800ae8c:	bd10      	pop	{r4, pc}

0800ae8e <__sclose>:
 800ae8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae92:	f000 b831 	b.w	800aef8 <_close_r>
	...

0800ae98 <_write_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d07      	ldr	r5, [pc, #28]	; (800aeb8 <_write_r+0x20>)
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	4608      	mov	r0, r1
 800aea0:	4611      	mov	r1, r2
 800aea2:	2200      	movs	r2, #0
 800aea4:	602a      	str	r2, [r5, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	f7f7 ff1d 	bl	8002ce6 <_write>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_write_r+0x1e>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_write_r+0x1e>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	20004e78 	.word	0x20004e78

0800aebc <__assert_func>:
 800aebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aebe:	4614      	mov	r4, r2
 800aec0:	461a      	mov	r2, r3
 800aec2:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <__assert_func+0x2c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4605      	mov	r5, r0
 800aec8:	68d8      	ldr	r0, [r3, #12]
 800aeca:	b14c      	cbz	r4, 800aee0 <__assert_func+0x24>
 800aecc:	4b07      	ldr	r3, [pc, #28]	; (800aeec <__assert_func+0x30>)
 800aece:	9100      	str	r1, [sp, #0]
 800aed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed4:	4906      	ldr	r1, [pc, #24]	; (800aef0 <__assert_func+0x34>)
 800aed6:	462b      	mov	r3, r5
 800aed8:	f000 f8e0 	bl	800b09c <fiprintf>
 800aedc:	f000 fe7e 	bl	800bbdc <abort>
 800aee0:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <__assert_func+0x38>)
 800aee2:	461c      	mov	r4, r3
 800aee4:	e7f3      	b.n	800aece <__assert_func+0x12>
 800aee6:	bf00      	nop
 800aee8:	20000010 	.word	0x20000010
 800aeec:	0800d1e6 	.word	0x0800d1e6
 800aef0:	0800d1f3 	.word	0x0800d1f3
 800aef4:	0800d221 	.word	0x0800d221

0800aef8 <_close_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d06      	ldr	r5, [pc, #24]	; (800af14 <_close_r+0x1c>)
 800aefc:	2300      	movs	r3, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	602b      	str	r3, [r5, #0]
 800af04:	f7f7 ff0b 	bl	8002d1e <_close>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_close_r+0x1a>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_close_r+0x1a>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20004e78 	.word	0x20004e78

0800af18 <__sflush_r>:
 800af18:	898a      	ldrh	r2, [r1, #12]
 800af1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1e:	4605      	mov	r5, r0
 800af20:	0710      	lsls	r0, r2, #28
 800af22:	460c      	mov	r4, r1
 800af24:	d458      	bmi.n	800afd8 <__sflush_r+0xc0>
 800af26:	684b      	ldr	r3, [r1, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dc05      	bgt.n	800af38 <__sflush_r+0x20>
 800af2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dc02      	bgt.n	800af38 <__sflush_r+0x20>
 800af32:	2000      	movs	r0, #0
 800af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	d0f9      	beq.n	800af32 <__sflush_r+0x1a>
 800af3e:	2300      	movs	r3, #0
 800af40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af44:	682f      	ldr	r7, [r5, #0]
 800af46:	602b      	str	r3, [r5, #0]
 800af48:	d032      	beq.n	800afb0 <__sflush_r+0x98>
 800af4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	075a      	lsls	r2, r3, #29
 800af50:	d505      	bpl.n	800af5e <__sflush_r+0x46>
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	1ac0      	subs	r0, r0, r3
 800af56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af58:	b10b      	cbz	r3, 800af5e <__sflush_r+0x46>
 800af5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af5c:	1ac0      	subs	r0, r0, r3
 800af5e:	2300      	movs	r3, #0
 800af60:	4602      	mov	r2, r0
 800af62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af64:	6a21      	ldr	r1, [r4, #32]
 800af66:	4628      	mov	r0, r5
 800af68:	47b0      	blx	r6
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	d106      	bne.n	800af7e <__sflush_r+0x66>
 800af70:	6829      	ldr	r1, [r5, #0]
 800af72:	291d      	cmp	r1, #29
 800af74:	d82c      	bhi.n	800afd0 <__sflush_r+0xb8>
 800af76:	4a2a      	ldr	r2, [pc, #168]	; (800b020 <__sflush_r+0x108>)
 800af78:	40ca      	lsrs	r2, r1
 800af7a:	07d6      	lsls	r6, r2, #31
 800af7c:	d528      	bpl.n	800afd0 <__sflush_r+0xb8>
 800af7e:	2200      	movs	r2, #0
 800af80:	6062      	str	r2, [r4, #4]
 800af82:	04d9      	lsls	r1, r3, #19
 800af84:	6922      	ldr	r2, [r4, #16]
 800af86:	6022      	str	r2, [r4, #0]
 800af88:	d504      	bpl.n	800af94 <__sflush_r+0x7c>
 800af8a:	1c42      	adds	r2, r0, #1
 800af8c:	d101      	bne.n	800af92 <__sflush_r+0x7a>
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	b903      	cbnz	r3, 800af94 <__sflush_r+0x7c>
 800af92:	6560      	str	r0, [r4, #84]	; 0x54
 800af94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af96:	602f      	str	r7, [r5, #0]
 800af98:	2900      	cmp	r1, #0
 800af9a:	d0ca      	beq.n	800af32 <__sflush_r+0x1a>
 800af9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afa0:	4299      	cmp	r1, r3
 800afa2:	d002      	beq.n	800afaa <__sflush_r+0x92>
 800afa4:	4628      	mov	r0, r5
 800afa6:	f000 f8b1 	bl	800b10c <_free_r>
 800afaa:	2000      	movs	r0, #0
 800afac:	6360      	str	r0, [r4, #52]	; 0x34
 800afae:	e7c1      	b.n	800af34 <__sflush_r+0x1c>
 800afb0:	6a21      	ldr	r1, [r4, #32]
 800afb2:	2301      	movs	r3, #1
 800afb4:	4628      	mov	r0, r5
 800afb6:	47b0      	blx	r6
 800afb8:	1c41      	adds	r1, r0, #1
 800afba:	d1c7      	bne.n	800af4c <__sflush_r+0x34>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0c4      	beq.n	800af4c <__sflush_r+0x34>
 800afc2:	2b1d      	cmp	r3, #29
 800afc4:	d001      	beq.n	800afca <__sflush_r+0xb2>
 800afc6:	2b16      	cmp	r3, #22
 800afc8:	d101      	bne.n	800afce <__sflush_r+0xb6>
 800afca:	602f      	str	r7, [r5, #0]
 800afcc:	e7b1      	b.n	800af32 <__sflush_r+0x1a>
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	e7ad      	b.n	800af34 <__sflush_r+0x1c>
 800afd8:	690f      	ldr	r7, [r1, #16]
 800afda:	2f00      	cmp	r7, #0
 800afdc:	d0a9      	beq.n	800af32 <__sflush_r+0x1a>
 800afde:	0793      	lsls	r3, r2, #30
 800afe0:	680e      	ldr	r6, [r1, #0]
 800afe2:	bf08      	it	eq
 800afe4:	694b      	ldreq	r3, [r1, #20]
 800afe6:	600f      	str	r7, [r1, #0]
 800afe8:	bf18      	it	ne
 800afea:	2300      	movne	r3, #0
 800afec:	eba6 0807 	sub.w	r8, r6, r7
 800aff0:	608b      	str	r3, [r1, #8]
 800aff2:	f1b8 0f00 	cmp.w	r8, #0
 800aff6:	dd9c      	ble.n	800af32 <__sflush_r+0x1a>
 800aff8:	6a21      	ldr	r1, [r4, #32]
 800affa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800affc:	4643      	mov	r3, r8
 800affe:	463a      	mov	r2, r7
 800b000:	4628      	mov	r0, r5
 800b002:	47b0      	blx	r6
 800b004:	2800      	cmp	r0, #0
 800b006:	dc06      	bgt.n	800b016 <__sflush_r+0xfe>
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00e:	81a3      	strh	r3, [r4, #12]
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	e78e      	b.n	800af34 <__sflush_r+0x1c>
 800b016:	4407      	add	r7, r0
 800b018:	eba8 0800 	sub.w	r8, r8, r0
 800b01c:	e7e9      	b.n	800aff2 <__sflush_r+0xda>
 800b01e:	bf00      	nop
 800b020:	20400001 	.word	0x20400001

0800b024 <_fflush_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	690b      	ldr	r3, [r1, #16]
 800b028:	4605      	mov	r5, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	b913      	cbnz	r3, 800b034 <_fflush_r+0x10>
 800b02e:	2500      	movs	r5, #0
 800b030:	4628      	mov	r0, r5
 800b032:	bd38      	pop	{r3, r4, r5, pc}
 800b034:	b118      	cbz	r0, 800b03e <_fflush_r+0x1a>
 800b036:	6983      	ldr	r3, [r0, #24]
 800b038:	b90b      	cbnz	r3, 800b03e <_fflush_r+0x1a>
 800b03a:	f7ff fc6d 	bl	800a918 <__sinit>
 800b03e:	4b14      	ldr	r3, [pc, #80]	; (800b090 <_fflush_r+0x6c>)
 800b040:	429c      	cmp	r4, r3
 800b042:	d11b      	bne.n	800b07c <_fflush_r+0x58>
 800b044:	686c      	ldr	r4, [r5, #4]
 800b046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0ef      	beq.n	800b02e <_fflush_r+0xa>
 800b04e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b050:	07d0      	lsls	r0, r2, #31
 800b052:	d404      	bmi.n	800b05e <_fflush_r+0x3a>
 800b054:	0599      	lsls	r1, r3, #22
 800b056:	d402      	bmi.n	800b05e <_fflush_r+0x3a>
 800b058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b05a:	f7ff fd20 	bl	800aa9e <__retarget_lock_acquire_recursive>
 800b05e:	4628      	mov	r0, r5
 800b060:	4621      	mov	r1, r4
 800b062:	f7ff ff59 	bl	800af18 <__sflush_r>
 800b066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b068:	07da      	lsls	r2, r3, #31
 800b06a:	4605      	mov	r5, r0
 800b06c:	d4e0      	bmi.n	800b030 <_fflush_r+0xc>
 800b06e:	89a3      	ldrh	r3, [r4, #12]
 800b070:	059b      	lsls	r3, r3, #22
 800b072:	d4dd      	bmi.n	800b030 <_fflush_r+0xc>
 800b074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b076:	f7ff fd13 	bl	800aaa0 <__retarget_lock_release_recursive>
 800b07a:	e7d9      	b.n	800b030 <_fflush_r+0xc>
 800b07c:	4b05      	ldr	r3, [pc, #20]	; (800b094 <_fflush_r+0x70>)
 800b07e:	429c      	cmp	r4, r3
 800b080:	d101      	bne.n	800b086 <_fflush_r+0x62>
 800b082:	68ac      	ldr	r4, [r5, #8]
 800b084:	e7df      	b.n	800b046 <_fflush_r+0x22>
 800b086:	4b04      	ldr	r3, [pc, #16]	; (800b098 <_fflush_r+0x74>)
 800b088:	429c      	cmp	r4, r3
 800b08a:	bf08      	it	eq
 800b08c:	68ec      	ldreq	r4, [r5, #12]
 800b08e:	e7da      	b.n	800b046 <_fflush_r+0x22>
 800b090:	0800d130 	.word	0x0800d130
 800b094:	0800d150 	.word	0x0800d150
 800b098:	0800d110 	.word	0x0800d110

0800b09c <fiprintf>:
 800b09c:	b40e      	push	{r1, r2, r3}
 800b09e:	b503      	push	{r0, r1, lr}
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	ab03      	add	r3, sp, #12
 800b0a4:	4805      	ldr	r0, [pc, #20]	; (800b0bc <fiprintf+0x20>)
 800b0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0aa:	6800      	ldr	r0, [r0, #0]
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	f000 f9ff 	bl	800b4b0 <_vfiprintf_r>
 800b0b2:	b002      	add	sp, #8
 800b0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b8:	b003      	add	sp, #12
 800b0ba:	4770      	bx	lr
 800b0bc:	20000010 	.word	0x20000010

0800b0c0 <_lseek_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d07      	ldr	r5, [pc, #28]	; (800b0e0 <_lseek_r+0x20>)
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	602a      	str	r2, [r5, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	f7f7 fe4c 	bl	8002d6c <_lseek>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_lseek_r+0x1e>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_lseek_r+0x1e>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	20004e78 	.word	0x20004e78

0800b0e4 <malloc>:
 800b0e4:	4b02      	ldr	r3, [pc, #8]	; (800b0f0 <malloc+0xc>)
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	f7ff bd11 	b.w	800ab10 <_malloc_r>
 800b0ee:	bf00      	nop
 800b0f0:	20000010 	.word	0x20000010

0800b0f4 <__malloc_lock>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	; (800b0fc <__malloc_lock+0x8>)
 800b0f6:	f7ff bcd2 	b.w	800aa9e <__retarget_lock_acquire_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20004e6c 	.word	0x20004e6c

0800b100 <__malloc_unlock>:
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <__malloc_unlock+0x8>)
 800b102:	f7ff bccd 	b.w	800aaa0 <__retarget_lock_release_recursive>
 800b106:	bf00      	nop
 800b108:	20004e6c 	.word	0x20004e6c

0800b10c <_free_r>:
 800b10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b10e:	2900      	cmp	r1, #0
 800b110:	d044      	beq.n	800b19c <_free_r+0x90>
 800b112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b116:	9001      	str	r0, [sp, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f1a1 0404 	sub.w	r4, r1, #4
 800b11e:	bfb8      	it	lt
 800b120:	18e4      	addlt	r4, r4, r3
 800b122:	f7ff ffe7 	bl	800b0f4 <__malloc_lock>
 800b126:	4a1e      	ldr	r2, [pc, #120]	; (800b1a0 <_free_r+0x94>)
 800b128:	9801      	ldr	r0, [sp, #4]
 800b12a:	6813      	ldr	r3, [r2, #0]
 800b12c:	b933      	cbnz	r3, 800b13c <_free_r+0x30>
 800b12e:	6063      	str	r3, [r4, #4]
 800b130:	6014      	str	r4, [r2, #0]
 800b132:	b003      	add	sp, #12
 800b134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b138:	f7ff bfe2 	b.w	800b100 <__malloc_unlock>
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	d908      	bls.n	800b152 <_free_r+0x46>
 800b140:	6825      	ldr	r5, [r4, #0]
 800b142:	1961      	adds	r1, r4, r5
 800b144:	428b      	cmp	r3, r1
 800b146:	bf01      	itttt	eq
 800b148:	6819      	ldreq	r1, [r3, #0]
 800b14a:	685b      	ldreq	r3, [r3, #4]
 800b14c:	1949      	addeq	r1, r1, r5
 800b14e:	6021      	streq	r1, [r4, #0]
 800b150:	e7ed      	b.n	800b12e <_free_r+0x22>
 800b152:	461a      	mov	r2, r3
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	b10b      	cbz	r3, 800b15c <_free_r+0x50>
 800b158:	42a3      	cmp	r3, r4
 800b15a:	d9fa      	bls.n	800b152 <_free_r+0x46>
 800b15c:	6811      	ldr	r1, [r2, #0]
 800b15e:	1855      	adds	r5, r2, r1
 800b160:	42a5      	cmp	r5, r4
 800b162:	d10b      	bne.n	800b17c <_free_r+0x70>
 800b164:	6824      	ldr	r4, [r4, #0]
 800b166:	4421      	add	r1, r4
 800b168:	1854      	adds	r4, r2, r1
 800b16a:	42a3      	cmp	r3, r4
 800b16c:	6011      	str	r1, [r2, #0]
 800b16e:	d1e0      	bne.n	800b132 <_free_r+0x26>
 800b170:	681c      	ldr	r4, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	6053      	str	r3, [r2, #4]
 800b176:	4421      	add	r1, r4
 800b178:	6011      	str	r1, [r2, #0]
 800b17a:	e7da      	b.n	800b132 <_free_r+0x26>
 800b17c:	d902      	bls.n	800b184 <_free_r+0x78>
 800b17e:	230c      	movs	r3, #12
 800b180:	6003      	str	r3, [r0, #0]
 800b182:	e7d6      	b.n	800b132 <_free_r+0x26>
 800b184:	6825      	ldr	r5, [r4, #0]
 800b186:	1961      	adds	r1, r4, r5
 800b188:	428b      	cmp	r3, r1
 800b18a:	bf04      	itt	eq
 800b18c:	6819      	ldreq	r1, [r3, #0]
 800b18e:	685b      	ldreq	r3, [r3, #4]
 800b190:	6063      	str	r3, [r4, #4]
 800b192:	bf04      	itt	eq
 800b194:	1949      	addeq	r1, r1, r5
 800b196:	6021      	streq	r1, [r4, #0]
 800b198:	6054      	str	r4, [r2, #4]
 800b19a:	e7ca      	b.n	800b132 <_free_r+0x26>
 800b19c:	b003      	add	sp, #12
 800b19e:	bd30      	pop	{r4, r5, pc}
 800b1a0:	20004e70 	.word	0x20004e70

0800b1a4 <__ssputs_r>:
 800b1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a8:	688e      	ldr	r6, [r1, #8]
 800b1aa:	429e      	cmp	r6, r3
 800b1ac:	4682      	mov	sl, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4690      	mov	r8, r2
 800b1b2:	461f      	mov	r7, r3
 800b1b4:	d838      	bhi.n	800b228 <__ssputs_r+0x84>
 800b1b6:	898a      	ldrh	r2, [r1, #12]
 800b1b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1bc:	d032      	beq.n	800b224 <__ssputs_r+0x80>
 800b1be:	6825      	ldr	r5, [r4, #0]
 800b1c0:	6909      	ldr	r1, [r1, #16]
 800b1c2:	eba5 0901 	sub.w	r9, r5, r1
 800b1c6:	6965      	ldr	r5, [r4, #20]
 800b1c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	444b      	add	r3, r9
 800b1d4:	106d      	asrs	r5, r5, #1
 800b1d6:	429d      	cmp	r5, r3
 800b1d8:	bf38      	it	cc
 800b1da:	461d      	movcc	r5, r3
 800b1dc:	0553      	lsls	r3, r2, #21
 800b1de:	d531      	bpl.n	800b244 <__ssputs_r+0xa0>
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	f7ff fc95 	bl	800ab10 <_malloc_r>
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	b950      	cbnz	r0, 800b200 <__ssputs_r+0x5c>
 800b1ea:	230c      	movs	r3, #12
 800b1ec:	f8ca 3000 	str.w	r3, [sl]
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f6:	81a3      	strh	r3, [r4, #12]
 800b1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b200:	6921      	ldr	r1, [r4, #16]
 800b202:	464a      	mov	r2, r9
 800b204:	f7ff fc4d 	bl	800aaa2 <memcpy>
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	6126      	str	r6, [r4, #16]
 800b216:	6165      	str	r5, [r4, #20]
 800b218:	444e      	add	r6, r9
 800b21a:	eba5 0509 	sub.w	r5, r5, r9
 800b21e:	6026      	str	r6, [r4, #0]
 800b220:	60a5      	str	r5, [r4, #8]
 800b222:	463e      	mov	r6, r7
 800b224:	42be      	cmp	r6, r7
 800b226:	d900      	bls.n	800b22a <__ssputs_r+0x86>
 800b228:	463e      	mov	r6, r7
 800b22a:	6820      	ldr	r0, [r4, #0]
 800b22c:	4632      	mov	r2, r6
 800b22e:	4641      	mov	r1, r8
 800b230:	f000 fd40 	bl	800bcb4 <memmove>
 800b234:	68a3      	ldr	r3, [r4, #8]
 800b236:	1b9b      	subs	r3, r3, r6
 800b238:	60a3      	str	r3, [r4, #8]
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	4433      	add	r3, r6
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	2000      	movs	r0, #0
 800b242:	e7db      	b.n	800b1fc <__ssputs_r+0x58>
 800b244:	462a      	mov	r2, r5
 800b246:	f000 fd4f 	bl	800bce8 <_realloc_r>
 800b24a:	4606      	mov	r6, r0
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d1e1      	bne.n	800b214 <__ssputs_r+0x70>
 800b250:	6921      	ldr	r1, [r4, #16]
 800b252:	4650      	mov	r0, sl
 800b254:	f7ff ff5a 	bl	800b10c <_free_r>
 800b258:	e7c7      	b.n	800b1ea <__ssputs_r+0x46>
	...

0800b25c <_svfiprintf_r>:
 800b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	4698      	mov	r8, r3
 800b262:	898b      	ldrh	r3, [r1, #12]
 800b264:	061b      	lsls	r3, r3, #24
 800b266:	b09d      	sub	sp, #116	; 0x74
 800b268:	4607      	mov	r7, r0
 800b26a:	460d      	mov	r5, r1
 800b26c:	4614      	mov	r4, r2
 800b26e:	d50e      	bpl.n	800b28e <_svfiprintf_r+0x32>
 800b270:	690b      	ldr	r3, [r1, #16]
 800b272:	b963      	cbnz	r3, 800b28e <_svfiprintf_r+0x32>
 800b274:	2140      	movs	r1, #64	; 0x40
 800b276:	f7ff fc4b 	bl	800ab10 <_malloc_r>
 800b27a:	6028      	str	r0, [r5, #0]
 800b27c:	6128      	str	r0, [r5, #16]
 800b27e:	b920      	cbnz	r0, 800b28a <_svfiprintf_r+0x2e>
 800b280:	230c      	movs	r3, #12
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	e0d1      	b.n	800b42e <_svfiprintf_r+0x1d2>
 800b28a:	2340      	movs	r3, #64	; 0x40
 800b28c:	616b      	str	r3, [r5, #20]
 800b28e:	2300      	movs	r3, #0
 800b290:	9309      	str	r3, [sp, #36]	; 0x24
 800b292:	2320      	movs	r3, #32
 800b294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b298:	f8cd 800c 	str.w	r8, [sp, #12]
 800b29c:	2330      	movs	r3, #48	; 0x30
 800b29e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b448 <_svfiprintf_r+0x1ec>
 800b2a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2a6:	f04f 0901 	mov.w	r9, #1
 800b2aa:	4623      	mov	r3, r4
 800b2ac:	469a      	mov	sl, r3
 800b2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2b2:	b10a      	cbz	r2, 800b2b8 <_svfiprintf_r+0x5c>
 800b2b4:	2a25      	cmp	r2, #37	; 0x25
 800b2b6:	d1f9      	bne.n	800b2ac <_svfiprintf_r+0x50>
 800b2b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b2bc:	d00b      	beq.n	800b2d6 <_svfiprintf_r+0x7a>
 800b2be:	465b      	mov	r3, fp
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	f7ff ff6d 	bl	800b1a4 <__ssputs_r>
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	f000 80aa 	beq.w	800b424 <_svfiprintf_r+0x1c8>
 800b2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d2:	445a      	add	r2, fp
 800b2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 80a2 	beq.w	800b424 <_svfiprintf_r+0x1c8>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ea:	f10a 0a01 	add.w	sl, sl, #1
 800b2ee:	9304      	str	r3, [sp, #16]
 800b2f0:	9307      	str	r3, [sp, #28]
 800b2f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2f6:	931a      	str	r3, [sp, #104]	; 0x68
 800b2f8:	4654      	mov	r4, sl
 800b2fa:	2205      	movs	r2, #5
 800b2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b300:	4851      	ldr	r0, [pc, #324]	; (800b448 <_svfiprintf_r+0x1ec>)
 800b302:	f7f4 ff75 	bl	80001f0 <memchr>
 800b306:	9a04      	ldr	r2, [sp, #16]
 800b308:	b9d8      	cbnz	r0, 800b342 <_svfiprintf_r+0xe6>
 800b30a:	06d0      	lsls	r0, r2, #27
 800b30c:	bf44      	itt	mi
 800b30e:	2320      	movmi	r3, #32
 800b310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b314:	0711      	lsls	r1, r2, #28
 800b316:	bf44      	itt	mi
 800b318:	232b      	movmi	r3, #43	; 0x2b
 800b31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b31e:	f89a 3000 	ldrb.w	r3, [sl]
 800b322:	2b2a      	cmp	r3, #42	; 0x2a
 800b324:	d015      	beq.n	800b352 <_svfiprintf_r+0xf6>
 800b326:	9a07      	ldr	r2, [sp, #28]
 800b328:	4654      	mov	r4, sl
 800b32a:	2000      	movs	r0, #0
 800b32c:	f04f 0c0a 	mov.w	ip, #10
 800b330:	4621      	mov	r1, r4
 800b332:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b336:	3b30      	subs	r3, #48	; 0x30
 800b338:	2b09      	cmp	r3, #9
 800b33a:	d94e      	bls.n	800b3da <_svfiprintf_r+0x17e>
 800b33c:	b1b0      	cbz	r0, 800b36c <_svfiprintf_r+0x110>
 800b33e:	9207      	str	r2, [sp, #28]
 800b340:	e014      	b.n	800b36c <_svfiprintf_r+0x110>
 800b342:	eba0 0308 	sub.w	r3, r0, r8
 800b346:	fa09 f303 	lsl.w	r3, r9, r3
 800b34a:	4313      	orrs	r3, r2
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	46a2      	mov	sl, r4
 800b350:	e7d2      	b.n	800b2f8 <_svfiprintf_r+0x9c>
 800b352:	9b03      	ldr	r3, [sp, #12]
 800b354:	1d19      	adds	r1, r3, #4
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	9103      	str	r1, [sp, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bfbb      	ittet	lt
 800b35e:	425b      	neglt	r3, r3
 800b360:	f042 0202 	orrlt.w	r2, r2, #2
 800b364:	9307      	strge	r3, [sp, #28]
 800b366:	9307      	strlt	r3, [sp, #28]
 800b368:	bfb8      	it	lt
 800b36a:	9204      	strlt	r2, [sp, #16]
 800b36c:	7823      	ldrb	r3, [r4, #0]
 800b36e:	2b2e      	cmp	r3, #46	; 0x2e
 800b370:	d10c      	bne.n	800b38c <_svfiprintf_r+0x130>
 800b372:	7863      	ldrb	r3, [r4, #1]
 800b374:	2b2a      	cmp	r3, #42	; 0x2a
 800b376:	d135      	bne.n	800b3e4 <_svfiprintf_r+0x188>
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	1d1a      	adds	r2, r3, #4
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	9203      	str	r2, [sp, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	bfb8      	it	lt
 800b384:	f04f 33ff 	movlt.w	r3, #4294967295
 800b388:	3402      	adds	r4, #2
 800b38a:	9305      	str	r3, [sp, #20]
 800b38c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b458 <_svfiprintf_r+0x1fc>
 800b390:	7821      	ldrb	r1, [r4, #0]
 800b392:	2203      	movs	r2, #3
 800b394:	4650      	mov	r0, sl
 800b396:	f7f4 ff2b 	bl	80001f0 <memchr>
 800b39a:	b140      	cbz	r0, 800b3ae <_svfiprintf_r+0x152>
 800b39c:	2340      	movs	r3, #64	; 0x40
 800b39e:	eba0 000a 	sub.w	r0, r0, sl
 800b3a2:	fa03 f000 	lsl.w	r0, r3, r0
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	4303      	orrs	r3, r0
 800b3aa:	3401      	adds	r4, #1
 800b3ac:	9304      	str	r3, [sp, #16]
 800b3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b2:	4826      	ldr	r0, [pc, #152]	; (800b44c <_svfiprintf_r+0x1f0>)
 800b3b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3b8:	2206      	movs	r2, #6
 800b3ba:	f7f4 ff19 	bl	80001f0 <memchr>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d038      	beq.n	800b434 <_svfiprintf_r+0x1d8>
 800b3c2:	4b23      	ldr	r3, [pc, #140]	; (800b450 <_svfiprintf_r+0x1f4>)
 800b3c4:	bb1b      	cbnz	r3, 800b40e <_svfiprintf_r+0x1b2>
 800b3c6:	9b03      	ldr	r3, [sp, #12]
 800b3c8:	3307      	adds	r3, #7
 800b3ca:	f023 0307 	bic.w	r3, r3, #7
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	9303      	str	r3, [sp, #12]
 800b3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d4:	4433      	add	r3, r6
 800b3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d8:	e767      	b.n	800b2aa <_svfiprintf_r+0x4e>
 800b3da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3de:	460c      	mov	r4, r1
 800b3e0:	2001      	movs	r0, #1
 800b3e2:	e7a5      	b.n	800b330 <_svfiprintf_r+0xd4>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	3401      	adds	r4, #1
 800b3e8:	9305      	str	r3, [sp, #20]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	f04f 0c0a 	mov.w	ip, #10
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3f6:	3a30      	subs	r2, #48	; 0x30
 800b3f8:	2a09      	cmp	r2, #9
 800b3fa:	d903      	bls.n	800b404 <_svfiprintf_r+0x1a8>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d0c5      	beq.n	800b38c <_svfiprintf_r+0x130>
 800b400:	9105      	str	r1, [sp, #20]
 800b402:	e7c3      	b.n	800b38c <_svfiprintf_r+0x130>
 800b404:	fb0c 2101 	mla	r1, ip, r1, r2
 800b408:	4604      	mov	r4, r0
 800b40a:	2301      	movs	r3, #1
 800b40c:	e7f0      	b.n	800b3f0 <_svfiprintf_r+0x194>
 800b40e:	ab03      	add	r3, sp, #12
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	462a      	mov	r2, r5
 800b414:	4b0f      	ldr	r3, [pc, #60]	; (800b454 <_svfiprintf_r+0x1f8>)
 800b416:	a904      	add	r1, sp, #16
 800b418:	4638      	mov	r0, r7
 800b41a:	f3af 8000 	nop.w
 800b41e:	1c42      	adds	r2, r0, #1
 800b420:	4606      	mov	r6, r0
 800b422:	d1d6      	bne.n	800b3d2 <_svfiprintf_r+0x176>
 800b424:	89ab      	ldrh	r3, [r5, #12]
 800b426:	065b      	lsls	r3, r3, #25
 800b428:	f53f af2c 	bmi.w	800b284 <_svfiprintf_r+0x28>
 800b42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b42e:	b01d      	add	sp, #116	; 0x74
 800b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b434:	ab03      	add	r3, sp, #12
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	462a      	mov	r2, r5
 800b43a:	4b06      	ldr	r3, [pc, #24]	; (800b454 <_svfiprintf_r+0x1f8>)
 800b43c:	a904      	add	r1, sp, #16
 800b43e:	4638      	mov	r0, r7
 800b440:	f000 f9d4 	bl	800b7ec <_printf_i>
 800b444:	e7eb      	b.n	800b41e <_svfiprintf_r+0x1c2>
 800b446:	bf00      	nop
 800b448:	0800d222 	.word	0x0800d222
 800b44c:	0800d22c 	.word	0x0800d22c
 800b450:	00000000 	.word	0x00000000
 800b454:	0800b1a5 	.word	0x0800b1a5
 800b458:	0800d228 	.word	0x0800d228

0800b45c <__sfputc_r>:
 800b45c:	6893      	ldr	r3, [r2, #8]
 800b45e:	3b01      	subs	r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	b410      	push	{r4}
 800b464:	6093      	str	r3, [r2, #8]
 800b466:	da08      	bge.n	800b47a <__sfputc_r+0x1e>
 800b468:	6994      	ldr	r4, [r2, #24]
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	db01      	blt.n	800b472 <__sfputc_r+0x16>
 800b46e:	290a      	cmp	r1, #10
 800b470:	d103      	bne.n	800b47a <__sfputc_r+0x1e>
 800b472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b476:	f000 baf1 	b.w	800ba5c <__swbuf_r>
 800b47a:	6813      	ldr	r3, [r2, #0]
 800b47c:	1c58      	adds	r0, r3, #1
 800b47e:	6010      	str	r0, [r2, #0]
 800b480:	7019      	strb	r1, [r3, #0]
 800b482:	4608      	mov	r0, r1
 800b484:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <__sfputs_r>:
 800b48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	4614      	mov	r4, r2
 800b492:	18d5      	adds	r5, r2, r3
 800b494:	42ac      	cmp	r4, r5
 800b496:	d101      	bne.n	800b49c <__sfputs_r+0x12>
 800b498:	2000      	movs	r0, #0
 800b49a:	e007      	b.n	800b4ac <__sfputs_r+0x22>
 800b49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7ff ffda 	bl	800b45c <__sfputc_r>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d1f3      	bne.n	800b494 <__sfputs_r+0xa>
 800b4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4b0 <_vfiprintf_r>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	460d      	mov	r5, r1
 800b4b6:	b09d      	sub	sp, #116	; 0x74
 800b4b8:	4614      	mov	r4, r2
 800b4ba:	4698      	mov	r8, r3
 800b4bc:	4606      	mov	r6, r0
 800b4be:	b118      	cbz	r0, 800b4c8 <_vfiprintf_r+0x18>
 800b4c0:	6983      	ldr	r3, [r0, #24]
 800b4c2:	b90b      	cbnz	r3, 800b4c8 <_vfiprintf_r+0x18>
 800b4c4:	f7ff fa28 	bl	800a918 <__sinit>
 800b4c8:	4b89      	ldr	r3, [pc, #548]	; (800b6f0 <_vfiprintf_r+0x240>)
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	d11b      	bne.n	800b506 <_vfiprintf_r+0x56>
 800b4ce:	6875      	ldr	r5, [r6, #4]
 800b4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4d2:	07d9      	lsls	r1, r3, #31
 800b4d4:	d405      	bmi.n	800b4e2 <_vfiprintf_r+0x32>
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	059a      	lsls	r2, r3, #22
 800b4da:	d402      	bmi.n	800b4e2 <_vfiprintf_r+0x32>
 800b4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4de:	f7ff fade 	bl	800aa9e <__retarget_lock_acquire_recursive>
 800b4e2:	89ab      	ldrh	r3, [r5, #12]
 800b4e4:	071b      	lsls	r3, r3, #28
 800b4e6:	d501      	bpl.n	800b4ec <_vfiprintf_r+0x3c>
 800b4e8:	692b      	ldr	r3, [r5, #16]
 800b4ea:	b9eb      	cbnz	r3, 800b528 <_vfiprintf_r+0x78>
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f000 fb06 	bl	800bb00 <__swsetup_r>
 800b4f4:	b1c0      	cbz	r0, 800b528 <_vfiprintf_r+0x78>
 800b4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4f8:	07dc      	lsls	r4, r3, #31
 800b4fa:	d50e      	bpl.n	800b51a <_vfiprintf_r+0x6a>
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b500:	b01d      	add	sp, #116	; 0x74
 800b502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b506:	4b7b      	ldr	r3, [pc, #492]	; (800b6f4 <_vfiprintf_r+0x244>)
 800b508:	429d      	cmp	r5, r3
 800b50a:	d101      	bne.n	800b510 <_vfiprintf_r+0x60>
 800b50c:	68b5      	ldr	r5, [r6, #8]
 800b50e:	e7df      	b.n	800b4d0 <_vfiprintf_r+0x20>
 800b510:	4b79      	ldr	r3, [pc, #484]	; (800b6f8 <_vfiprintf_r+0x248>)
 800b512:	429d      	cmp	r5, r3
 800b514:	bf08      	it	eq
 800b516:	68f5      	ldreq	r5, [r6, #12]
 800b518:	e7da      	b.n	800b4d0 <_vfiprintf_r+0x20>
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	0598      	lsls	r0, r3, #22
 800b51e:	d4ed      	bmi.n	800b4fc <_vfiprintf_r+0x4c>
 800b520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b522:	f7ff fabd 	bl	800aaa0 <__retarget_lock_release_recursive>
 800b526:	e7e9      	b.n	800b4fc <_vfiprintf_r+0x4c>
 800b528:	2300      	movs	r3, #0
 800b52a:	9309      	str	r3, [sp, #36]	; 0x24
 800b52c:	2320      	movs	r3, #32
 800b52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b532:	f8cd 800c 	str.w	r8, [sp, #12]
 800b536:	2330      	movs	r3, #48	; 0x30
 800b538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b6fc <_vfiprintf_r+0x24c>
 800b53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b540:	f04f 0901 	mov.w	r9, #1
 800b544:	4623      	mov	r3, r4
 800b546:	469a      	mov	sl, r3
 800b548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b54c:	b10a      	cbz	r2, 800b552 <_vfiprintf_r+0xa2>
 800b54e:	2a25      	cmp	r2, #37	; 0x25
 800b550:	d1f9      	bne.n	800b546 <_vfiprintf_r+0x96>
 800b552:	ebba 0b04 	subs.w	fp, sl, r4
 800b556:	d00b      	beq.n	800b570 <_vfiprintf_r+0xc0>
 800b558:	465b      	mov	r3, fp
 800b55a:	4622      	mov	r2, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	4630      	mov	r0, r6
 800b560:	f7ff ff93 	bl	800b48a <__sfputs_r>
 800b564:	3001      	adds	r0, #1
 800b566:	f000 80aa 	beq.w	800b6be <_vfiprintf_r+0x20e>
 800b56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b56c:	445a      	add	r2, fp
 800b56e:	9209      	str	r2, [sp, #36]	; 0x24
 800b570:	f89a 3000 	ldrb.w	r3, [sl]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80a2 	beq.w	800b6be <_vfiprintf_r+0x20e>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295
 800b580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b584:	f10a 0a01 	add.w	sl, sl, #1
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b590:	931a      	str	r3, [sp, #104]	; 0x68
 800b592:	4654      	mov	r4, sl
 800b594:	2205      	movs	r2, #5
 800b596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59a:	4858      	ldr	r0, [pc, #352]	; (800b6fc <_vfiprintf_r+0x24c>)
 800b59c:	f7f4 fe28 	bl	80001f0 <memchr>
 800b5a0:	9a04      	ldr	r2, [sp, #16]
 800b5a2:	b9d8      	cbnz	r0, 800b5dc <_vfiprintf_r+0x12c>
 800b5a4:	06d1      	lsls	r1, r2, #27
 800b5a6:	bf44      	itt	mi
 800b5a8:	2320      	movmi	r3, #32
 800b5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ae:	0713      	lsls	r3, r2, #28
 800b5b0:	bf44      	itt	mi
 800b5b2:	232b      	movmi	r3, #43	; 0x2b
 800b5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5be:	d015      	beq.n	800b5ec <_vfiprintf_r+0x13c>
 800b5c0:	9a07      	ldr	r2, [sp, #28]
 800b5c2:	4654      	mov	r4, sl
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	f04f 0c0a 	mov.w	ip, #10
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d0:	3b30      	subs	r3, #48	; 0x30
 800b5d2:	2b09      	cmp	r3, #9
 800b5d4:	d94e      	bls.n	800b674 <_vfiprintf_r+0x1c4>
 800b5d6:	b1b0      	cbz	r0, 800b606 <_vfiprintf_r+0x156>
 800b5d8:	9207      	str	r2, [sp, #28]
 800b5da:	e014      	b.n	800b606 <_vfiprintf_r+0x156>
 800b5dc:	eba0 0308 	sub.w	r3, r0, r8
 800b5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	46a2      	mov	sl, r4
 800b5ea:	e7d2      	b.n	800b592 <_vfiprintf_r+0xe2>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	1d19      	adds	r1, r3, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	9103      	str	r1, [sp, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bfbb      	ittet	lt
 800b5f8:	425b      	neglt	r3, r3
 800b5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b5fe:	9307      	strge	r3, [sp, #28]
 800b600:	9307      	strlt	r3, [sp, #28]
 800b602:	bfb8      	it	lt
 800b604:	9204      	strlt	r2, [sp, #16]
 800b606:	7823      	ldrb	r3, [r4, #0]
 800b608:	2b2e      	cmp	r3, #46	; 0x2e
 800b60a:	d10c      	bne.n	800b626 <_vfiprintf_r+0x176>
 800b60c:	7863      	ldrb	r3, [r4, #1]
 800b60e:	2b2a      	cmp	r3, #42	; 0x2a
 800b610:	d135      	bne.n	800b67e <_vfiprintf_r+0x1ce>
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	1d1a      	adds	r2, r3, #4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	9203      	str	r2, [sp, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfb8      	it	lt
 800b61e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b622:	3402      	adds	r4, #2
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b70c <_vfiprintf_r+0x25c>
 800b62a:	7821      	ldrb	r1, [r4, #0]
 800b62c:	2203      	movs	r2, #3
 800b62e:	4650      	mov	r0, sl
 800b630:	f7f4 fdde 	bl	80001f0 <memchr>
 800b634:	b140      	cbz	r0, 800b648 <_vfiprintf_r+0x198>
 800b636:	2340      	movs	r3, #64	; 0x40
 800b638:	eba0 000a 	sub.w	r0, r0, sl
 800b63c:	fa03 f000 	lsl.w	r0, r3, r0
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	4303      	orrs	r3, r0
 800b644:	3401      	adds	r4, #1
 800b646:	9304      	str	r3, [sp, #16]
 800b648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64c:	482c      	ldr	r0, [pc, #176]	; (800b700 <_vfiprintf_r+0x250>)
 800b64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b652:	2206      	movs	r2, #6
 800b654:	f7f4 fdcc 	bl	80001f0 <memchr>
 800b658:	2800      	cmp	r0, #0
 800b65a:	d03f      	beq.n	800b6dc <_vfiprintf_r+0x22c>
 800b65c:	4b29      	ldr	r3, [pc, #164]	; (800b704 <_vfiprintf_r+0x254>)
 800b65e:	bb1b      	cbnz	r3, 800b6a8 <_vfiprintf_r+0x1f8>
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	3307      	adds	r3, #7
 800b664:	f023 0307 	bic.w	r3, r3, #7
 800b668:	3308      	adds	r3, #8
 800b66a:	9303      	str	r3, [sp, #12]
 800b66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66e:	443b      	add	r3, r7
 800b670:	9309      	str	r3, [sp, #36]	; 0x24
 800b672:	e767      	b.n	800b544 <_vfiprintf_r+0x94>
 800b674:	fb0c 3202 	mla	r2, ip, r2, r3
 800b678:	460c      	mov	r4, r1
 800b67a:	2001      	movs	r0, #1
 800b67c:	e7a5      	b.n	800b5ca <_vfiprintf_r+0x11a>
 800b67e:	2300      	movs	r3, #0
 800b680:	3401      	adds	r4, #1
 800b682:	9305      	str	r3, [sp, #20]
 800b684:	4619      	mov	r1, r3
 800b686:	f04f 0c0a 	mov.w	ip, #10
 800b68a:	4620      	mov	r0, r4
 800b68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b690:	3a30      	subs	r2, #48	; 0x30
 800b692:	2a09      	cmp	r2, #9
 800b694:	d903      	bls.n	800b69e <_vfiprintf_r+0x1ee>
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0c5      	beq.n	800b626 <_vfiprintf_r+0x176>
 800b69a:	9105      	str	r1, [sp, #20]
 800b69c:	e7c3      	b.n	800b626 <_vfiprintf_r+0x176>
 800b69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e7f0      	b.n	800b68a <_vfiprintf_r+0x1da>
 800b6a8:	ab03      	add	r3, sp, #12
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	4b16      	ldr	r3, [pc, #88]	; (800b708 <_vfiprintf_r+0x258>)
 800b6b0:	a904      	add	r1, sp, #16
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f3af 8000 	nop.w
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	1c78      	adds	r0, r7, #1
 800b6bc:	d1d6      	bne.n	800b66c <_vfiprintf_r+0x1bc>
 800b6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c0:	07d9      	lsls	r1, r3, #31
 800b6c2:	d405      	bmi.n	800b6d0 <_vfiprintf_r+0x220>
 800b6c4:	89ab      	ldrh	r3, [r5, #12]
 800b6c6:	059a      	lsls	r2, r3, #22
 800b6c8:	d402      	bmi.n	800b6d0 <_vfiprintf_r+0x220>
 800b6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6cc:	f7ff f9e8 	bl	800aaa0 <__retarget_lock_release_recursive>
 800b6d0:	89ab      	ldrh	r3, [r5, #12]
 800b6d2:	065b      	lsls	r3, r3, #25
 800b6d4:	f53f af12 	bmi.w	800b4fc <_vfiprintf_r+0x4c>
 800b6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6da:	e711      	b.n	800b500 <_vfiprintf_r+0x50>
 800b6dc:	ab03      	add	r3, sp, #12
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	4b09      	ldr	r3, [pc, #36]	; (800b708 <_vfiprintf_r+0x258>)
 800b6e4:	a904      	add	r1, sp, #16
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f000 f880 	bl	800b7ec <_printf_i>
 800b6ec:	e7e4      	b.n	800b6b8 <_vfiprintf_r+0x208>
 800b6ee:	bf00      	nop
 800b6f0:	0800d130 	.word	0x0800d130
 800b6f4:	0800d150 	.word	0x0800d150
 800b6f8:	0800d110 	.word	0x0800d110
 800b6fc:	0800d222 	.word	0x0800d222
 800b700:	0800d22c 	.word	0x0800d22c
 800b704:	00000000 	.word	0x00000000
 800b708:	0800b48b 	.word	0x0800b48b
 800b70c:	0800d228 	.word	0x0800d228

0800b710 <_printf_common>:
 800b710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	4616      	mov	r6, r2
 800b716:	4699      	mov	r9, r3
 800b718:	688a      	ldr	r2, [r1, #8]
 800b71a:	690b      	ldr	r3, [r1, #16]
 800b71c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b720:	4293      	cmp	r3, r2
 800b722:	bfb8      	it	lt
 800b724:	4613      	movlt	r3, r2
 800b726:	6033      	str	r3, [r6, #0]
 800b728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b72c:	4607      	mov	r7, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	b10a      	cbz	r2, 800b736 <_printf_common+0x26>
 800b732:	3301      	adds	r3, #1
 800b734:	6033      	str	r3, [r6, #0]
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	0699      	lsls	r1, r3, #26
 800b73a:	bf42      	ittt	mi
 800b73c:	6833      	ldrmi	r3, [r6, #0]
 800b73e:	3302      	addmi	r3, #2
 800b740:	6033      	strmi	r3, [r6, #0]
 800b742:	6825      	ldr	r5, [r4, #0]
 800b744:	f015 0506 	ands.w	r5, r5, #6
 800b748:	d106      	bne.n	800b758 <_printf_common+0x48>
 800b74a:	f104 0a19 	add.w	sl, r4, #25
 800b74e:	68e3      	ldr	r3, [r4, #12]
 800b750:	6832      	ldr	r2, [r6, #0]
 800b752:	1a9b      	subs	r3, r3, r2
 800b754:	42ab      	cmp	r3, r5
 800b756:	dc26      	bgt.n	800b7a6 <_printf_common+0x96>
 800b758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b75c:	1e13      	subs	r3, r2, #0
 800b75e:	6822      	ldr	r2, [r4, #0]
 800b760:	bf18      	it	ne
 800b762:	2301      	movne	r3, #1
 800b764:	0692      	lsls	r2, r2, #26
 800b766:	d42b      	bmi.n	800b7c0 <_printf_common+0xb0>
 800b768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b76c:	4649      	mov	r1, r9
 800b76e:	4638      	mov	r0, r7
 800b770:	47c0      	blx	r8
 800b772:	3001      	adds	r0, #1
 800b774:	d01e      	beq.n	800b7b4 <_printf_common+0xa4>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	68e5      	ldr	r5, [r4, #12]
 800b77a:	6832      	ldr	r2, [r6, #0]
 800b77c:	f003 0306 	and.w	r3, r3, #6
 800b780:	2b04      	cmp	r3, #4
 800b782:	bf08      	it	eq
 800b784:	1aad      	subeq	r5, r5, r2
 800b786:	68a3      	ldr	r3, [r4, #8]
 800b788:	6922      	ldr	r2, [r4, #16]
 800b78a:	bf0c      	ite	eq
 800b78c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b790:	2500      	movne	r5, #0
 800b792:	4293      	cmp	r3, r2
 800b794:	bfc4      	itt	gt
 800b796:	1a9b      	subgt	r3, r3, r2
 800b798:	18ed      	addgt	r5, r5, r3
 800b79a:	2600      	movs	r6, #0
 800b79c:	341a      	adds	r4, #26
 800b79e:	42b5      	cmp	r5, r6
 800b7a0:	d11a      	bne.n	800b7d8 <_printf_common+0xc8>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e008      	b.n	800b7b8 <_printf_common+0xa8>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	4652      	mov	r2, sl
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	47c0      	blx	r8
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	d103      	bne.n	800b7bc <_printf_common+0xac>
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7bc:	3501      	adds	r5, #1
 800b7be:	e7c6      	b.n	800b74e <_printf_common+0x3e>
 800b7c0:	18e1      	adds	r1, r4, r3
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	2030      	movs	r0, #48	; 0x30
 800b7c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7ca:	4422      	add	r2, r4
 800b7cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7d4:	3302      	adds	r3, #2
 800b7d6:	e7c7      	b.n	800b768 <_printf_common+0x58>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	4622      	mov	r2, r4
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4638      	mov	r0, r7
 800b7e0:	47c0      	blx	r8
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	d0e6      	beq.n	800b7b4 <_printf_common+0xa4>
 800b7e6:	3601      	adds	r6, #1
 800b7e8:	e7d9      	b.n	800b79e <_printf_common+0x8e>
	...

0800b7ec <_printf_i>:
 800b7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f0:	7e0f      	ldrb	r7, [r1, #24]
 800b7f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7f4:	2f78      	cmp	r7, #120	; 0x78
 800b7f6:	4691      	mov	r9, r2
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	469a      	mov	sl, r3
 800b7fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b802:	d807      	bhi.n	800b814 <_printf_i+0x28>
 800b804:	2f62      	cmp	r7, #98	; 0x62
 800b806:	d80a      	bhi.n	800b81e <_printf_i+0x32>
 800b808:	2f00      	cmp	r7, #0
 800b80a:	f000 80d8 	beq.w	800b9be <_printf_i+0x1d2>
 800b80e:	2f58      	cmp	r7, #88	; 0x58
 800b810:	f000 80a3 	beq.w	800b95a <_printf_i+0x16e>
 800b814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b81c:	e03a      	b.n	800b894 <_printf_i+0xa8>
 800b81e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b822:	2b15      	cmp	r3, #21
 800b824:	d8f6      	bhi.n	800b814 <_printf_i+0x28>
 800b826:	a101      	add	r1, pc, #4	; (adr r1, 800b82c <_printf_i+0x40>)
 800b828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b82c:	0800b885 	.word	0x0800b885
 800b830:	0800b899 	.word	0x0800b899
 800b834:	0800b815 	.word	0x0800b815
 800b838:	0800b815 	.word	0x0800b815
 800b83c:	0800b815 	.word	0x0800b815
 800b840:	0800b815 	.word	0x0800b815
 800b844:	0800b899 	.word	0x0800b899
 800b848:	0800b815 	.word	0x0800b815
 800b84c:	0800b815 	.word	0x0800b815
 800b850:	0800b815 	.word	0x0800b815
 800b854:	0800b815 	.word	0x0800b815
 800b858:	0800b9a5 	.word	0x0800b9a5
 800b85c:	0800b8c9 	.word	0x0800b8c9
 800b860:	0800b987 	.word	0x0800b987
 800b864:	0800b815 	.word	0x0800b815
 800b868:	0800b815 	.word	0x0800b815
 800b86c:	0800b9c7 	.word	0x0800b9c7
 800b870:	0800b815 	.word	0x0800b815
 800b874:	0800b8c9 	.word	0x0800b8c9
 800b878:	0800b815 	.word	0x0800b815
 800b87c:	0800b815 	.word	0x0800b815
 800b880:	0800b98f 	.word	0x0800b98f
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	1d1a      	adds	r2, r3, #4
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	602a      	str	r2, [r5, #0]
 800b88c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b894:	2301      	movs	r3, #1
 800b896:	e0a3      	b.n	800b9e0 <_printf_i+0x1f4>
 800b898:	6820      	ldr	r0, [r4, #0]
 800b89a:	6829      	ldr	r1, [r5, #0]
 800b89c:	0606      	lsls	r6, r0, #24
 800b89e:	f101 0304 	add.w	r3, r1, #4
 800b8a2:	d50a      	bpl.n	800b8ba <_printf_i+0xce>
 800b8a4:	680e      	ldr	r6, [r1, #0]
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	2e00      	cmp	r6, #0
 800b8aa:	da03      	bge.n	800b8b4 <_printf_i+0xc8>
 800b8ac:	232d      	movs	r3, #45	; 0x2d
 800b8ae:	4276      	negs	r6, r6
 800b8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8b4:	485e      	ldr	r0, [pc, #376]	; (800ba30 <_printf_i+0x244>)
 800b8b6:	230a      	movs	r3, #10
 800b8b8:	e019      	b.n	800b8ee <_printf_i+0x102>
 800b8ba:	680e      	ldr	r6, [r1, #0]
 800b8bc:	602b      	str	r3, [r5, #0]
 800b8be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8c2:	bf18      	it	ne
 800b8c4:	b236      	sxthne	r6, r6
 800b8c6:	e7ef      	b.n	800b8a8 <_printf_i+0xbc>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	6820      	ldr	r0, [r4, #0]
 800b8cc:	1d19      	adds	r1, r3, #4
 800b8ce:	6029      	str	r1, [r5, #0]
 800b8d0:	0601      	lsls	r1, r0, #24
 800b8d2:	d501      	bpl.n	800b8d8 <_printf_i+0xec>
 800b8d4:	681e      	ldr	r6, [r3, #0]
 800b8d6:	e002      	b.n	800b8de <_printf_i+0xf2>
 800b8d8:	0646      	lsls	r6, r0, #25
 800b8da:	d5fb      	bpl.n	800b8d4 <_printf_i+0xe8>
 800b8dc:	881e      	ldrh	r6, [r3, #0]
 800b8de:	4854      	ldr	r0, [pc, #336]	; (800ba30 <_printf_i+0x244>)
 800b8e0:	2f6f      	cmp	r7, #111	; 0x6f
 800b8e2:	bf0c      	ite	eq
 800b8e4:	2308      	moveq	r3, #8
 800b8e6:	230a      	movne	r3, #10
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8ee:	6865      	ldr	r5, [r4, #4]
 800b8f0:	60a5      	str	r5, [r4, #8]
 800b8f2:	2d00      	cmp	r5, #0
 800b8f4:	bfa2      	ittt	ge
 800b8f6:	6821      	ldrge	r1, [r4, #0]
 800b8f8:	f021 0104 	bicge.w	r1, r1, #4
 800b8fc:	6021      	strge	r1, [r4, #0]
 800b8fe:	b90e      	cbnz	r6, 800b904 <_printf_i+0x118>
 800b900:	2d00      	cmp	r5, #0
 800b902:	d04d      	beq.n	800b9a0 <_printf_i+0x1b4>
 800b904:	4615      	mov	r5, r2
 800b906:	fbb6 f1f3 	udiv	r1, r6, r3
 800b90a:	fb03 6711 	mls	r7, r3, r1, r6
 800b90e:	5dc7      	ldrb	r7, [r0, r7]
 800b910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b914:	4637      	mov	r7, r6
 800b916:	42bb      	cmp	r3, r7
 800b918:	460e      	mov	r6, r1
 800b91a:	d9f4      	bls.n	800b906 <_printf_i+0x11a>
 800b91c:	2b08      	cmp	r3, #8
 800b91e:	d10b      	bne.n	800b938 <_printf_i+0x14c>
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	07de      	lsls	r6, r3, #31
 800b924:	d508      	bpl.n	800b938 <_printf_i+0x14c>
 800b926:	6923      	ldr	r3, [r4, #16]
 800b928:	6861      	ldr	r1, [r4, #4]
 800b92a:	4299      	cmp	r1, r3
 800b92c:	bfde      	ittt	le
 800b92e:	2330      	movle	r3, #48	; 0x30
 800b930:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b934:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b938:	1b52      	subs	r2, r2, r5
 800b93a:	6122      	str	r2, [r4, #16]
 800b93c:	f8cd a000 	str.w	sl, [sp]
 800b940:	464b      	mov	r3, r9
 800b942:	aa03      	add	r2, sp, #12
 800b944:	4621      	mov	r1, r4
 800b946:	4640      	mov	r0, r8
 800b948:	f7ff fee2 	bl	800b710 <_printf_common>
 800b94c:	3001      	adds	r0, #1
 800b94e:	d14c      	bne.n	800b9ea <_printf_i+0x1fe>
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	b004      	add	sp, #16
 800b956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95a:	4835      	ldr	r0, [pc, #212]	; (800ba30 <_printf_i+0x244>)
 800b95c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b960:	6829      	ldr	r1, [r5, #0]
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	f851 6b04 	ldr.w	r6, [r1], #4
 800b968:	6029      	str	r1, [r5, #0]
 800b96a:	061d      	lsls	r5, r3, #24
 800b96c:	d514      	bpl.n	800b998 <_printf_i+0x1ac>
 800b96e:	07df      	lsls	r7, r3, #31
 800b970:	bf44      	itt	mi
 800b972:	f043 0320 	orrmi.w	r3, r3, #32
 800b976:	6023      	strmi	r3, [r4, #0]
 800b978:	b91e      	cbnz	r6, 800b982 <_printf_i+0x196>
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	f023 0320 	bic.w	r3, r3, #32
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	2310      	movs	r3, #16
 800b984:	e7b0      	b.n	800b8e8 <_printf_i+0xfc>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	f043 0320 	orr.w	r3, r3, #32
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	2378      	movs	r3, #120	; 0x78
 800b990:	4828      	ldr	r0, [pc, #160]	; (800ba34 <_printf_i+0x248>)
 800b992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b996:	e7e3      	b.n	800b960 <_printf_i+0x174>
 800b998:	0659      	lsls	r1, r3, #25
 800b99a:	bf48      	it	mi
 800b99c:	b2b6      	uxthmi	r6, r6
 800b99e:	e7e6      	b.n	800b96e <_printf_i+0x182>
 800b9a0:	4615      	mov	r5, r2
 800b9a2:	e7bb      	b.n	800b91c <_printf_i+0x130>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	6826      	ldr	r6, [r4, #0]
 800b9a8:	6961      	ldr	r1, [r4, #20]
 800b9aa:	1d18      	adds	r0, r3, #4
 800b9ac:	6028      	str	r0, [r5, #0]
 800b9ae:	0635      	lsls	r5, r6, #24
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	d501      	bpl.n	800b9b8 <_printf_i+0x1cc>
 800b9b4:	6019      	str	r1, [r3, #0]
 800b9b6:	e002      	b.n	800b9be <_printf_i+0x1d2>
 800b9b8:	0670      	lsls	r0, r6, #25
 800b9ba:	d5fb      	bpl.n	800b9b4 <_printf_i+0x1c8>
 800b9bc:	8019      	strh	r1, [r3, #0]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6123      	str	r3, [r4, #16]
 800b9c2:	4615      	mov	r5, r2
 800b9c4:	e7ba      	b.n	800b93c <_printf_i+0x150>
 800b9c6:	682b      	ldr	r3, [r5, #0]
 800b9c8:	1d1a      	adds	r2, r3, #4
 800b9ca:	602a      	str	r2, [r5, #0]
 800b9cc:	681d      	ldr	r5, [r3, #0]
 800b9ce:	6862      	ldr	r2, [r4, #4]
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f7f4 fc0c 	bl	80001f0 <memchr>
 800b9d8:	b108      	cbz	r0, 800b9de <_printf_i+0x1f2>
 800b9da:	1b40      	subs	r0, r0, r5
 800b9dc:	6060      	str	r0, [r4, #4]
 800b9de:	6863      	ldr	r3, [r4, #4]
 800b9e0:	6123      	str	r3, [r4, #16]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9e8:	e7a8      	b.n	800b93c <_printf_i+0x150>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	462a      	mov	r2, r5
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	4640      	mov	r0, r8
 800b9f2:	47d0      	blx	sl
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	d0ab      	beq.n	800b950 <_printf_i+0x164>
 800b9f8:	6823      	ldr	r3, [r4, #0]
 800b9fa:	079b      	lsls	r3, r3, #30
 800b9fc:	d413      	bmi.n	800ba26 <_printf_i+0x23a>
 800b9fe:	68e0      	ldr	r0, [r4, #12]
 800ba00:	9b03      	ldr	r3, [sp, #12]
 800ba02:	4298      	cmp	r0, r3
 800ba04:	bfb8      	it	lt
 800ba06:	4618      	movlt	r0, r3
 800ba08:	e7a4      	b.n	800b954 <_printf_i+0x168>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	4632      	mov	r2, r6
 800ba0e:	4649      	mov	r1, r9
 800ba10:	4640      	mov	r0, r8
 800ba12:	47d0      	blx	sl
 800ba14:	3001      	adds	r0, #1
 800ba16:	d09b      	beq.n	800b950 <_printf_i+0x164>
 800ba18:	3501      	adds	r5, #1
 800ba1a:	68e3      	ldr	r3, [r4, #12]
 800ba1c:	9903      	ldr	r1, [sp, #12]
 800ba1e:	1a5b      	subs	r3, r3, r1
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	dcf2      	bgt.n	800ba0a <_printf_i+0x21e>
 800ba24:	e7eb      	b.n	800b9fe <_printf_i+0x212>
 800ba26:	2500      	movs	r5, #0
 800ba28:	f104 0619 	add.w	r6, r4, #25
 800ba2c:	e7f5      	b.n	800ba1a <_printf_i+0x22e>
 800ba2e:	bf00      	nop
 800ba30:	0800d233 	.word	0x0800d233
 800ba34:	0800d244 	.word	0x0800d244

0800ba38 <_read_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d07      	ldr	r5, [pc, #28]	; (800ba58 <_read_r+0x20>)
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	4608      	mov	r0, r1
 800ba40:	4611      	mov	r1, r2
 800ba42:	2200      	movs	r2, #0
 800ba44:	602a      	str	r2, [r5, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	f7f7 f930 	bl	8002cac <_read>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_read_r+0x1e>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_read_r+0x1e>
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	20004e78 	.word	0x20004e78

0800ba5c <__swbuf_r>:
 800ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5e:	460e      	mov	r6, r1
 800ba60:	4614      	mov	r4, r2
 800ba62:	4605      	mov	r5, r0
 800ba64:	b118      	cbz	r0, 800ba6e <__swbuf_r+0x12>
 800ba66:	6983      	ldr	r3, [r0, #24]
 800ba68:	b90b      	cbnz	r3, 800ba6e <__swbuf_r+0x12>
 800ba6a:	f7fe ff55 	bl	800a918 <__sinit>
 800ba6e:	4b21      	ldr	r3, [pc, #132]	; (800baf4 <__swbuf_r+0x98>)
 800ba70:	429c      	cmp	r4, r3
 800ba72:	d12b      	bne.n	800bacc <__swbuf_r+0x70>
 800ba74:	686c      	ldr	r4, [r5, #4]
 800ba76:	69a3      	ldr	r3, [r4, #24]
 800ba78:	60a3      	str	r3, [r4, #8]
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	071a      	lsls	r2, r3, #28
 800ba7e:	d52f      	bpl.n	800bae0 <__swbuf_r+0x84>
 800ba80:	6923      	ldr	r3, [r4, #16]
 800ba82:	b36b      	cbz	r3, 800bae0 <__swbuf_r+0x84>
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	6820      	ldr	r0, [r4, #0]
 800ba88:	1ac0      	subs	r0, r0, r3
 800ba8a:	6963      	ldr	r3, [r4, #20]
 800ba8c:	b2f6      	uxtb	r6, r6
 800ba8e:	4283      	cmp	r3, r0
 800ba90:	4637      	mov	r7, r6
 800ba92:	dc04      	bgt.n	800ba9e <__swbuf_r+0x42>
 800ba94:	4621      	mov	r1, r4
 800ba96:	4628      	mov	r0, r5
 800ba98:	f7ff fac4 	bl	800b024 <_fflush_r>
 800ba9c:	bb30      	cbnz	r0, 800baec <__swbuf_r+0x90>
 800ba9e:	68a3      	ldr	r3, [r4, #8]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	60a3      	str	r3, [r4, #8]
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	6022      	str	r2, [r4, #0]
 800baaa:	701e      	strb	r6, [r3, #0]
 800baac:	6963      	ldr	r3, [r4, #20]
 800baae:	3001      	adds	r0, #1
 800bab0:	4283      	cmp	r3, r0
 800bab2:	d004      	beq.n	800babe <__swbuf_r+0x62>
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	07db      	lsls	r3, r3, #31
 800bab8:	d506      	bpl.n	800bac8 <__swbuf_r+0x6c>
 800baba:	2e0a      	cmp	r6, #10
 800babc:	d104      	bne.n	800bac8 <__swbuf_r+0x6c>
 800babe:	4621      	mov	r1, r4
 800bac0:	4628      	mov	r0, r5
 800bac2:	f7ff faaf 	bl	800b024 <_fflush_r>
 800bac6:	b988      	cbnz	r0, 800baec <__swbuf_r+0x90>
 800bac8:	4638      	mov	r0, r7
 800baca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bacc:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <__swbuf_r+0x9c>)
 800bace:	429c      	cmp	r4, r3
 800bad0:	d101      	bne.n	800bad6 <__swbuf_r+0x7a>
 800bad2:	68ac      	ldr	r4, [r5, #8]
 800bad4:	e7cf      	b.n	800ba76 <__swbuf_r+0x1a>
 800bad6:	4b09      	ldr	r3, [pc, #36]	; (800bafc <__swbuf_r+0xa0>)
 800bad8:	429c      	cmp	r4, r3
 800bada:	bf08      	it	eq
 800badc:	68ec      	ldreq	r4, [r5, #12]
 800bade:	e7ca      	b.n	800ba76 <__swbuf_r+0x1a>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4628      	mov	r0, r5
 800bae4:	f000 f80c 	bl	800bb00 <__swsetup_r>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d0cb      	beq.n	800ba84 <__swbuf_r+0x28>
 800baec:	f04f 37ff 	mov.w	r7, #4294967295
 800baf0:	e7ea      	b.n	800bac8 <__swbuf_r+0x6c>
 800baf2:	bf00      	nop
 800baf4:	0800d130 	.word	0x0800d130
 800baf8:	0800d150 	.word	0x0800d150
 800bafc:	0800d110 	.word	0x0800d110

0800bb00 <__swsetup_r>:
 800bb00:	4b32      	ldr	r3, [pc, #200]	; (800bbcc <__swsetup_r+0xcc>)
 800bb02:	b570      	push	{r4, r5, r6, lr}
 800bb04:	681d      	ldr	r5, [r3, #0]
 800bb06:	4606      	mov	r6, r0
 800bb08:	460c      	mov	r4, r1
 800bb0a:	b125      	cbz	r5, 800bb16 <__swsetup_r+0x16>
 800bb0c:	69ab      	ldr	r3, [r5, #24]
 800bb0e:	b913      	cbnz	r3, 800bb16 <__swsetup_r+0x16>
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7fe ff01 	bl	800a918 <__sinit>
 800bb16:	4b2e      	ldr	r3, [pc, #184]	; (800bbd0 <__swsetup_r+0xd0>)
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	d10f      	bne.n	800bb3c <__swsetup_r+0x3c>
 800bb1c:	686c      	ldr	r4, [r5, #4]
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb24:	0719      	lsls	r1, r3, #28
 800bb26:	d42c      	bmi.n	800bb82 <__swsetup_r+0x82>
 800bb28:	06dd      	lsls	r5, r3, #27
 800bb2a:	d411      	bmi.n	800bb50 <__swsetup_r+0x50>
 800bb2c:	2309      	movs	r3, #9
 800bb2e:	6033      	str	r3, [r6, #0]
 800bb30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3a:	e03e      	b.n	800bbba <__swsetup_r+0xba>
 800bb3c:	4b25      	ldr	r3, [pc, #148]	; (800bbd4 <__swsetup_r+0xd4>)
 800bb3e:	429c      	cmp	r4, r3
 800bb40:	d101      	bne.n	800bb46 <__swsetup_r+0x46>
 800bb42:	68ac      	ldr	r4, [r5, #8]
 800bb44:	e7eb      	b.n	800bb1e <__swsetup_r+0x1e>
 800bb46:	4b24      	ldr	r3, [pc, #144]	; (800bbd8 <__swsetup_r+0xd8>)
 800bb48:	429c      	cmp	r4, r3
 800bb4a:	bf08      	it	eq
 800bb4c:	68ec      	ldreq	r4, [r5, #12]
 800bb4e:	e7e6      	b.n	800bb1e <__swsetup_r+0x1e>
 800bb50:	0758      	lsls	r0, r3, #29
 800bb52:	d512      	bpl.n	800bb7a <__swsetup_r+0x7a>
 800bb54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb56:	b141      	cbz	r1, 800bb6a <__swsetup_r+0x6a>
 800bb58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb5c:	4299      	cmp	r1, r3
 800bb5e:	d002      	beq.n	800bb66 <__swsetup_r+0x66>
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7ff fad3 	bl	800b10c <_free_r>
 800bb66:	2300      	movs	r3, #0
 800bb68:	6363      	str	r3, [r4, #52]	; 0x34
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	2300      	movs	r3, #0
 800bb74:	6063      	str	r3, [r4, #4]
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	f043 0308 	orr.w	r3, r3, #8
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	6923      	ldr	r3, [r4, #16]
 800bb84:	b94b      	cbnz	r3, 800bb9a <__swsetup_r+0x9a>
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb90:	d003      	beq.n	800bb9a <__swsetup_r+0x9a>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4630      	mov	r0, r6
 800bb96:	f000 f84d 	bl	800bc34 <__smakebuf_r>
 800bb9a:	89a0      	ldrh	r0, [r4, #12]
 800bb9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bba0:	f010 0301 	ands.w	r3, r0, #1
 800bba4:	d00a      	beq.n	800bbbc <__swsetup_r+0xbc>
 800bba6:	2300      	movs	r3, #0
 800bba8:	60a3      	str	r3, [r4, #8]
 800bbaa:	6963      	ldr	r3, [r4, #20]
 800bbac:	425b      	negs	r3, r3
 800bbae:	61a3      	str	r3, [r4, #24]
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	b943      	cbnz	r3, 800bbc6 <__swsetup_r+0xc6>
 800bbb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbb8:	d1ba      	bne.n	800bb30 <__swsetup_r+0x30>
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	0781      	lsls	r1, r0, #30
 800bbbe:	bf58      	it	pl
 800bbc0:	6963      	ldrpl	r3, [r4, #20]
 800bbc2:	60a3      	str	r3, [r4, #8]
 800bbc4:	e7f4      	b.n	800bbb0 <__swsetup_r+0xb0>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e7f7      	b.n	800bbba <__swsetup_r+0xba>
 800bbca:	bf00      	nop
 800bbcc:	20000010 	.word	0x20000010
 800bbd0:	0800d130 	.word	0x0800d130
 800bbd4:	0800d150 	.word	0x0800d150
 800bbd8:	0800d110 	.word	0x0800d110

0800bbdc <abort>:
 800bbdc:	b508      	push	{r3, lr}
 800bbde:	2006      	movs	r0, #6
 800bbe0:	f000 f8da 	bl	800bd98 <raise>
 800bbe4:	2001      	movs	r0, #1
 800bbe6:	f7f7 f857 	bl	8002c98 <_exit>

0800bbea <__swhatbuf_r>:
 800bbea:	b570      	push	{r4, r5, r6, lr}
 800bbec:	460e      	mov	r6, r1
 800bbee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	b096      	sub	sp, #88	; 0x58
 800bbf6:	4614      	mov	r4, r2
 800bbf8:	461d      	mov	r5, r3
 800bbfa:	da08      	bge.n	800bc0e <__swhatbuf_r+0x24>
 800bbfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	602a      	str	r2, [r5, #0]
 800bc04:	061a      	lsls	r2, r3, #24
 800bc06:	d410      	bmi.n	800bc2a <__swhatbuf_r+0x40>
 800bc08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc0c:	e00e      	b.n	800bc2c <__swhatbuf_r+0x42>
 800bc0e:	466a      	mov	r2, sp
 800bc10:	f000 f8de 	bl	800bdd0 <_fstat_r>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	dbf1      	blt.n	800bbfc <__swhatbuf_r+0x12>
 800bc18:	9a01      	ldr	r2, [sp, #4]
 800bc1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc22:	425a      	negs	r2, r3
 800bc24:	415a      	adcs	r2, r3
 800bc26:	602a      	str	r2, [r5, #0]
 800bc28:	e7ee      	b.n	800bc08 <__swhatbuf_r+0x1e>
 800bc2a:	2340      	movs	r3, #64	; 0x40
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	b016      	add	sp, #88	; 0x58
 800bc32:	bd70      	pop	{r4, r5, r6, pc}

0800bc34 <__smakebuf_r>:
 800bc34:	898b      	ldrh	r3, [r1, #12]
 800bc36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc38:	079d      	lsls	r5, r3, #30
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	d507      	bpl.n	800bc50 <__smakebuf_r+0x1c>
 800bc40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	6123      	str	r3, [r4, #16]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	6163      	str	r3, [r4, #20]
 800bc4c:	b002      	add	sp, #8
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	ab01      	add	r3, sp, #4
 800bc52:	466a      	mov	r2, sp
 800bc54:	f7ff ffc9 	bl	800bbea <__swhatbuf_r>
 800bc58:	9900      	ldr	r1, [sp, #0]
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7fe ff57 	bl	800ab10 <_malloc_r>
 800bc62:	b948      	cbnz	r0, 800bc78 <__smakebuf_r+0x44>
 800bc64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc68:	059a      	lsls	r2, r3, #22
 800bc6a:	d4ef      	bmi.n	800bc4c <__smakebuf_r+0x18>
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	f043 0302 	orr.w	r3, r3, #2
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	e7e3      	b.n	800bc40 <__smakebuf_r+0xc>
 800bc78:	4b0d      	ldr	r3, [pc, #52]	; (800bcb0 <__smakebuf_r+0x7c>)
 800bc7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	6020      	str	r0, [r4, #0]
 800bc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	6163      	str	r3, [r4, #20]
 800bc8a:	9b01      	ldr	r3, [sp, #4]
 800bc8c:	6120      	str	r0, [r4, #16]
 800bc8e:	b15b      	cbz	r3, 800bca8 <__smakebuf_r+0x74>
 800bc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc94:	4630      	mov	r0, r6
 800bc96:	f000 f8ad 	bl	800bdf4 <_isatty_r>
 800bc9a:	b128      	cbz	r0, 800bca8 <__smakebuf_r+0x74>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	f023 0303 	bic.w	r3, r3, #3
 800bca2:	f043 0301 	orr.w	r3, r3, #1
 800bca6:	81a3      	strh	r3, [r4, #12]
 800bca8:	89a0      	ldrh	r0, [r4, #12]
 800bcaa:	4305      	orrs	r5, r0
 800bcac:	81a5      	strh	r5, [r4, #12]
 800bcae:	e7cd      	b.n	800bc4c <__smakebuf_r+0x18>
 800bcb0:	0800a8b1 	.word	0x0800a8b1

0800bcb4 <memmove>:
 800bcb4:	4288      	cmp	r0, r1
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	eb01 0402 	add.w	r4, r1, r2
 800bcbc:	d902      	bls.n	800bcc4 <memmove+0x10>
 800bcbe:	4284      	cmp	r4, r0
 800bcc0:	4623      	mov	r3, r4
 800bcc2:	d807      	bhi.n	800bcd4 <memmove+0x20>
 800bcc4:	1e43      	subs	r3, r0, #1
 800bcc6:	42a1      	cmp	r1, r4
 800bcc8:	d008      	beq.n	800bcdc <memmove+0x28>
 800bcca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcd2:	e7f8      	b.n	800bcc6 <memmove+0x12>
 800bcd4:	4402      	add	r2, r0
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	428a      	cmp	r2, r1
 800bcda:	d100      	bne.n	800bcde <memmove+0x2a>
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bce6:	e7f7      	b.n	800bcd8 <memmove+0x24>

0800bce8 <_realloc_r>:
 800bce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcec:	4680      	mov	r8, r0
 800bcee:	4614      	mov	r4, r2
 800bcf0:	460e      	mov	r6, r1
 800bcf2:	b921      	cbnz	r1, 800bcfe <_realloc_r+0x16>
 800bcf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	f7fe bf09 	b.w	800ab10 <_malloc_r>
 800bcfe:	b92a      	cbnz	r2, 800bd0c <_realloc_r+0x24>
 800bd00:	f7ff fa04 	bl	800b10c <_free_r>
 800bd04:	4625      	mov	r5, r4
 800bd06:	4628      	mov	r0, r5
 800bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0c:	f000 f882 	bl	800be14 <_malloc_usable_size_r>
 800bd10:	4284      	cmp	r4, r0
 800bd12:	4607      	mov	r7, r0
 800bd14:	d802      	bhi.n	800bd1c <_realloc_r+0x34>
 800bd16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd1a:	d812      	bhi.n	800bd42 <_realloc_r+0x5a>
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4640      	mov	r0, r8
 800bd20:	f7fe fef6 	bl	800ab10 <_malloc_r>
 800bd24:	4605      	mov	r5, r0
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d0ed      	beq.n	800bd06 <_realloc_r+0x1e>
 800bd2a:	42bc      	cmp	r4, r7
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	4631      	mov	r1, r6
 800bd30:	bf28      	it	cs
 800bd32:	463a      	movcs	r2, r7
 800bd34:	f7fe feb5 	bl	800aaa2 <memcpy>
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	f7ff f9e6 	bl	800b10c <_free_r>
 800bd40:	e7e1      	b.n	800bd06 <_realloc_r+0x1e>
 800bd42:	4635      	mov	r5, r6
 800bd44:	e7df      	b.n	800bd06 <_realloc_r+0x1e>

0800bd46 <_raise_r>:
 800bd46:	291f      	cmp	r1, #31
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	d904      	bls.n	800bd5a <_raise_r+0x14>
 800bd50:	2316      	movs	r3, #22
 800bd52:	6003      	str	r3, [r0, #0]
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	bd38      	pop	{r3, r4, r5, pc}
 800bd5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd5c:	b112      	cbz	r2, 800bd64 <_raise_r+0x1e>
 800bd5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd62:	b94b      	cbnz	r3, 800bd78 <_raise_r+0x32>
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 f831 	bl	800bdcc <_getpid_r>
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	4620      	mov	r0, r4
 800bd70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd74:	f000 b818 	b.w	800bda8 <_kill_r>
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d00a      	beq.n	800bd92 <_raise_r+0x4c>
 800bd7c:	1c59      	adds	r1, r3, #1
 800bd7e:	d103      	bne.n	800bd88 <_raise_r+0x42>
 800bd80:	2316      	movs	r3, #22
 800bd82:	6003      	str	r3, [r0, #0]
 800bd84:	2001      	movs	r0, #1
 800bd86:	e7e7      	b.n	800bd58 <_raise_r+0x12>
 800bd88:	2400      	movs	r4, #0
 800bd8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd8e:	4628      	mov	r0, r5
 800bd90:	4798      	blx	r3
 800bd92:	2000      	movs	r0, #0
 800bd94:	e7e0      	b.n	800bd58 <_raise_r+0x12>
	...

0800bd98 <raise>:
 800bd98:	4b02      	ldr	r3, [pc, #8]	; (800bda4 <raise+0xc>)
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	f7ff bfd2 	b.w	800bd46 <_raise_r>
 800bda2:	bf00      	nop
 800bda4:	20000010 	.word	0x20000010

0800bda8 <_kill_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d07      	ldr	r5, [pc, #28]	; (800bdc8 <_kill_r+0x20>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	602b      	str	r3, [r5, #0]
 800bdb6:	f7f6 ff5f 	bl	8002c78 <_kill>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d102      	bne.n	800bdc4 <_kill_r+0x1c>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b103      	cbz	r3, 800bdc4 <_kill_r+0x1c>
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	bd38      	pop	{r3, r4, r5, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20004e78 	.word	0x20004e78

0800bdcc <_getpid_r>:
 800bdcc:	f7f6 bf4c 	b.w	8002c68 <_getpid>

0800bdd0 <_fstat_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d07      	ldr	r5, [pc, #28]	; (800bdf0 <_fstat_r+0x20>)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	4611      	mov	r1, r2
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	f7f6 ffaa 	bl	8002d36 <_fstat>
 800bde2:	1c43      	adds	r3, r0, #1
 800bde4:	d102      	bne.n	800bdec <_fstat_r+0x1c>
 800bde6:	682b      	ldr	r3, [r5, #0]
 800bde8:	b103      	cbz	r3, 800bdec <_fstat_r+0x1c>
 800bdea:	6023      	str	r3, [r4, #0]
 800bdec:	bd38      	pop	{r3, r4, r5, pc}
 800bdee:	bf00      	nop
 800bdf0:	20004e78 	.word	0x20004e78

0800bdf4 <_isatty_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d06      	ldr	r5, [pc, #24]	; (800be10 <_isatty_r+0x1c>)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	602b      	str	r3, [r5, #0]
 800be00:	f7f6 ffa9 	bl	8002d56 <_isatty>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	d102      	bne.n	800be0e <_isatty_r+0x1a>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	b103      	cbz	r3, 800be0e <_isatty_r+0x1a>
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	20004e78 	.word	0x20004e78

0800be14 <_malloc_usable_size_r>:
 800be14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be18:	1f18      	subs	r0, r3, #4
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	bfbc      	itt	lt
 800be1e:	580b      	ldrlt	r3, [r1, r0]
 800be20:	18c0      	addlt	r0, r0, r3
 800be22:	4770      	bx	lr
 800be24:	0000      	movs	r0, r0
	...

0800be28 <sin>:
 800be28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be2a:	ec53 2b10 	vmov	r2, r3, d0
 800be2e:	4828      	ldr	r0, [pc, #160]	; (800bed0 <sin+0xa8>)
 800be30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be34:	4281      	cmp	r1, r0
 800be36:	dc07      	bgt.n	800be48 <sin+0x20>
 800be38:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800bec8 <sin+0xa0>
 800be3c:	2000      	movs	r0, #0
 800be3e:	b005      	add	sp, #20
 800be40:	f85d eb04 	ldr.w	lr, [sp], #4
 800be44:	f000 be6c 	b.w	800cb20 <__kernel_sin>
 800be48:	4822      	ldr	r0, [pc, #136]	; (800bed4 <sin+0xac>)
 800be4a:	4281      	cmp	r1, r0
 800be4c:	dd09      	ble.n	800be62 <sin+0x3a>
 800be4e:	ee10 0a10 	vmov	r0, s0
 800be52:	4619      	mov	r1, r3
 800be54:	f7f4 fa20 	bl	8000298 <__aeabi_dsub>
 800be58:	ec41 0b10 	vmov	d0, r0, r1
 800be5c:	b005      	add	sp, #20
 800be5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800be62:	4668      	mov	r0, sp
 800be64:	f000 f838 	bl	800bed8 <__ieee754_rem_pio2>
 800be68:	f000 0003 	and.w	r0, r0, #3
 800be6c:	2801      	cmp	r0, #1
 800be6e:	d00c      	beq.n	800be8a <sin+0x62>
 800be70:	2802      	cmp	r0, #2
 800be72:	d011      	beq.n	800be98 <sin+0x70>
 800be74:	b9f0      	cbnz	r0, 800beb4 <sin+0x8c>
 800be76:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be7a:	ed9d 0b00 	vldr	d0, [sp]
 800be7e:	2001      	movs	r0, #1
 800be80:	f000 fe4e 	bl	800cb20 <__kernel_sin>
 800be84:	ec51 0b10 	vmov	r0, r1, d0
 800be88:	e7e6      	b.n	800be58 <sin+0x30>
 800be8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be8e:	ed9d 0b00 	vldr	d0, [sp]
 800be92:	f000 fa2d 	bl	800c2f0 <__kernel_cos>
 800be96:	e7f5      	b.n	800be84 <sin+0x5c>
 800be98:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be9c:	ed9d 0b00 	vldr	d0, [sp]
 800bea0:	2001      	movs	r0, #1
 800bea2:	f000 fe3d 	bl	800cb20 <__kernel_sin>
 800bea6:	ec53 2b10 	vmov	r2, r3, d0
 800beaa:	ee10 0a10 	vmov	r0, s0
 800beae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800beb2:	e7d1      	b.n	800be58 <sin+0x30>
 800beb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800beb8:	ed9d 0b00 	vldr	d0, [sp]
 800bebc:	f000 fa18 	bl	800c2f0 <__kernel_cos>
 800bec0:	e7f1      	b.n	800bea6 <sin+0x7e>
 800bec2:	bf00      	nop
 800bec4:	f3af 8000 	nop.w
	...
 800bed0:	3fe921fb 	.word	0x3fe921fb
 800bed4:	7fefffff 	.word	0x7fefffff

0800bed8 <__ieee754_rem_pio2>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	ed2d 8b02 	vpush	{d8}
 800bee0:	ec55 4b10 	vmov	r4, r5, d0
 800bee4:	4bca      	ldr	r3, [pc, #808]	; (800c210 <__ieee754_rem_pio2+0x338>)
 800bee6:	b08b      	sub	sp, #44	; 0x2c
 800bee8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800beec:	4598      	cmp	r8, r3
 800beee:	4682      	mov	sl, r0
 800bef0:	9502      	str	r5, [sp, #8]
 800bef2:	dc08      	bgt.n	800bf06 <__ieee754_rem_pio2+0x2e>
 800bef4:	2200      	movs	r2, #0
 800bef6:	2300      	movs	r3, #0
 800bef8:	ed80 0b00 	vstr	d0, [r0]
 800befc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bf00:	f04f 0b00 	mov.w	fp, #0
 800bf04:	e028      	b.n	800bf58 <__ieee754_rem_pio2+0x80>
 800bf06:	4bc3      	ldr	r3, [pc, #780]	; (800c214 <__ieee754_rem_pio2+0x33c>)
 800bf08:	4598      	cmp	r8, r3
 800bf0a:	dc78      	bgt.n	800bffe <__ieee754_rem_pio2+0x126>
 800bf0c:	9b02      	ldr	r3, [sp, #8]
 800bf0e:	4ec2      	ldr	r6, [pc, #776]	; (800c218 <__ieee754_rem_pio2+0x340>)
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	ee10 0a10 	vmov	r0, s0
 800bf16:	a3b0      	add	r3, pc, #704	; (adr r3, 800c1d8 <__ieee754_rem_pio2+0x300>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	dd39      	ble.n	800bf94 <__ieee754_rem_pio2+0xbc>
 800bf20:	f7f4 f9ba 	bl	8000298 <__aeabi_dsub>
 800bf24:	45b0      	cmp	r8, r6
 800bf26:	4604      	mov	r4, r0
 800bf28:	460d      	mov	r5, r1
 800bf2a:	d01b      	beq.n	800bf64 <__ieee754_rem_pio2+0x8c>
 800bf2c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c1e0 <__ieee754_rem_pio2+0x308>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f7f4 f9b1 	bl	8000298 <__aeabi_dsub>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	e9ca 2300 	strd	r2, r3, [sl]
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 f9a9 	bl	8000298 <__aeabi_dsub>
 800bf46:	a3a6      	add	r3, pc, #664	; (adr r3, 800c1e0 <__ieee754_rem_pio2+0x308>)
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	f7f4 f9a4 	bl	8000298 <__aeabi_dsub>
 800bf50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf54:	f04f 0b01 	mov.w	fp, #1
 800bf58:	4658      	mov	r0, fp
 800bf5a:	b00b      	add	sp, #44	; 0x2c
 800bf5c:	ecbd 8b02 	vpop	{d8}
 800bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf64:	a3a0      	add	r3, pc, #640	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x310>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	f7f4 f995 	bl	8000298 <__aeabi_dsub>
 800bf6e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x318>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	4604      	mov	r4, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	f7f4 f98e 	bl	8000298 <__aeabi_dsub>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	e9ca 2300 	strd	r2, r3, [sl]
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 f986 	bl	8000298 <__aeabi_dsub>
 800bf8c:	a398      	add	r3, pc, #608	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x318>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	e7db      	b.n	800bf4c <__ieee754_rem_pio2+0x74>
 800bf94:	f7f4 f982 	bl	800029c <__adddf3>
 800bf98:	45b0      	cmp	r8, r6
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	d016      	beq.n	800bfce <__ieee754_rem_pio2+0xf6>
 800bfa0:	a38f      	add	r3, pc, #572	; (adr r3, 800c1e0 <__ieee754_rem_pio2+0x308>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 f979 	bl	800029c <__adddf3>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	e9ca 2300 	strd	r2, r3, [sl]
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	f7f4 f96f 	bl	8000298 <__aeabi_dsub>
 800bfba:	a389      	add	r3, pc, #548	; (adr r3, 800c1e0 <__ieee754_rem_pio2+0x308>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	f7f4 f96c 	bl	800029c <__adddf3>
 800bfc4:	f04f 3bff 	mov.w	fp, #4294967295
 800bfc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bfcc:	e7c4      	b.n	800bf58 <__ieee754_rem_pio2+0x80>
 800bfce:	a386      	add	r3, pc, #536	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x310>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	f7f4 f962 	bl	800029c <__adddf3>
 800bfd8:	a385      	add	r3, pc, #532	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x318>)
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	4604      	mov	r4, r0
 800bfe0:	460d      	mov	r5, r1
 800bfe2:	f7f4 f95b 	bl	800029c <__adddf3>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	e9ca 2300 	strd	r2, r3, [sl]
 800bfee:	4620      	mov	r0, r4
 800bff0:	4629      	mov	r1, r5
 800bff2:	f7f4 f951 	bl	8000298 <__aeabi_dsub>
 800bff6:	a37e      	add	r3, pc, #504	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x318>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	e7e0      	b.n	800bfc0 <__ieee754_rem_pio2+0xe8>
 800bffe:	4b87      	ldr	r3, [pc, #540]	; (800c21c <__ieee754_rem_pio2+0x344>)
 800c000:	4598      	cmp	r8, r3
 800c002:	f300 80d9 	bgt.w	800c1b8 <__ieee754_rem_pio2+0x2e0>
 800c006:	f000 fe49 	bl	800cc9c <fabs>
 800c00a:	ec55 4b10 	vmov	r4, r5, d0
 800c00e:	ee10 0a10 	vmov	r0, s0
 800c012:	a379      	add	r3, pc, #484	; (adr r3, 800c1f8 <__ieee754_rem_pio2+0x320>)
 800c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c018:	4629      	mov	r1, r5
 800c01a:	f7f4 faf5 	bl	8000608 <__aeabi_dmul>
 800c01e:	4b80      	ldr	r3, [pc, #512]	; (800c220 <__ieee754_rem_pio2+0x348>)
 800c020:	2200      	movs	r2, #0
 800c022:	f7f4 f93b 	bl	800029c <__adddf3>
 800c026:	f7f4 fd89 	bl	8000b3c <__aeabi_d2iz>
 800c02a:	4683      	mov	fp, r0
 800c02c:	f7f4 fa82 	bl	8000534 <__aeabi_i2d>
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	ec43 2b18 	vmov	d8, r2, r3
 800c038:	a367      	add	r3, pc, #412	; (adr r3, 800c1d8 <__ieee754_rem_pio2+0x300>)
 800c03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03e:	f7f4 fae3 	bl	8000608 <__aeabi_dmul>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4620      	mov	r0, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	f7f4 f925 	bl	8000298 <__aeabi_dsub>
 800c04e:	a364      	add	r3, pc, #400	; (adr r3, 800c1e0 <__ieee754_rem_pio2+0x308>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	4606      	mov	r6, r0
 800c056:	460f      	mov	r7, r1
 800c058:	ec51 0b18 	vmov	r0, r1, d8
 800c05c:	f7f4 fad4 	bl	8000608 <__aeabi_dmul>
 800c060:	f1bb 0f1f 	cmp.w	fp, #31
 800c064:	4604      	mov	r4, r0
 800c066:	460d      	mov	r5, r1
 800c068:	dc0d      	bgt.n	800c086 <__ieee754_rem_pio2+0x1ae>
 800c06a:	4b6e      	ldr	r3, [pc, #440]	; (800c224 <__ieee754_rem_pio2+0x34c>)
 800c06c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c074:	4543      	cmp	r3, r8
 800c076:	d006      	beq.n	800c086 <__ieee754_rem_pio2+0x1ae>
 800c078:	4622      	mov	r2, r4
 800c07a:	462b      	mov	r3, r5
 800c07c:	4630      	mov	r0, r6
 800c07e:	4639      	mov	r1, r7
 800c080:	f7f4 f90a 	bl	8000298 <__aeabi_dsub>
 800c084:	e00f      	b.n	800c0a6 <__ieee754_rem_pio2+0x1ce>
 800c086:	462b      	mov	r3, r5
 800c088:	4622      	mov	r2, r4
 800c08a:	4630      	mov	r0, r6
 800c08c:	4639      	mov	r1, r7
 800c08e:	f7f4 f903 	bl	8000298 <__aeabi_dsub>
 800c092:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c096:	9303      	str	r3, [sp, #12]
 800c098:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c09c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c0a0:	f1b8 0f10 	cmp.w	r8, #16
 800c0a4:	dc02      	bgt.n	800c0ac <__ieee754_rem_pio2+0x1d4>
 800c0a6:	e9ca 0100 	strd	r0, r1, [sl]
 800c0aa:	e039      	b.n	800c120 <__ieee754_rem_pio2+0x248>
 800c0ac:	a34e      	add	r3, pc, #312	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x310>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	ec51 0b18 	vmov	r0, r1, d8
 800c0b6:	f7f4 faa7 	bl	8000608 <__aeabi_dmul>
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	460d      	mov	r5, r1
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	f7f4 f8e7 	bl	8000298 <__aeabi_dsub>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4680      	mov	r8, r0
 800c0d0:	4689      	mov	r9, r1
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	f7f4 f8df 	bl	8000298 <__aeabi_dsub>
 800c0da:	4622      	mov	r2, r4
 800c0dc:	462b      	mov	r3, r5
 800c0de:	f7f4 f8db 	bl	8000298 <__aeabi_dsub>
 800c0e2:	a343      	add	r3, pc, #268	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x318>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	ec51 0b18 	vmov	r0, r1, d8
 800c0f0:	f7f4 fa8a 	bl	8000608 <__aeabi_dmul>
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	462b      	mov	r3, r5
 800c0f8:	f7f4 f8ce 	bl	8000298 <__aeabi_dsub>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4604      	mov	r4, r0
 800c102:	460d      	mov	r5, r1
 800c104:	4640      	mov	r0, r8
 800c106:	4649      	mov	r1, r9
 800c108:	f7f4 f8c6 	bl	8000298 <__aeabi_dsub>
 800c10c:	9a03      	ldr	r2, [sp, #12]
 800c10e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	2b31      	cmp	r3, #49	; 0x31
 800c116:	dc24      	bgt.n	800c162 <__ieee754_rem_pio2+0x28a>
 800c118:	e9ca 0100 	strd	r0, r1, [sl]
 800c11c:	4646      	mov	r6, r8
 800c11e:	464f      	mov	r7, r9
 800c120:	e9da 8900 	ldrd	r8, r9, [sl]
 800c124:	4630      	mov	r0, r6
 800c126:	4642      	mov	r2, r8
 800c128:	464b      	mov	r3, r9
 800c12a:	4639      	mov	r1, r7
 800c12c:	f7f4 f8b4 	bl	8000298 <__aeabi_dsub>
 800c130:	462b      	mov	r3, r5
 800c132:	4622      	mov	r2, r4
 800c134:	f7f4 f8b0 	bl	8000298 <__aeabi_dsub>
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c140:	f6bf af0a 	bge.w	800bf58 <__ieee754_rem_pio2+0x80>
 800c144:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c148:	f8ca 3004 	str.w	r3, [sl, #4]
 800c14c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c150:	f8ca 8000 	str.w	r8, [sl]
 800c154:	f8ca 0008 	str.w	r0, [sl, #8]
 800c158:	f8ca 300c 	str.w	r3, [sl, #12]
 800c15c:	f1cb 0b00 	rsb	fp, fp, #0
 800c160:	e6fa      	b.n	800bf58 <__ieee754_rem_pio2+0x80>
 800c162:	a327      	add	r3, pc, #156	; (adr r3, 800c200 <__ieee754_rem_pio2+0x328>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	ec51 0b18 	vmov	r0, r1, d8
 800c16c:	f7f4 fa4c 	bl	8000608 <__aeabi_dmul>
 800c170:	4604      	mov	r4, r0
 800c172:	460d      	mov	r5, r1
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4640      	mov	r0, r8
 800c17a:	4649      	mov	r1, r9
 800c17c:	f7f4 f88c 	bl	8000298 <__aeabi_dsub>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4606      	mov	r6, r0
 800c186:	460f      	mov	r7, r1
 800c188:	4640      	mov	r0, r8
 800c18a:	4649      	mov	r1, r9
 800c18c:	f7f4 f884 	bl	8000298 <__aeabi_dsub>
 800c190:	4622      	mov	r2, r4
 800c192:	462b      	mov	r3, r5
 800c194:	f7f4 f880 	bl	8000298 <__aeabi_dsub>
 800c198:	a31b      	add	r3, pc, #108	; (adr r3, 800c208 <__ieee754_rem_pio2+0x330>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	4604      	mov	r4, r0
 800c1a0:	460d      	mov	r5, r1
 800c1a2:	ec51 0b18 	vmov	r0, r1, d8
 800c1a6:	f7f4 fa2f 	bl	8000608 <__aeabi_dmul>
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	f7f4 f873 	bl	8000298 <__aeabi_dsub>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	e75f      	b.n	800c078 <__ieee754_rem_pio2+0x1a0>
 800c1b8:	4b1b      	ldr	r3, [pc, #108]	; (800c228 <__ieee754_rem_pio2+0x350>)
 800c1ba:	4598      	cmp	r8, r3
 800c1bc:	dd36      	ble.n	800c22c <__ieee754_rem_pio2+0x354>
 800c1be:	ee10 2a10 	vmov	r2, s0
 800c1c2:	462b      	mov	r3, r5
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	f7f4 f866 	bl	8000298 <__aeabi_dsub>
 800c1cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c1d0:	e9ca 0100 	strd	r0, r1, [sl]
 800c1d4:	e694      	b.n	800bf00 <__ieee754_rem_pio2+0x28>
 800c1d6:	bf00      	nop
 800c1d8:	54400000 	.word	0x54400000
 800c1dc:	3ff921fb 	.word	0x3ff921fb
 800c1e0:	1a626331 	.word	0x1a626331
 800c1e4:	3dd0b461 	.word	0x3dd0b461
 800c1e8:	1a600000 	.word	0x1a600000
 800c1ec:	3dd0b461 	.word	0x3dd0b461
 800c1f0:	2e037073 	.word	0x2e037073
 800c1f4:	3ba3198a 	.word	0x3ba3198a
 800c1f8:	6dc9c883 	.word	0x6dc9c883
 800c1fc:	3fe45f30 	.word	0x3fe45f30
 800c200:	2e000000 	.word	0x2e000000
 800c204:	3ba3198a 	.word	0x3ba3198a
 800c208:	252049c1 	.word	0x252049c1
 800c20c:	397b839a 	.word	0x397b839a
 800c210:	3fe921fb 	.word	0x3fe921fb
 800c214:	4002d97b 	.word	0x4002d97b
 800c218:	3ff921fb 	.word	0x3ff921fb
 800c21c:	413921fb 	.word	0x413921fb
 800c220:	3fe00000 	.word	0x3fe00000
 800c224:	0800d258 	.word	0x0800d258
 800c228:	7fefffff 	.word	0x7fefffff
 800c22c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c230:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c234:	ee10 0a10 	vmov	r0, s0
 800c238:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c23c:	ee10 6a10 	vmov	r6, s0
 800c240:	460f      	mov	r7, r1
 800c242:	f7f4 fc7b 	bl	8000b3c <__aeabi_d2iz>
 800c246:	f7f4 f975 	bl	8000534 <__aeabi_i2d>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4630      	mov	r0, r6
 800c250:	4639      	mov	r1, r7
 800c252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c256:	f7f4 f81f 	bl	8000298 <__aeabi_dsub>
 800c25a:	4b23      	ldr	r3, [pc, #140]	; (800c2e8 <__ieee754_rem_pio2+0x410>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	f7f4 f9d3 	bl	8000608 <__aeabi_dmul>
 800c262:	460f      	mov	r7, r1
 800c264:	4606      	mov	r6, r0
 800c266:	f7f4 fc69 	bl	8000b3c <__aeabi_d2iz>
 800c26a:	f7f4 f963 	bl	8000534 <__aeabi_i2d>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	4630      	mov	r0, r6
 800c274:	4639      	mov	r1, r7
 800c276:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c27a:	f7f4 f80d 	bl	8000298 <__aeabi_dsub>
 800c27e:	4b1a      	ldr	r3, [pc, #104]	; (800c2e8 <__ieee754_rem_pio2+0x410>)
 800c280:	2200      	movs	r2, #0
 800c282:	f7f4 f9c1 	bl	8000608 <__aeabi_dmul>
 800c286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c28a:	ad04      	add	r5, sp, #16
 800c28c:	f04f 0803 	mov.w	r8, #3
 800c290:	46a9      	mov	r9, r5
 800c292:	2600      	movs	r6, #0
 800c294:	2700      	movs	r7, #0
 800c296:	4632      	mov	r2, r6
 800c298:	463b      	mov	r3, r7
 800c29a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c29e:	46c3      	mov	fp, r8
 800c2a0:	3d08      	subs	r5, #8
 800c2a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2a6:	f7f4 fc17 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d1f3      	bne.n	800c296 <__ieee754_rem_pio2+0x3be>
 800c2ae:	4b0f      	ldr	r3, [pc, #60]	; (800c2ec <__ieee754_rem_pio2+0x414>)
 800c2b0:	9301      	str	r3, [sp, #4]
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	465b      	mov	r3, fp
 800c2ba:	4651      	mov	r1, sl
 800c2bc:	4648      	mov	r0, r9
 800c2be:	f000 f8df 	bl	800c480 <__kernel_rem_pio2>
 800c2c2:	9b02      	ldr	r3, [sp, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	4683      	mov	fp, r0
 800c2c8:	f6bf ae46 	bge.w	800bf58 <__ieee754_rem_pio2+0x80>
 800c2cc:	e9da 2100 	ldrd	r2, r1, [sl]
 800c2d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2d4:	e9ca 2300 	strd	r2, r3, [sl]
 800c2d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c2dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c2e4:	e73a      	b.n	800c15c <__ieee754_rem_pio2+0x284>
 800c2e6:	bf00      	nop
 800c2e8:	41700000 	.word	0x41700000
 800c2ec:	0800d2d8 	.word	0x0800d2d8

0800c2f0 <__kernel_cos>:
 800c2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	ec57 6b10 	vmov	r6, r7, d0
 800c2f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c2fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c300:	ed8d 1b00 	vstr	d1, [sp]
 800c304:	da07      	bge.n	800c316 <__kernel_cos+0x26>
 800c306:	ee10 0a10 	vmov	r0, s0
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f4 fc16 	bl	8000b3c <__aeabi_d2iz>
 800c310:	2800      	cmp	r0, #0
 800c312:	f000 8088 	beq.w	800c426 <__kernel_cos+0x136>
 800c316:	4632      	mov	r2, r6
 800c318:	463b      	mov	r3, r7
 800c31a:	4630      	mov	r0, r6
 800c31c:	4639      	mov	r1, r7
 800c31e:	f7f4 f973 	bl	8000608 <__aeabi_dmul>
 800c322:	4b51      	ldr	r3, [pc, #324]	; (800c468 <__kernel_cos+0x178>)
 800c324:	2200      	movs	r2, #0
 800c326:	4604      	mov	r4, r0
 800c328:	460d      	mov	r5, r1
 800c32a:	f7f4 f96d 	bl	8000608 <__aeabi_dmul>
 800c32e:	a340      	add	r3, pc, #256	; (adr r3, 800c430 <__kernel_cos+0x140>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	4682      	mov	sl, r0
 800c336:	468b      	mov	fp, r1
 800c338:	4620      	mov	r0, r4
 800c33a:	4629      	mov	r1, r5
 800c33c:	f7f4 f964 	bl	8000608 <__aeabi_dmul>
 800c340:	a33d      	add	r3, pc, #244	; (adr r3, 800c438 <__kernel_cos+0x148>)
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	f7f3 ffa9 	bl	800029c <__adddf3>
 800c34a:	4622      	mov	r2, r4
 800c34c:	462b      	mov	r3, r5
 800c34e:	f7f4 f95b 	bl	8000608 <__aeabi_dmul>
 800c352:	a33b      	add	r3, pc, #236	; (adr r3, 800c440 <__kernel_cos+0x150>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ff9e 	bl	8000298 <__aeabi_dsub>
 800c35c:	4622      	mov	r2, r4
 800c35e:	462b      	mov	r3, r5
 800c360:	f7f4 f952 	bl	8000608 <__aeabi_dmul>
 800c364:	a338      	add	r3, pc, #224	; (adr r3, 800c448 <__kernel_cos+0x158>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f3 ff97 	bl	800029c <__adddf3>
 800c36e:	4622      	mov	r2, r4
 800c370:	462b      	mov	r3, r5
 800c372:	f7f4 f949 	bl	8000608 <__aeabi_dmul>
 800c376:	a336      	add	r3, pc, #216	; (adr r3, 800c450 <__kernel_cos+0x160>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	f7f3 ff8c 	bl	8000298 <__aeabi_dsub>
 800c380:	4622      	mov	r2, r4
 800c382:	462b      	mov	r3, r5
 800c384:	f7f4 f940 	bl	8000608 <__aeabi_dmul>
 800c388:	a333      	add	r3, pc, #204	; (adr r3, 800c458 <__kernel_cos+0x168>)
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	f7f3 ff85 	bl	800029c <__adddf3>
 800c392:	4622      	mov	r2, r4
 800c394:	462b      	mov	r3, r5
 800c396:	f7f4 f937 	bl	8000608 <__aeabi_dmul>
 800c39a:	4622      	mov	r2, r4
 800c39c:	462b      	mov	r3, r5
 800c39e:	f7f4 f933 	bl	8000608 <__aeabi_dmul>
 800c3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	460d      	mov	r5, r1
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	f7f4 f92b 	bl	8000608 <__aeabi_dmul>
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f7f3 ff6d 	bl	8000298 <__aeabi_dsub>
 800c3be:	4b2b      	ldr	r3, [pc, #172]	; (800c46c <__kernel_cos+0x17c>)
 800c3c0:	4598      	cmp	r8, r3
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	dc10      	bgt.n	800c3ea <__kernel_cos+0xfa>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4650      	mov	r0, sl
 800c3ce:	4659      	mov	r1, fp
 800c3d0:	f7f3 ff62 	bl	8000298 <__aeabi_dsub>
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4926      	ldr	r1, [pc, #152]	; (800c470 <__kernel_cos+0x180>)
 800c3d8:	4602      	mov	r2, r0
 800c3da:	2000      	movs	r0, #0
 800c3dc:	f7f3 ff5c 	bl	8000298 <__aeabi_dsub>
 800c3e0:	ec41 0b10 	vmov	d0, r0, r1
 800c3e4:	b003      	add	sp, #12
 800c3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ea:	4b22      	ldr	r3, [pc, #136]	; (800c474 <__kernel_cos+0x184>)
 800c3ec:	4920      	ldr	r1, [pc, #128]	; (800c470 <__kernel_cos+0x180>)
 800c3ee:	4598      	cmp	r8, r3
 800c3f0:	bfcc      	ite	gt
 800c3f2:	4d21      	ldrgt	r5, [pc, #132]	; (800c478 <__kernel_cos+0x188>)
 800c3f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c3f8:	2400      	movs	r4, #0
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	462b      	mov	r3, r5
 800c3fe:	2000      	movs	r0, #0
 800c400:	f7f3 ff4a 	bl	8000298 <__aeabi_dsub>
 800c404:	4622      	mov	r2, r4
 800c406:	4680      	mov	r8, r0
 800c408:	4689      	mov	r9, r1
 800c40a:	462b      	mov	r3, r5
 800c40c:	4650      	mov	r0, sl
 800c40e:	4659      	mov	r1, fp
 800c410:	f7f3 ff42 	bl	8000298 <__aeabi_dsub>
 800c414:	4632      	mov	r2, r6
 800c416:	463b      	mov	r3, r7
 800c418:	f7f3 ff3e 	bl	8000298 <__aeabi_dsub>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	4640      	mov	r0, r8
 800c422:	4649      	mov	r1, r9
 800c424:	e7da      	b.n	800c3dc <__kernel_cos+0xec>
 800c426:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c460 <__kernel_cos+0x170>
 800c42a:	e7db      	b.n	800c3e4 <__kernel_cos+0xf4>
 800c42c:	f3af 8000 	nop.w
 800c430:	be8838d4 	.word	0xbe8838d4
 800c434:	bda8fae9 	.word	0xbda8fae9
 800c438:	bdb4b1c4 	.word	0xbdb4b1c4
 800c43c:	3e21ee9e 	.word	0x3e21ee9e
 800c440:	809c52ad 	.word	0x809c52ad
 800c444:	3e927e4f 	.word	0x3e927e4f
 800c448:	19cb1590 	.word	0x19cb1590
 800c44c:	3efa01a0 	.word	0x3efa01a0
 800c450:	16c15177 	.word	0x16c15177
 800c454:	3f56c16c 	.word	0x3f56c16c
 800c458:	5555554c 	.word	0x5555554c
 800c45c:	3fa55555 	.word	0x3fa55555
 800c460:	00000000 	.word	0x00000000
 800c464:	3ff00000 	.word	0x3ff00000
 800c468:	3fe00000 	.word	0x3fe00000
 800c46c:	3fd33332 	.word	0x3fd33332
 800c470:	3ff00000 	.word	0x3ff00000
 800c474:	3fe90000 	.word	0x3fe90000
 800c478:	3fd20000 	.word	0x3fd20000
 800c47c:	00000000 	.word	0x00000000

0800c480 <__kernel_rem_pio2>:
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	ed2d 8b02 	vpush	{d8}
 800c488:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c48c:	f112 0f14 	cmn.w	r2, #20
 800c490:	9308      	str	r3, [sp, #32]
 800c492:	9101      	str	r1, [sp, #4]
 800c494:	4bc4      	ldr	r3, [pc, #784]	; (800c7a8 <__kernel_rem_pio2+0x328>)
 800c496:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c498:	900b      	str	r0, [sp, #44]	; 0x2c
 800c49a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c49e:	9302      	str	r3, [sp, #8]
 800c4a0:	9b08      	ldr	r3, [sp, #32]
 800c4a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4a6:	bfa8      	it	ge
 800c4a8:	1ed4      	subge	r4, r2, #3
 800c4aa:	9306      	str	r3, [sp, #24]
 800c4ac:	bfb2      	itee	lt
 800c4ae:	2400      	movlt	r4, #0
 800c4b0:	2318      	movge	r3, #24
 800c4b2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c4b6:	f06f 0317 	mvn.w	r3, #23
 800c4ba:	fb04 3303 	mla	r3, r4, r3, r3
 800c4be:	eb03 0a02 	add.w	sl, r3, r2
 800c4c2:	9b02      	ldr	r3, [sp, #8]
 800c4c4:	9a06      	ldr	r2, [sp, #24]
 800c4c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c798 <__kernel_rem_pio2+0x318>
 800c4ca:	eb03 0802 	add.w	r8, r3, r2
 800c4ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c4d0:	1aa7      	subs	r7, r4, r2
 800c4d2:	ae22      	add	r6, sp, #136	; 0x88
 800c4d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c4d8:	2500      	movs	r5, #0
 800c4da:	4545      	cmp	r5, r8
 800c4dc:	dd13      	ble.n	800c506 <__kernel_rem_pio2+0x86>
 800c4de:	9b08      	ldr	r3, [sp, #32]
 800c4e0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c798 <__kernel_rem_pio2+0x318>
 800c4e4:	aa22      	add	r2, sp, #136	; 0x88
 800c4e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c4ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c4ee:	f04f 0800 	mov.w	r8, #0
 800c4f2:	9b02      	ldr	r3, [sp, #8]
 800c4f4:	4598      	cmp	r8, r3
 800c4f6:	dc2f      	bgt.n	800c558 <__kernel_rem_pio2+0xd8>
 800c4f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c4fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c500:	462f      	mov	r7, r5
 800c502:	2600      	movs	r6, #0
 800c504:	e01b      	b.n	800c53e <__kernel_rem_pio2+0xbe>
 800c506:	42ef      	cmn	r7, r5
 800c508:	d407      	bmi.n	800c51a <__kernel_rem_pio2+0x9a>
 800c50a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c50e:	f7f4 f811 	bl	8000534 <__aeabi_i2d>
 800c512:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c516:	3501      	adds	r5, #1
 800c518:	e7df      	b.n	800c4da <__kernel_rem_pio2+0x5a>
 800c51a:	ec51 0b18 	vmov	r0, r1, d8
 800c51e:	e7f8      	b.n	800c512 <__kernel_rem_pio2+0x92>
 800c520:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c524:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c528:	f7f4 f86e 	bl	8000608 <__aeabi_dmul>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c534:	f7f3 feb2 	bl	800029c <__adddf3>
 800c538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c53c:	3601      	adds	r6, #1
 800c53e:	9b06      	ldr	r3, [sp, #24]
 800c540:	429e      	cmp	r6, r3
 800c542:	f1a7 0708 	sub.w	r7, r7, #8
 800c546:	ddeb      	ble.n	800c520 <__kernel_rem_pio2+0xa0>
 800c548:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c54c:	f108 0801 	add.w	r8, r8, #1
 800c550:	ecab 7b02 	vstmia	fp!, {d7}
 800c554:	3508      	adds	r5, #8
 800c556:	e7cc      	b.n	800c4f2 <__kernel_rem_pio2+0x72>
 800c558:	9b02      	ldr	r3, [sp, #8]
 800c55a:	aa0e      	add	r2, sp, #56	; 0x38
 800c55c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c560:	930d      	str	r3, [sp, #52]	; 0x34
 800c562:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c564:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c568:	9c02      	ldr	r4, [sp, #8]
 800c56a:	930c      	str	r3, [sp, #48]	; 0x30
 800c56c:	00e3      	lsls	r3, r4, #3
 800c56e:	930a      	str	r3, [sp, #40]	; 0x28
 800c570:	ab9a      	add	r3, sp, #616	; 0x268
 800c572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c576:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c57a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c57e:	ab72      	add	r3, sp, #456	; 0x1c8
 800c580:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c584:	46c3      	mov	fp, r8
 800c586:	46a1      	mov	r9, r4
 800c588:	f1b9 0f00 	cmp.w	r9, #0
 800c58c:	f1a5 0508 	sub.w	r5, r5, #8
 800c590:	dc77      	bgt.n	800c682 <__kernel_rem_pio2+0x202>
 800c592:	ec47 6b10 	vmov	d0, r6, r7
 800c596:	4650      	mov	r0, sl
 800c598:	f000 fc0a 	bl	800cdb0 <scalbn>
 800c59c:	ec57 6b10 	vmov	r6, r7, d0
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c5a6:	ee10 0a10 	vmov	r0, s0
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	f7f4 f82c 	bl	8000608 <__aeabi_dmul>
 800c5b0:	ec41 0b10 	vmov	d0, r0, r1
 800c5b4:	f000 fb7c 	bl	800ccb0 <floor>
 800c5b8:	4b7c      	ldr	r3, [pc, #496]	; (800c7ac <__kernel_rem_pio2+0x32c>)
 800c5ba:	ec51 0b10 	vmov	r0, r1, d0
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f7f4 f822 	bl	8000608 <__aeabi_dmul>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	f7f3 fe64 	bl	8000298 <__aeabi_dsub>
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	f7f4 fab2 	bl	8000b3c <__aeabi_d2iz>
 800c5d8:	9004      	str	r0, [sp, #16]
 800c5da:	f7f3 ffab 	bl	8000534 <__aeabi_i2d>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	f7f3 fe57 	bl	8000298 <__aeabi_dsub>
 800c5ea:	f1ba 0f00 	cmp.w	sl, #0
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	460f      	mov	r7, r1
 800c5f2:	dd6d      	ble.n	800c6d0 <__kernel_rem_pio2+0x250>
 800c5f4:	1e62      	subs	r2, r4, #1
 800c5f6:	ab0e      	add	r3, sp, #56	; 0x38
 800c5f8:	9d04      	ldr	r5, [sp, #16]
 800c5fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c5fe:	f1ca 0118 	rsb	r1, sl, #24
 800c602:	fa40 f301 	asr.w	r3, r0, r1
 800c606:	441d      	add	r5, r3
 800c608:	408b      	lsls	r3, r1
 800c60a:	1ac0      	subs	r0, r0, r3
 800c60c:	ab0e      	add	r3, sp, #56	; 0x38
 800c60e:	9504      	str	r5, [sp, #16]
 800c610:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c614:	f1ca 0317 	rsb	r3, sl, #23
 800c618:	fa40 fb03 	asr.w	fp, r0, r3
 800c61c:	f1bb 0f00 	cmp.w	fp, #0
 800c620:	dd65      	ble.n	800c6ee <__kernel_rem_pio2+0x26e>
 800c622:	9b04      	ldr	r3, [sp, #16]
 800c624:	2200      	movs	r2, #0
 800c626:	3301      	adds	r3, #1
 800c628:	9304      	str	r3, [sp, #16]
 800c62a:	4615      	mov	r5, r2
 800c62c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c630:	4294      	cmp	r4, r2
 800c632:	f300 809c 	bgt.w	800c76e <__kernel_rem_pio2+0x2ee>
 800c636:	f1ba 0f00 	cmp.w	sl, #0
 800c63a:	dd07      	ble.n	800c64c <__kernel_rem_pio2+0x1cc>
 800c63c:	f1ba 0f01 	cmp.w	sl, #1
 800c640:	f000 80c0 	beq.w	800c7c4 <__kernel_rem_pio2+0x344>
 800c644:	f1ba 0f02 	cmp.w	sl, #2
 800c648:	f000 80c6 	beq.w	800c7d8 <__kernel_rem_pio2+0x358>
 800c64c:	f1bb 0f02 	cmp.w	fp, #2
 800c650:	d14d      	bne.n	800c6ee <__kernel_rem_pio2+0x26e>
 800c652:	4632      	mov	r2, r6
 800c654:	463b      	mov	r3, r7
 800c656:	4956      	ldr	r1, [pc, #344]	; (800c7b0 <__kernel_rem_pio2+0x330>)
 800c658:	2000      	movs	r0, #0
 800c65a:	f7f3 fe1d 	bl	8000298 <__aeabi_dsub>
 800c65e:	4606      	mov	r6, r0
 800c660:	460f      	mov	r7, r1
 800c662:	2d00      	cmp	r5, #0
 800c664:	d043      	beq.n	800c6ee <__kernel_rem_pio2+0x26e>
 800c666:	4650      	mov	r0, sl
 800c668:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c7a0 <__kernel_rem_pio2+0x320>
 800c66c:	f000 fba0 	bl	800cdb0 <scalbn>
 800c670:	4630      	mov	r0, r6
 800c672:	4639      	mov	r1, r7
 800c674:	ec53 2b10 	vmov	r2, r3, d0
 800c678:	f7f3 fe0e 	bl	8000298 <__aeabi_dsub>
 800c67c:	4606      	mov	r6, r0
 800c67e:	460f      	mov	r7, r1
 800c680:	e035      	b.n	800c6ee <__kernel_rem_pio2+0x26e>
 800c682:	4b4c      	ldr	r3, [pc, #304]	; (800c7b4 <__kernel_rem_pio2+0x334>)
 800c684:	2200      	movs	r2, #0
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	f7f3 ffbd 	bl	8000608 <__aeabi_dmul>
 800c68e:	f7f4 fa55 	bl	8000b3c <__aeabi_d2iz>
 800c692:	f7f3 ff4f 	bl	8000534 <__aeabi_i2d>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	ec43 2b18 	vmov	d8, r2, r3
 800c69e:	4b46      	ldr	r3, [pc, #280]	; (800c7b8 <__kernel_rem_pio2+0x338>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f7f3 ffb1 	bl	8000608 <__aeabi_dmul>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	4639      	mov	r1, r7
 800c6ae:	f7f3 fdf3 	bl	8000298 <__aeabi_dsub>
 800c6b2:	f7f4 fa43 	bl	8000b3c <__aeabi_d2iz>
 800c6b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6ba:	f84b 0b04 	str.w	r0, [fp], #4
 800c6be:	ec51 0b18 	vmov	r0, r1, d8
 800c6c2:	f7f3 fdeb 	bl	800029c <__adddf3>
 800c6c6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	460f      	mov	r7, r1
 800c6ce:	e75b      	b.n	800c588 <__kernel_rem_pio2+0x108>
 800c6d0:	d106      	bne.n	800c6e0 <__kernel_rem_pio2+0x260>
 800c6d2:	1e63      	subs	r3, r4, #1
 800c6d4:	aa0e      	add	r2, sp, #56	; 0x38
 800c6d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c6da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c6de:	e79d      	b.n	800c61c <__kernel_rem_pio2+0x19c>
 800c6e0:	4b36      	ldr	r3, [pc, #216]	; (800c7bc <__kernel_rem_pio2+0x33c>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f7f4 fa16 	bl	8000b14 <__aeabi_dcmpge>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d13d      	bne.n	800c768 <__kernel_rem_pio2+0x2e8>
 800c6ec:	4683      	mov	fp, r0
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	f7f4 f9ef 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	f000 80c0 	beq.w	800c880 <__kernel_rem_pio2+0x400>
 800c700:	1e65      	subs	r5, r4, #1
 800c702:	462b      	mov	r3, r5
 800c704:	2200      	movs	r2, #0
 800c706:	9902      	ldr	r1, [sp, #8]
 800c708:	428b      	cmp	r3, r1
 800c70a:	da6c      	bge.n	800c7e6 <__kernel_rem_pio2+0x366>
 800c70c:	2a00      	cmp	r2, #0
 800c70e:	f000 8089 	beq.w	800c824 <__kernel_rem_pio2+0x3a4>
 800c712:	ab0e      	add	r3, sp, #56	; 0x38
 800c714:	f1aa 0a18 	sub.w	sl, sl, #24
 800c718:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 80ad 	beq.w	800c87c <__kernel_rem_pio2+0x3fc>
 800c722:	4650      	mov	r0, sl
 800c724:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c7a0 <__kernel_rem_pio2+0x320>
 800c728:	f000 fb42 	bl	800cdb0 <scalbn>
 800c72c:	ab9a      	add	r3, sp, #616	; 0x268
 800c72e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c732:	ec57 6b10 	vmov	r6, r7, d0
 800c736:	00ec      	lsls	r4, r5, #3
 800c738:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c73c:	46aa      	mov	sl, r5
 800c73e:	f1ba 0f00 	cmp.w	sl, #0
 800c742:	f280 80d6 	bge.w	800c8f2 <__kernel_rem_pio2+0x472>
 800c746:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c798 <__kernel_rem_pio2+0x318>
 800c74a:	462e      	mov	r6, r5
 800c74c:	2e00      	cmp	r6, #0
 800c74e:	f2c0 8104 	blt.w	800c95a <__kernel_rem_pio2+0x4da>
 800c752:	ab72      	add	r3, sp, #456	; 0x1c8
 800c754:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c758:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c7c0 <__kernel_rem_pio2+0x340>
 800c75c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c760:	f04f 0800 	mov.w	r8, #0
 800c764:	1baf      	subs	r7, r5, r6
 800c766:	e0ea      	b.n	800c93e <__kernel_rem_pio2+0x4be>
 800c768:	f04f 0b02 	mov.w	fp, #2
 800c76c:	e759      	b.n	800c622 <__kernel_rem_pio2+0x1a2>
 800c76e:	f8d8 3000 	ldr.w	r3, [r8]
 800c772:	b955      	cbnz	r5, 800c78a <__kernel_rem_pio2+0x30a>
 800c774:	b123      	cbz	r3, 800c780 <__kernel_rem_pio2+0x300>
 800c776:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c77a:	f8c8 3000 	str.w	r3, [r8]
 800c77e:	2301      	movs	r3, #1
 800c780:	3201      	adds	r2, #1
 800c782:	f108 0804 	add.w	r8, r8, #4
 800c786:	461d      	mov	r5, r3
 800c788:	e752      	b.n	800c630 <__kernel_rem_pio2+0x1b0>
 800c78a:	1acb      	subs	r3, r1, r3
 800c78c:	f8c8 3000 	str.w	r3, [r8]
 800c790:	462b      	mov	r3, r5
 800c792:	e7f5      	b.n	800c780 <__kernel_rem_pio2+0x300>
 800c794:	f3af 8000 	nop.w
	...
 800c7a4:	3ff00000 	.word	0x3ff00000
 800c7a8:	0800d420 	.word	0x0800d420
 800c7ac:	40200000 	.word	0x40200000
 800c7b0:	3ff00000 	.word	0x3ff00000
 800c7b4:	3e700000 	.word	0x3e700000
 800c7b8:	41700000 	.word	0x41700000
 800c7bc:	3fe00000 	.word	0x3fe00000
 800c7c0:	0800d3e0 	.word	0x0800d3e0
 800c7c4:	1e62      	subs	r2, r4, #1
 800c7c6:	ab0e      	add	r3, sp, #56	; 0x38
 800c7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c7d0:	a90e      	add	r1, sp, #56	; 0x38
 800c7d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c7d6:	e739      	b.n	800c64c <__kernel_rem_pio2+0x1cc>
 800c7d8:	1e62      	subs	r2, r4, #1
 800c7da:	ab0e      	add	r3, sp, #56	; 0x38
 800c7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c7e4:	e7f4      	b.n	800c7d0 <__kernel_rem_pio2+0x350>
 800c7e6:	a90e      	add	r1, sp, #56	; 0x38
 800c7e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	e789      	b.n	800c706 <__kernel_rem_pio2+0x286>
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c7f8:	2900      	cmp	r1, #0
 800c7fa:	d0fa      	beq.n	800c7f2 <__kernel_rem_pio2+0x372>
 800c7fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c802:	446a      	add	r2, sp
 800c804:	3a98      	subs	r2, #152	; 0x98
 800c806:	920a      	str	r2, [sp, #40]	; 0x28
 800c808:	9a08      	ldr	r2, [sp, #32]
 800c80a:	18e3      	adds	r3, r4, r3
 800c80c:	18a5      	adds	r5, r4, r2
 800c80e:	aa22      	add	r2, sp, #136	; 0x88
 800c810:	f104 0801 	add.w	r8, r4, #1
 800c814:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	9b04      	ldr	r3, [sp, #16]
 800c81c:	4543      	cmp	r3, r8
 800c81e:	da04      	bge.n	800c82a <__kernel_rem_pio2+0x3aa>
 800c820:	461c      	mov	r4, r3
 800c822:	e6a3      	b.n	800c56c <__kernel_rem_pio2+0xec>
 800c824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c826:	2301      	movs	r3, #1
 800c828:	e7e4      	b.n	800c7f4 <__kernel_rem_pio2+0x374>
 800c82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c82c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c830:	f7f3 fe80 	bl	8000534 <__aeabi_i2d>
 800c834:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c83a:	46ab      	mov	fp, r5
 800c83c:	461c      	mov	r4, r3
 800c83e:	f04f 0900 	mov.w	r9, #0
 800c842:	2600      	movs	r6, #0
 800c844:	2700      	movs	r7, #0
 800c846:	9b06      	ldr	r3, [sp, #24]
 800c848:	4599      	cmp	r9, r3
 800c84a:	dd06      	ble.n	800c85a <__kernel_rem_pio2+0x3da>
 800c84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c84e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c852:	f108 0801 	add.w	r8, r8, #1
 800c856:	930a      	str	r3, [sp, #40]	; 0x28
 800c858:	e7df      	b.n	800c81a <__kernel_rem_pio2+0x39a>
 800c85a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c85e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c862:	f7f3 fed1 	bl	8000608 <__aeabi_dmul>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f3 fd15 	bl	800029c <__adddf3>
 800c872:	f109 0901 	add.w	r9, r9, #1
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	e7e4      	b.n	800c846 <__kernel_rem_pio2+0x3c6>
 800c87c:	3d01      	subs	r5, #1
 800c87e:	e748      	b.n	800c712 <__kernel_rem_pio2+0x292>
 800c880:	ec47 6b10 	vmov	d0, r6, r7
 800c884:	f1ca 0000 	rsb	r0, sl, #0
 800c888:	f000 fa92 	bl	800cdb0 <scalbn>
 800c88c:	ec57 6b10 	vmov	r6, r7, d0
 800c890:	4ba0      	ldr	r3, [pc, #640]	; (800cb14 <__kernel_rem_pio2+0x694>)
 800c892:	ee10 0a10 	vmov	r0, s0
 800c896:	2200      	movs	r2, #0
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f4 f93b 	bl	8000b14 <__aeabi_dcmpge>
 800c89e:	b1f8      	cbz	r0, 800c8e0 <__kernel_rem_pio2+0x460>
 800c8a0:	4b9d      	ldr	r3, [pc, #628]	; (800cb18 <__kernel_rem_pio2+0x698>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	f7f3 feae 	bl	8000608 <__aeabi_dmul>
 800c8ac:	f7f4 f946 	bl	8000b3c <__aeabi_d2iz>
 800c8b0:	4680      	mov	r8, r0
 800c8b2:	f7f3 fe3f 	bl	8000534 <__aeabi_i2d>
 800c8b6:	4b97      	ldr	r3, [pc, #604]	; (800cb14 <__kernel_rem_pio2+0x694>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f7f3 fea5 	bl	8000608 <__aeabi_dmul>
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7f3 fce7 	bl	8000298 <__aeabi_dsub>
 800c8ca:	f7f4 f937 	bl	8000b3c <__aeabi_d2iz>
 800c8ce:	1c65      	adds	r5, r4, #1
 800c8d0:	ab0e      	add	r3, sp, #56	; 0x38
 800c8d2:	f10a 0a18 	add.w	sl, sl, #24
 800c8d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c8da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c8de:	e720      	b.n	800c722 <__kernel_rem_pio2+0x2a2>
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f7f4 f92a 	bl	8000b3c <__aeabi_d2iz>
 800c8e8:	ab0e      	add	r3, sp, #56	; 0x38
 800c8ea:	4625      	mov	r5, r4
 800c8ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c8f0:	e717      	b.n	800c722 <__kernel_rem_pio2+0x2a2>
 800c8f2:	ab0e      	add	r3, sp, #56	; 0x38
 800c8f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c8f8:	f7f3 fe1c 	bl	8000534 <__aeabi_i2d>
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	463b      	mov	r3, r7
 800c900:	f7f3 fe82 	bl	8000608 <__aeabi_dmul>
 800c904:	4b84      	ldr	r3, [pc, #528]	; (800cb18 <__kernel_rem_pio2+0x698>)
 800c906:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c90a:	2200      	movs	r2, #0
 800c90c:	4630      	mov	r0, r6
 800c90e:	4639      	mov	r1, r7
 800c910:	f7f3 fe7a 	bl	8000608 <__aeabi_dmul>
 800c914:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c918:	4606      	mov	r6, r0
 800c91a:	460f      	mov	r7, r1
 800c91c:	e70f      	b.n	800c73e <__kernel_rem_pio2+0x2be>
 800c91e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c922:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c926:	f7f3 fe6f 	bl	8000608 <__aeabi_dmul>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c932:	f7f3 fcb3 	bl	800029c <__adddf3>
 800c936:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c93a:	f108 0801 	add.w	r8, r8, #1
 800c93e:	9b02      	ldr	r3, [sp, #8]
 800c940:	4598      	cmp	r8, r3
 800c942:	dc01      	bgt.n	800c948 <__kernel_rem_pio2+0x4c8>
 800c944:	45b8      	cmp	r8, r7
 800c946:	ddea      	ble.n	800c91e <__kernel_rem_pio2+0x49e>
 800c948:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c94c:	ab4a      	add	r3, sp, #296	; 0x128
 800c94e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c952:	ed87 7b00 	vstr	d7, [r7]
 800c956:	3e01      	subs	r6, #1
 800c958:	e6f8      	b.n	800c74c <__kernel_rem_pio2+0x2cc>
 800c95a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	dc0b      	bgt.n	800c978 <__kernel_rem_pio2+0x4f8>
 800c960:	2b00      	cmp	r3, #0
 800c962:	dc35      	bgt.n	800c9d0 <__kernel_rem_pio2+0x550>
 800c964:	d059      	beq.n	800ca1a <__kernel_rem_pio2+0x59a>
 800c966:	9b04      	ldr	r3, [sp, #16]
 800c968:	f003 0007 	and.w	r0, r3, #7
 800c96c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c970:	ecbd 8b02 	vpop	{d8}
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d1f3      	bne.n	800c966 <__kernel_rem_pio2+0x4e6>
 800c97e:	ab4a      	add	r3, sp, #296	; 0x128
 800c980:	4423      	add	r3, r4
 800c982:	9306      	str	r3, [sp, #24]
 800c984:	461c      	mov	r4, r3
 800c986:	469a      	mov	sl, r3
 800c988:	9502      	str	r5, [sp, #8]
 800c98a:	9b02      	ldr	r3, [sp, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f1aa 0a08 	sub.w	sl, sl, #8
 800c992:	dc6b      	bgt.n	800ca6c <__kernel_rem_pio2+0x5ec>
 800c994:	46aa      	mov	sl, r5
 800c996:	f1ba 0f01 	cmp.w	sl, #1
 800c99a:	f1a4 0408 	sub.w	r4, r4, #8
 800c99e:	f300 8085 	bgt.w	800caac <__kernel_rem_pio2+0x62c>
 800c9a2:	9c06      	ldr	r4, [sp, #24]
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	3408      	adds	r4, #8
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	2d01      	cmp	r5, #1
 800c9ac:	f300 809d 	bgt.w	800caea <__kernel_rem_pio2+0x66a>
 800c9b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c9b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c9b8:	f1bb 0f00 	cmp.w	fp, #0
 800c9bc:	f040 809b 	bne.w	800caf6 <__kernel_rem_pio2+0x676>
 800c9c0:	9b01      	ldr	r3, [sp, #4]
 800c9c2:	e9c3 5600 	strd	r5, r6, [r3]
 800c9c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c9ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c9ce:	e7ca      	b.n	800c966 <__kernel_rem_pio2+0x4e6>
 800c9d0:	3408      	adds	r4, #8
 800c9d2:	ab4a      	add	r3, sp, #296	; 0x128
 800c9d4:	441c      	add	r4, r3
 800c9d6:	462e      	mov	r6, r5
 800c9d8:	2000      	movs	r0, #0
 800c9da:	2100      	movs	r1, #0
 800c9dc:	2e00      	cmp	r6, #0
 800c9de:	da36      	bge.n	800ca4e <__kernel_rem_pio2+0x5ce>
 800c9e0:	f1bb 0f00 	cmp.w	fp, #0
 800c9e4:	d039      	beq.n	800ca5a <__kernel_rem_pio2+0x5da>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9ec:	9c01      	ldr	r4, [sp, #4]
 800c9ee:	e9c4 2300 	strd	r2, r3, [r4]
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c9fa:	f7f3 fc4d 	bl	8000298 <__aeabi_dsub>
 800c9fe:	ae4c      	add	r6, sp, #304	; 0x130
 800ca00:	2401      	movs	r4, #1
 800ca02:	42a5      	cmp	r5, r4
 800ca04:	da2c      	bge.n	800ca60 <__kernel_rem_pio2+0x5e0>
 800ca06:	f1bb 0f00 	cmp.w	fp, #0
 800ca0a:	d002      	beq.n	800ca12 <__kernel_rem_pio2+0x592>
 800ca0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca10:	4619      	mov	r1, r3
 800ca12:	9b01      	ldr	r3, [sp, #4]
 800ca14:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ca18:	e7a5      	b.n	800c966 <__kernel_rem_pio2+0x4e6>
 800ca1a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ca1e:	eb0d 0403 	add.w	r4, sp, r3
 800ca22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ca26:	2000      	movs	r0, #0
 800ca28:	2100      	movs	r1, #0
 800ca2a:	2d00      	cmp	r5, #0
 800ca2c:	da09      	bge.n	800ca42 <__kernel_rem_pio2+0x5c2>
 800ca2e:	f1bb 0f00 	cmp.w	fp, #0
 800ca32:	d002      	beq.n	800ca3a <__kernel_rem_pio2+0x5ba>
 800ca34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca38:	4619      	mov	r1, r3
 800ca3a:	9b01      	ldr	r3, [sp, #4]
 800ca3c:	e9c3 0100 	strd	r0, r1, [r3]
 800ca40:	e791      	b.n	800c966 <__kernel_rem_pio2+0x4e6>
 800ca42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ca46:	f7f3 fc29 	bl	800029c <__adddf3>
 800ca4a:	3d01      	subs	r5, #1
 800ca4c:	e7ed      	b.n	800ca2a <__kernel_rem_pio2+0x5aa>
 800ca4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ca52:	f7f3 fc23 	bl	800029c <__adddf3>
 800ca56:	3e01      	subs	r6, #1
 800ca58:	e7c0      	b.n	800c9dc <__kernel_rem_pio2+0x55c>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	e7c5      	b.n	800c9ec <__kernel_rem_pio2+0x56c>
 800ca60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ca64:	f7f3 fc1a 	bl	800029c <__adddf3>
 800ca68:	3401      	adds	r4, #1
 800ca6a:	e7ca      	b.n	800ca02 <__kernel_rem_pio2+0x582>
 800ca6c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ca70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ca74:	9b02      	ldr	r3, [sp, #8]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	4632      	mov	r2, r6
 800ca7c:	463b      	mov	r3, r7
 800ca7e:	4640      	mov	r0, r8
 800ca80:	4649      	mov	r1, r9
 800ca82:	f7f3 fc0b 	bl	800029c <__adddf3>
 800ca86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4640      	mov	r0, r8
 800ca90:	4649      	mov	r1, r9
 800ca92:	f7f3 fc01 	bl	8000298 <__aeabi_dsub>
 800ca96:	4632      	mov	r2, r6
 800ca98:	463b      	mov	r3, r7
 800ca9a:	f7f3 fbff 	bl	800029c <__adddf3>
 800ca9e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800caa2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800caa6:	ed8a 7b00 	vstr	d7, [sl]
 800caaa:	e76e      	b.n	800c98a <__kernel_rem_pio2+0x50a>
 800caac:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cab0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800cab4:	4640      	mov	r0, r8
 800cab6:	4632      	mov	r2, r6
 800cab8:	463b      	mov	r3, r7
 800caba:	4649      	mov	r1, r9
 800cabc:	f7f3 fbee 	bl	800029c <__adddf3>
 800cac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4640      	mov	r0, r8
 800caca:	4649      	mov	r1, r9
 800cacc:	f7f3 fbe4 	bl	8000298 <__aeabi_dsub>
 800cad0:	4632      	mov	r2, r6
 800cad2:	463b      	mov	r3, r7
 800cad4:	f7f3 fbe2 	bl	800029c <__adddf3>
 800cad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cadc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cae0:	ed84 7b00 	vstr	d7, [r4]
 800cae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cae8:	e755      	b.n	800c996 <__kernel_rem_pio2+0x516>
 800caea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800caee:	f7f3 fbd5 	bl	800029c <__adddf3>
 800caf2:	3d01      	subs	r5, #1
 800caf4:	e759      	b.n	800c9aa <__kernel_rem_pio2+0x52a>
 800caf6:	9b01      	ldr	r3, [sp, #4]
 800caf8:	9a01      	ldr	r2, [sp, #4]
 800cafa:	601d      	str	r5, [r3, #0]
 800cafc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800cb00:	605c      	str	r4, [r3, #4]
 800cb02:	609f      	str	r7, [r3, #8]
 800cb04:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cb08:	60d3      	str	r3, [r2, #12]
 800cb0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb0e:	6110      	str	r0, [r2, #16]
 800cb10:	6153      	str	r3, [r2, #20]
 800cb12:	e728      	b.n	800c966 <__kernel_rem_pio2+0x4e6>
 800cb14:	41700000 	.word	0x41700000
 800cb18:	3e700000 	.word	0x3e700000
 800cb1c:	00000000 	.word	0x00000000

0800cb20 <__kernel_sin>:
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	ed2d 8b04 	vpush	{d8-d9}
 800cb28:	eeb0 8a41 	vmov.f32	s16, s2
 800cb2c:	eef0 8a61 	vmov.f32	s17, s3
 800cb30:	ec55 4b10 	vmov	r4, r5, d0
 800cb34:	b083      	sub	sp, #12
 800cb36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb3e:	9001      	str	r0, [sp, #4]
 800cb40:	da06      	bge.n	800cb50 <__kernel_sin+0x30>
 800cb42:	ee10 0a10 	vmov	r0, s0
 800cb46:	4629      	mov	r1, r5
 800cb48:	f7f3 fff8 	bl	8000b3c <__aeabi_d2iz>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d051      	beq.n	800cbf4 <__kernel_sin+0xd4>
 800cb50:	4622      	mov	r2, r4
 800cb52:	462b      	mov	r3, r5
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fd56 	bl	8000608 <__aeabi_dmul>
 800cb5c:	4682      	mov	sl, r0
 800cb5e:	468b      	mov	fp, r1
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	4620      	mov	r0, r4
 800cb66:	4629      	mov	r1, r5
 800cb68:	f7f3 fd4e 	bl	8000608 <__aeabi_dmul>
 800cb6c:	a341      	add	r3, pc, #260	; (adr r3, 800cc74 <__kernel_sin+0x154>)
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	4680      	mov	r8, r0
 800cb74:	4689      	mov	r9, r1
 800cb76:	4650      	mov	r0, sl
 800cb78:	4659      	mov	r1, fp
 800cb7a:	f7f3 fd45 	bl	8000608 <__aeabi_dmul>
 800cb7e:	a33f      	add	r3, pc, #252	; (adr r3, 800cc7c <__kernel_sin+0x15c>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fb88 	bl	8000298 <__aeabi_dsub>
 800cb88:	4652      	mov	r2, sl
 800cb8a:	465b      	mov	r3, fp
 800cb8c:	f7f3 fd3c 	bl	8000608 <__aeabi_dmul>
 800cb90:	a33c      	add	r3, pc, #240	; (adr r3, 800cc84 <__kernel_sin+0x164>)
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	f7f3 fb81 	bl	800029c <__adddf3>
 800cb9a:	4652      	mov	r2, sl
 800cb9c:	465b      	mov	r3, fp
 800cb9e:	f7f3 fd33 	bl	8000608 <__aeabi_dmul>
 800cba2:	a33a      	add	r3, pc, #232	; (adr r3, 800cc8c <__kernel_sin+0x16c>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fb76 	bl	8000298 <__aeabi_dsub>
 800cbac:	4652      	mov	r2, sl
 800cbae:	465b      	mov	r3, fp
 800cbb0:	f7f3 fd2a 	bl	8000608 <__aeabi_dmul>
 800cbb4:	a337      	add	r3, pc, #220	; (adr r3, 800cc94 <__kernel_sin+0x174>)
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	f7f3 fb6f 	bl	800029c <__adddf3>
 800cbbe:	9b01      	ldr	r3, [sp, #4]
 800cbc0:	4606      	mov	r6, r0
 800cbc2:	460f      	mov	r7, r1
 800cbc4:	b9eb      	cbnz	r3, 800cc02 <__kernel_sin+0xe2>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4650      	mov	r0, sl
 800cbcc:	4659      	mov	r1, fp
 800cbce:	f7f3 fd1b 	bl	8000608 <__aeabi_dmul>
 800cbd2:	a325      	add	r3, pc, #148	; (adr r3, 800cc68 <__kernel_sin+0x148>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	f7f3 fb5e 	bl	8000298 <__aeabi_dsub>
 800cbdc:	4642      	mov	r2, r8
 800cbde:	464b      	mov	r3, r9
 800cbe0:	f7f3 fd12 	bl	8000608 <__aeabi_dmul>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4620      	mov	r0, r4
 800cbea:	4629      	mov	r1, r5
 800cbec:	f7f3 fb56 	bl	800029c <__adddf3>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	460d      	mov	r5, r1
 800cbf4:	ec45 4b10 	vmov	d0, r4, r5
 800cbf8:	b003      	add	sp, #12
 800cbfa:	ecbd 8b04 	vpop	{d8-d9}
 800cbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc02:	4b1b      	ldr	r3, [pc, #108]	; (800cc70 <__kernel_sin+0x150>)
 800cc04:	ec51 0b18 	vmov	r0, r1, d8
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f7f3 fcfd 	bl	8000608 <__aeabi_dmul>
 800cc0e:	4632      	mov	r2, r6
 800cc10:	ec41 0b19 	vmov	d9, r0, r1
 800cc14:	463b      	mov	r3, r7
 800cc16:	4640      	mov	r0, r8
 800cc18:	4649      	mov	r1, r9
 800cc1a:	f7f3 fcf5 	bl	8000608 <__aeabi_dmul>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	ec51 0b19 	vmov	r0, r1, d9
 800cc26:	f7f3 fb37 	bl	8000298 <__aeabi_dsub>
 800cc2a:	4652      	mov	r2, sl
 800cc2c:	465b      	mov	r3, fp
 800cc2e:	f7f3 fceb 	bl	8000608 <__aeabi_dmul>
 800cc32:	ec53 2b18 	vmov	r2, r3, d8
 800cc36:	f7f3 fb2f 	bl	8000298 <__aeabi_dsub>
 800cc3a:	a30b      	add	r3, pc, #44	; (adr r3, 800cc68 <__kernel_sin+0x148>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	4606      	mov	r6, r0
 800cc42:	460f      	mov	r7, r1
 800cc44:	4640      	mov	r0, r8
 800cc46:	4649      	mov	r1, r9
 800cc48:	f7f3 fcde 	bl	8000608 <__aeabi_dmul>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4630      	mov	r0, r6
 800cc52:	4639      	mov	r1, r7
 800cc54:	f7f3 fb22 	bl	800029c <__adddf3>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fb1a 	bl	8000298 <__aeabi_dsub>
 800cc64:	e7c4      	b.n	800cbf0 <__kernel_sin+0xd0>
 800cc66:	bf00      	nop
 800cc68:	55555549 	.word	0x55555549
 800cc6c:	3fc55555 	.word	0x3fc55555
 800cc70:	3fe00000 	.word	0x3fe00000
 800cc74:	5acfd57c 	.word	0x5acfd57c
 800cc78:	3de5d93a 	.word	0x3de5d93a
 800cc7c:	8a2b9ceb 	.word	0x8a2b9ceb
 800cc80:	3e5ae5e6 	.word	0x3e5ae5e6
 800cc84:	57b1fe7d 	.word	0x57b1fe7d
 800cc88:	3ec71de3 	.word	0x3ec71de3
 800cc8c:	19c161d5 	.word	0x19c161d5
 800cc90:	3f2a01a0 	.word	0x3f2a01a0
 800cc94:	1110f8a6 	.word	0x1110f8a6
 800cc98:	3f811111 	.word	0x3f811111

0800cc9c <fabs>:
 800cc9c:	ec51 0b10 	vmov	r0, r1, d0
 800cca0:	ee10 2a10 	vmov	r2, s0
 800cca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cca8:	ec43 2b10 	vmov	d0, r2, r3
 800ccac:	4770      	bx	lr
	...

0800ccb0 <floor>:
 800ccb0:	ec51 0b10 	vmov	r0, r1, d0
 800ccb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ccbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ccc0:	2e13      	cmp	r6, #19
 800ccc2:	ee10 5a10 	vmov	r5, s0
 800ccc6:	ee10 8a10 	vmov	r8, s0
 800ccca:	460c      	mov	r4, r1
 800cccc:	dc32      	bgt.n	800cd34 <floor+0x84>
 800ccce:	2e00      	cmp	r6, #0
 800ccd0:	da14      	bge.n	800ccfc <floor+0x4c>
 800ccd2:	a333      	add	r3, pc, #204	; (adr r3, 800cda0 <floor+0xf0>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fae0 	bl	800029c <__adddf3>
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2300      	movs	r3, #0
 800cce0:	f7f3 ff22 	bl	8000b28 <__aeabi_dcmpgt>
 800cce4:	b138      	cbz	r0, 800ccf6 <floor+0x46>
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	da57      	bge.n	800cd9a <floor+0xea>
 800ccea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ccee:	431d      	orrs	r5, r3
 800ccf0:	d001      	beq.n	800ccf6 <floor+0x46>
 800ccf2:	4c2d      	ldr	r4, [pc, #180]	; (800cda8 <floor+0xf8>)
 800ccf4:	2500      	movs	r5, #0
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	e025      	b.n	800cd48 <floor+0x98>
 800ccfc:	4f2b      	ldr	r7, [pc, #172]	; (800cdac <floor+0xfc>)
 800ccfe:	4137      	asrs	r7, r6
 800cd00:	ea01 0307 	and.w	r3, r1, r7
 800cd04:	4303      	orrs	r3, r0
 800cd06:	d01f      	beq.n	800cd48 <floor+0x98>
 800cd08:	a325      	add	r3, pc, #148	; (adr r3, 800cda0 <floor+0xf0>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fac5 	bl	800029c <__adddf3>
 800cd12:	2200      	movs	r2, #0
 800cd14:	2300      	movs	r3, #0
 800cd16:	f7f3 ff07 	bl	8000b28 <__aeabi_dcmpgt>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d0eb      	beq.n	800ccf6 <floor+0x46>
 800cd1e:	2c00      	cmp	r4, #0
 800cd20:	bfbe      	ittt	lt
 800cd22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cd26:	fa43 f606 	asrlt.w	r6, r3, r6
 800cd2a:	19a4      	addlt	r4, r4, r6
 800cd2c:	ea24 0407 	bic.w	r4, r4, r7
 800cd30:	2500      	movs	r5, #0
 800cd32:	e7e0      	b.n	800ccf6 <floor+0x46>
 800cd34:	2e33      	cmp	r6, #51	; 0x33
 800cd36:	dd0b      	ble.n	800cd50 <floor+0xa0>
 800cd38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd3c:	d104      	bne.n	800cd48 <floor+0x98>
 800cd3e:	ee10 2a10 	vmov	r2, s0
 800cd42:	460b      	mov	r3, r1
 800cd44:	f7f3 faaa 	bl	800029c <__adddf3>
 800cd48:	ec41 0b10 	vmov	d0, r0, r1
 800cd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cd54:	f04f 33ff 	mov.w	r3, #4294967295
 800cd58:	fa23 f707 	lsr.w	r7, r3, r7
 800cd5c:	4207      	tst	r7, r0
 800cd5e:	d0f3      	beq.n	800cd48 <floor+0x98>
 800cd60:	a30f      	add	r3, pc, #60	; (adr r3, 800cda0 <floor+0xf0>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 fa99 	bl	800029c <__adddf3>
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f7f3 fedb 	bl	8000b28 <__aeabi_dcmpgt>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d0bf      	beq.n	800ccf6 <floor+0x46>
 800cd76:	2c00      	cmp	r4, #0
 800cd78:	da02      	bge.n	800cd80 <floor+0xd0>
 800cd7a:	2e14      	cmp	r6, #20
 800cd7c:	d103      	bne.n	800cd86 <floor+0xd6>
 800cd7e:	3401      	adds	r4, #1
 800cd80:	ea25 0507 	bic.w	r5, r5, r7
 800cd84:	e7b7      	b.n	800ccf6 <floor+0x46>
 800cd86:	2301      	movs	r3, #1
 800cd88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd8c:	fa03 f606 	lsl.w	r6, r3, r6
 800cd90:	4435      	add	r5, r6
 800cd92:	4545      	cmp	r5, r8
 800cd94:	bf38      	it	cc
 800cd96:	18e4      	addcc	r4, r4, r3
 800cd98:	e7f2      	b.n	800cd80 <floor+0xd0>
 800cd9a:	2500      	movs	r5, #0
 800cd9c:	462c      	mov	r4, r5
 800cd9e:	e7aa      	b.n	800ccf6 <floor+0x46>
 800cda0:	8800759c 	.word	0x8800759c
 800cda4:	7e37e43c 	.word	0x7e37e43c
 800cda8:	bff00000 	.word	0xbff00000
 800cdac:	000fffff 	.word	0x000fffff

0800cdb0 <scalbn>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	ec55 4b10 	vmov	r4, r5, d0
 800cdb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cdba:	4606      	mov	r6, r0
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	b99a      	cbnz	r2, 800cde8 <scalbn+0x38>
 800cdc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdc4:	4323      	orrs	r3, r4
 800cdc6:	d036      	beq.n	800ce36 <scalbn+0x86>
 800cdc8:	4b39      	ldr	r3, [pc, #228]	; (800ceb0 <scalbn+0x100>)
 800cdca:	4629      	mov	r1, r5
 800cdcc:	ee10 0a10 	vmov	r0, s0
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f7f3 fc19 	bl	8000608 <__aeabi_dmul>
 800cdd6:	4b37      	ldr	r3, [pc, #220]	; (800ceb4 <scalbn+0x104>)
 800cdd8:	429e      	cmp	r6, r3
 800cdda:	4604      	mov	r4, r0
 800cddc:	460d      	mov	r5, r1
 800cdde:	da10      	bge.n	800ce02 <scalbn+0x52>
 800cde0:	a32b      	add	r3, pc, #172	; (adr r3, 800ce90 <scalbn+0xe0>)
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	e03a      	b.n	800ce5e <scalbn+0xae>
 800cde8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cdec:	428a      	cmp	r2, r1
 800cdee:	d10c      	bne.n	800ce0a <scalbn+0x5a>
 800cdf0:	ee10 2a10 	vmov	r2, s0
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	f7f3 fa50 	bl	800029c <__adddf3>
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	460d      	mov	r5, r1
 800ce00:	e019      	b.n	800ce36 <scalbn+0x86>
 800ce02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce06:	460b      	mov	r3, r1
 800ce08:	3a36      	subs	r2, #54	; 0x36
 800ce0a:	4432      	add	r2, r6
 800ce0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce10:	428a      	cmp	r2, r1
 800ce12:	dd08      	ble.n	800ce26 <scalbn+0x76>
 800ce14:	2d00      	cmp	r5, #0
 800ce16:	a120      	add	r1, pc, #128	; (adr r1, 800ce98 <scalbn+0xe8>)
 800ce18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce1c:	da1c      	bge.n	800ce58 <scalbn+0xa8>
 800ce1e:	a120      	add	r1, pc, #128	; (adr r1, 800cea0 <scalbn+0xf0>)
 800ce20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce24:	e018      	b.n	800ce58 <scalbn+0xa8>
 800ce26:	2a00      	cmp	r2, #0
 800ce28:	dd08      	ble.n	800ce3c <scalbn+0x8c>
 800ce2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce36:	ec45 4b10 	vmov	d0, r4, r5
 800ce3a:	bd70      	pop	{r4, r5, r6, pc}
 800ce3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce40:	da19      	bge.n	800ce76 <scalbn+0xc6>
 800ce42:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce46:	429e      	cmp	r6, r3
 800ce48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ce4c:	dd0a      	ble.n	800ce64 <scalbn+0xb4>
 800ce4e:	a112      	add	r1, pc, #72	; (adr r1, 800ce98 <scalbn+0xe8>)
 800ce50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e2      	bne.n	800ce1e <scalbn+0x6e>
 800ce58:	a30f      	add	r3, pc, #60	; (adr r3, 800ce98 <scalbn+0xe8>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	f7f3 fbd3 	bl	8000608 <__aeabi_dmul>
 800ce62:	e7cb      	b.n	800cdfc <scalbn+0x4c>
 800ce64:	a10a      	add	r1, pc, #40	; (adr r1, 800ce90 <scalbn+0xe0>)
 800ce66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d0b8      	beq.n	800cde0 <scalbn+0x30>
 800ce6e:	a10e      	add	r1, pc, #56	; (adr r1, 800cea8 <scalbn+0xf8>)
 800ce70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce74:	e7b4      	b.n	800cde0 <scalbn+0x30>
 800ce76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce7a:	3236      	adds	r2, #54	; 0x36
 800ce7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce84:	4620      	mov	r0, r4
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <scalbn+0x108>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	e7e8      	b.n	800ce5e <scalbn+0xae>
 800ce8c:	f3af 8000 	nop.w
 800ce90:	c2f8f359 	.word	0xc2f8f359
 800ce94:	01a56e1f 	.word	0x01a56e1f
 800ce98:	8800759c 	.word	0x8800759c
 800ce9c:	7e37e43c 	.word	0x7e37e43c
 800cea0:	8800759c 	.word	0x8800759c
 800cea4:	fe37e43c 	.word	0xfe37e43c
 800cea8:	c2f8f359 	.word	0xc2f8f359
 800ceac:	81a56e1f 	.word	0x81a56e1f
 800ceb0:	43500000 	.word	0x43500000
 800ceb4:	ffff3cb0 	.word	0xffff3cb0
 800ceb8:	3c900000 	.word	0x3c900000

0800cebc <_init>:
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cebe:	bf00      	nop
 800cec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec2:	bc08      	pop	{r3}
 800cec4:	469e      	mov	lr, r3
 800cec6:	4770      	bx	lr

0800cec8 <_fini>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	bf00      	nop
 800cecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cece:	bc08      	pop	{r3}
 800ced0:	469e      	mov	lr, r3
 800ced2:	4770      	bx	lr
