
summerschool_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a10  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c20  08002c20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c28  08002c28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08002ca0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002ca0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d1e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ed  00000000  00000000  00025dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  000271b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000510  00000000  00000000  00027778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e65  00000000  00000000  00027c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c09  00000000  00000000  0003eaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f66e  00000000  00000000  000456f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c3c  00000000  00000000  000d4db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b8c 	.word	0x08002b8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08002b8c 	.word	0x08002b8c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fadb 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f827 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8d7 	bl	8000698 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004ea:	f000 f883 	bl	80005f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello\n");
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <main+0x50>)
 80004f0:	f001 febc 	bl	800226c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t pot;

	  HAL_ADC_Start(&hadc1);
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <main+0x54>)
 80004f6:	f000 fba9 	bl	8000c4c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004fa:	f04f 31ff 	mov.w	r1, #4294967295
 80004fe:	480b      	ldr	r0, [pc, #44]	; (800052c <main+0x54>)
 8000500:	f000 fc58 	bl	8000db4 <HAL_ADC_PollForConversion>
	  pot = HAL_ADC_GetValue(&hadc1);
 8000504:	4809      	ldr	r0, [pc, #36]	; (800052c <main+0x54>)
 8000506:	f000 fce0 	bl	8000eca <HAL_ADC_GetValue>
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <main+0x58>)
 8000514:	f001 f9b3 	bl	800187e <HAL_GPIO_TogglePin>
	  HAL_Delay(pot/8);
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	b29b      	uxth	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fb2c 	bl	8000b7c <HAL_Delay>
  {
 8000524:	e7e6      	b.n	80004f4 <main+0x1c>
 8000526:	bf00      	nop
 8000528:	08002ba4 	.word	0x08002ba4
 800052c:	2000008c 	.word	0x2000008c
 8000530:	40020800 	.word	0x40020800

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fe1c 	bl	8002180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <SystemClock_Config+0xb8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a22      	ldr	r2, [pc, #136]	; (80005ec <SystemClock_Config+0xb8>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b20      	ldr	r3, [pc, #128]	; (80005ec <SystemClock_Config+0xb8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <SystemClock_Config+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <SystemClock_Config+0xbc>)
 8000582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <SystemClock_Config+0xbc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f99b 	bl	80018e4 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b4:	f000 f8ec 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fbfe 	bl	8001dd4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005de:	f000 f8d7 	bl	8000790 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_ADC1_Init+0x98>)
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <MX_ADC1_Init+0x9c>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ADC1_Init+0x98>)
 800060e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000612:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_ADC1_Init+0x98>)
 8000622:	2201      	movs	r2, #1
 8000624:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_ADC1_Init+0x98>)
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <MX_ADC1_Init+0xa0>)
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_ADC1_Init+0x98>)
 8000642:	2201      	movs	r2, #1
 8000644:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_ADC1_Init+0x98>)
 8000650:	2201      	movs	r2, #1
 8000652:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_ADC1_Init+0x98>)
 8000656:	f000 fab5 	bl	8000bc4 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000660:	f000 f896 	bl	8000790 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_ADC1_Init+0x98>)
 8000676:	f000 fc35 	bl	8000ee4 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000680:	f000 f886 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000008c 	.word	0x2000008c
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_GPIO_Init+0xc8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	4816      	ldr	r0, [pc, #88]	; (8000764 <MX_GPIO_Init+0xcc>)
 800070a:	f001 f89f 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	480f      	ldr	r0, [pc, #60]	; (8000764 <MX_GPIO_Init+0xcc>)
 8000728:	f000 ff0c 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800072c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_GPIO_Init+0xd0>)
 8000744:	f000 fefe 	bl	8001544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2028      	movs	r0, #40	; 0x28
 800074e:	f000 fec2 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f000 fedb 	bl	800150e <HAL_NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40020800 	.word	0x40020800
 8000768:	40020400 	.word	0x40020400

0800076c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <HAL_GPIO_EXTI_Callback+0x20>)
 800077e:	f001 f865 	bl	800184c <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40020800 	.word	0x40020800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <HAL_MspInit+0x4c>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_ADC_MspInit+0x7c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d127      	bne.n	800085e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_ADC_MspInit+0x80>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <HAL_ADC_MspInit+0x80>)
 8000818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_ADC_MspInit+0x80>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_ADC_MspInit+0x80>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_ADC_MspInit+0x80>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_ADC_MspInit+0x80>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084a:	2303      	movs	r3, #3
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_ADC_MspInit+0x84>)
 800085a:	f000 fe73 	bl	8001544 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40012000 	.word	0x40012000
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f93c 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80008cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008d0:	f000 fff0 	bl	80018b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e00a      	b.n	8000900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ea:	f3af 8000 	nop.w
 80008ee:	4601      	mov	r1, r0
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf0      	blt.n	80008ea <_read+0x12>
	}

return len;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e009      	b.n	8000938 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf1      	blt.n	8000924 <_write+0x12>
	}
	return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_close>:

int _close(int file)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	605a      	str	r2, [r3, #4]
	return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_isatty>:

int _isatty(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
	return 1;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
	return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f001 fba2 	bl	800212c <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20010000 	.word	0x20010000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	200000f0 	.word	0x200000f0

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd7 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f001 fb61 	bl	8002138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd2f 	bl	80004d8 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a88:	08002c30 	.word	0x08002c30
  ldr r2, =_sbss
 8000a8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a90:	200000ec 	.word	0x200000ec

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 fcfd 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fe66 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fd15 	bl	800152a <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 fcdd 	bl	80014d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200000d8 	.word	0x200000d8

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200000d8 	.word	0x200000d8

08000b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b84:	f7ff ffee 	bl	8000b64 <HAL_GetTick>
 8000b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b94:	d005      	beq.n	8000ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_Delay+0x44>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba2:	bf00      	nop
 8000ba4:	f7ff ffde 	bl	8000b64 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8f7      	bhi.n	8000ba4 <HAL_Delay+0x28>
  {
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e033      	b.n	8000c42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d109      	bne.n	8000bf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fe02 	bl	80007ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d118      	bne.n	8000c34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	f043 0202 	orr.w	r2, r3, #2
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 fa86 	bl	8001128 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f023 0303 	bic.w	r3, r3, #3
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
 8000c32:	e001      	b.n	8000c38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d101      	bne.n	8000c66 <HAL_ADC_Start+0x1a>
 8000c62:	2302      	movs	r3, #2
 8000c64:	e097      	b.n	8000d96 <HAL_ADC_Start+0x14a>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d018      	beq.n	8000cae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <HAL_ADC_Start+0x158>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a45      	ldr	r2, [pc, #276]	; (8000da8 <HAL_ADC_Start+0x15c>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9a      	lsrs	r2, r3, #18
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ca0:	e002      	b.n	8000ca8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f9      	bne.n	8000ca2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d15f      	bne.n	8000d7c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ce6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cfa:	d106      	bne.n	8000d0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	f023 0206 	bic.w	r2, r3, #6
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	645a      	str	r2, [r3, #68]	; 0x44
 8000d08:	e002      	b.n	8000d10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_ADC_Start+0x160>)
 8000d1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 031f 	and.w	r3, r3, #31
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10f      	bne.n	8000d52 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d129      	bne.n	8000d94 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	e020      	b.n	8000d94 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <HAL_ADC_Start+0x164>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d11b      	bne.n	8000d94 <HAL_ADC_Start+0x148>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d114      	bne.n	8000d94 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	e00b      	b.n	8000d94 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f043 0210 	orr.w	r2, r3, #16
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	f043 0201 	orr.w	r2, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000000 	.word	0x20000000
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	40012300 	.word	0x40012300
 8000db0:	40012000 	.word	0x40012000

08000db4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd0:	d113      	bne.n	8000dfa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000de0:	d10b      	bne.n	8000dfa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f043 0220 	orr.w	r2, r3, #32
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e063      	b.n	8000ec2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000dfa:	f7ff feb3 	bl	8000b64 <HAL_GetTick>
 8000dfe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e00:	e021      	b.n	8000e46 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d01d      	beq.n	8000e46 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d007      	beq.n	8000e20 <HAL_ADC_PollForConversion+0x6c>
 8000e10:	f7ff fea8 	bl	8000b64 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d212      	bcs.n	8000e46 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d00b      	beq.n	8000e46 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f043 0204 	orr.w	r2, r3, #4
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e03d      	b.n	8000ec2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d1d6      	bne.n	8000e02 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f06f 0212 	mvn.w	r2, #18
 8000e5c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d123      	bne.n	8000ec0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d11f      	bne.n	8000ec0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d111      	bne.n	8000ec0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f043 0201 	orr.w	r2, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d101      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1c>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e105      	b.n	800110c <HAL_ADC_ConfigChannel+0x228>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d925      	bls.n	8000f5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68d9      	ldr	r1, [r3, #12]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	3b1e      	subs	r3, #30
 8000f26:	2207      	movs	r2, #7
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	400a      	ands	r2, r1
 8000f34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68d9      	ldr	r1, [r3, #12]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	4603      	mov	r3, r0
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4403      	add	r3, r0
 8000f4e:	3b1e      	subs	r3, #30
 8000f50:	409a      	lsls	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	e022      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6919      	ldr	r1, [r3, #16]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	2207      	movs	r2, #7
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6919      	ldr	r1, [r3, #16]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4403      	add	r3, r0
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d824      	bhi.n	8000ff4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	3b05      	subs	r3, #5
 8000fbc:	221f      	movs	r2, #31
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	400a      	ands	r2, r1
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3b05      	subs	r3, #5
 8000fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff2:	e04c      	b.n	800108e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	d824      	bhi.n	8001046 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	3b23      	subs	r3, #35	; 0x23
 800100e:	221f      	movs	r2, #31
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43da      	mvns	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	400a      	ands	r2, r1
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3b23      	subs	r3, #35	; 0x23
 8001038:	fa00 f203 	lsl.w	r2, r0, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
 8001044:	e023      	b.n	800108e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b41      	subs	r3, #65	; 0x41
 8001058:	221f      	movs	r2, #31
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	400a      	ands	r2, r1
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	3b41      	subs	r3, #65	; 0x41
 8001082:	fa00 f203 	lsl.w	r2, r0, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <HAL_ADC_ConfigChannel+0x234>)
 8001090:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a21      	ldr	r2, [pc, #132]	; (800111c <HAL_ADC_ConfigChannel+0x238>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d109      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x1cc>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b12      	cmp	r3, #18
 80010a2:	d105      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_ADC_ConfigChannel+0x238>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d123      	bne.n	8001102 <HAL_ADC_ConfigChannel+0x21e>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b10      	cmp	r3, #16
 80010c0:	d003      	beq.n	80010ca <HAL_ADC_ConfigChannel+0x1e6>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b11      	cmp	r3, #17
 80010c8:	d11b      	bne.n	8001102 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b10      	cmp	r3, #16
 80010dc:	d111      	bne.n	8001102 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_ADC_ConfigChannel+0x23c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_ADC_ConfigChannel+0x240>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	0c9a      	lsrs	r2, r3, #18
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010f4:	e002      	b.n	80010fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f9      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40012300 	.word	0x40012300
 800111c:	40012000 	.word	0x40012000
 8001120:	20000000 	.word	0x20000000
 8001124:	431bde83 	.word	0x431bde83

08001128 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001130:	4b79      	ldr	r3, [pc, #484]	; (8001318 <ADC_Init+0x1f0>)
 8001132:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	431a      	orrs	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800115c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6859      	ldr	r1, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	021a      	lsls	r2, r3, #8
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6899      	ldr	r1, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	4a58      	ldr	r2, [pc, #352]	; (800131c <ADC_Init+0x1f4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d022      	beq.n	8001206 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6899      	ldr	r1, [r3, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6899      	ldr	r1, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	e00f      	b.n	8001226 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001224:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0202 	bic.w	r2, r2, #2
 8001234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6899      	ldr	r1, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7e1b      	ldrb	r3, [r3, #24]
 8001240:	005a      	lsls	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01b      	beq.n	800128c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001262:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6859      	ldr	r1, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	3b01      	subs	r3, #1
 8001280:	035a      	lsls	r2, r3, #13
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	e007      	b.n	800129c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800129a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	051a      	lsls	r2, r3, #20
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6899      	ldr	r1, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012de:	025a      	lsls	r2, r3, #9
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6899      	ldr	r1, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	029a      	lsls	r2, r3, #10
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	609a      	str	r2, [r3, #8]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40012300 	.word	0x40012300
 800131c:	0f000001 	.word	0x0f000001

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e159      	b.n	8001814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8148 	bne.w	800180e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d005      	beq.n	8001596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	2b02      	cmp	r3, #2
 8001594:	d130      	bne.n	80015f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 0201 	and.w	r2, r3, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b03      	cmp	r3, #3
 8001602:	d017      	beq.n	8001634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d123      	bne.n	8001688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0203 	and.w	r2, r3, #3
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a2 	beq.w	800180e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_GPIO_Init+0x2e8>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a56      	ldr	r2, [pc, #344]	; (800182c <HAL_GPIO_Init+0x2e8>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b54      	ldr	r3, [pc, #336]	; (800182c <HAL_GPIO_Init+0x2e8>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e6:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_GPIO_Init+0x2ec>)
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	; (8001834 <HAL_GPIO_Init+0x2f0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x202>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a48      	ldr	r2, [pc, #288]	; (8001838 <HAL_GPIO_Init+0x2f4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x1fe>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a47      	ldr	r2, [pc, #284]	; (800183c <HAL_GPIO_Init+0x2f8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x1fa>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a46      	ldr	r2, [pc, #280]	; (8001840 <HAL_GPIO_Init+0x2fc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x1f6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a45      	ldr	r2, [pc, #276]	; (8001844 <HAL_GPIO_Init+0x300>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x1f2>
 8001732:	2304      	movs	r3, #4
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001736:	2307      	movs	r3, #7
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001746:	2300      	movs	r3, #0
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f002 0203 	and.w	r2, r2, #3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	; (8001830 <HAL_GPIO_Init+0x2ec>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_GPIO_Init+0x304>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <HAL_GPIO_Init+0x304>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_GPIO_Init+0x304>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a24      	ldr	r2, [pc, #144]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017de:	4a1a      	ldr	r2, [pc, #104]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_GPIO_Init+0x304>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	f67f aea2 	bls.w	8001560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001890:	887a      	ldrh	r2, [r7, #2]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	041a      	lsls	r2, r3, #16
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43d9      	mvns	r1, r3
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	400b      	ands	r3, r1
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe ff4a 	bl	800076c <HAL_GPIO_EXTI_Callback>
  }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e267      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d075      	beq.n	80019ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d00c      	beq.n	8001928 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001916:	2b08      	cmp	r3, #8
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b82      	ldr	r3, [pc, #520]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001926:	d10b      	bne.n	8001940 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	4b7e      	ldr	r3, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d05b      	beq.n	80019ec <HAL_RCC_OscConfig+0x108>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d157      	bne.n	80019ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e242      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x74>
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xb0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x98>
 8001962:	4b70      	ldr	r3, [pc, #448]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6f      	ldr	r2, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6c      	ldr	r2, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xb0>
 800197c:	4b69      	ldr	r3, [pc, #420]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a68      	ldr	r2, [pc, #416]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a65      	ldr	r2, [pc, #404]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f8e2 	bl	8000b64 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f8de 	bl	8000b64 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e207      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xc0>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8ce 	bl	8000b64 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f8ca 	bl	8000b64 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1f3      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0xe8>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x152>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1c7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4937      	ldr	r1, [pc, #220]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	e03a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_OscConfig+0x244>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f883 	bl	8000b64 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f87f 	bl	8000b64 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1a8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4925      	ldr	r1, [pc, #148]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x244>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f862 	bl	8000b64 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f85e 	bl	8000b64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e187      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d036      	beq.n	8001b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d016      	beq.n	8001b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_RCC_OscConfig+0x248>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f842 	bl	8000b64 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f83e 	bl	8000b64 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e167      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x200>
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x248>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f82b 	bl	8000b64 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	e00e      	b.n	8001b30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f827 	bl	8000b64 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e150      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470000 	.word	0x42470000
 8001b2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ea      	bne.n	8001b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8097 	beq.w	8001c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b7d      	ldr	r3, [pc, #500]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a7c      	ldr	r2, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b77      	ldr	r3, [pc, #476]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b86:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a73      	ldr	r2, [pc, #460]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7fe ffe7 	bl	8000b64 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7fe ffe3 	bl	8000b64 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e10c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	4b6a      	ldr	r3, [pc, #424]	; (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x2ea>
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a63      	ldr	r2, [pc, #396]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x324>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x30c>
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a5e      	ldr	r2, [pc, #376]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a5b      	ldr	r2, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0x324>
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a57      	ldr	r2, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c02:	f023 0304 	bic.w	r3, r3, #4
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d015      	beq.n	8001c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7fe ffa8 	bl	8000b64 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7fe ffa4 	bl	8000b64 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0cb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ee      	beq.n	8001c18 <HAL_RCC_OscConfig+0x334>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ff92 	bl	8000b64 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe ff8e 	bl	8000b64 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0b5      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ee      	bne.n	8001c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a1 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d05c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d141      	bne.n	8001d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff62 	bl	8000b64 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe ff5e 	bl	8000b64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e087      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	491b      	ldr	r1, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe ff37 	bl	8000b64 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe ff33 	bl	8000b64 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e05c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x416>
 8001d18:	e054      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe ff20 	bl	8000b64 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe ff1c 	bl	8000b64 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e045      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x444>
 8001d46:	e03d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e038      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x4ec>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d028      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d121      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d11a      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d90:	4013      	ands	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d111      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	3b01      	subs	r3, #1
 8001daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0cc      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d90c      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b8      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494d      	ldr	r1, [pc, #308]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d044      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e067      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fe4e 	bl	8000b64 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fe4a 	bl	8000b64 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e04f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d20c      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f821 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490a      	ldr	r1, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fdae 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08002bac 	.word	0x08002bac
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa4:	b090      	sub	sp, #64	; 0x40
 8001fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
 8001fac:	2300      	movs	r3, #0
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	f200 80a1 	bhi.w	800210c <HAL_RCC_GetSysClockFreq+0x16c>
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x3a>
 8001fd2:	e09b      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fd8:	e09b      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fda:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fde:	e098      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fea:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d028      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	627a      	str	r2, [r7, #36]	; 0x24
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002008:	2100      	movs	r1, #0
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 800200c:	fb03 f201 	mul.w	r2, r3, r1
 8002010:	2300      	movs	r3, #0
 8002012:	fb00 f303 	mul.w	r3, r0, r3
 8002016:	4413      	add	r3, r2
 8002018:	4a43      	ldr	r2, [pc, #268]	; (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 800201a:	fba0 1202 	umull	r1, r2, r0, r2
 800201e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002020:	460a      	mov	r2, r1
 8002022:	62ba      	str	r2, [r7, #40]	; 0x28
 8002024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002026:	4413      	add	r3, r2
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202c:	2200      	movs	r2, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	61fa      	str	r2, [r7, #28]
 8002032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002036:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800203a:	f7fe f8cb 	bl	80001d4 <__aeabi_uldivmod>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4613      	mov	r3, r2
 8002044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002046:	e053      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	2200      	movs	r2, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	617a      	str	r2, [r7, #20]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800205a:	f04f 0b00 	mov.w	fp, #0
 800205e:	4652      	mov	r2, sl
 8002060:	465b      	mov	r3, fp
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	0159      	lsls	r1, r3, #5
 800206c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002070:	0150      	lsls	r0, r2, #5
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	ebb2 080a 	subs.w	r8, r2, sl
 800207a:	eb63 090b 	sbc.w	r9, r3, fp
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800208a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800208e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002092:	ebb2 0408 	subs.w	r4, r2, r8
 8002096:	eb63 0509 	sbc.w	r5, r3, r9
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	00eb      	lsls	r3, r5, #3
 80020a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	eb14 030a 	adds.w	r3, r4, sl
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	eb45 030b 	adc.w	r3, r5, fp
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c6:	4629      	mov	r1, r5
 80020c8:	028b      	lsls	r3, r1, #10
 80020ca:	4621      	mov	r1, r4
 80020cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d0:	4621      	mov	r1, r4
 80020d2:	028a      	lsls	r2, r1, #10
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	2200      	movs	r2, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e4:	f7fe f876 	bl	80001d4 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4613      	mov	r3, r2
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetSysClockFreq+0x184>)
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002114:	4618      	mov	r0, r3
 8002116:	3740      	adds	r7, #64	; 0x40
 8002118:	46bd      	mov	sp, r7
 800211a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	00f42400 	.word	0x00f42400
 8002128:	017d7840 	.word	0x017d7840

0800212c <__errno>:
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <__errno+0x8>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c

08002138 <__libc_init_array>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4d0d      	ldr	r5, [pc, #52]	; (8002170 <__libc_init_array+0x38>)
 800213c:	4c0d      	ldr	r4, [pc, #52]	; (8002174 <__libc_init_array+0x3c>)
 800213e:	1b64      	subs	r4, r4, r5
 8002140:	10a4      	asrs	r4, r4, #2
 8002142:	2600      	movs	r6, #0
 8002144:	42a6      	cmp	r6, r4
 8002146:	d109      	bne.n	800215c <__libc_init_array+0x24>
 8002148:	4d0b      	ldr	r5, [pc, #44]	; (8002178 <__libc_init_array+0x40>)
 800214a:	4c0c      	ldr	r4, [pc, #48]	; (800217c <__libc_init_array+0x44>)
 800214c:	f000 fd1e 	bl	8002b8c <_init>
 8002150:	1b64      	subs	r4, r4, r5
 8002152:	10a4      	asrs	r4, r4, #2
 8002154:	2600      	movs	r6, #0
 8002156:	42a6      	cmp	r6, r4
 8002158:	d105      	bne.n	8002166 <__libc_init_array+0x2e>
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002160:	4798      	blx	r3
 8002162:	3601      	adds	r6, #1
 8002164:	e7ee      	b.n	8002144 <__libc_init_array+0xc>
 8002166:	f855 3b04 	ldr.w	r3, [r5], #4
 800216a:	4798      	blx	r3
 800216c:	3601      	adds	r6, #1
 800216e:	e7f2      	b.n	8002156 <__libc_init_array+0x1e>
 8002170:	08002c28 	.word	0x08002c28
 8002174:	08002c28 	.word	0x08002c28
 8002178:	08002c28 	.word	0x08002c28
 800217c:	08002c2c 	.word	0x08002c2c

08002180 <memset>:
 8002180:	4402      	add	r2, r0
 8002182:	4603      	mov	r3, r0
 8002184:	4293      	cmp	r3, r2
 8002186:	d100      	bne.n	800218a <memset+0xa>
 8002188:	4770      	bx	lr
 800218a:	f803 1b01 	strb.w	r1, [r3], #1
 800218e:	e7f9      	b.n	8002184 <memset+0x4>

08002190 <_puts_r>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	460e      	mov	r6, r1
 8002194:	4605      	mov	r5, r0
 8002196:	b118      	cbz	r0, 80021a0 <_puts_r+0x10>
 8002198:	6983      	ldr	r3, [r0, #24]
 800219a:	b90b      	cbnz	r3, 80021a0 <_puts_r+0x10>
 800219c:	f000 fa48 	bl	8002630 <__sinit>
 80021a0:	69ab      	ldr	r3, [r5, #24]
 80021a2:	68ac      	ldr	r4, [r5, #8]
 80021a4:	b913      	cbnz	r3, 80021ac <_puts_r+0x1c>
 80021a6:	4628      	mov	r0, r5
 80021a8:	f000 fa42 	bl	8002630 <__sinit>
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <_puts_r+0xd0>)
 80021ae:	429c      	cmp	r4, r3
 80021b0:	d120      	bne.n	80021f4 <_puts_r+0x64>
 80021b2:	686c      	ldr	r4, [r5, #4]
 80021b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021b6:	07db      	lsls	r3, r3, #31
 80021b8:	d405      	bmi.n	80021c6 <_puts_r+0x36>
 80021ba:	89a3      	ldrh	r3, [r4, #12]
 80021bc:	0598      	lsls	r0, r3, #22
 80021be:	d402      	bmi.n	80021c6 <_puts_r+0x36>
 80021c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021c2:	f000 fad3 	bl	800276c <__retarget_lock_acquire_recursive>
 80021c6:	89a3      	ldrh	r3, [r4, #12]
 80021c8:	0719      	lsls	r1, r3, #28
 80021ca:	d51d      	bpl.n	8002208 <_puts_r+0x78>
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	b1db      	cbz	r3, 8002208 <_puts_r+0x78>
 80021d0:	3e01      	subs	r6, #1
 80021d2:	68a3      	ldr	r3, [r4, #8]
 80021d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021d8:	3b01      	subs	r3, #1
 80021da:	60a3      	str	r3, [r4, #8]
 80021dc:	bb39      	cbnz	r1, 800222e <_puts_r+0x9e>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da38      	bge.n	8002254 <_puts_r+0xc4>
 80021e2:	4622      	mov	r2, r4
 80021e4:	210a      	movs	r1, #10
 80021e6:	4628      	mov	r0, r5
 80021e8:	f000 f848 	bl	800227c <__swbuf_r>
 80021ec:	3001      	adds	r0, #1
 80021ee:	d011      	beq.n	8002214 <_puts_r+0x84>
 80021f0:	250a      	movs	r5, #10
 80021f2:	e011      	b.n	8002218 <_puts_r+0x88>
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <_puts_r+0xd4>)
 80021f6:	429c      	cmp	r4, r3
 80021f8:	d101      	bne.n	80021fe <_puts_r+0x6e>
 80021fa:	68ac      	ldr	r4, [r5, #8]
 80021fc:	e7da      	b.n	80021b4 <_puts_r+0x24>
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <_puts_r+0xd8>)
 8002200:	429c      	cmp	r4, r3
 8002202:	bf08      	it	eq
 8002204:	68ec      	ldreq	r4, [r5, #12]
 8002206:	e7d5      	b.n	80021b4 <_puts_r+0x24>
 8002208:	4621      	mov	r1, r4
 800220a:	4628      	mov	r0, r5
 800220c:	f000 f888 	bl	8002320 <__swsetup_r>
 8002210:	2800      	cmp	r0, #0
 8002212:	d0dd      	beq.n	80021d0 <_puts_r+0x40>
 8002214:	f04f 35ff 	mov.w	r5, #4294967295
 8002218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800221a:	07da      	lsls	r2, r3, #31
 800221c:	d405      	bmi.n	800222a <_puts_r+0x9a>
 800221e:	89a3      	ldrh	r3, [r4, #12]
 8002220:	059b      	lsls	r3, r3, #22
 8002222:	d402      	bmi.n	800222a <_puts_r+0x9a>
 8002224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002226:	f000 faa2 	bl	800276e <__retarget_lock_release_recursive>
 800222a:	4628      	mov	r0, r5
 800222c:	bd70      	pop	{r4, r5, r6, pc}
 800222e:	2b00      	cmp	r3, #0
 8002230:	da04      	bge.n	800223c <_puts_r+0xac>
 8002232:	69a2      	ldr	r2, [r4, #24]
 8002234:	429a      	cmp	r2, r3
 8002236:	dc06      	bgt.n	8002246 <_puts_r+0xb6>
 8002238:	290a      	cmp	r1, #10
 800223a:	d004      	beq.n	8002246 <_puts_r+0xb6>
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	6022      	str	r2, [r4, #0]
 8002242:	7019      	strb	r1, [r3, #0]
 8002244:	e7c5      	b.n	80021d2 <_puts_r+0x42>
 8002246:	4622      	mov	r2, r4
 8002248:	4628      	mov	r0, r5
 800224a:	f000 f817 	bl	800227c <__swbuf_r>
 800224e:	3001      	adds	r0, #1
 8002250:	d1bf      	bne.n	80021d2 <_puts_r+0x42>
 8002252:	e7df      	b.n	8002214 <_puts_r+0x84>
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	250a      	movs	r5, #10
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	6022      	str	r2, [r4, #0]
 800225c:	701d      	strb	r5, [r3, #0]
 800225e:	e7db      	b.n	8002218 <_puts_r+0x88>
 8002260:	08002be0 	.word	0x08002be0
 8002264:	08002c00 	.word	0x08002c00
 8002268:	08002bc0 	.word	0x08002bc0

0800226c <puts>:
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <puts+0xc>)
 800226e:	4601      	mov	r1, r0
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f7ff bf8d 	b.w	8002190 <_puts_r>
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c

0800227c <__swbuf_r>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	460e      	mov	r6, r1
 8002280:	4614      	mov	r4, r2
 8002282:	4605      	mov	r5, r0
 8002284:	b118      	cbz	r0, 800228e <__swbuf_r+0x12>
 8002286:	6983      	ldr	r3, [r0, #24]
 8002288:	b90b      	cbnz	r3, 800228e <__swbuf_r+0x12>
 800228a:	f000 f9d1 	bl	8002630 <__sinit>
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <__swbuf_r+0x98>)
 8002290:	429c      	cmp	r4, r3
 8002292:	d12b      	bne.n	80022ec <__swbuf_r+0x70>
 8002294:	686c      	ldr	r4, [r5, #4]
 8002296:	69a3      	ldr	r3, [r4, #24]
 8002298:	60a3      	str	r3, [r4, #8]
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	071a      	lsls	r2, r3, #28
 800229e:	d52f      	bpl.n	8002300 <__swbuf_r+0x84>
 80022a0:	6923      	ldr	r3, [r4, #16]
 80022a2:	b36b      	cbz	r3, 8002300 <__swbuf_r+0x84>
 80022a4:	6923      	ldr	r3, [r4, #16]
 80022a6:	6820      	ldr	r0, [r4, #0]
 80022a8:	1ac0      	subs	r0, r0, r3
 80022aa:	6963      	ldr	r3, [r4, #20]
 80022ac:	b2f6      	uxtb	r6, r6
 80022ae:	4283      	cmp	r3, r0
 80022b0:	4637      	mov	r7, r6
 80022b2:	dc04      	bgt.n	80022be <__swbuf_r+0x42>
 80022b4:	4621      	mov	r1, r4
 80022b6:	4628      	mov	r0, r5
 80022b8:	f000 f926 	bl	8002508 <_fflush_r>
 80022bc:	bb30      	cbnz	r0, 800230c <__swbuf_r+0x90>
 80022be:	68a3      	ldr	r3, [r4, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60a3      	str	r3, [r4, #8]
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	6022      	str	r2, [r4, #0]
 80022ca:	701e      	strb	r6, [r3, #0]
 80022cc:	6963      	ldr	r3, [r4, #20]
 80022ce:	3001      	adds	r0, #1
 80022d0:	4283      	cmp	r3, r0
 80022d2:	d004      	beq.n	80022de <__swbuf_r+0x62>
 80022d4:	89a3      	ldrh	r3, [r4, #12]
 80022d6:	07db      	lsls	r3, r3, #31
 80022d8:	d506      	bpl.n	80022e8 <__swbuf_r+0x6c>
 80022da:	2e0a      	cmp	r6, #10
 80022dc:	d104      	bne.n	80022e8 <__swbuf_r+0x6c>
 80022de:	4621      	mov	r1, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	f000 f911 	bl	8002508 <_fflush_r>
 80022e6:	b988      	cbnz	r0, 800230c <__swbuf_r+0x90>
 80022e8:	4638      	mov	r0, r7
 80022ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <__swbuf_r+0x9c>)
 80022ee:	429c      	cmp	r4, r3
 80022f0:	d101      	bne.n	80022f6 <__swbuf_r+0x7a>
 80022f2:	68ac      	ldr	r4, [r5, #8]
 80022f4:	e7cf      	b.n	8002296 <__swbuf_r+0x1a>
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <__swbuf_r+0xa0>)
 80022f8:	429c      	cmp	r4, r3
 80022fa:	bf08      	it	eq
 80022fc:	68ec      	ldreq	r4, [r5, #12]
 80022fe:	e7ca      	b.n	8002296 <__swbuf_r+0x1a>
 8002300:	4621      	mov	r1, r4
 8002302:	4628      	mov	r0, r5
 8002304:	f000 f80c 	bl	8002320 <__swsetup_r>
 8002308:	2800      	cmp	r0, #0
 800230a:	d0cb      	beq.n	80022a4 <__swbuf_r+0x28>
 800230c:	f04f 37ff 	mov.w	r7, #4294967295
 8002310:	e7ea      	b.n	80022e8 <__swbuf_r+0x6c>
 8002312:	bf00      	nop
 8002314:	08002be0 	.word	0x08002be0
 8002318:	08002c00 	.word	0x08002c00
 800231c:	08002bc0 	.word	0x08002bc0

08002320 <__swsetup_r>:
 8002320:	4b32      	ldr	r3, [pc, #200]	; (80023ec <__swsetup_r+0xcc>)
 8002322:	b570      	push	{r4, r5, r6, lr}
 8002324:	681d      	ldr	r5, [r3, #0]
 8002326:	4606      	mov	r6, r0
 8002328:	460c      	mov	r4, r1
 800232a:	b125      	cbz	r5, 8002336 <__swsetup_r+0x16>
 800232c:	69ab      	ldr	r3, [r5, #24]
 800232e:	b913      	cbnz	r3, 8002336 <__swsetup_r+0x16>
 8002330:	4628      	mov	r0, r5
 8002332:	f000 f97d 	bl	8002630 <__sinit>
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <__swsetup_r+0xd0>)
 8002338:	429c      	cmp	r4, r3
 800233a:	d10f      	bne.n	800235c <__swsetup_r+0x3c>
 800233c:	686c      	ldr	r4, [r5, #4]
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002344:	0719      	lsls	r1, r3, #28
 8002346:	d42c      	bmi.n	80023a2 <__swsetup_r+0x82>
 8002348:	06dd      	lsls	r5, r3, #27
 800234a:	d411      	bmi.n	8002370 <__swsetup_r+0x50>
 800234c:	2309      	movs	r3, #9
 800234e:	6033      	str	r3, [r6, #0]
 8002350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002354:	81a3      	strh	r3, [r4, #12]
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	e03e      	b.n	80023da <__swsetup_r+0xba>
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <__swsetup_r+0xd4>)
 800235e:	429c      	cmp	r4, r3
 8002360:	d101      	bne.n	8002366 <__swsetup_r+0x46>
 8002362:	68ac      	ldr	r4, [r5, #8]
 8002364:	e7eb      	b.n	800233e <__swsetup_r+0x1e>
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <__swsetup_r+0xd8>)
 8002368:	429c      	cmp	r4, r3
 800236a:	bf08      	it	eq
 800236c:	68ec      	ldreq	r4, [r5, #12]
 800236e:	e7e6      	b.n	800233e <__swsetup_r+0x1e>
 8002370:	0758      	lsls	r0, r3, #29
 8002372:	d512      	bpl.n	800239a <__swsetup_r+0x7a>
 8002374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002376:	b141      	cbz	r1, 800238a <__swsetup_r+0x6a>
 8002378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800237c:	4299      	cmp	r1, r3
 800237e:	d002      	beq.n	8002386 <__swsetup_r+0x66>
 8002380:	4630      	mov	r0, r6
 8002382:	f000 fa5b 	bl	800283c <_free_r>
 8002386:	2300      	movs	r3, #0
 8002388:	6363      	str	r3, [r4, #52]	; 0x34
 800238a:	89a3      	ldrh	r3, [r4, #12]
 800238c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002390:	81a3      	strh	r3, [r4, #12]
 8002392:	2300      	movs	r3, #0
 8002394:	6063      	str	r3, [r4, #4]
 8002396:	6923      	ldr	r3, [r4, #16]
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	89a3      	ldrh	r3, [r4, #12]
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	81a3      	strh	r3, [r4, #12]
 80023a2:	6923      	ldr	r3, [r4, #16]
 80023a4:	b94b      	cbnz	r3, 80023ba <__swsetup_r+0x9a>
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b0:	d003      	beq.n	80023ba <__swsetup_r+0x9a>
 80023b2:	4621      	mov	r1, r4
 80023b4:	4630      	mov	r0, r6
 80023b6:	f000 fa01 	bl	80027bc <__smakebuf_r>
 80023ba:	89a0      	ldrh	r0, [r4, #12]
 80023bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023c0:	f010 0301 	ands.w	r3, r0, #1
 80023c4:	d00a      	beq.n	80023dc <__swsetup_r+0xbc>
 80023c6:	2300      	movs	r3, #0
 80023c8:	60a3      	str	r3, [r4, #8]
 80023ca:	6963      	ldr	r3, [r4, #20]
 80023cc:	425b      	negs	r3, r3
 80023ce:	61a3      	str	r3, [r4, #24]
 80023d0:	6923      	ldr	r3, [r4, #16]
 80023d2:	b943      	cbnz	r3, 80023e6 <__swsetup_r+0xc6>
 80023d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023d8:	d1ba      	bne.n	8002350 <__swsetup_r+0x30>
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	0781      	lsls	r1, r0, #30
 80023de:	bf58      	it	pl
 80023e0:	6963      	ldrpl	r3, [r4, #20]
 80023e2:	60a3      	str	r3, [r4, #8]
 80023e4:	e7f4      	b.n	80023d0 <__swsetup_r+0xb0>
 80023e6:	2000      	movs	r0, #0
 80023e8:	e7f7      	b.n	80023da <__swsetup_r+0xba>
 80023ea:	bf00      	nop
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	08002be0 	.word	0x08002be0
 80023f4:	08002c00 	.word	0x08002c00
 80023f8:	08002bc0 	.word	0x08002bc0

080023fc <__sflush_r>:
 80023fc:	898a      	ldrh	r2, [r1, #12]
 80023fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002402:	4605      	mov	r5, r0
 8002404:	0710      	lsls	r0, r2, #28
 8002406:	460c      	mov	r4, r1
 8002408:	d458      	bmi.n	80024bc <__sflush_r+0xc0>
 800240a:	684b      	ldr	r3, [r1, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	dc05      	bgt.n	800241c <__sflush_r+0x20>
 8002410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	dc02      	bgt.n	800241c <__sflush_r+0x20>
 8002416:	2000      	movs	r0, #0
 8002418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800241c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800241e:	2e00      	cmp	r6, #0
 8002420:	d0f9      	beq.n	8002416 <__sflush_r+0x1a>
 8002422:	2300      	movs	r3, #0
 8002424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002428:	682f      	ldr	r7, [r5, #0]
 800242a:	602b      	str	r3, [r5, #0]
 800242c:	d032      	beq.n	8002494 <__sflush_r+0x98>
 800242e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002430:	89a3      	ldrh	r3, [r4, #12]
 8002432:	075a      	lsls	r2, r3, #29
 8002434:	d505      	bpl.n	8002442 <__sflush_r+0x46>
 8002436:	6863      	ldr	r3, [r4, #4]
 8002438:	1ac0      	subs	r0, r0, r3
 800243a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800243c:	b10b      	cbz	r3, 8002442 <__sflush_r+0x46>
 800243e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002440:	1ac0      	subs	r0, r0, r3
 8002442:	2300      	movs	r3, #0
 8002444:	4602      	mov	r2, r0
 8002446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002448:	6a21      	ldr	r1, [r4, #32]
 800244a:	4628      	mov	r0, r5
 800244c:	47b0      	blx	r6
 800244e:	1c43      	adds	r3, r0, #1
 8002450:	89a3      	ldrh	r3, [r4, #12]
 8002452:	d106      	bne.n	8002462 <__sflush_r+0x66>
 8002454:	6829      	ldr	r1, [r5, #0]
 8002456:	291d      	cmp	r1, #29
 8002458:	d82c      	bhi.n	80024b4 <__sflush_r+0xb8>
 800245a:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <__sflush_r+0x108>)
 800245c:	40ca      	lsrs	r2, r1
 800245e:	07d6      	lsls	r6, r2, #31
 8002460:	d528      	bpl.n	80024b4 <__sflush_r+0xb8>
 8002462:	2200      	movs	r2, #0
 8002464:	6062      	str	r2, [r4, #4]
 8002466:	04d9      	lsls	r1, r3, #19
 8002468:	6922      	ldr	r2, [r4, #16]
 800246a:	6022      	str	r2, [r4, #0]
 800246c:	d504      	bpl.n	8002478 <__sflush_r+0x7c>
 800246e:	1c42      	adds	r2, r0, #1
 8002470:	d101      	bne.n	8002476 <__sflush_r+0x7a>
 8002472:	682b      	ldr	r3, [r5, #0]
 8002474:	b903      	cbnz	r3, 8002478 <__sflush_r+0x7c>
 8002476:	6560      	str	r0, [r4, #84]	; 0x54
 8002478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800247a:	602f      	str	r7, [r5, #0]
 800247c:	2900      	cmp	r1, #0
 800247e:	d0ca      	beq.n	8002416 <__sflush_r+0x1a>
 8002480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002484:	4299      	cmp	r1, r3
 8002486:	d002      	beq.n	800248e <__sflush_r+0x92>
 8002488:	4628      	mov	r0, r5
 800248a:	f000 f9d7 	bl	800283c <_free_r>
 800248e:	2000      	movs	r0, #0
 8002490:	6360      	str	r0, [r4, #52]	; 0x34
 8002492:	e7c1      	b.n	8002418 <__sflush_r+0x1c>
 8002494:	6a21      	ldr	r1, [r4, #32]
 8002496:	2301      	movs	r3, #1
 8002498:	4628      	mov	r0, r5
 800249a:	47b0      	blx	r6
 800249c:	1c41      	adds	r1, r0, #1
 800249e:	d1c7      	bne.n	8002430 <__sflush_r+0x34>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0c4      	beq.n	8002430 <__sflush_r+0x34>
 80024a6:	2b1d      	cmp	r3, #29
 80024a8:	d001      	beq.n	80024ae <__sflush_r+0xb2>
 80024aa:	2b16      	cmp	r3, #22
 80024ac:	d101      	bne.n	80024b2 <__sflush_r+0xb6>
 80024ae:	602f      	str	r7, [r5, #0]
 80024b0:	e7b1      	b.n	8002416 <__sflush_r+0x1a>
 80024b2:	89a3      	ldrh	r3, [r4, #12]
 80024b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b8:	81a3      	strh	r3, [r4, #12]
 80024ba:	e7ad      	b.n	8002418 <__sflush_r+0x1c>
 80024bc:	690f      	ldr	r7, [r1, #16]
 80024be:	2f00      	cmp	r7, #0
 80024c0:	d0a9      	beq.n	8002416 <__sflush_r+0x1a>
 80024c2:	0793      	lsls	r3, r2, #30
 80024c4:	680e      	ldr	r6, [r1, #0]
 80024c6:	bf08      	it	eq
 80024c8:	694b      	ldreq	r3, [r1, #20]
 80024ca:	600f      	str	r7, [r1, #0]
 80024cc:	bf18      	it	ne
 80024ce:	2300      	movne	r3, #0
 80024d0:	eba6 0807 	sub.w	r8, r6, r7
 80024d4:	608b      	str	r3, [r1, #8]
 80024d6:	f1b8 0f00 	cmp.w	r8, #0
 80024da:	dd9c      	ble.n	8002416 <__sflush_r+0x1a>
 80024dc:	6a21      	ldr	r1, [r4, #32]
 80024de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024e0:	4643      	mov	r3, r8
 80024e2:	463a      	mov	r2, r7
 80024e4:	4628      	mov	r0, r5
 80024e6:	47b0      	blx	r6
 80024e8:	2800      	cmp	r0, #0
 80024ea:	dc06      	bgt.n	80024fa <__sflush_r+0xfe>
 80024ec:	89a3      	ldrh	r3, [r4, #12]
 80024ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f2:	81a3      	strh	r3, [r4, #12]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	e78e      	b.n	8002418 <__sflush_r+0x1c>
 80024fa:	4407      	add	r7, r0
 80024fc:	eba8 0800 	sub.w	r8, r8, r0
 8002500:	e7e9      	b.n	80024d6 <__sflush_r+0xda>
 8002502:	bf00      	nop
 8002504:	20400001 	.word	0x20400001

08002508 <_fflush_r>:
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	690b      	ldr	r3, [r1, #16]
 800250c:	4605      	mov	r5, r0
 800250e:	460c      	mov	r4, r1
 8002510:	b913      	cbnz	r3, 8002518 <_fflush_r+0x10>
 8002512:	2500      	movs	r5, #0
 8002514:	4628      	mov	r0, r5
 8002516:	bd38      	pop	{r3, r4, r5, pc}
 8002518:	b118      	cbz	r0, 8002522 <_fflush_r+0x1a>
 800251a:	6983      	ldr	r3, [r0, #24]
 800251c:	b90b      	cbnz	r3, 8002522 <_fflush_r+0x1a>
 800251e:	f000 f887 	bl	8002630 <__sinit>
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <_fflush_r+0x6c>)
 8002524:	429c      	cmp	r4, r3
 8002526:	d11b      	bne.n	8002560 <_fflush_r+0x58>
 8002528:	686c      	ldr	r4, [r5, #4]
 800252a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ef      	beq.n	8002512 <_fflush_r+0xa>
 8002532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002534:	07d0      	lsls	r0, r2, #31
 8002536:	d404      	bmi.n	8002542 <_fflush_r+0x3a>
 8002538:	0599      	lsls	r1, r3, #22
 800253a:	d402      	bmi.n	8002542 <_fflush_r+0x3a>
 800253c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800253e:	f000 f915 	bl	800276c <__retarget_lock_acquire_recursive>
 8002542:	4628      	mov	r0, r5
 8002544:	4621      	mov	r1, r4
 8002546:	f7ff ff59 	bl	80023fc <__sflush_r>
 800254a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800254c:	07da      	lsls	r2, r3, #31
 800254e:	4605      	mov	r5, r0
 8002550:	d4e0      	bmi.n	8002514 <_fflush_r+0xc>
 8002552:	89a3      	ldrh	r3, [r4, #12]
 8002554:	059b      	lsls	r3, r3, #22
 8002556:	d4dd      	bmi.n	8002514 <_fflush_r+0xc>
 8002558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800255a:	f000 f908 	bl	800276e <__retarget_lock_release_recursive>
 800255e:	e7d9      	b.n	8002514 <_fflush_r+0xc>
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <_fflush_r+0x70>)
 8002562:	429c      	cmp	r4, r3
 8002564:	d101      	bne.n	800256a <_fflush_r+0x62>
 8002566:	68ac      	ldr	r4, [r5, #8]
 8002568:	e7df      	b.n	800252a <_fflush_r+0x22>
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <_fflush_r+0x74>)
 800256c:	429c      	cmp	r4, r3
 800256e:	bf08      	it	eq
 8002570:	68ec      	ldreq	r4, [r5, #12]
 8002572:	e7da      	b.n	800252a <_fflush_r+0x22>
 8002574:	08002be0 	.word	0x08002be0
 8002578:	08002c00 	.word	0x08002c00
 800257c:	08002bc0 	.word	0x08002bc0

08002580 <std>:
 8002580:	2300      	movs	r3, #0
 8002582:	b510      	push	{r4, lr}
 8002584:	4604      	mov	r4, r0
 8002586:	e9c0 3300 	strd	r3, r3, [r0]
 800258a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800258e:	6083      	str	r3, [r0, #8]
 8002590:	8181      	strh	r1, [r0, #12]
 8002592:	6643      	str	r3, [r0, #100]	; 0x64
 8002594:	81c2      	strh	r2, [r0, #14]
 8002596:	6183      	str	r3, [r0, #24]
 8002598:	4619      	mov	r1, r3
 800259a:	2208      	movs	r2, #8
 800259c:	305c      	adds	r0, #92	; 0x5c
 800259e:	f7ff fdef 	bl	8002180 <memset>
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <std+0x38>)
 80025a4:	6263      	str	r3, [r4, #36]	; 0x24
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <std+0x3c>)
 80025a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <std+0x40>)
 80025ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <std+0x44>)
 80025b0:	6224      	str	r4, [r4, #32]
 80025b2:	6323      	str	r3, [r4, #48]	; 0x30
 80025b4:	bd10      	pop	{r4, pc}
 80025b6:	bf00      	nop
 80025b8:	08002a1d 	.word	0x08002a1d
 80025bc:	08002a3f 	.word	0x08002a3f
 80025c0:	08002a77 	.word	0x08002a77
 80025c4:	08002a9b 	.word	0x08002a9b

080025c8 <_cleanup_r>:
 80025c8:	4901      	ldr	r1, [pc, #4]	; (80025d0 <_cleanup_r+0x8>)
 80025ca:	f000 b8af 	b.w	800272c <_fwalk_reent>
 80025ce:	bf00      	nop
 80025d0:	08002509 	.word	0x08002509

080025d4 <__sfmoreglue>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	2268      	movs	r2, #104	; 0x68
 80025d8:	1e4d      	subs	r5, r1, #1
 80025da:	4355      	muls	r5, r2
 80025dc:	460e      	mov	r6, r1
 80025de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025e2:	f000 f997 	bl	8002914 <_malloc_r>
 80025e6:	4604      	mov	r4, r0
 80025e8:	b140      	cbz	r0, 80025fc <__sfmoreglue+0x28>
 80025ea:	2100      	movs	r1, #0
 80025ec:	e9c0 1600 	strd	r1, r6, [r0]
 80025f0:	300c      	adds	r0, #12
 80025f2:	60a0      	str	r0, [r4, #8]
 80025f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025f8:	f7ff fdc2 	bl	8002180 <memset>
 80025fc:	4620      	mov	r0, r4
 80025fe:	bd70      	pop	{r4, r5, r6, pc}

08002600 <__sfp_lock_acquire>:
 8002600:	4801      	ldr	r0, [pc, #4]	; (8002608 <__sfp_lock_acquire+0x8>)
 8002602:	f000 b8b3 	b.w	800276c <__retarget_lock_acquire_recursive>
 8002606:	bf00      	nop
 8002608:	200000dd 	.word	0x200000dd

0800260c <__sfp_lock_release>:
 800260c:	4801      	ldr	r0, [pc, #4]	; (8002614 <__sfp_lock_release+0x8>)
 800260e:	f000 b8ae 	b.w	800276e <__retarget_lock_release_recursive>
 8002612:	bf00      	nop
 8002614:	200000dd 	.word	0x200000dd

08002618 <__sinit_lock_acquire>:
 8002618:	4801      	ldr	r0, [pc, #4]	; (8002620 <__sinit_lock_acquire+0x8>)
 800261a:	f000 b8a7 	b.w	800276c <__retarget_lock_acquire_recursive>
 800261e:	bf00      	nop
 8002620:	200000de 	.word	0x200000de

08002624 <__sinit_lock_release>:
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <__sinit_lock_release+0x8>)
 8002626:	f000 b8a2 	b.w	800276e <__retarget_lock_release_recursive>
 800262a:	bf00      	nop
 800262c:	200000de 	.word	0x200000de

08002630 <__sinit>:
 8002630:	b510      	push	{r4, lr}
 8002632:	4604      	mov	r4, r0
 8002634:	f7ff fff0 	bl	8002618 <__sinit_lock_acquire>
 8002638:	69a3      	ldr	r3, [r4, #24]
 800263a:	b11b      	cbz	r3, 8002644 <__sinit+0x14>
 800263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002640:	f7ff bff0 	b.w	8002624 <__sinit_lock_release>
 8002644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002648:	6523      	str	r3, [r4, #80]	; 0x50
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <__sinit+0x68>)
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <__sinit+0x6c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	62a2      	str	r2, [r4, #40]	; 0x28
 8002652:	42a3      	cmp	r3, r4
 8002654:	bf04      	itt	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	61a3      	streq	r3, [r4, #24]
 800265a:	4620      	mov	r0, r4
 800265c:	f000 f820 	bl	80026a0 <__sfp>
 8002660:	6060      	str	r0, [r4, #4]
 8002662:	4620      	mov	r0, r4
 8002664:	f000 f81c 	bl	80026a0 <__sfp>
 8002668:	60a0      	str	r0, [r4, #8]
 800266a:	4620      	mov	r0, r4
 800266c:	f000 f818 	bl	80026a0 <__sfp>
 8002670:	2200      	movs	r2, #0
 8002672:	60e0      	str	r0, [r4, #12]
 8002674:	2104      	movs	r1, #4
 8002676:	6860      	ldr	r0, [r4, #4]
 8002678:	f7ff ff82 	bl	8002580 <std>
 800267c:	68a0      	ldr	r0, [r4, #8]
 800267e:	2201      	movs	r2, #1
 8002680:	2109      	movs	r1, #9
 8002682:	f7ff ff7d 	bl	8002580 <std>
 8002686:	68e0      	ldr	r0, [r4, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	2112      	movs	r1, #18
 800268c:	f7ff ff78 	bl	8002580 <std>
 8002690:	2301      	movs	r3, #1
 8002692:	61a3      	str	r3, [r4, #24]
 8002694:	e7d2      	b.n	800263c <__sinit+0xc>
 8002696:	bf00      	nop
 8002698:	08002bbc 	.word	0x08002bbc
 800269c:	080025c9 	.word	0x080025c9

080026a0 <__sfp>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	4607      	mov	r7, r0
 80026a4:	f7ff ffac 	bl	8002600 <__sfp_lock_acquire>
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <__sfp+0x84>)
 80026aa:	681e      	ldr	r6, [r3, #0]
 80026ac:	69b3      	ldr	r3, [r6, #24]
 80026ae:	b913      	cbnz	r3, 80026b6 <__sfp+0x16>
 80026b0:	4630      	mov	r0, r6
 80026b2:	f7ff ffbd 	bl	8002630 <__sinit>
 80026b6:	3648      	adds	r6, #72	; 0x48
 80026b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026bc:	3b01      	subs	r3, #1
 80026be:	d503      	bpl.n	80026c8 <__sfp+0x28>
 80026c0:	6833      	ldr	r3, [r6, #0]
 80026c2:	b30b      	cbz	r3, 8002708 <__sfp+0x68>
 80026c4:	6836      	ldr	r6, [r6, #0]
 80026c6:	e7f7      	b.n	80026b8 <__sfp+0x18>
 80026c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026cc:	b9d5      	cbnz	r5, 8002704 <__sfp+0x64>
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <__sfp+0x88>)
 80026d0:	60e3      	str	r3, [r4, #12]
 80026d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026d6:	6665      	str	r5, [r4, #100]	; 0x64
 80026d8:	f000 f847 	bl	800276a <__retarget_lock_init_recursive>
 80026dc:	f7ff ff96 	bl	800260c <__sfp_lock_release>
 80026e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026e8:	6025      	str	r5, [r4, #0]
 80026ea:	61a5      	str	r5, [r4, #24]
 80026ec:	2208      	movs	r2, #8
 80026ee:	4629      	mov	r1, r5
 80026f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026f4:	f7ff fd44 	bl	8002180 <memset>
 80026f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002700:	4620      	mov	r0, r4
 8002702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002704:	3468      	adds	r4, #104	; 0x68
 8002706:	e7d9      	b.n	80026bc <__sfp+0x1c>
 8002708:	2104      	movs	r1, #4
 800270a:	4638      	mov	r0, r7
 800270c:	f7ff ff62 	bl	80025d4 <__sfmoreglue>
 8002710:	4604      	mov	r4, r0
 8002712:	6030      	str	r0, [r6, #0]
 8002714:	2800      	cmp	r0, #0
 8002716:	d1d5      	bne.n	80026c4 <__sfp+0x24>
 8002718:	f7ff ff78 	bl	800260c <__sfp_lock_release>
 800271c:	230c      	movs	r3, #12
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	e7ee      	b.n	8002700 <__sfp+0x60>
 8002722:	bf00      	nop
 8002724:	08002bbc 	.word	0x08002bbc
 8002728:	ffff0001 	.word	0xffff0001

0800272c <_fwalk_reent>:
 800272c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002730:	4606      	mov	r6, r0
 8002732:	4688      	mov	r8, r1
 8002734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002738:	2700      	movs	r7, #0
 800273a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800273e:	f1b9 0901 	subs.w	r9, r9, #1
 8002742:	d505      	bpl.n	8002750 <_fwalk_reent+0x24>
 8002744:	6824      	ldr	r4, [r4, #0]
 8002746:	2c00      	cmp	r4, #0
 8002748:	d1f7      	bne.n	800273a <_fwalk_reent+0xe>
 800274a:	4638      	mov	r0, r7
 800274c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002750:	89ab      	ldrh	r3, [r5, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d907      	bls.n	8002766 <_fwalk_reent+0x3a>
 8002756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800275a:	3301      	adds	r3, #1
 800275c:	d003      	beq.n	8002766 <_fwalk_reent+0x3a>
 800275e:	4629      	mov	r1, r5
 8002760:	4630      	mov	r0, r6
 8002762:	47c0      	blx	r8
 8002764:	4307      	orrs	r7, r0
 8002766:	3568      	adds	r5, #104	; 0x68
 8002768:	e7e9      	b.n	800273e <_fwalk_reent+0x12>

0800276a <__retarget_lock_init_recursive>:
 800276a:	4770      	bx	lr

0800276c <__retarget_lock_acquire_recursive>:
 800276c:	4770      	bx	lr

0800276e <__retarget_lock_release_recursive>:
 800276e:	4770      	bx	lr

08002770 <__swhatbuf_r>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	460e      	mov	r6, r1
 8002774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002778:	2900      	cmp	r1, #0
 800277a:	b096      	sub	sp, #88	; 0x58
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	da08      	bge.n	8002794 <__swhatbuf_r+0x24>
 8002782:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	602a      	str	r2, [r5, #0]
 800278a:	061a      	lsls	r2, r3, #24
 800278c:	d410      	bmi.n	80027b0 <__swhatbuf_r+0x40>
 800278e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002792:	e00e      	b.n	80027b2 <__swhatbuf_r+0x42>
 8002794:	466a      	mov	r2, sp
 8002796:	f000 f9a7 	bl	8002ae8 <_fstat_r>
 800279a:	2800      	cmp	r0, #0
 800279c:	dbf1      	blt.n	8002782 <__swhatbuf_r+0x12>
 800279e:	9a01      	ldr	r2, [sp, #4]
 80027a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027a8:	425a      	negs	r2, r3
 80027aa:	415a      	adcs	r2, r3
 80027ac:	602a      	str	r2, [r5, #0]
 80027ae:	e7ee      	b.n	800278e <__swhatbuf_r+0x1e>
 80027b0:	2340      	movs	r3, #64	; 0x40
 80027b2:	2000      	movs	r0, #0
 80027b4:	6023      	str	r3, [r4, #0]
 80027b6:	b016      	add	sp, #88	; 0x58
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080027bc <__smakebuf_r>:
 80027bc:	898b      	ldrh	r3, [r1, #12]
 80027be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027c0:	079d      	lsls	r5, r3, #30
 80027c2:	4606      	mov	r6, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	d507      	bpl.n	80027d8 <__smakebuf_r+0x1c>
 80027c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027cc:	6023      	str	r3, [r4, #0]
 80027ce:	6123      	str	r3, [r4, #16]
 80027d0:	2301      	movs	r3, #1
 80027d2:	6163      	str	r3, [r4, #20]
 80027d4:	b002      	add	sp, #8
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	ab01      	add	r3, sp, #4
 80027da:	466a      	mov	r2, sp
 80027dc:	f7ff ffc8 	bl	8002770 <__swhatbuf_r>
 80027e0:	9900      	ldr	r1, [sp, #0]
 80027e2:	4605      	mov	r5, r0
 80027e4:	4630      	mov	r0, r6
 80027e6:	f000 f895 	bl	8002914 <_malloc_r>
 80027ea:	b948      	cbnz	r0, 8002800 <__smakebuf_r+0x44>
 80027ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027f0:	059a      	lsls	r2, r3, #22
 80027f2:	d4ef      	bmi.n	80027d4 <__smakebuf_r+0x18>
 80027f4:	f023 0303 	bic.w	r3, r3, #3
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	81a3      	strh	r3, [r4, #12]
 80027fe:	e7e3      	b.n	80027c8 <__smakebuf_r+0xc>
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <__smakebuf_r+0x7c>)
 8002802:	62b3      	str	r3, [r6, #40]	; 0x28
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	6020      	str	r0, [r4, #0]
 8002808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280c:	81a3      	strh	r3, [r4, #12]
 800280e:	9b00      	ldr	r3, [sp, #0]
 8002810:	6163      	str	r3, [r4, #20]
 8002812:	9b01      	ldr	r3, [sp, #4]
 8002814:	6120      	str	r0, [r4, #16]
 8002816:	b15b      	cbz	r3, 8002830 <__smakebuf_r+0x74>
 8002818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800281c:	4630      	mov	r0, r6
 800281e:	f000 f975 	bl	8002b0c <_isatty_r>
 8002822:	b128      	cbz	r0, 8002830 <__smakebuf_r+0x74>
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	f023 0303 	bic.w	r3, r3, #3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	81a3      	strh	r3, [r4, #12]
 8002830:	89a0      	ldrh	r0, [r4, #12]
 8002832:	4305      	orrs	r5, r0
 8002834:	81a5      	strh	r5, [r4, #12]
 8002836:	e7cd      	b.n	80027d4 <__smakebuf_r+0x18>
 8002838:	080025c9 	.word	0x080025c9

0800283c <_free_r>:
 800283c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800283e:	2900      	cmp	r1, #0
 8002840:	d044      	beq.n	80028cc <_free_r+0x90>
 8002842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002846:	9001      	str	r0, [sp, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f1a1 0404 	sub.w	r4, r1, #4
 800284e:	bfb8      	it	lt
 8002850:	18e4      	addlt	r4, r4, r3
 8002852:	f000 f97d 	bl	8002b50 <__malloc_lock>
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <_free_r+0x94>)
 8002858:	9801      	ldr	r0, [sp, #4]
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	b933      	cbnz	r3, 800286c <_free_r+0x30>
 800285e:	6063      	str	r3, [r4, #4]
 8002860:	6014      	str	r4, [r2, #0]
 8002862:	b003      	add	sp, #12
 8002864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002868:	f000 b978 	b.w	8002b5c <__malloc_unlock>
 800286c:	42a3      	cmp	r3, r4
 800286e:	d908      	bls.n	8002882 <_free_r+0x46>
 8002870:	6825      	ldr	r5, [r4, #0]
 8002872:	1961      	adds	r1, r4, r5
 8002874:	428b      	cmp	r3, r1
 8002876:	bf01      	itttt	eq
 8002878:	6819      	ldreq	r1, [r3, #0]
 800287a:	685b      	ldreq	r3, [r3, #4]
 800287c:	1949      	addeq	r1, r1, r5
 800287e:	6021      	streq	r1, [r4, #0]
 8002880:	e7ed      	b.n	800285e <_free_r+0x22>
 8002882:	461a      	mov	r2, r3
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b10b      	cbz	r3, 800288c <_free_r+0x50>
 8002888:	42a3      	cmp	r3, r4
 800288a:	d9fa      	bls.n	8002882 <_free_r+0x46>
 800288c:	6811      	ldr	r1, [r2, #0]
 800288e:	1855      	adds	r5, r2, r1
 8002890:	42a5      	cmp	r5, r4
 8002892:	d10b      	bne.n	80028ac <_free_r+0x70>
 8002894:	6824      	ldr	r4, [r4, #0]
 8002896:	4421      	add	r1, r4
 8002898:	1854      	adds	r4, r2, r1
 800289a:	42a3      	cmp	r3, r4
 800289c:	6011      	str	r1, [r2, #0]
 800289e:	d1e0      	bne.n	8002862 <_free_r+0x26>
 80028a0:	681c      	ldr	r4, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	6053      	str	r3, [r2, #4]
 80028a6:	4421      	add	r1, r4
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	e7da      	b.n	8002862 <_free_r+0x26>
 80028ac:	d902      	bls.n	80028b4 <_free_r+0x78>
 80028ae:	230c      	movs	r3, #12
 80028b0:	6003      	str	r3, [r0, #0]
 80028b2:	e7d6      	b.n	8002862 <_free_r+0x26>
 80028b4:	6825      	ldr	r5, [r4, #0]
 80028b6:	1961      	adds	r1, r4, r5
 80028b8:	428b      	cmp	r3, r1
 80028ba:	bf04      	itt	eq
 80028bc:	6819      	ldreq	r1, [r3, #0]
 80028be:	685b      	ldreq	r3, [r3, #4]
 80028c0:	6063      	str	r3, [r4, #4]
 80028c2:	bf04      	itt	eq
 80028c4:	1949      	addeq	r1, r1, r5
 80028c6:	6021      	streq	r1, [r4, #0]
 80028c8:	6054      	str	r4, [r2, #4]
 80028ca:	e7ca      	b.n	8002862 <_free_r+0x26>
 80028cc:	b003      	add	sp, #12
 80028ce:	bd30      	pop	{r4, r5, pc}
 80028d0:	200000e0 	.word	0x200000e0

080028d4 <sbrk_aligned>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4e0e      	ldr	r6, [pc, #56]	; (8002910 <sbrk_aligned+0x3c>)
 80028d8:	460c      	mov	r4, r1
 80028da:	6831      	ldr	r1, [r6, #0]
 80028dc:	4605      	mov	r5, r0
 80028de:	b911      	cbnz	r1, 80028e6 <sbrk_aligned+0x12>
 80028e0:	f000 f88c 	bl	80029fc <_sbrk_r>
 80028e4:	6030      	str	r0, [r6, #0]
 80028e6:	4621      	mov	r1, r4
 80028e8:	4628      	mov	r0, r5
 80028ea:	f000 f887 	bl	80029fc <_sbrk_r>
 80028ee:	1c43      	adds	r3, r0, #1
 80028f0:	d00a      	beq.n	8002908 <sbrk_aligned+0x34>
 80028f2:	1cc4      	adds	r4, r0, #3
 80028f4:	f024 0403 	bic.w	r4, r4, #3
 80028f8:	42a0      	cmp	r0, r4
 80028fa:	d007      	beq.n	800290c <sbrk_aligned+0x38>
 80028fc:	1a21      	subs	r1, r4, r0
 80028fe:	4628      	mov	r0, r5
 8002900:	f000 f87c 	bl	80029fc <_sbrk_r>
 8002904:	3001      	adds	r0, #1
 8002906:	d101      	bne.n	800290c <sbrk_aligned+0x38>
 8002908:	f04f 34ff 	mov.w	r4, #4294967295
 800290c:	4620      	mov	r0, r4
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	200000e4 	.word	0x200000e4

08002914 <_malloc_r>:
 8002914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002918:	1ccd      	adds	r5, r1, #3
 800291a:	f025 0503 	bic.w	r5, r5, #3
 800291e:	3508      	adds	r5, #8
 8002920:	2d0c      	cmp	r5, #12
 8002922:	bf38      	it	cc
 8002924:	250c      	movcc	r5, #12
 8002926:	2d00      	cmp	r5, #0
 8002928:	4607      	mov	r7, r0
 800292a:	db01      	blt.n	8002930 <_malloc_r+0x1c>
 800292c:	42a9      	cmp	r1, r5
 800292e:	d905      	bls.n	800293c <_malloc_r+0x28>
 8002930:	230c      	movs	r3, #12
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	2600      	movs	r6, #0
 8002936:	4630      	mov	r0, r6
 8002938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800293c:	4e2e      	ldr	r6, [pc, #184]	; (80029f8 <_malloc_r+0xe4>)
 800293e:	f000 f907 	bl	8002b50 <__malloc_lock>
 8002942:	6833      	ldr	r3, [r6, #0]
 8002944:	461c      	mov	r4, r3
 8002946:	bb34      	cbnz	r4, 8002996 <_malloc_r+0x82>
 8002948:	4629      	mov	r1, r5
 800294a:	4638      	mov	r0, r7
 800294c:	f7ff ffc2 	bl	80028d4 <sbrk_aligned>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	4604      	mov	r4, r0
 8002954:	d14d      	bne.n	80029f2 <_malloc_r+0xde>
 8002956:	6834      	ldr	r4, [r6, #0]
 8002958:	4626      	mov	r6, r4
 800295a:	2e00      	cmp	r6, #0
 800295c:	d140      	bne.n	80029e0 <_malloc_r+0xcc>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	4631      	mov	r1, r6
 8002962:	4638      	mov	r0, r7
 8002964:	eb04 0803 	add.w	r8, r4, r3
 8002968:	f000 f848 	bl	80029fc <_sbrk_r>
 800296c:	4580      	cmp	r8, r0
 800296e:	d13a      	bne.n	80029e6 <_malloc_r+0xd2>
 8002970:	6821      	ldr	r1, [r4, #0]
 8002972:	3503      	adds	r5, #3
 8002974:	1a6d      	subs	r5, r5, r1
 8002976:	f025 0503 	bic.w	r5, r5, #3
 800297a:	3508      	adds	r5, #8
 800297c:	2d0c      	cmp	r5, #12
 800297e:	bf38      	it	cc
 8002980:	250c      	movcc	r5, #12
 8002982:	4629      	mov	r1, r5
 8002984:	4638      	mov	r0, r7
 8002986:	f7ff ffa5 	bl	80028d4 <sbrk_aligned>
 800298a:	3001      	adds	r0, #1
 800298c:	d02b      	beq.n	80029e6 <_malloc_r+0xd2>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	442b      	add	r3, r5
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	e00e      	b.n	80029b4 <_malloc_r+0xa0>
 8002996:	6822      	ldr	r2, [r4, #0]
 8002998:	1b52      	subs	r2, r2, r5
 800299a:	d41e      	bmi.n	80029da <_malloc_r+0xc6>
 800299c:	2a0b      	cmp	r2, #11
 800299e:	d916      	bls.n	80029ce <_malloc_r+0xba>
 80029a0:	1961      	adds	r1, r4, r5
 80029a2:	42a3      	cmp	r3, r4
 80029a4:	6025      	str	r5, [r4, #0]
 80029a6:	bf18      	it	ne
 80029a8:	6059      	strne	r1, [r3, #4]
 80029aa:	6863      	ldr	r3, [r4, #4]
 80029ac:	bf08      	it	eq
 80029ae:	6031      	streq	r1, [r6, #0]
 80029b0:	5162      	str	r2, [r4, r5]
 80029b2:	604b      	str	r3, [r1, #4]
 80029b4:	4638      	mov	r0, r7
 80029b6:	f104 060b 	add.w	r6, r4, #11
 80029ba:	f000 f8cf 	bl	8002b5c <__malloc_unlock>
 80029be:	f026 0607 	bic.w	r6, r6, #7
 80029c2:	1d23      	adds	r3, r4, #4
 80029c4:	1af2      	subs	r2, r6, r3
 80029c6:	d0b6      	beq.n	8002936 <_malloc_r+0x22>
 80029c8:	1b9b      	subs	r3, r3, r6
 80029ca:	50a3      	str	r3, [r4, r2]
 80029cc:	e7b3      	b.n	8002936 <_malloc_r+0x22>
 80029ce:	6862      	ldr	r2, [r4, #4]
 80029d0:	42a3      	cmp	r3, r4
 80029d2:	bf0c      	ite	eq
 80029d4:	6032      	streq	r2, [r6, #0]
 80029d6:	605a      	strne	r2, [r3, #4]
 80029d8:	e7ec      	b.n	80029b4 <_malloc_r+0xa0>
 80029da:	4623      	mov	r3, r4
 80029dc:	6864      	ldr	r4, [r4, #4]
 80029de:	e7b2      	b.n	8002946 <_malloc_r+0x32>
 80029e0:	4634      	mov	r4, r6
 80029e2:	6876      	ldr	r6, [r6, #4]
 80029e4:	e7b9      	b.n	800295a <_malloc_r+0x46>
 80029e6:	230c      	movs	r3, #12
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4638      	mov	r0, r7
 80029ec:	f000 f8b6 	bl	8002b5c <__malloc_unlock>
 80029f0:	e7a1      	b.n	8002936 <_malloc_r+0x22>
 80029f2:	6025      	str	r5, [r4, #0]
 80029f4:	e7de      	b.n	80029b4 <_malloc_r+0xa0>
 80029f6:	bf00      	nop
 80029f8:	200000e0 	.word	0x200000e0

080029fc <_sbrk_r>:
 80029fc:	b538      	push	{r3, r4, r5, lr}
 80029fe:	4d06      	ldr	r5, [pc, #24]	; (8002a18 <_sbrk_r+0x1c>)
 8002a00:	2300      	movs	r3, #0
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	602b      	str	r3, [r5, #0]
 8002a08:	f7fd ffd4 	bl	80009b4 <_sbrk>
 8002a0c:	1c43      	adds	r3, r0, #1
 8002a0e:	d102      	bne.n	8002a16 <_sbrk_r+0x1a>
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	b103      	cbz	r3, 8002a16 <_sbrk_r+0x1a>
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
 8002a18:	200000e8 	.word	0x200000e8

08002a1c <__sread>:
 8002a1c:	b510      	push	{r4, lr}
 8002a1e:	460c      	mov	r4, r1
 8002a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a24:	f000 f8a0 	bl	8002b68 <_read_r>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	bfab      	itete	ge
 8002a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002a30:	181b      	addge	r3, r3, r0
 8002a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a36:	bfac      	ite	ge
 8002a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a3a:	81a3      	strhlt	r3, [r4, #12]
 8002a3c:	bd10      	pop	{r4, pc}

08002a3e <__swrite>:
 8002a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a42:	461f      	mov	r7, r3
 8002a44:	898b      	ldrh	r3, [r1, #12]
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	4605      	mov	r5, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	d505      	bpl.n	8002a5c <__swrite+0x1e>
 8002a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a54:	2302      	movs	r3, #2
 8002a56:	2200      	movs	r2, #0
 8002a58:	f000 f868 	bl	8002b2c <_lseek_r>
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	4632      	mov	r2, r6
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a72:	f000 b817 	b.w	8002aa4 <_write_r>

08002a76 <__sseek>:
 8002a76:	b510      	push	{r4, lr}
 8002a78:	460c      	mov	r4, r1
 8002a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a7e:	f000 f855 	bl	8002b2c <_lseek_r>
 8002a82:	1c43      	adds	r3, r0, #1
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	bf15      	itete	ne
 8002a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a92:	81a3      	strheq	r3, [r4, #12]
 8002a94:	bf18      	it	ne
 8002a96:	81a3      	strhne	r3, [r4, #12]
 8002a98:	bd10      	pop	{r4, pc}

08002a9a <__sclose>:
 8002a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a9e:	f000 b813 	b.w	8002ac8 <_close_r>
	...

08002aa4 <_write_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4d07      	ldr	r5, [pc, #28]	; (8002ac4 <_write_r+0x20>)
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	4608      	mov	r0, r1
 8002aac:	4611      	mov	r1, r2
 8002aae:	2200      	movs	r2, #0
 8002ab0:	602a      	str	r2, [r5, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f7fd ff2d 	bl	8000912 <_write>
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d102      	bne.n	8002ac2 <_write_r+0x1e>
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	b103      	cbz	r3, 8002ac2 <_write_r+0x1e>
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	bd38      	pop	{r3, r4, r5, pc}
 8002ac4:	200000e8 	.word	0x200000e8

08002ac8 <_close_r>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4d06      	ldr	r5, [pc, #24]	; (8002ae4 <_close_r+0x1c>)
 8002acc:	2300      	movs	r3, #0
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	602b      	str	r3, [r5, #0]
 8002ad4:	f7fd ff39 	bl	800094a <_close>
 8002ad8:	1c43      	adds	r3, r0, #1
 8002ada:	d102      	bne.n	8002ae2 <_close_r+0x1a>
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	b103      	cbz	r3, 8002ae2 <_close_r+0x1a>
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	200000e8 	.word	0x200000e8

08002ae8 <_fstat_r>:
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4d07      	ldr	r5, [pc, #28]	; (8002b08 <_fstat_r+0x20>)
 8002aec:	2300      	movs	r3, #0
 8002aee:	4604      	mov	r4, r0
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	602b      	str	r3, [r5, #0]
 8002af6:	f7fd ff34 	bl	8000962 <_fstat>
 8002afa:	1c43      	adds	r3, r0, #1
 8002afc:	d102      	bne.n	8002b04 <_fstat_r+0x1c>
 8002afe:	682b      	ldr	r3, [r5, #0]
 8002b00:	b103      	cbz	r3, 8002b04 <_fstat_r+0x1c>
 8002b02:	6023      	str	r3, [r4, #0]
 8002b04:	bd38      	pop	{r3, r4, r5, pc}
 8002b06:	bf00      	nop
 8002b08:	200000e8 	.word	0x200000e8

08002b0c <_isatty_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4d06      	ldr	r5, [pc, #24]	; (8002b28 <_isatty_r+0x1c>)
 8002b10:	2300      	movs	r3, #0
 8002b12:	4604      	mov	r4, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	602b      	str	r3, [r5, #0]
 8002b18:	f7fd ff33 	bl	8000982 <_isatty>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_isatty_r+0x1a>
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_isatty_r+0x1a>
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	200000e8 	.word	0x200000e8

08002b2c <_lseek_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4d07      	ldr	r5, [pc, #28]	; (8002b4c <_lseek_r+0x20>)
 8002b30:	4604      	mov	r4, r0
 8002b32:	4608      	mov	r0, r1
 8002b34:	4611      	mov	r1, r2
 8002b36:	2200      	movs	r2, #0
 8002b38:	602a      	str	r2, [r5, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7fd ff2c 	bl	8000998 <_lseek>
 8002b40:	1c43      	adds	r3, r0, #1
 8002b42:	d102      	bne.n	8002b4a <_lseek_r+0x1e>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	b103      	cbz	r3, 8002b4a <_lseek_r+0x1e>
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	200000e8 	.word	0x200000e8

08002b50 <__malloc_lock>:
 8002b50:	4801      	ldr	r0, [pc, #4]	; (8002b58 <__malloc_lock+0x8>)
 8002b52:	f7ff be0b 	b.w	800276c <__retarget_lock_acquire_recursive>
 8002b56:	bf00      	nop
 8002b58:	200000dc 	.word	0x200000dc

08002b5c <__malloc_unlock>:
 8002b5c:	4801      	ldr	r0, [pc, #4]	; (8002b64 <__malloc_unlock+0x8>)
 8002b5e:	f7ff be06 	b.w	800276e <__retarget_lock_release_recursive>
 8002b62:	bf00      	nop
 8002b64:	200000dc 	.word	0x200000dc

08002b68 <_read_r>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	4d07      	ldr	r5, [pc, #28]	; (8002b88 <_read_r+0x20>)
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	4608      	mov	r0, r1
 8002b70:	4611      	mov	r1, r2
 8002b72:	2200      	movs	r2, #0
 8002b74:	602a      	str	r2, [r5, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7fd feae 	bl	80008d8 <_read>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_read_r+0x1e>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_read_r+0x1e>
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	200000e8 	.word	0x200000e8

08002b8c <_init>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr

08002b98 <_fini>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	bf00      	nop
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr
